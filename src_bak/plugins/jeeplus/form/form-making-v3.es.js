var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import require$$0, { h, Fragment, getCurrentInstance, inject, onMounted, onUnmounted, isRef, ref, computed, watch, createVNode, Text, resolveComponent, TransitionGroup, defineComponent, nextTick, openBlock, createElementBlock, normalizeStyle, resolveDirective, createBlock, createSlots, withCtx, renderSlot, createCommentVNode, withDirectives, createTextVNode, toDisplayString as toDisplayString$1, createElementVNode, defineAsyncComponent, normalizeClass, renderList, vShow, mergeProps, withModifiers, resolveDynamicComponent } from "vue";
import { ElMessageBox } from "element-plus";
var normalize = "";
/*!
  * @intlify/shared v9.1.10
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const hasSymbol = typeof Symbol === "function" && typeof Symbol.toStringTag === "symbol";
const makeSymbol = (name) => hasSymbol ? Symbol(name) : name;
const generateFormatCacheKey = (locale2, key, source2) => friendlyJSONstringify({ l: locale2, k: key, s: source2 });
const friendlyJSONstringify = (json) => JSON.stringify(json).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/\u0027/g, "\\u0027");
const isNumber$3 = (val) => typeof val === "number" && isFinite(val);
const isDate$2 = (val) => toTypeString(val) === "[object Date]";
const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
const isEmptyObject = (val) => isPlainObject$2(val) && Object.keys(val).length === 0;
function warn$1(msg, err) {
  if (typeof console !== "undefined") {
    console.warn(`[intlify] ` + msg);
    if (err) {
      console.warn(err.stack);
    }
  }
}
const assign$1 = Object.assign;
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
function escapeHtml(rawText) {
  return rawText.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
}
const hasOwnProperty$2 = Object.prototype.hasOwnProperty;
function hasOwn$1(obj, key) {
  return hasOwnProperty$2.call(obj, key);
}
const isArray$2 = Array.isArray;
const isFunction$3 = (val) => typeof val === "function";
const isString$3 = (val) => typeof val === "string";
const isBoolean = (val) => typeof val === "boolean";
const isObject$4 = (val) => val !== null && typeof val === "object";
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const isPlainObject$2 = (val) => toTypeString(val) === "[object Object]";
const toDisplayString = (val) => {
  return val == null ? "" : isArray$2(val) || isPlainObject$2(val) && val.toString === objectToString ? JSON.stringify(val, null, 2) : String(val);
};
/*!
  * @intlify/message-resolver v9.1.10
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty$1.call(obj, key);
}
const isObject$3 = (val) => val !== null && typeof val === "object";
const pathStateMachine = [];
pathStateMachine[0] = {
  ["w"]: [0],
  ["i"]: [3, 0],
  ["["]: [4],
  ["o"]: [7]
};
pathStateMachine[1] = {
  ["w"]: [1],
  ["."]: [2],
  ["["]: [4],
  ["o"]: [7]
};
pathStateMachine[2] = {
  ["w"]: [2],
  ["i"]: [3, 0],
  ["0"]: [3, 0]
};
pathStateMachine[3] = {
  ["i"]: [3, 0],
  ["0"]: [3, 0],
  ["w"]: [1, 1],
  ["."]: [2, 1],
  ["["]: [4, 1],
  ["o"]: [7, 1]
};
pathStateMachine[4] = {
  ["'"]: [5, 0],
  ['"']: [6, 0],
  ["["]: [
    4,
    2
  ],
  ["]"]: [1, 3],
  ["o"]: 8,
  ["l"]: [4, 0]
};
pathStateMachine[5] = {
  ["'"]: [4, 0],
  ["o"]: 8,
  ["l"]: [5, 0]
};
pathStateMachine[6] = {
  ['"']: [4, 0],
  ["o"]: 8,
  ["l"]: [6, 0]
};
const literalValueRE = /^\s?(?:true|false|-?[\d.]+|'[^']*'|"[^"]*")\s?$/;
function isLiteral(exp) {
  return literalValueRE.test(exp);
}
function stripQuotes(str) {
  const a = str.charCodeAt(0);
  const b = str.charCodeAt(str.length - 1);
  return a === b && (a === 34 || a === 39) ? str.slice(1, -1) : str;
}
function getPathCharType(ch) {
  if (ch === void 0 || ch === null) {
    return "o";
  }
  const code = ch.charCodeAt(0);
  switch (code) {
    case 91:
    case 93:
    case 46:
    case 34:
    case 39:
      return ch;
    case 95:
    case 36:
    case 45:
      return "i";
    case 9:
    case 10:
    case 13:
    case 160:
    case 65279:
    case 8232:
    case 8233:
      return "w";
  }
  return "i";
}
function formatSubPath(path) {
  const trimmed = path.trim();
  if (path.charAt(0) === "0" && isNaN(parseInt(path))) {
    return false;
  }
  return isLiteral(trimmed) ? stripQuotes(trimmed) : "*" + trimmed;
}
function parse(path) {
  const keys2 = [];
  let index2 = -1;
  let mode = 0;
  let subPathDepth = 0;
  let c;
  let key;
  let newChar;
  let type;
  let transition;
  let action;
  let typeMap;
  const actions = [];
  actions[0] = () => {
    if (key === void 0) {
      key = newChar;
    } else {
      key += newChar;
    }
  };
  actions[1] = () => {
    if (key !== void 0) {
      keys2.push(key);
      key = void 0;
    }
  };
  actions[2] = () => {
    actions[0]();
    subPathDepth++;
  };
  actions[3] = () => {
    if (subPathDepth > 0) {
      subPathDepth--;
      mode = 4;
      actions[0]();
    } else {
      subPathDepth = 0;
      if (key === void 0) {
        return false;
      }
      key = formatSubPath(key);
      if (key === false) {
        return false;
      } else {
        actions[1]();
      }
    }
  };
  function maybeUnescapeQuote() {
    const nextChar = path[index2 + 1];
    if (mode === 5 && nextChar === "'" || mode === 6 && nextChar === '"') {
      index2++;
      newChar = "\\" + nextChar;
      actions[0]();
      return true;
    }
  }
  while (mode !== null) {
    index2++;
    c = path[index2];
    if (c === "\\" && maybeUnescapeQuote()) {
      continue;
    }
    type = getPathCharType(c);
    typeMap = pathStateMachine[mode];
    transition = typeMap[type] || typeMap["l"] || 8;
    if (transition === 8) {
      return;
    }
    mode = transition[0];
    if (transition[1] !== void 0) {
      action = actions[transition[1]];
      if (action) {
        newChar = c;
        if (action() === false) {
          return;
        }
      }
    }
    if (mode === 7) {
      return keys2;
    }
  }
}
const cache = /* @__PURE__ */ new Map();
function resolveValue(obj, path) {
  if (!isObject$3(obj)) {
    return null;
  }
  let hit = cache.get(path);
  if (!hit) {
    hit = parse(path);
    if (hit) {
      cache.set(path, hit);
    }
  }
  if (!hit) {
    return null;
  }
  const len = hit.length;
  let last = obj;
  let i2 = 0;
  while (i2 < len) {
    const val = last[hit[i2]];
    if (val === void 0) {
      return null;
    }
    last = val;
    i2++;
  }
  return last;
}
function handleFlatJson(obj) {
  if (!isObject$3(obj)) {
    return obj;
  }
  for (const key in obj) {
    if (!hasOwn(obj, key)) {
      continue;
    }
    if (!key.includes(".")) {
      if (isObject$3(obj[key])) {
        handleFlatJson(obj[key]);
      }
    } else {
      const subKeys = key.split(".");
      const lastIndex = subKeys.length - 1;
      let currentObj = obj;
      for (let i2 = 0; i2 < lastIndex; i2++) {
        if (!(subKeys[i2] in currentObj)) {
          currentObj[subKeys[i2]] = {};
        }
        currentObj = currentObj[subKeys[i2]];
      }
      currentObj[subKeys[lastIndex]] = obj[key];
      delete obj[key];
      if (isObject$3(currentObj[subKeys[lastIndex]])) {
        handleFlatJson(currentObj[subKeys[lastIndex]]);
      }
    }
  }
  return obj;
}
/*!
  * @intlify/runtime v9.1.10
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const DEFAULT_MODIFIER = (str) => str;
const DEFAULT_MESSAGE = (ctx) => "";
const DEFAULT_MESSAGE_DATA_TYPE = "text";
const DEFAULT_NORMALIZE = (values) => values.length === 0 ? "" : values.join("");
const DEFAULT_INTERPOLATE = toDisplayString;
function pluralDefault(choice, choicesLength) {
  choice = Math.abs(choice);
  if (choicesLength === 2) {
    return choice ? choice > 1 ? 1 : 0 : 1;
  }
  return choice ? Math.min(choice, 2) : 0;
}
function getPluralIndex(options) {
  const index2 = isNumber$3(options.pluralIndex) ? options.pluralIndex : -1;
  return options.named && (isNumber$3(options.named.count) || isNumber$3(options.named.n)) ? isNumber$3(options.named.count) ? options.named.count : isNumber$3(options.named.n) ? options.named.n : index2 : index2;
}
function normalizeNamed(pluralIndex, props2) {
  if (!props2.count) {
    props2.count = pluralIndex;
  }
  if (!props2.n) {
    props2.n = pluralIndex;
  }
}
function createMessageContext(options = {}) {
  const locale2 = options.locale;
  const pluralIndex = getPluralIndex(options);
  const pluralRule = isObject$4(options.pluralRules) && isString$3(locale2) && isFunction$3(options.pluralRules[locale2]) ? options.pluralRules[locale2] : pluralDefault;
  const orgPluralRule = isObject$4(options.pluralRules) && isString$3(locale2) && isFunction$3(options.pluralRules[locale2]) ? pluralDefault : void 0;
  const plural = (messages) => messages[pluralRule(pluralIndex, messages.length, orgPluralRule)];
  const _list = options.list || [];
  const list = (index2) => _list[index2];
  const _named = options.named || {};
  isNumber$3(options.pluralIndex) && normalizeNamed(pluralIndex, _named);
  const named = (key) => _named[key];
  function message(key) {
    const msg = isFunction$3(options.messages) ? options.messages(key) : isObject$4(options.messages) ? options.messages[key] : false;
    return !msg ? options.parent ? options.parent.message(key) : DEFAULT_MESSAGE : msg;
  }
  const _modifier = (name) => options.modifiers ? options.modifiers[name] : DEFAULT_MODIFIER;
  const normalize2 = isPlainObject$2(options.processor) && isFunction$3(options.processor.normalize) ? options.processor.normalize : DEFAULT_NORMALIZE;
  const interpolate = isPlainObject$2(options.processor) && isFunction$3(options.processor.interpolate) ? options.processor.interpolate : DEFAULT_INTERPOLATE;
  const type = isPlainObject$2(options.processor) && isString$3(options.processor.type) ? options.processor.type : DEFAULT_MESSAGE_DATA_TYPE;
  const ctx = {
    ["list"]: list,
    ["named"]: named,
    ["plural"]: plural,
    ["linked"]: (key, modifier) => {
      const msg = message(key)(ctx);
      return isString$3(modifier) ? _modifier(modifier)(msg) : msg;
    },
    ["message"]: message,
    ["type"]: type,
    ["interpolate"]: interpolate,
    ["normalize"]: normalize2
  };
  return ctx;
}
/*!
  * @intlify/message-compiler v9.1.10
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
function createCompileError(code, loc, options = {}) {
  const { domain, messages, args } = options;
  const msg = code;
  const error = new SyntaxError(String(msg));
  error.code = code;
  if (loc) {
    error.location = loc;
  }
  error.domain = domain;
  return error;
}
function defaultOnError(error) {
  throw error;
}
function createPosition(line, column, offset2) {
  return { line, column, offset: offset2 };
}
function createLocation(start, end, source2) {
  const loc = { start, end };
  if (source2 != null) {
    loc.source = source2;
  }
  return loc;
}
const CHAR_SP = " ";
const CHAR_CR = "\r";
const CHAR_LF = "\n";
const CHAR_LS = String.fromCharCode(8232);
const CHAR_PS = String.fromCharCode(8233);
function createScanner(str) {
  const _buf = str;
  let _index = 0;
  let _line = 1;
  let _column = 1;
  let _peekOffset = 0;
  const isCRLF = (index3) => _buf[index3] === CHAR_CR && _buf[index3 + 1] === CHAR_LF;
  const isLF = (index3) => _buf[index3] === CHAR_LF;
  const isPS = (index3) => _buf[index3] === CHAR_PS;
  const isLS = (index3) => _buf[index3] === CHAR_LS;
  const isLineEnd = (index3) => isCRLF(index3) || isLF(index3) || isPS(index3) || isLS(index3);
  const index2 = () => _index;
  const line = () => _line;
  const column = () => _column;
  const peekOffset = () => _peekOffset;
  const charAt = (offset2) => isCRLF(offset2) || isPS(offset2) || isLS(offset2) ? CHAR_LF : _buf[offset2];
  const currentChar = () => charAt(_index);
  const currentPeek = () => charAt(_index + _peekOffset);
  function next2() {
    _peekOffset = 0;
    if (isLineEnd(_index)) {
      _line++;
      _column = 0;
    }
    if (isCRLF(_index)) {
      _index++;
    }
    _index++;
    _column++;
    return _buf[_index];
  }
  function peek() {
    if (isCRLF(_index + _peekOffset)) {
      _peekOffset++;
    }
    _peekOffset++;
    return _buf[_index + _peekOffset];
  }
  function reset2() {
    _index = 0;
    _line = 1;
    _column = 1;
    _peekOffset = 0;
  }
  function resetPeek(offset2 = 0) {
    _peekOffset = offset2;
  }
  function skipToPeek() {
    const target = _index + _peekOffset;
    while (target !== _index) {
      next2();
    }
    _peekOffset = 0;
  }
  return {
    index: index2,
    line,
    column,
    peekOffset,
    charAt,
    currentChar,
    currentPeek,
    next: next2,
    peek,
    reset: reset2,
    resetPeek,
    skipToPeek
  };
}
const EOF = void 0;
const LITERAL_DELIMITER = "'";
const ERROR_DOMAIN$1 = "tokenizer";
function createTokenizer(source2, options = {}) {
  const location = options.location !== false;
  const _scnr = createScanner(source2);
  const currentOffset = () => _scnr.index();
  const currentPosition = () => createPosition(_scnr.line(), _scnr.column(), _scnr.index());
  const _initLoc = currentPosition();
  const _initOffset = currentOffset();
  const _context = {
    currentType: 14,
    offset: _initOffset,
    startLoc: _initLoc,
    endLoc: _initLoc,
    lastType: 14,
    lastOffset: _initOffset,
    lastStartLoc: _initLoc,
    lastEndLoc: _initLoc,
    braceNest: 0,
    inLinked: false,
    text: ""
  };
  const context = () => _context;
  const { onError } = options;
  function emitError(code, pos, offset2, ...args) {
    const ctx = context();
    pos.column += offset2;
    pos.offset += offset2;
    if (onError) {
      const loc = createLocation(ctx.startLoc, pos);
      const err = createCompileError(code, loc, {
        domain: ERROR_DOMAIN$1,
        args
      });
      onError(err);
    }
  }
  function getToken(context2, type, value) {
    context2.endLoc = currentPosition();
    context2.currentType = type;
    const token2 = { type };
    if (location) {
      token2.loc = createLocation(context2.startLoc, context2.endLoc);
    }
    if (value != null) {
      token2.value = value;
    }
    return token2;
  }
  const getEndToken = (context2) => getToken(context2, 14);
  function eat(scnr, ch) {
    if (scnr.currentChar() === ch) {
      scnr.next();
      return ch;
    } else {
      emitError(0, currentPosition(), 0, ch);
      return "";
    }
  }
  function peekSpaces(scnr) {
    let buf = "";
    while (scnr.currentPeek() === CHAR_SP || scnr.currentPeek() === CHAR_LF) {
      buf += scnr.currentPeek();
      scnr.peek();
    }
    return buf;
  }
  function skipSpaces(scnr) {
    const buf = peekSpaces(scnr);
    scnr.skipToPeek();
    return buf;
  }
  function isIdentifierStart(ch) {
    if (ch === EOF) {
      return false;
    }
    const cc = ch.charCodeAt(0);
    return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc === 95;
  }
  function isNumberStart(ch) {
    if (ch === EOF) {
      return false;
    }
    const cc = ch.charCodeAt(0);
    return cc >= 48 && cc <= 57;
  }
  function isNamedIdentifierStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 2) {
      return false;
    }
    peekSpaces(scnr);
    const ret = isIdentifierStart(scnr.currentPeek());
    scnr.resetPeek();
    return ret;
  }
  function isListIdentifierStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 2) {
      return false;
    }
    peekSpaces(scnr);
    const ch = scnr.currentPeek() === "-" ? scnr.peek() : scnr.currentPeek();
    const ret = isNumberStart(ch);
    scnr.resetPeek();
    return ret;
  }
  function isLiteralStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 2) {
      return false;
    }
    peekSpaces(scnr);
    const ret = scnr.currentPeek() === LITERAL_DELIMITER;
    scnr.resetPeek();
    return ret;
  }
  function isLinkedDotStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 8) {
      return false;
    }
    peekSpaces(scnr);
    const ret = scnr.currentPeek() === ".";
    scnr.resetPeek();
    return ret;
  }
  function isLinkedModifierStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 9) {
      return false;
    }
    peekSpaces(scnr);
    const ret = isIdentifierStart(scnr.currentPeek());
    scnr.resetPeek();
    return ret;
  }
  function isLinkedDelimiterStart(scnr, context2) {
    const { currentType } = context2;
    if (!(currentType === 8 || currentType === 12)) {
      return false;
    }
    peekSpaces(scnr);
    const ret = scnr.currentPeek() === ":";
    scnr.resetPeek();
    return ret;
  }
  function isLinkedReferStart(scnr, context2) {
    const { currentType } = context2;
    if (currentType !== 10) {
      return false;
    }
    const fn = () => {
      const ch = scnr.currentPeek();
      if (ch === "{") {
        return isIdentifierStart(scnr.peek());
      } else if (ch === "@" || ch === "%" || ch === "|" || ch === ":" || ch === "." || ch === CHAR_SP || !ch) {
        return false;
      } else if (ch === CHAR_LF) {
        scnr.peek();
        return fn();
      } else {
        return isIdentifierStart(ch);
      }
    };
    const ret = fn();
    scnr.resetPeek();
    return ret;
  }
  function isPluralStart(scnr) {
    peekSpaces(scnr);
    const ret = scnr.currentPeek() === "|";
    scnr.resetPeek();
    return ret;
  }
  function isTextStart(scnr, reset2 = true) {
    const fn = (hasSpace = false, prev2 = "", detectModulo = false) => {
      const ch = scnr.currentPeek();
      if (ch === "{") {
        return prev2 === "%" ? false : hasSpace;
      } else if (ch === "@" || !ch) {
        return prev2 === "%" ? true : hasSpace;
      } else if (ch === "%") {
        scnr.peek();
        return fn(hasSpace, "%", true);
      } else if (ch === "|") {
        return prev2 === "%" || detectModulo ? true : !(prev2 === CHAR_SP || prev2 === CHAR_LF);
      } else if (ch === CHAR_SP) {
        scnr.peek();
        return fn(true, CHAR_SP, detectModulo);
      } else if (ch === CHAR_LF) {
        scnr.peek();
        return fn(true, CHAR_LF, detectModulo);
      } else {
        return true;
      }
    };
    const ret = fn();
    reset2 && scnr.resetPeek();
    return ret;
  }
  function takeChar(scnr, fn) {
    const ch = scnr.currentChar();
    if (ch === EOF) {
      return EOF;
    }
    if (fn(ch)) {
      scnr.next();
      return ch;
    }
    return null;
  }
  function takeIdentifierChar(scnr) {
    const closure = (ch) => {
      const cc = ch.charCodeAt(0);
      return cc >= 97 && cc <= 122 || cc >= 65 && cc <= 90 || cc >= 48 && cc <= 57 || cc === 95 || cc === 36;
    };
    return takeChar(scnr, closure);
  }
  function takeDigit(scnr) {
    const closure = (ch) => {
      const cc = ch.charCodeAt(0);
      return cc >= 48 && cc <= 57;
    };
    return takeChar(scnr, closure);
  }
  function takeHexDigit(scnr) {
    const closure = (ch) => {
      const cc = ch.charCodeAt(0);
      return cc >= 48 && cc <= 57 || cc >= 65 && cc <= 70 || cc >= 97 && cc <= 102;
    };
    return takeChar(scnr, closure);
  }
  function getDigits(scnr) {
    let ch = "";
    let num = "";
    while (ch = takeDigit(scnr)) {
      num += ch;
    }
    return num;
  }
  function readText(scnr) {
    let buf = "";
    while (true) {
      const ch = scnr.currentChar();
      if (ch === "{" || ch === "}" || ch === "@" || ch === "|" || !ch) {
        break;
      } else if (ch === "%") {
        if (isTextStart(scnr)) {
          buf += ch;
          scnr.next();
        } else {
          break;
        }
      } else if (ch === CHAR_SP || ch === CHAR_LF) {
        if (isTextStart(scnr)) {
          buf += ch;
          scnr.next();
        } else if (isPluralStart(scnr)) {
          break;
        } else {
          buf += ch;
          scnr.next();
        }
      } else {
        buf += ch;
        scnr.next();
      }
    }
    return buf;
  }
  function readNamedIdentifier(scnr) {
    skipSpaces(scnr);
    let ch = "";
    let name = "";
    while (ch = takeIdentifierChar(scnr)) {
      name += ch;
    }
    if (scnr.currentChar() === EOF) {
      emitError(6, currentPosition(), 0);
    }
    return name;
  }
  function readListIdentifier(scnr) {
    skipSpaces(scnr);
    let value = "";
    if (scnr.currentChar() === "-") {
      scnr.next();
      value += `-${getDigits(scnr)}`;
    } else {
      value += getDigits(scnr);
    }
    if (scnr.currentChar() === EOF) {
      emitError(6, currentPosition(), 0);
    }
    return value;
  }
  function readLiteral(scnr) {
    skipSpaces(scnr);
    eat(scnr, `'`);
    let ch = "";
    let literal = "";
    const fn = (x) => x !== LITERAL_DELIMITER && x !== CHAR_LF;
    while (ch = takeChar(scnr, fn)) {
      if (ch === "\\") {
        literal += readEscapeSequence(scnr);
      } else {
        literal += ch;
      }
    }
    const current = scnr.currentChar();
    if (current === CHAR_LF || current === EOF) {
      emitError(2, currentPosition(), 0);
      if (current === CHAR_LF) {
        scnr.next();
        eat(scnr, `'`);
      }
      return literal;
    }
    eat(scnr, `'`);
    return literal;
  }
  function readEscapeSequence(scnr) {
    const ch = scnr.currentChar();
    switch (ch) {
      case "\\":
      case `'`:
        scnr.next();
        return `\\${ch}`;
      case "u":
        return readUnicodeEscapeSequence(scnr, ch, 4);
      case "U":
        return readUnicodeEscapeSequence(scnr, ch, 6);
      default:
        emitError(3, currentPosition(), 0, ch);
        return "";
    }
  }
  function readUnicodeEscapeSequence(scnr, unicode, digits) {
    eat(scnr, unicode);
    let sequence = "";
    for (let i2 = 0; i2 < digits; i2++) {
      const ch = takeHexDigit(scnr);
      if (!ch) {
        emitError(4, currentPosition(), 0, `\\${unicode}${sequence}${scnr.currentChar()}`);
        break;
      }
      sequence += ch;
    }
    return `\\${unicode}${sequence}`;
  }
  function readInvalidIdentifier(scnr) {
    skipSpaces(scnr);
    let ch = "";
    let identifiers = "";
    const closure = (ch2) => ch2 !== "{" && ch2 !== "}" && ch2 !== CHAR_SP && ch2 !== CHAR_LF;
    while (ch = takeChar(scnr, closure)) {
      identifiers += ch;
    }
    return identifiers;
  }
  function readLinkedModifier(scnr) {
    let ch = "";
    let name = "";
    while (ch = takeIdentifierChar(scnr)) {
      name += ch;
    }
    return name;
  }
  function readLinkedRefer(scnr) {
    const fn = (detect = false, buf) => {
      const ch = scnr.currentChar();
      if (ch === "{" || ch === "%" || ch === "@" || ch === "|" || !ch) {
        return buf;
      } else if (ch === CHAR_SP) {
        return buf;
      } else if (ch === CHAR_LF) {
        buf += ch;
        scnr.next();
        return fn(detect, buf);
      } else {
        buf += ch;
        scnr.next();
        return fn(true, buf);
      }
    };
    return fn(false, "");
  }
  function readPlural(scnr) {
    skipSpaces(scnr);
    const plural = eat(scnr, "|");
    skipSpaces(scnr);
    return plural;
  }
  function readTokenInPlaceholder(scnr, context2) {
    let token2 = null;
    const ch = scnr.currentChar();
    switch (ch) {
      case "{":
        if (context2.braceNest >= 1) {
          emitError(8, currentPosition(), 0);
        }
        scnr.next();
        token2 = getToken(context2, 2, "{");
        skipSpaces(scnr);
        context2.braceNest++;
        return token2;
      case "}":
        if (context2.braceNest > 0 && context2.currentType === 2) {
          emitError(7, currentPosition(), 0);
        }
        scnr.next();
        token2 = getToken(context2, 3, "}");
        context2.braceNest--;
        context2.braceNest > 0 && skipSpaces(scnr);
        if (context2.inLinked && context2.braceNest === 0) {
          context2.inLinked = false;
        }
        return token2;
      case "@":
        if (context2.braceNest > 0) {
          emitError(6, currentPosition(), 0);
        }
        token2 = readTokenInLinked(scnr, context2) || getEndToken(context2);
        context2.braceNest = 0;
        return token2;
      default:
        let validNamedIdentifier = true;
        let validListIdentifier = true;
        let validLiteral = true;
        if (isPluralStart(scnr)) {
          if (context2.braceNest > 0) {
            emitError(6, currentPosition(), 0);
          }
          token2 = getToken(context2, 1, readPlural(scnr));
          context2.braceNest = 0;
          context2.inLinked = false;
          return token2;
        }
        if (context2.braceNest > 0 && (context2.currentType === 5 || context2.currentType === 6 || context2.currentType === 7)) {
          emitError(6, currentPosition(), 0);
          context2.braceNest = 0;
          return readToken(scnr, context2);
        }
        if (validNamedIdentifier = isNamedIdentifierStart(scnr, context2)) {
          token2 = getToken(context2, 5, readNamedIdentifier(scnr));
          skipSpaces(scnr);
          return token2;
        }
        if (validListIdentifier = isListIdentifierStart(scnr, context2)) {
          token2 = getToken(context2, 6, readListIdentifier(scnr));
          skipSpaces(scnr);
          return token2;
        }
        if (validLiteral = isLiteralStart(scnr, context2)) {
          token2 = getToken(context2, 7, readLiteral(scnr));
          skipSpaces(scnr);
          return token2;
        }
        if (!validNamedIdentifier && !validListIdentifier && !validLiteral) {
          token2 = getToken(context2, 13, readInvalidIdentifier(scnr));
          emitError(1, currentPosition(), 0, token2.value);
          skipSpaces(scnr);
          return token2;
        }
        break;
    }
    return token2;
  }
  function readTokenInLinked(scnr, context2) {
    const { currentType } = context2;
    let token2 = null;
    const ch = scnr.currentChar();
    if ((currentType === 8 || currentType === 9 || currentType === 12 || currentType === 10) && (ch === CHAR_LF || ch === CHAR_SP)) {
      emitError(9, currentPosition(), 0);
    }
    switch (ch) {
      case "@":
        scnr.next();
        token2 = getToken(context2, 8, "@");
        context2.inLinked = true;
        return token2;
      case ".":
        skipSpaces(scnr);
        scnr.next();
        return getToken(context2, 9, ".");
      case ":":
        skipSpaces(scnr);
        scnr.next();
        return getToken(context2, 10, ":");
      default:
        if (isPluralStart(scnr)) {
          token2 = getToken(context2, 1, readPlural(scnr));
          context2.braceNest = 0;
          context2.inLinked = false;
          return token2;
        }
        if (isLinkedDotStart(scnr, context2) || isLinkedDelimiterStart(scnr, context2)) {
          skipSpaces(scnr);
          return readTokenInLinked(scnr, context2);
        }
        if (isLinkedModifierStart(scnr, context2)) {
          skipSpaces(scnr);
          return getToken(context2, 12, readLinkedModifier(scnr));
        }
        if (isLinkedReferStart(scnr, context2)) {
          skipSpaces(scnr);
          if (ch === "{") {
            return readTokenInPlaceholder(scnr, context2) || token2;
          } else {
            return getToken(context2, 11, readLinkedRefer(scnr));
          }
        }
        if (currentType === 8) {
          emitError(9, currentPosition(), 0);
        }
        context2.braceNest = 0;
        context2.inLinked = false;
        return readToken(scnr, context2);
    }
  }
  function readToken(scnr, context2) {
    let token2 = { type: 14 };
    if (context2.braceNest > 0) {
      return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);
    }
    if (context2.inLinked) {
      return readTokenInLinked(scnr, context2) || getEndToken(context2);
    }
    const ch = scnr.currentChar();
    switch (ch) {
      case "{":
        return readTokenInPlaceholder(scnr, context2) || getEndToken(context2);
      case "}":
        emitError(5, currentPosition(), 0);
        scnr.next();
        return getToken(context2, 3, "}");
      case "@":
        return readTokenInLinked(scnr, context2) || getEndToken(context2);
      default:
        if (isPluralStart(scnr)) {
          token2 = getToken(context2, 1, readPlural(scnr));
          context2.braceNest = 0;
          context2.inLinked = false;
          return token2;
        }
        if (isTextStart(scnr)) {
          return getToken(context2, 0, readText(scnr));
        }
        if (ch === "%") {
          scnr.next();
          return getToken(context2, 4, "%");
        }
        break;
    }
    return token2;
  }
  function nextToken() {
    const { currentType, offset: offset2, startLoc, endLoc } = _context;
    _context.lastType = currentType;
    _context.lastOffset = offset2;
    _context.lastStartLoc = startLoc;
    _context.lastEndLoc = endLoc;
    _context.offset = currentOffset();
    _context.startLoc = currentPosition();
    if (_scnr.currentChar() === EOF) {
      return getToken(_context, 14);
    }
    return readToken(_scnr, _context);
  }
  return {
    nextToken,
    currentOffset,
    currentPosition,
    context
  };
}
const ERROR_DOMAIN = "parser";
const KNOWN_ESCAPES = /(?:\\\\|\\'|\\u([0-9a-fA-F]{4})|\\U([0-9a-fA-F]{6}))/g;
function fromEscapeSequence(match, codePoint4, codePoint6) {
  switch (match) {
    case `\\\\`:
      return `\\`;
    case `\\'`:
      return `'`;
    default: {
      const codePoint = parseInt(codePoint4 || codePoint6, 16);
      if (codePoint <= 55295 || codePoint >= 57344) {
        return String.fromCodePoint(codePoint);
      }
      return "\uFFFD";
    }
  }
}
function createParser(options = {}) {
  const location = options.location !== false;
  const { onError } = options;
  function emitError(tokenzer, code, start, offset2, ...args) {
    const end = tokenzer.currentPosition();
    end.offset += offset2;
    end.column += offset2;
    if (onError) {
      const loc = createLocation(start, end);
      const err = createCompileError(code, loc, {
        domain: ERROR_DOMAIN,
        args
      });
      onError(err);
    }
  }
  function startNode(type, offset2, loc) {
    const node = {
      type,
      start: offset2,
      end: offset2
    };
    if (location) {
      node.loc = { start: loc, end: loc };
    }
    return node;
  }
  function endNode(node, offset2, pos, type) {
    node.end = offset2;
    if (type) {
      node.type = type;
    }
    if (location && node.loc) {
      node.loc.end = pos;
    }
  }
  function parseText(tokenizer, value) {
    const context = tokenizer.context();
    const node = startNode(3, context.offset, context.startLoc);
    node.value = value;
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseList(tokenizer, index2) {
    const context = tokenizer.context();
    const { lastOffset: offset2, lastStartLoc: loc } = context;
    const node = startNode(5, offset2, loc);
    node.index = parseInt(index2, 10);
    tokenizer.nextToken();
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseNamed(tokenizer, key) {
    const context = tokenizer.context();
    const { lastOffset: offset2, lastStartLoc: loc } = context;
    const node = startNode(4, offset2, loc);
    node.key = key;
    tokenizer.nextToken();
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseLiteral(tokenizer, value) {
    const context = tokenizer.context();
    const { lastOffset: offset2, lastStartLoc: loc } = context;
    const node = startNode(9, offset2, loc);
    node.value = value.replace(KNOWN_ESCAPES, fromEscapeSequence);
    tokenizer.nextToken();
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseLinkedModifier(tokenizer) {
    const token2 = tokenizer.nextToken();
    const context = tokenizer.context();
    const { lastOffset: offset2, lastStartLoc: loc } = context;
    const node = startNode(8, offset2, loc);
    if (token2.type !== 12) {
      emitError(tokenizer, 11, context.lastStartLoc, 0);
      node.value = "";
      endNode(node, offset2, loc);
      return {
        nextConsumeToken: token2,
        node
      };
    }
    if (token2.value == null) {
      emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
    }
    node.value = token2.value || "";
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return {
      node
    };
  }
  function parseLinkedKey(tokenizer, value) {
    const context = tokenizer.context();
    const node = startNode(7, context.offset, context.startLoc);
    node.value = value;
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseLinked(tokenizer) {
    const context = tokenizer.context();
    const linkedNode = startNode(6, context.offset, context.startLoc);
    let token2 = tokenizer.nextToken();
    if (token2.type === 9) {
      const parsed = parseLinkedModifier(tokenizer);
      linkedNode.modifier = parsed.node;
      token2 = parsed.nextConsumeToken || tokenizer.nextToken();
    }
    if (token2.type !== 10) {
      emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
    }
    token2 = tokenizer.nextToken();
    if (token2.type === 2) {
      token2 = tokenizer.nextToken();
    }
    switch (token2.type) {
      case 11:
        if (token2.value == null) {
          emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
        }
        linkedNode.key = parseLinkedKey(tokenizer, token2.value || "");
        break;
      case 5:
        if (token2.value == null) {
          emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
        }
        linkedNode.key = parseNamed(tokenizer, token2.value || "");
        break;
      case 6:
        if (token2.value == null) {
          emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
        }
        linkedNode.key = parseList(tokenizer, token2.value || "");
        break;
      case 7:
        if (token2.value == null) {
          emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
        }
        linkedNode.key = parseLiteral(tokenizer, token2.value || "");
        break;
      default:
        emitError(tokenizer, 12, context.lastStartLoc, 0);
        const nextContext = tokenizer.context();
        const emptyLinkedKeyNode = startNode(7, nextContext.offset, nextContext.startLoc);
        emptyLinkedKeyNode.value = "";
        endNode(emptyLinkedKeyNode, nextContext.offset, nextContext.startLoc);
        linkedNode.key = emptyLinkedKeyNode;
        endNode(linkedNode, nextContext.offset, nextContext.startLoc);
        return {
          nextConsumeToken: token2,
          node: linkedNode
        };
    }
    endNode(linkedNode, tokenizer.currentOffset(), tokenizer.currentPosition());
    return {
      node: linkedNode
    };
  }
  function parseMessage(tokenizer) {
    const context = tokenizer.context();
    const startOffset = context.currentType === 1 ? tokenizer.currentOffset() : context.offset;
    const startLoc = context.currentType === 1 ? context.endLoc : context.startLoc;
    const node = startNode(2, startOffset, startLoc);
    node.items = [];
    let nextToken = null;
    do {
      const token2 = nextToken || tokenizer.nextToken();
      nextToken = null;
      switch (token2.type) {
        case 0:
          if (token2.value == null) {
            emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
          }
          node.items.push(parseText(tokenizer, token2.value || ""));
          break;
        case 6:
          if (token2.value == null) {
            emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
          }
          node.items.push(parseList(tokenizer, token2.value || ""));
          break;
        case 5:
          if (token2.value == null) {
            emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
          }
          node.items.push(parseNamed(tokenizer, token2.value || ""));
          break;
        case 7:
          if (token2.value == null) {
            emitError(tokenizer, 13, context.lastStartLoc, 0, getTokenCaption(token2));
          }
          node.items.push(parseLiteral(tokenizer, token2.value || ""));
          break;
        case 8:
          const parsed = parseLinked(tokenizer);
          node.items.push(parsed.node);
          nextToken = parsed.nextConsumeToken || null;
          break;
      }
    } while (context.currentType !== 14 && context.currentType !== 1);
    const endOffset = context.currentType === 1 ? context.lastOffset : tokenizer.currentOffset();
    const endLoc = context.currentType === 1 ? context.lastEndLoc : tokenizer.currentPosition();
    endNode(node, endOffset, endLoc);
    return node;
  }
  function parsePlural(tokenizer, offset2, loc, msgNode) {
    const context = tokenizer.context();
    let hasEmptyMessage = msgNode.items.length === 0;
    const node = startNode(1, offset2, loc);
    node.cases = [];
    node.cases.push(msgNode);
    do {
      const msg = parseMessage(tokenizer);
      if (!hasEmptyMessage) {
        hasEmptyMessage = msg.items.length === 0;
      }
      node.cases.push(msg);
    } while (context.currentType !== 14);
    if (hasEmptyMessage) {
      emitError(tokenizer, 10, loc, 0);
    }
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  function parseResource(tokenizer) {
    const context = tokenizer.context();
    const { offset: offset2, startLoc } = context;
    const msgNode = parseMessage(tokenizer);
    if (context.currentType === 14) {
      return msgNode;
    } else {
      return parsePlural(tokenizer, offset2, startLoc, msgNode);
    }
  }
  function parse2(source2) {
    const tokenizer = createTokenizer(source2, assign$1({}, options));
    const context = tokenizer.context();
    const node = startNode(0, context.offset, context.startLoc);
    if (location && node.loc) {
      node.loc.source = source2;
    }
    node.body = parseResource(tokenizer);
    if (context.currentType !== 14) {
      emitError(tokenizer, 13, context.lastStartLoc, 0, source2[context.offset] || "");
    }
    endNode(node, tokenizer.currentOffset(), tokenizer.currentPosition());
    return node;
  }
  return { parse: parse2 };
}
function getTokenCaption(token2) {
  if (token2.type === 14) {
    return "EOF";
  }
  const name = (token2.value || "").replace(/\r?\n/gu, "\\n");
  return name.length > 10 ? name.slice(0, 9) + "\u2026" : name;
}
function createTransformer(ast, options = {}) {
  const _context = {
    ast,
    helpers: /* @__PURE__ */ new Set()
  };
  const context = () => _context;
  const helper = (name) => {
    _context.helpers.add(name);
    return name;
  };
  return { context, helper };
}
function traverseNodes(nodes, transformer) {
  for (let i2 = 0; i2 < nodes.length; i2++) {
    traverseNode(nodes[i2], transformer);
  }
}
function traverseNode(node, transformer) {
  switch (node.type) {
    case 1:
      traverseNodes(node.cases, transformer);
      transformer.helper("plural");
      break;
    case 2:
      traverseNodes(node.items, transformer);
      break;
    case 6:
      const linked = node;
      traverseNode(linked.key, transformer);
      transformer.helper("linked");
      break;
    case 5:
      transformer.helper("interpolate");
      transformer.helper("list");
      break;
    case 4:
      transformer.helper("interpolate");
      transformer.helper("named");
      break;
  }
}
function transform(ast, options = {}) {
  const transformer = createTransformer(ast);
  transformer.helper("normalize");
  ast.body && traverseNode(ast.body, transformer);
  const context = transformer.context();
  ast.helpers = Array.from(context.helpers);
}
function createCodeGenerator(ast, options) {
  const { sourceMap, filename, breakLineCode, needIndent: _needIndent } = options;
  const _context = {
    source: ast.loc.source,
    filename,
    code: "",
    column: 1,
    line: 1,
    offset: 0,
    map: void 0,
    breakLineCode,
    needIndent: _needIndent,
    indentLevel: 0
  };
  const context = () => _context;
  function push(code, node) {
    _context.code += code;
  }
  function _newline(n, withBreakLine = true) {
    const _breakLineCode = withBreakLine ? breakLineCode : "";
    push(_needIndent ? _breakLineCode + `  `.repeat(n) : _breakLineCode);
  }
  function indent(withNewLine = true) {
    const level = ++_context.indentLevel;
    withNewLine && _newline(level);
  }
  function deindent(withNewLine = true) {
    const level = --_context.indentLevel;
    withNewLine && _newline(level);
  }
  function newline() {
    _newline(_context.indentLevel);
  }
  const helper = (key) => `_${key}`;
  const needIndent = () => _context.needIndent;
  return {
    context,
    push,
    indent,
    deindent,
    newline,
    helper,
    needIndent
  };
}
function generateLinkedNode(generator, node) {
  const { helper } = generator;
  generator.push(`${helper("linked")}(`);
  generateNode(generator, node.key);
  if (node.modifier) {
    generator.push(`, `);
    generateNode(generator, node.modifier);
  }
  generator.push(`)`);
}
function generateMessageNode(generator, node) {
  const { helper, needIndent } = generator;
  generator.push(`${helper("normalize")}([`);
  generator.indent(needIndent());
  const length = node.items.length;
  for (let i2 = 0; i2 < length; i2++) {
    generateNode(generator, node.items[i2]);
    if (i2 === length - 1) {
      break;
    }
    generator.push(", ");
  }
  generator.deindent(needIndent());
  generator.push("])");
}
function generatePluralNode(generator, node) {
  const { helper, needIndent } = generator;
  if (node.cases.length > 1) {
    generator.push(`${helper("plural")}([`);
    generator.indent(needIndent());
    const length = node.cases.length;
    for (let i2 = 0; i2 < length; i2++) {
      generateNode(generator, node.cases[i2]);
      if (i2 === length - 1) {
        break;
      }
      generator.push(", ");
    }
    generator.deindent(needIndent());
    generator.push(`])`);
  }
}
function generateResource(generator, node) {
  if (node.body) {
    generateNode(generator, node.body);
  } else {
    generator.push("null");
  }
}
function generateNode(generator, node) {
  const { helper } = generator;
  switch (node.type) {
    case 0:
      generateResource(generator, node);
      break;
    case 1:
      generatePluralNode(generator, node);
      break;
    case 2:
      generateMessageNode(generator, node);
      break;
    case 6:
      generateLinkedNode(generator, node);
      break;
    case 8:
      generator.push(JSON.stringify(node.value), node);
      break;
    case 7:
      generator.push(JSON.stringify(node.value), node);
      break;
    case 5:
      generator.push(`${helper("interpolate")}(${helper("list")}(${node.index}))`, node);
      break;
    case 4:
      generator.push(`${helper("interpolate")}(${helper("named")}(${JSON.stringify(node.key)}))`, node);
      break;
    case 9:
      generator.push(JSON.stringify(node.value), node);
      break;
    case 3:
      generator.push(JSON.stringify(node.value), node);
      break;
  }
}
const generate = (ast, options = {}) => {
  const mode = isString$3(options.mode) ? options.mode : "normal";
  const filename = isString$3(options.filename) ? options.filename : "message.intl";
  const sourceMap = !!options.sourceMap;
  const breakLineCode = options.breakLineCode != null ? options.breakLineCode : mode === "arrow" ? ";" : "\n";
  const needIndent = options.needIndent ? options.needIndent : mode !== "arrow";
  const helpers = ast.helpers || [];
  const generator = createCodeGenerator(ast, {
    mode,
    filename,
    sourceMap,
    breakLineCode,
    needIndent
  });
  generator.push(mode === "normal" ? `function __msg__ (ctx) {` : `(ctx) => {`);
  generator.indent(needIndent);
  if (helpers.length > 0) {
    generator.push(`const { ${helpers.map((s) => `${s}: _${s}`).join(", ")} } = ctx`);
    generator.newline();
  }
  generator.push(`return `);
  generateNode(generator, ast);
  generator.deindent(needIndent);
  generator.push(`}`);
  const { code, map: map2 } = generator.context();
  return {
    ast,
    code,
    map: map2 ? map2.toJSON() : void 0
  };
};
function baseCompile(source2, options = {}) {
  const assignedOptions = assign$1({}, options);
  const parser = createParser(assignedOptions);
  const ast = parser.parse(source2);
  transform(ast, assignedOptions);
  return generate(ast, assignedOptions);
}
/*!
  * @intlify/devtools-if v9.1.10
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const IntlifyDevToolsHooks = {
  I18nInit: "i18n:init",
  FunctionTranslate: "function:translate"
};
/*!
  * @intlify/core-base v9.1.10
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
let devtools = null;
function setDevToolsHook(hook) {
  devtools = hook;
}
function initI18nDevTools(i18n2, version2, meta) {
  devtools && devtools.emit(IntlifyDevToolsHooks.I18nInit, {
    timestamp: Date.now(),
    i18n: i18n2,
    version: version2,
    meta
  });
}
const translateDevTools = /* @__PURE__ */ createDevToolsHook(IntlifyDevToolsHooks.FunctionTranslate);
function createDevToolsHook(hook) {
  return (payloads) => devtools && devtools.emit(hook, payloads);
}
const VERSION$2 = "9.1.10";
const NOT_REOSLVED = -1;
const MISSING_RESOLVE_VALUE = "";
function getDefaultLinkedModifiers() {
  return {
    upper: (val) => isString$3(val) ? val.toUpperCase() : val,
    lower: (val) => isString$3(val) ? val.toLowerCase() : val,
    capitalize: (val) => isString$3(val) ? `${val.charAt(0).toLocaleUpperCase()}${val.substr(1)}` : val
  };
}
let _compiler;
function registerMessageCompiler(compiler) {
  _compiler = compiler;
}
let _additionalMeta = null;
const setAdditionalMeta = (meta) => {
  _additionalMeta = meta;
};
const getAdditionalMeta = () => _additionalMeta;
let _cid = 0;
function createCoreContext(options = {}) {
  const version2 = isString$3(options.version) ? options.version : VERSION$2;
  const locale2 = isString$3(options.locale) ? options.locale : "en-US";
  const fallbackLocale = isArray$2(options.fallbackLocale) || isPlainObject$2(options.fallbackLocale) || isString$3(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale2;
  const messages = isPlainObject$2(options.messages) ? options.messages : { [locale2]: {} };
  const datetimeFormats = isPlainObject$2(options.datetimeFormats) ? options.datetimeFormats : { [locale2]: {} };
  const numberFormats = isPlainObject$2(options.numberFormats) ? options.numberFormats : { [locale2]: {} };
  const modifiers = assign$1({}, options.modifiers || {}, getDefaultLinkedModifiers());
  const pluralRules = options.pluralRules || {};
  const missing = isFunction$3(options.missing) ? options.missing : null;
  const missingWarn = isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;
  const fallbackWarn = isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
  const fallbackFormat = !!options.fallbackFormat;
  const unresolving = !!options.unresolving;
  const postTranslation = isFunction$3(options.postTranslation) ? options.postTranslation : null;
  const processor = isPlainObject$2(options.processor) ? options.processor : null;
  const warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
  const escapeParameter = !!options.escapeParameter;
  const messageCompiler = isFunction$3(options.messageCompiler) ? options.messageCompiler : _compiler;
  const onWarn = isFunction$3(options.onWarn) ? options.onWarn : warn$1;
  const internalOptions = options;
  const __datetimeFormatters = isObject$4(internalOptions.__datetimeFormatters) ? internalOptions.__datetimeFormatters : /* @__PURE__ */ new Map();
  const __numberFormatters = isObject$4(internalOptions.__numberFormatters) ? internalOptions.__numberFormatters : /* @__PURE__ */ new Map();
  const __meta = isObject$4(internalOptions.__meta) ? internalOptions.__meta : {};
  _cid++;
  const context = {
    version: version2,
    cid: _cid,
    locale: locale2,
    fallbackLocale,
    messages,
    datetimeFormats,
    numberFormats,
    modifiers,
    pluralRules,
    missing,
    missingWarn,
    fallbackWarn,
    fallbackFormat,
    unresolving,
    postTranslation,
    processor,
    warnHtmlMessage,
    escapeParameter,
    messageCompiler,
    onWarn,
    __datetimeFormatters,
    __numberFormatters,
    __meta
  };
  if (__INTLIFY_PROD_DEVTOOLS__) {
    initI18nDevTools(context, version2, __meta);
  }
  return context;
}
function handleMissing(context, key, locale2, missingWarn, type) {
  const { missing, onWarn } = context;
  if (missing !== null) {
    const ret = missing(context, locale2, key, type);
    return isString$3(ret) ? ret : key;
  } else {
    return key;
  }
}
function getLocaleChain(ctx, fallback, start) {
  const context = ctx;
  if (!context.__localeChainCache) {
    context.__localeChainCache = /* @__PURE__ */ new Map();
  }
  let chain = context.__localeChainCache.get(start);
  if (!chain) {
    chain = [];
    let block = [start];
    while (isArray$2(block)) {
      block = appendBlockToChain(chain, block, fallback);
    }
    const defaults2 = isArray$2(fallback) ? fallback : isPlainObject$2(fallback) ? fallback["default"] ? fallback["default"] : null : fallback;
    block = isString$3(defaults2) ? [defaults2] : defaults2;
    if (isArray$2(block)) {
      appendBlockToChain(chain, block, false);
    }
    context.__localeChainCache.set(start, chain);
  }
  return chain;
}
function appendBlockToChain(chain, block, blocks) {
  let follow = true;
  for (let i2 = 0; i2 < block.length && isBoolean(follow); i2++) {
    const locale2 = block[i2];
    if (isString$3(locale2)) {
      follow = appendLocaleToChain(chain, block[i2], blocks);
    }
  }
  return follow;
}
function appendLocaleToChain(chain, locale2, blocks) {
  let follow;
  const tokens2 = locale2.split("-");
  do {
    const target = tokens2.join("-");
    follow = appendItemToChain(chain, target, blocks);
    tokens2.splice(-1, 1);
  } while (tokens2.length && follow === true);
  return follow;
}
function appendItemToChain(chain, target, blocks) {
  let follow = false;
  if (!chain.includes(target)) {
    follow = true;
    if (target) {
      follow = target[target.length - 1] !== "!";
      const locale2 = target.replace(/!/g, "");
      chain.push(locale2);
      if ((isArray$2(blocks) || isPlainObject$2(blocks)) && blocks[locale2]) {
        follow = blocks[locale2];
      }
    }
  }
  return follow;
}
function updateFallbackLocale(ctx, locale2, fallback) {
  const context = ctx;
  context.__localeChainCache = /* @__PURE__ */ new Map();
  getLocaleChain(ctx, fallback, locale2);
}
const defaultOnCacheKey = (source2) => source2;
let compileCache = /* @__PURE__ */ Object.create(null);
function compileToFunction(source2, options = {}) {
  {
    const onCacheKey = options.onCacheKey || defaultOnCacheKey;
    const key = onCacheKey(source2);
    const cached2 = compileCache[key];
    if (cached2) {
      return cached2;
    }
    let occurred = false;
    const onError = options.onError || defaultOnError;
    options.onError = (err) => {
      occurred = true;
      onError(err);
    };
    const { code } = baseCompile(source2, options);
    const msg = new Function(`return ${code}`)();
    return !occurred ? compileCache[key] = msg : msg;
  }
}
function createCoreError(code) {
  return createCompileError(code, null, void 0);
}
const NOOP_MESSAGE_FUNCTION = () => "";
const isMessageFunction = (val) => isFunction$3(val);
function translate(context, ...args) {
  const { fallbackFormat, postTranslation, unresolving, fallbackLocale, messages } = context;
  const [key, options] = parseTranslateArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  const fallbackWarn = isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const escapeParameter = isBoolean(options.escapeParameter) ? options.escapeParameter : context.escapeParameter;
  const resolvedMessage = !!options.resolvedMessage;
  const defaultMsgOrKey = isString$3(options.default) || isBoolean(options.default) ? !isBoolean(options.default) ? options.default : key : fallbackFormat ? key : "";
  const enableDefaultMsg = fallbackFormat || defaultMsgOrKey !== "";
  const locale2 = isString$3(options.locale) ? options.locale : context.locale;
  escapeParameter && escapeParams(options);
  let [format2, targetLocale, message] = !resolvedMessage ? resolveMessageFormat(context, key, locale2, fallbackLocale, fallbackWarn, missingWarn) : [
    key,
    locale2,
    messages[locale2] || {}
  ];
  let cacheBaseKey = key;
  if (!resolvedMessage && !(isString$3(format2) || isMessageFunction(format2))) {
    if (enableDefaultMsg) {
      format2 = defaultMsgOrKey;
      cacheBaseKey = format2;
    }
  }
  if (!resolvedMessage && (!(isString$3(format2) || isMessageFunction(format2)) || !isString$3(targetLocale))) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let occurred = false;
  const errorDetector = () => {
    occurred = true;
  };
  const msg = !isMessageFunction(format2) ? compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) : format2;
  if (occurred) {
    return format2;
  }
  const ctxOptions = getMessageContextOptions(context, targetLocale, message, options);
  const msgContext = createMessageContext(ctxOptions);
  const messaged = evaluateMessage(context, msg, msgContext);
  const ret = postTranslation ? postTranslation(messaged) : messaged;
  if (__INTLIFY_PROD_DEVTOOLS__) {
    const payloads = {
      timestamp: Date.now(),
      key: isString$3(key) ? key : isMessageFunction(format2) ? format2.key : "",
      locale: targetLocale || (isMessageFunction(format2) ? format2.locale : ""),
      format: isString$3(format2) ? format2 : isMessageFunction(format2) ? format2.source : "",
      message: ret
    };
    payloads.meta = assign$1({}, context.__meta, getAdditionalMeta() || {});
    translateDevTools(payloads);
  }
  return ret;
}
function escapeParams(options) {
  if (isArray$2(options.list)) {
    options.list = options.list.map((item2) => isString$3(item2) ? escapeHtml(item2) : item2);
  } else if (isObject$4(options.named)) {
    Object.keys(options.named).forEach((key) => {
      if (isString$3(options.named[key])) {
        options.named[key] = escapeHtml(options.named[key]);
      }
    });
  }
}
function resolveMessageFormat(context, key, locale2, fallbackLocale, fallbackWarn, missingWarn) {
  const { messages, onWarn } = context;
  const locales2 = getLocaleChain(context, fallbackLocale, locale2);
  let message = {};
  let targetLocale;
  let format2 = null;
  const type = "translate";
  for (let i2 = 0; i2 < locales2.length; i2++) {
    targetLocale = locales2[i2];
    message = messages[targetLocale] || {};
    if ((format2 = resolveValue(message, key)) === null) {
      format2 = message[key];
    }
    if (isString$3(format2) || isFunction$3(format2))
      break;
    const missingRet = handleMissing(context, key, targetLocale, missingWarn, type);
    if (missingRet !== key) {
      format2 = missingRet;
    }
  }
  return [format2, targetLocale, message];
}
function compileMessageFormat(context, key, targetLocale, format2, cacheBaseKey, errorDetector) {
  const { messageCompiler, warnHtmlMessage } = context;
  if (isMessageFunction(format2)) {
    const msg2 = format2;
    msg2.locale = msg2.locale || targetLocale;
    msg2.key = msg2.key || key;
    return msg2;
  }
  const msg = messageCompiler(format2, getCompileOptions(context, targetLocale, cacheBaseKey, format2, warnHtmlMessage, errorDetector));
  msg.locale = targetLocale;
  msg.key = key;
  msg.source = format2;
  return msg;
}
function evaluateMessage(context, msg, msgCtx) {
  const messaged = msg(msgCtx);
  return messaged;
}
function parseTranslateArgs(...args) {
  const [arg1, arg2, arg3] = args;
  const options = {};
  if (!isString$3(arg1) && !isNumber$3(arg1) && !isMessageFunction(arg1)) {
    throw createCoreError(14);
  }
  const key = isNumber$3(arg1) ? String(arg1) : isMessageFunction(arg1) ? arg1 : arg1;
  if (isNumber$3(arg2)) {
    options.plural = arg2;
  } else if (isString$3(arg2)) {
    options.default = arg2;
  } else if (isPlainObject$2(arg2) && !isEmptyObject(arg2)) {
    options.named = arg2;
  } else if (isArray$2(arg2)) {
    options.list = arg2;
  }
  if (isNumber$3(arg3)) {
    options.plural = arg3;
  } else if (isString$3(arg3)) {
    options.default = arg3;
  } else if (isPlainObject$2(arg3)) {
    assign$1(options, arg3);
  }
  return [key, options];
}
function getCompileOptions(context, locale2, key, source2, warnHtmlMessage, errorDetector) {
  return {
    warnHtmlMessage,
    onError: (err) => {
      errorDetector && errorDetector(err);
      {
        throw err;
      }
    },
    onCacheKey: (source3) => generateFormatCacheKey(locale2, key, source3)
  };
}
function getMessageContextOptions(context, locale2, message, options) {
  const { modifiers, pluralRules } = context;
  const resolveMessage = (key) => {
    const val = resolveValue(message, key);
    if (isString$3(val)) {
      let occurred = false;
      const errorDetector = () => {
        occurred = true;
      };
      const msg = compileMessageFormat(context, key, locale2, val, key, errorDetector);
      return !occurred ? msg : NOOP_MESSAGE_FUNCTION;
    } else if (isMessageFunction(val)) {
      return val;
    } else {
      return NOOP_MESSAGE_FUNCTION;
    }
  };
  const ctxOptions = {
    locale: locale2,
    modifiers,
    pluralRules,
    messages: resolveMessage
  };
  if (context.processor) {
    ctxOptions.processor = context.processor;
  }
  if (options.list) {
    ctxOptions.list = options.list;
  }
  if (options.named) {
    ctxOptions.named = options.named;
  }
  if (isNumber$3(options.plural)) {
    ctxOptions.pluralIndex = options.plural;
  }
  return ctxOptions;
}
function datetime(context, ...args) {
  const { datetimeFormats, unresolving, fallbackLocale, onWarn } = context;
  const { __datetimeFormatters } = context;
  const [key, value, options, overrides] = parseDateTimeArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const part = !!options.part;
  const locale2 = isString$3(options.locale) ? options.locale : context.locale;
  const locales2 = getLocaleChain(context, fallbackLocale, locale2);
  if (!isString$3(key) || key === "") {
    return new Intl.DateTimeFormat(locale2).format(value);
  }
  let datetimeFormat = {};
  let targetLocale;
  let format2 = null;
  const type = "datetime format";
  for (let i2 = 0; i2 < locales2.length; i2++) {
    targetLocale = locales2[i2];
    datetimeFormat = datetimeFormats[targetLocale] || {};
    format2 = datetimeFormat[key];
    if (isPlainObject$2(format2))
      break;
    handleMissing(context, key, targetLocale, missingWarn, type);
  }
  if (!isPlainObject$2(format2) || !isString$3(targetLocale)) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let id = `${targetLocale}__${key}`;
  if (!isEmptyObject(overrides)) {
    id = `${id}__${JSON.stringify(overrides)}`;
  }
  let formatter = __datetimeFormatters.get(id);
  if (!formatter) {
    formatter = new Intl.DateTimeFormat(targetLocale, assign$1({}, format2, overrides));
    __datetimeFormatters.set(id, formatter);
  }
  return !part ? formatter.format(value) : formatter.formatToParts(value);
}
function parseDateTimeArgs(...args) {
  const [arg1, arg2, arg3, arg4] = args;
  let options = {};
  let overrides = {};
  let value;
  if (isString$3(arg1)) {
    if (!/\d{4}-\d{2}-\d{2}(T.*)?/.test(arg1)) {
      throw createCoreError(16);
    }
    value = new Date(arg1);
    try {
      value.toISOString();
    } catch (e) {
      throw createCoreError(16);
    }
  } else if (isDate$2(arg1)) {
    if (isNaN(arg1.getTime())) {
      throw createCoreError(15);
    }
    value = arg1;
  } else if (isNumber$3(arg1)) {
    value = arg1;
  } else {
    throw createCoreError(14);
  }
  if (isString$3(arg2)) {
    options.key = arg2;
  } else if (isPlainObject$2(arg2)) {
    options = arg2;
  }
  if (isString$3(arg3)) {
    options.locale = arg3;
  } else if (isPlainObject$2(arg3)) {
    overrides = arg3;
  }
  if (isPlainObject$2(arg4)) {
    overrides = arg4;
  }
  return [options.key || "", value, options, overrides];
}
function clearDateTimeFormat(ctx, locale2, format2) {
  const context = ctx;
  for (const key in format2) {
    const id = `${locale2}__${key}`;
    if (!context.__datetimeFormatters.has(id)) {
      continue;
    }
    context.__datetimeFormatters.delete(id);
  }
}
function number(context, ...args) {
  const { numberFormats, unresolving, fallbackLocale, onWarn } = context;
  const { __numberFormatters } = context;
  const [key, value, options, overrides] = parseNumberArgs(...args);
  const missingWarn = isBoolean(options.missingWarn) ? options.missingWarn : context.missingWarn;
  isBoolean(options.fallbackWarn) ? options.fallbackWarn : context.fallbackWarn;
  const part = !!options.part;
  const locale2 = isString$3(options.locale) ? options.locale : context.locale;
  const locales2 = getLocaleChain(context, fallbackLocale, locale2);
  if (!isString$3(key) || key === "") {
    return new Intl.NumberFormat(locale2).format(value);
  }
  let numberFormat = {};
  let targetLocale;
  let format2 = null;
  const type = "number format";
  for (let i2 = 0; i2 < locales2.length; i2++) {
    targetLocale = locales2[i2];
    numberFormat = numberFormats[targetLocale] || {};
    format2 = numberFormat[key];
    if (isPlainObject$2(format2))
      break;
    handleMissing(context, key, targetLocale, missingWarn, type);
  }
  if (!isPlainObject$2(format2) || !isString$3(targetLocale)) {
    return unresolving ? NOT_REOSLVED : key;
  }
  let id = `${targetLocale}__${key}`;
  if (!isEmptyObject(overrides)) {
    id = `${id}__${JSON.stringify(overrides)}`;
  }
  let formatter = __numberFormatters.get(id);
  if (!formatter) {
    formatter = new Intl.NumberFormat(targetLocale, assign$1({}, format2, overrides));
    __numberFormatters.set(id, formatter);
  }
  return !part ? formatter.format(value) : formatter.formatToParts(value);
}
function parseNumberArgs(...args) {
  const [arg1, arg2, arg3, arg4] = args;
  let options = {};
  let overrides = {};
  if (!isNumber$3(arg1)) {
    throw createCoreError(14);
  }
  const value = arg1;
  if (isString$3(arg2)) {
    options.key = arg2;
  } else if (isPlainObject$2(arg2)) {
    options = arg2;
  }
  if (isString$3(arg3)) {
    options.locale = arg3;
  } else if (isPlainObject$2(arg3)) {
    overrides = arg3;
  }
  if (isPlainObject$2(arg4)) {
    overrides = arg4;
  }
  return [options.key || "", value, options, overrides];
}
function clearNumberFormat(ctx, locale2, format2) {
  const context = ctx;
  for (const key in format2) {
    const id = `${locale2}__${key}`;
    if (!context.__numberFormatters.has(id)) {
      continue;
    }
    context.__numberFormatters.delete(id);
  }
}
{
  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
  }
}
/*!
  * vue-i18n v9.1.10
  * (c) 2022 kazuya kawaguchi
  * Released under the MIT License.
  */
const VERSION$1 = "9.1.10";
function initFeatureFlags() {
  if (typeof __VUE_I18N_FULL_INSTALL__ !== "boolean") {
    getGlobalThis().__VUE_I18N_FULL_INSTALL__ = true;
  }
  if (typeof __VUE_I18N_LEGACY_API__ !== "boolean") {
    getGlobalThis().__VUE_I18N_LEGACY_API__ = true;
  }
  if (typeof __INTLIFY_PROD_DEVTOOLS__ !== "boolean") {
    getGlobalThis().__INTLIFY_PROD_DEVTOOLS__ = false;
  }
}
function createI18nError(code, ...args) {
  return createCompileError(code, null, void 0);
}
const DEVTOOLS_META = "__INTLIFY_META__";
const TransrateVNodeSymbol = makeSymbol("__transrateVNode");
const DatetimePartsSymbol = makeSymbol("__datetimeParts");
const NumberPartsSymbol = makeSymbol("__numberParts");
makeSymbol("__enableEmitter");
makeSymbol("__disableEmitter");
const SetPluralRulesSymbol = makeSymbol("__setPluralRules");
makeSymbol("__intlifyMeta");
const InejctWithOption = makeSymbol("__injectWithOption");
let composerID = 0;
function defineCoreMissingHandler(missing) {
  return (ctx, locale2, key, type) => {
    return missing(locale2, key, getCurrentInstance() || void 0, type);
  };
}
function getLocaleMessages(locale2, options) {
  const { messages, __i18n } = options;
  const ret = isPlainObject$2(messages) ? messages : isArray$2(__i18n) ? {} : { [locale2]: {} };
  if (isArray$2(__i18n)) {
    __i18n.forEach(({ locale: locale3, resource }) => {
      if (locale3) {
        ret[locale3] = ret[locale3] || {};
        deepCopy(resource, ret[locale3]);
      } else {
        deepCopy(resource, ret);
      }
    });
  }
  if (options.flatJson) {
    for (const key in ret) {
      if (hasOwn$1(ret, key)) {
        handleFlatJson(ret[key]);
      }
    }
  }
  return ret;
}
const isNotObjectOrIsArray = (val) => !isObject$4(val) || isArray$2(val);
function deepCopy(src, des) {
  if (isNotObjectOrIsArray(src) || isNotObjectOrIsArray(des)) {
    throw createI18nError(20);
  }
  for (const key in src) {
    if (hasOwn$1(src, key)) {
      if (isNotObjectOrIsArray(src[key]) || isNotObjectOrIsArray(des[key])) {
        des[key] = src[key];
      } else {
        deepCopy(src[key], des[key]);
      }
    }
  }
}
const getMetaInfo = () => {
  const instance2 = getCurrentInstance();
  return instance2 && instance2.type[DEVTOOLS_META] ? { [DEVTOOLS_META]: instance2.type[DEVTOOLS_META] } : null;
};
function createComposer(options = {}) {
  const { __root } = options;
  const _isGlobal = __root === void 0;
  let _inheritLocale = isBoolean(options.inheritLocale) ? options.inheritLocale : true;
  const _locale = ref(__root && _inheritLocale ? __root.locale.value : isString$3(options.locale) ? options.locale : "en-US");
  const _fallbackLocale = ref(__root && _inheritLocale ? __root.fallbackLocale.value : isString$3(options.fallbackLocale) || isArray$2(options.fallbackLocale) || isPlainObject$2(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : _locale.value);
  const _messages = ref(getLocaleMessages(_locale.value, options));
  const _datetimeFormats = ref(isPlainObject$2(options.datetimeFormats) ? options.datetimeFormats : { [_locale.value]: {} });
  const _numberFormats = ref(isPlainObject$2(options.numberFormats) ? options.numberFormats : { [_locale.value]: {} });
  let _missingWarn = __root ? __root.missingWarn : isBoolean(options.missingWarn) || isRegExp(options.missingWarn) ? options.missingWarn : true;
  let _fallbackWarn = __root ? __root.fallbackWarn : isBoolean(options.fallbackWarn) || isRegExp(options.fallbackWarn) ? options.fallbackWarn : true;
  let _fallbackRoot = __root ? __root.fallbackRoot : isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
  let _fallbackFormat = !!options.fallbackFormat;
  let _missing = isFunction$3(options.missing) ? options.missing : null;
  let _runtimeMissing = isFunction$3(options.missing) ? defineCoreMissingHandler(options.missing) : null;
  let _postTranslation = isFunction$3(options.postTranslation) ? options.postTranslation : null;
  let _warnHtmlMessage = isBoolean(options.warnHtmlMessage) ? options.warnHtmlMessage : true;
  let _escapeParameter = !!options.escapeParameter;
  const _modifiers = __root ? __root.modifiers : isPlainObject$2(options.modifiers) ? options.modifiers : {};
  let _pluralRules = options.pluralRules || __root && __root.pluralRules;
  let _context;
  function getCoreContext() {
    return createCoreContext({
      version: VERSION$1,
      locale: _locale.value,
      fallbackLocale: _fallbackLocale.value,
      messages: _messages.value,
      datetimeFormats: _datetimeFormats.value,
      numberFormats: _numberFormats.value,
      modifiers: _modifiers,
      pluralRules: _pluralRules,
      missing: _runtimeMissing === null ? void 0 : _runtimeMissing,
      missingWarn: _missingWarn,
      fallbackWarn: _fallbackWarn,
      fallbackFormat: _fallbackFormat,
      unresolving: true,
      postTranslation: _postTranslation === null ? void 0 : _postTranslation,
      warnHtmlMessage: _warnHtmlMessage,
      escapeParameter: _escapeParameter,
      __datetimeFormatters: isPlainObject$2(_context) ? _context.__datetimeFormatters : void 0,
      __numberFormatters: isPlainObject$2(_context) ? _context.__numberFormatters : void 0,
      __v_emitter: isPlainObject$2(_context) ? _context.__v_emitter : void 0,
      __meta: { framework: "vue" }
    });
  }
  _context = getCoreContext();
  updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
  function trackReactivityValues() {
    return [
      _locale.value,
      _fallbackLocale.value,
      _messages.value,
      _datetimeFormats.value,
      _numberFormats.value
    ];
  }
  const locale2 = computed({
    get: () => _locale.value,
    set: (val) => {
      _locale.value = val;
      _context.locale = _locale.value;
    }
  });
  const fallbackLocale = computed({
    get: () => _fallbackLocale.value,
    set: (val) => {
      _fallbackLocale.value = val;
      _context.fallbackLocale = _fallbackLocale.value;
      updateFallbackLocale(_context, _locale.value, val);
    }
  });
  const messages = computed(() => _messages.value);
  const datetimeFormats = computed(() => _datetimeFormats.value);
  const numberFormats = computed(() => _numberFormats.value);
  function getPostTranslationHandler() {
    return isFunction$3(_postTranslation) ? _postTranslation : null;
  }
  function setPostTranslationHandler(handler) {
    _postTranslation = handler;
    _context.postTranslation = handler;
  }
  function getMissingHandler() {
    return _missing;
  }
  function setMissingHandler(handler) {
    if (handler !== null) {
      _runtimeMissing = defineCoreMissingHandler(handler);
    }
    _missing = handler;
    _context.missing = _runtimeMissing;
  }
  function wrapWithDeps(fn, argumentParser, warnType, fallbackSuccess, fallbackFail, successCondition) {
    trackReactivityValues();
    let ret;
    if (__INTLIFY_PROD_DEVTOOLS__) {
      try {
        setAdditionalMeta(getMetaInfo());
        ret = fn(_context);
      } finally {
        setAdditionalMeta(null);
      }
    } else {
      ret = fn(_context);
    }
    if (isNumber$3(ret) && ret === NOT_REOSLVED) {
      const [key, arg2] = argumentParser();
      return __root && _fallbackRoot ? fallbackSuccess(__root) : fallbackFail(key);
    } else if (successCondition(ret)) {
      return ret;
    } else {
      throw createI18nError(14);
    }
  }
  function t(...args) {
    return wrapWithDeps((context) => translate(context, ...args), () => parseTranslateArgs(...args), "translate", (root) => root.t(...args), (key) => key, (val) => isString$3(val));
  }
  function rt(...args) {
    const [arg1, arg2, arg3] = args;
    if (arg3 && !isObject$4(arg3)) {
      throw createI18nError(15);
    }
    return t(...[arg1, arg2, assign$1({ resolvedMessage: true }, arg3 || {})]);
  }
  function d(...args) {
    return wrapWithDeps((context) => datetime(context, ...args), () => parseDateTimeArgs(...args), "datetime format", (root) => root.d(...args), () => MISSING_RESOLVE_VALUE, (val) => isString$3(val));
  }
  function n(...args) {
    return wrapWithDeps((context) => number(context, ...args), () => parseNumberArgs(...args), "number format", (root) => root.n(...args), () => MISSING_RESOLVE_VALUE, (val) => isString$3(val));
  }
  function normalize2(values) {
    return values.map((val) => isString$3(val) ? createVNode(Text, null, val, 0) : val);
  }
  const interpolate = (val) => val;
  const processor = {
    normalize: normalize2,
    interpolate,
    type: "vnode"
  };
  function transrateVNode(...args) {
    return wrapWithDeps((context) => {
      let ret;
      const _context2 = context;
      try {
        _context2.processor = processor;
        ret = translate(_context2, ...args);
      } finally {
        _context2.processor = null;
      }
      return ret;
    }, () => parseTranslateArgs(...args), "translate", (root) => root[TransrateVNodeSymbol](...args), (key) => [createVNode(Text, null, key, 0)], (val) => isArray$2(val));
  }
  function numberParts(...args) {
    return wrapWithDeps((context) => number(context, ...args), () => parseNumberArgs(...args), "number format", (root) => root[NumberPartsSymbol](...args), () => [], (val) => isString$3(val) || isArray$2(val));
  }
  function datetimeParts(...args) {
    return wrapWithDeps((context) => datetime(context, ...args), () => parseDateTimeArgs(...args), "datetime format", (root) => root[DatetimePartsSymbol](...args), () => [], (val) => isString$3(val) || isArray$2(val));
  }
  function setPluralRules(rules) {
    _pluralRules = rules;
    _context.pluralRules = _pluralRules;
  }
  function te(key, locale3) {
    const targetLocale = isString$3(locale3) ? locale3 : _locale.value;
    const message = getLocaleMessage(targetLocale);
    return resolveValue(message, key) !== null;
  }
  function resolveMessages(key) {
    let messages2 = null;
    const locales2 = getLocaleChain(_context, _fallbackLocale.value, _locale.value);
    for (let i2 = 0; i2 < locales2.length; i2++) {
      const targetLocaleMessages = _messages.value[locales2[i2]] || {};
      const messageValue = resolveValue(targetLocaleMessages, key);
      if (messageValue != null) {
        messages2 = messageValue;
        break;
      }
    }
    return messages2;
  }
  function tm(key) {
    const messages2 = resolveMessages(key);
    return messages2 != null ? messages2 : __root ? __root.tm(key) || {} : {};
  }
  function getLocaleMessage(locale3) {
    return _messages.value[locale3] || {};
  }
  function setLocaleMessage(locale3, message) {
    _messages.value[locale3] = message;
    _context.messages = _messages.value;
  }
  function mergeLocaleMessage(locale3, message) {
    _messages.value[locale3] = _messages.value[locale3] || {};
    deepCopy(message, _messages.value[locale3]);
    _context.messages = _messages.value;
  }
  function getDateTimeFormat(locale3) {
    return _datetimeFormats.value[locale3] || {};
  }
  function setDateTimeFormat(locale3, format2) {
    _datetimeFormats.value[locale3] = format2;
    _context.datetimeFormats = _datetimeFormats.value;
    clearDateTimeFormat(_context, locale3, format2);
  }
  function mergeDateTimeFormat(locale3, format2) {
    _datetimeFormats.value[locale3] = assign$1(_datetimeFormats.value[locale3] || {}, format2);
    _context.datetimeFormats = _datetimeFormats.value;
    clearDateTimeFormat(_context, locale3, format2);
  }
  function getNumberFormat(locale3) {
    return _numberFormats.value[locale3] || {};
  }
  function setNumberFormat(locale3, format2) {
    _numberFormats.value[locale3] = format2;
    _context.numberFormats = _numberFormats.value;
    clearNumberFormat(_context, locale3, format2);
  }
  function mergeNumberFormat(locale3, format2) {
    _numberFormats.value[locale3] = assign$1(_numberFormats.value[locale3] || {}, format2);
    _context.numberFormats = _numberFormats.value;
    clearNumberFormat(_context, locale3, format2);
  }
  composerID++;
  if (__root) {
    watch(__root.locale, (val) => {
      if (_inheritLocale) {
        _locale.value = val;
        _context.locale = val;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    });
    watch(__root.fallbackLocale, (val) => {
      if (_inheritLocale) {
        _fallbackLocale.value = val;
        _context.fallbackLocale = val;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    });
  }
  const composer = {
    id: composerID,
    locale: locale2,
    fallbackLocale,
    get inheritLocale() {
      return _inheritLocale;
    },
    set inheritLocale(val) {
      _inheritLocale = val;
      if (val && __root) {
        _locale.value = __root.locale.value;
        _fallbackLocale.value = __root.fallbackLocale.value;
        updateFallbackLocale(_context, _locale.value, _fallbackLocale.value);
      }
    },
    get availableLocales() {
      return Object.keys(_messages.value).sort();
    },
    messages,
    datetimeFormats,
    numberFormats,
    get modifiers() {
      return _modifiers;
    },
    get pluralRules() {
      return _pluralRules || {};
    },
    get isGlobal() {
      return _isGlobal;
    },
    get missingWarn() {
      return _missingWarn;
    },
    set missingWarn(val) {
      _missingWarn = val;
      _context.missingWarn = _missingWarn;
    },
    get fallbackWarn() {
      return _fallbackWarn;
    },
    set fallbackWarn(val) {
      _fallbackWarn = val;
      _context.fallbackWarn = _fallbackWarn;
    },
    get fallbackRoot() {
      return _fallbackRoot;
    },
    set fallbackRoot(val) {
      _fallbackRoot = val;
    },
    get fallbackFormat() {
      return _fallbackFormat;
    },
    set fallbackFormat(val) {
      _fallbackFormat = val;
      _context.fallbackFormat = _fallbackFormat;
    },
    get warnHtmlMessage() {
      return _warnHtmlMessage;
    },
    set warnHtmlMessage(val) {
      _warnHtmlMessage = val;
      _context.warnHtmlMessage = val;
    },
    get escapeParameter() {
      return _escapeParameter;
    },
    set escapeParameter(val) {
      _escapeParameter = val;
      _context.escapeParameter = val;
    },
    t,
    rt,
    d,
    n,
    te,
    tm,
    getLocaleMessage,
    setLocaleMessage,
    mergeLocaleMessage,
    getDateTimeFormat,
    setDateTimeFormat,
    mergeDateTimeFormat,
    getNumberFormat,
    setNumberFormat,
    mergeNumberFormat,
    getPostTranslationHandler,
    setPostTranslationHandler,
    getMissingHandler,
    setMissingHandler,
    [TransrateVNodeSymbol]: transrateVNode,
    [NumberPartsSymbol]: numberParts,
    [DatetimePartsSymbol]: datetimeParts,
    [SetPluralRulesSymbol]: setPluralRules,
    [InejctWithOption]: options.__injectWithOption
  };
  return composer;
}
function convertComposerOptions(options) {
  const locale2 = isString$3(options.locale) ? options.locale : "en-US";
  const fallbackLocale = isString$3(options.fallbackLocale) || isArray$2(options.fallbackLocale) || isPlainObject$2(options.fallbackLocale) || options.fallbackLocale === false ? options.fallbackLocale : locale2;
  const missing = isFunction$3(options.missing) ? options.missing : void 0;
  const missingWarn = isBoolean(options.silentTranslationWarn) || isRegExp(options.silentTranslationWarn) ? !options.silentTranslationWarn : true;
  const fallbackWarn = isBoolean(options.silentFallbackWarn) || isRegExp(options.silentFallbackWarn) ? !options.silentFallbackWarn : true;
  const fallbackRoot = isBoolean(options.fallbackRoot) ? options.fallbackRoot : true;
  const fallbackFormat = !!options.formatFallbackMessages;
  const modifiers = isPlainObject$2(options.modifiers) ? options.modifiers : {};
  const pluralizationRules = options.pluralizationRules;
  const postTranslation = isFunction$3(options.postTranslation) ? options.postTranslation : void 0;
  const warnHtmlMessage = isString$3(options.warnHtmlInMessage) ? options.warnHtmlInMessage !== "off" : true;
  const escapeParameter = !!options.escapeParameterHtml;
  const inheritLocale = isBoolean(options.sync) ? options.sync : true;
  let messages = options.messages;
  if (isPlainObject$2(options.sharedMessages)) {
    const sharedMessages = options.sharedMessages;
    const locales2 = Object.keys(sharedMessages);
    messages = locales2.reduce((messages2, locale3) => {
      const message = messages2[locale3] || (messages2[locale3] = {});
      assign$1(message, sharedMessages[locale3]);
      return messages2;
    }, messages || {});
  }
  const { __i18n, __root, __injectWithOption } = options;
  const datetimeFormats = options.datetimeFormats;
  const numberFormats = options.numberFormats;
  const flatJson = options.flatJson;
  return {
    locale: locale2,
    fallbackLocale,
    messages,
    flatJson,
    datetimeFormats,
    numberFormats,
    missing,
    missingWarn,
    fallbackWarn,
    fallbackRoot,
    fallbackFormat,
    modifiers,
    pluralRules: pluralizationRules,
    postTranslation,
    warnHtmlMessage,
    escapeParameter,
    inheritLocale,
    __i18n,
    __root,
    __injectWithOption
  };
}
function createVueI18n(options = {}) {
  const composer = createComposer(convertComposerOptions(options));
  const vueI18n = {
    id: composer.id,
    get locale() {
      return composer.locale.value;
    },
    set locale(val) {
      composer.locale.value = val;
    },
    get fallbackLocale() {
      return composer.fallbackLocale.value;
    },
    set fallbackLocale(val) {
      composer.fallbackLocale.value = val;
    },
    get messages() {
      return composer.messages.value;
    },
    get datetimeFormats() {
      return composer.datetimeFormats.value;
    },
    get numberFormats() {
      return composer.numberFormats.value;
    },
    get availableLocales() {
      return composer.availableLocales;
    },
    get formatter() {
      return {
        interpolate() {
          return [];
        }
      };
    },
    set formatter(val) {
    },
    get missing() {
      return composer.getMissingHandler();
    },
    set missing(handler) {
      composer.setMissingHandler(handler);
    },
    get silentTranslationWarn() {
      return isBoolean(composer.missingWarn) ? !composer.missingWarn : composer.missingWarn;
    },
    set silentTranslationWarn(val) {
      composer.missingWarn = isBoolean(val) ? !val : val;
    },
    get silentFallbackWarn() {
      return isBoolean(composer.fallbackWarn) ? !composer.fallbackWarn : composer.fallbackWarn;
    },
    set silentFallbackWarn(val) {
      composer.fallbackWarn = isBoolean(val) ? !val : val;
    },
    get modifiers() {
      return composer.modifiers;
    },
    get formatFallbackMessages() {
      return composer.fallbackFormat;
    },
    set formatFallbackMessages(val) {
      composer.fallbackFormat = val;
    },
    get postTranslation() {
      return composer.getPostTranslationHandler();
    },
    set postTranslation(handler) {
      composer.setPostTranslationHandler(handler);
    },
    get sync() {
      return composer.inheritLocale;
    },
    set sync(val) {
      composer.inheritLocale = val;
    },
    get warnHtmlInMessage() {
      return composer.warnHtmlMessage ? "warn" : "off";
    },
    set warnHtmlInMessage(val) {
      composer.warnHtmlMessage = val !== "off";
    },
    get escapeParameterHtml() {
      return composer.escapeParameter;
    },
    set escapeParameterHtml(val) {
      composer.escapeParameter = val;
    },
    get preserveDirectiveContent() {
      return true;
    },
    set preserveDirectiveContent(val) {
    },
    get pluralizationRules() {
      return composer.pluralRules || {};
    },
    __composer: composer,
    t(...args) {
      const [arg1, arg2, arg3] = args;
      const options2 = {};
      let list = null;
      let named = null;
      if (!isString$3(arg1)) {
        throw createI18nError(15);
      }
      const key = arg1;
      if (isString$3(arg2)) {
        options2.locale = arg2;
      } else if (isArray$2(arg2)) {
        list = arg2;
      } else if (isPlainObject$2(arg2)) {
        named = arg2;
      }
      if (isArray$2(arg3)) {
        list = arg3;
      } else if (isPlainObject$2(arg3)) {
        named = arg3;
      }
      return composer.t(key, list || named || {}, options2);
    },
    rt(...args) {
      return composer.rt(...args);
    },
    tc(...args) {
      const [arg1, arg2, arg3] = args;
      const options2 = { plural: 1 };
      let list = null;
      let named = null;
      if (!isString$3(arg1)) {
        throw createI18nError(15);
      }
      const key = arg1;
      if (isString$3(arg2)) {
        options2.locale = arg2;
      } else if (isNumber$3(arg2)) {
        options2.plural = arg2;
      } else if (isArray$2(arg2)) {
        list = arg2;
      } else if (isPlainObject$2(arg2)) {
        named = arg2;
      }
      if (isString$3(arg3)) {
        options2.locale = arg3;
      } else if (isArray$2(arg3)) {
        list = arg3;
      } else if (isPlainObject$2(arg3)) {
        named = arg3;
      }
      return composer.t(key, list || named || {}, options2);
    },
    te(key, locale2) {
      return composer.te(key, locale2);
    },
    tm(key) {
      return composer.tm(key);
    },
    getLocaleMessage(locale2) {
      return composer.getLocaleMessage(locale2);
    },
    setLocaleMessage(locale2, message) {
      composer.setLocaleMessage(locale2, message);
    },
    mergeLocaleMessage(locale2, message) {
      composer.mergeLocaleMessage(locale2, message);
    },
    d(...args) {
      return composer.d(...args);
    },
    getDateTimeFormat(locale2) {
      return composer.getDateTimeFormat(locale2);
    },
    setDateTimeFormat(locale2, format2) {
      composer.setDateTimeFormat(locale2, format2);
    },
    mergeDateTimeFormat(locale2, format2) {
      composer.mergeDateTimeFormat(locale2, format2);
    },
    n(...args) {
      return composer.n(...args);
    },
    getNumberFormat(locale2) {
      return composer.getNumberFormat(locale2);
    },
    setNumberFormat(locale2, format2) {
      composer.setNumberFormat(locale2, format2);
    },
    mergeNumberFormat(locale2, format2) {
      composer.mergeNumberFormat(locale2, format2);
    },
    getChoiceIndex(choice, choicesLength) {
      return -1;
    },
    __onComponentInstanceCreated(target) {
      const { componentInstanceCreatedListener } = options;
      if (componentInstanceCreatedListener) {
        componentInstanceCreatedListener(target, vueI18n);
      }
    }
  };
  return vueI18n;
}
const baseFormatProps = {
  tag: {
    type: [String, Object]
  },
  locale: {
    type: String
  },
  scope: {
    type: String,
    validator: (val) => val === "parent" || val === "global",
    default: "parent"
  },
  i18n: {
    type: Object
  }
};
const Translation = {
  name: "i18n-t",
  props: assign$1({
    keypath: {
      type: String,
      required: true
    },
    plural: {
      type: [Number, String],
      validator: (val) => isNumber$3(val) || !isNaN(val)
    }
  }, baseFormatProps),
  setup(props2, context) {
    const { slots, attrs } = context;
    const i18n2 = props2.i18n || useI18n({
      useScope: props2.scope,
      __useComponent: true
    });
    const keys2 = Object.keys(slots).filter((key) => key !== "_");
    return () => {
      const options = {};
      if (props2.locale) {
        options.locale = props2.locale;
      }
      if (props2.plural !== void 0) {
        options.plural = isString$3(props2.plural) ? +props2.plural : props2.plural;
      }
      const arg = getInterpolateArg(context, keys2);
      const children = i18n2[TransrateVNodeSymbol](props2.keypath, arg, options);
      const assignedAttrs = assign$1({}, attrs);
      return isString$3(props2.tag) ? h(props2.tag, assignedAttrs, children) : isObject$4(props2.tag) ? h(props2.tag, assignedAttrs, children) : h(Fragment, assignedAttrs, children);
    };
  }
};
function getInterpolateArg({ slots }, keys2) {
  if (keys2.length === 1 && keys2[0] === "default") {
    return slots.default ? slots.default() : [];
  } else {
    return keys2.reduce((arg, key) => {
      const slot = slots[key];
      if (slot) {
        arg[key] = slot();
      }
      return arg;
    }, {});
  }
}
function renderFormatter(props2, context, slotKeys, partFormatter) {
  const { slots, attrs } = context;
  return () => {
    const options = { part: true };
    let overrides = {};
    if (props2.locale) {
      options.locale = props2.locale;
    }
    if (isString$3(props2.format)) {
      options.key = props2.format;
    } else if (isObject$4(props2.format)) {
      if (isString$3(props2.format.key)) {
        options.key = props2.format.key;
      }
      overrides = Object.keys(props2.format).reduce((options2, prop) => {
        return slotKeys.includes(prop) ? assign$1({}, options2, { [prop]: props2.format[prop] }) : options2;
      }, {});
    }
    const parts = partFormatter(...[props2.value, options, overrides]);
    let children = [options.key];
    if (isArray$2(parts)) {
      children = parts.map((part, index2) => {
        const slot = slots[part.type];
        return slot ? slot({ [part.type]: part.value, index: index2, parts }) : [part.value];
      });
    } else if (isString$3(parts)) {
      children = [parts];
    }
    const assignedAttrs = assign$1({}, attrs);
    return isString$3(props2.tag) ? h(props2.tag, assignedAttrs, children) : isObject$4(props2.tag) ? h(props2.tag, assignedAttrs, children) : h(Fragment, assignedAttrs, children);
  };
}
const NUMBER_FORMAT_KEYS = [
  "localeMatcher",
  "style",
  "unit",
  "unitDisplay",
  "currency",
  "currencyDisplay",
  "useGrouping",
  "numberingSystem",
  "minimumIntegerDigits",
  "minimumFractionDigits",
  "maximumFractionDigits",
  "minimumSignificantDigits",
  "maximumSignificantDigits",
  "notation",
  "formatMatcher"
];
const NumberFormat = {
  name: "i18n-n",
  props: assign$1({
    value: {
      type: Number,
      required: true
    },
    format: {
      type: [String, Object]
    }
  }, baseFormatProps),
  setup(props2, context) {
    const i18n2 = props2.i18n || useI18n({ useScope: "parent", __useComponent: true });
    return renderFormatter(props2, context, NUMBER_FORMAT_KEYS, (...args) => i18n2[NumberPartsSymbol](...args));
  }
};
const DATETIME_FORMAT_KEYS = [
  "dateStyle",
  "timeStyle",
  "fractionalSecondDigits",
  "calendar",
  "dayPeriod",
  "numberingSystem",
  "localeMatcher",
  "timeZone",
  "hour12",
  "hourCycle",
  "formatMatcher",
  "weekday",
  "era",
  "year",
  "month",
  "day",
  "hour",
  "minute",
  "second",
  "timeZoneName"
];
const DatetimeFormat = {
  name: "i18n-d",
  props: assign$1({
    value: {
      type: [Number, Date],
      required: true
    },
    format: {
      type: [String, Object]
    }
  }, baseFormatProps),
  setup(props2, context) {
    const i18n2 = props2.i18n || useI18n({ useScope: "parent", __useComponent: true });
    return renderFormatter(props2, context, DATETIME_FORMAT_KEYS, (...args) => i18n2[DatetimePartsSymbol](...args));
  }
};
function getComposer$2(i18n2, instance2) {
  const i18nInternal = i18n2;
  if (i18n2.mode === "composition") {
    return i18nInternal.__getInstance(instance2) || i18n2.global;
  } else {
    const vueI18n = i18nInternal.__getInstance(instance2);
    return vueI18n != null ? vueI18n.__composer : i18n2.global.__composer;
  }
}
function vTDirective(i18n2) {
  const bind4 = (el, { instance: instance2, value, modifiers }) => {
    if (!instance2 || !instance2.$) {
      throw createI18nError(22);
    }
    const composer = getComposer$2(i18n2, instance2.$);
    const parsedValue = parseValue(value);
    el.textContent = composer.t(...makeParams(parsedValue));
  };
  return {
    beforeMount: bind4,
    beforeUpdate: bind4
  };
}
function parseValue(value) {
  if (isString$3(value)) {
    return { path: value };
  } else if (isPlainObject$2(value)) {
    if (!("path" in value)) {
      throw createI18nError(19, "path");
    }
    return value;
  } else {
    throw createI18nError(20);
  }
}
function makeParams(value) {
  const { path, locale: locale2, args, choice, plural } = value;
  const options = {};
  const named = args || {};
  if (isString$3(locale2)) {
    options.locale = locale2;
  }
  if (isNumber$3(choice)) {
    options.plural = choice;
  }
  if (isNumber$3(plural)) {
    options.plural = plural;
  }
  return [path, named, options];
}
function apply(app, i18n2, ...options) {
  const pluginOptions = isPlainObject$2(options[0]) ? options[0] : {};
  const useI18nComponentName = !!pluginOptions.useI18nComponentName;
  const globalInstall = isBoolean(pluginOptions.globalInstall) ? pluginOptions.globalInstall : true;
  if (globalInstall) {
    app.component(!useI18nComponentName ? Translation.name : "i18n", Translation);
    app.component(NumberFormat.name, NumberFormat);
    app.component(DatetimeFormat.name, DatetimeFormat);
  }
  app.directive("t", vTDirective(i18n2));
}
function defineMixin(vuei18n, composer, i18n2) {
  return {
    beforeCreate() {
      const instance2 = getCurrentInstance();
      if (!instance2) {
        throw createI18nError(22);
      }
      const options = this.$options;
      if (options.i18n) {
        const optionsI18n = options.i18n;
        if (options.__i18n) {
          optionsI18n.__i18n = options.__i18n;
        }
        optionsI18n.__root = composer;
        if (this === this.$root) {
          this.$i18n = mergeToRoot(vuei18n, optionsI18n);
        } else {
          optionsI18n.__injectWithOption = true;
          this.$i18n = createVueI18n(optionsI18n);
        }
      } else if (options.__i18n) {
        if (this === this.$root) {
          this.$i18n = mergeToRoot(vuei18n, options);
        } else {
          this.$i18n = createVueI18n({
            __i18n: options.__i18n,
            __injectWithOption: true,
            __root: composer
          });
        }
      } else {
        this.$i18n = vuei18n;
      }
      vuei18n.__onComponentInstanceCreated(this.$i18n);
      i18n2.__setInstance(instance2, this.$i18n);
      this.$t = (...args) => this.$i18n.t(...args);
      this.$rt = (...args) => this.$i18n.rt(...args);
      this.$tc = (...args) => this.$i18n.tc(...args);
      this.$te = (key, locale2) => this.$i18n.te(key, locale2);
      this.$d = (...args) => this.$i18n.d(...args);
      this.$n = (...args) => this.$i18n.n(...args);
      this.$tm = (key) => this.$i18n.tm(key);
    },
    mounted() {
    },
    beforeUnmount() {
      const instance2 = getCurrentInstance();
      if (!instance2) {
        throw createI18nError(22);
      }
      delete this.$t;
      delete this.$rt;
      delete this.$tc;
      delete this.$te;
      delete this.$d;
      delete this.$n;
      delete this.$tm;
      i18n2.__deleteInstance(instance2);
      delete this.$i18n;
    }
  };
}
function mergeToRoot(root, options) {
  root.locale = options.locale || root.locale;
  root.fallbackLocale = options.fallbackLocale || root.fallbackLocale;
  root.missing = options.missing || root.missing;
  root.silentTranslationWarn = options.silentTranslationWarn || root.silentFallbackWarn;
  root.silentFallbackWarn = options.silentFallbackWarn || root.silentFallbackWarn;
  root.formatFallbackMessages = options.formatFallbackMessages || root.formatFallbackMessages;
  root.postTranslation = options.postTranslation || root.postTranslation;
  root.warnHtmlInMessage = options.warnHtmlInMessage || root.warnHtmlInMessage;
  root.escapeParameterHtml = options.escapeParameterHtml || root.escapeParameterHtml;
  root.sync = options.sync || root.sync;
  root.__composer[SetPluralRulesSymbol](options.pluralizationRules || root.pluralizationRules);
  const messages = getLocaleMessages(root.locale, {
    messages: options.messages,
    __i18n: options.__i18n
  });
  Object.keys(messages).forEach((locale2) => root.mergeLocaleMessage(locale2, messages[locale2]));
  if (options.datetimeFormats) {
    Object.keys(options.datetimeFormats).forEach((locale2) => root.mergeDateTimeFormat(locale2, options.datetimeFormats[locale2]));
  }
  if (options.numberFormats) {
    Object.keys(options.numberFormats).forEach((locale2) => root.mergeNumberFormat(locale2, options.numberFormats[locale2]));
  }
  return root;
}
function createI18n(options = {}) {
  const __legacyMode = __VUE_I18N_LEGACY_API__ && isBoolean(options.legacy) ? options.legacy : __VUE_I18N_LEGACY_API__;
  const __globalInjection = !!options.globalInjection;
  const __instances = /* @__PURE__ */ new Map();
  const __global = __VUE_I18N_LEGACY_API__ && __legacyMode ? createVueI18n(options) : createComposer(options);
  const symbol = makeSymbol("");
  const i18n2 = {
    get mode() {
      return __VUE_I18N_LEGACY_API__ ? __legacyMode ? "legacy" : "composition" : "composition";
    },
    async install(app, ...options2) {
      app.__VUE_I18N_SYMBOL__ = symbol;
      app.provide(app.__VUE_I18N_SYMBOL__, i18n2);
      if (!__legacyMode && __globalInjection) {
        injectGlobalFields(app, i18n2.global);
      }
      if (__VUE_I18N_FULL_INSTALL__) {
        apply(app, i18n2, ...options2);
      }
      if (__VUE_I18N_LEGACY_API__ && __legacyMode) {
        app.mixin(defineMixin(__global, __global.__composer, i18n2));
      }
    },
    get global() {
      return __global;
    },
    __instances,
    __getInstance(component) {
      return __instances.get(component) || null;
    },
    __setInstance(component, instance2) {
      __instances.set(component, instance2);
    },
    __deleteInstance(component) {
      __instances.delete(component);
    }
  };
  return i18n2;
}
function useI18n(options = {}) {
  const instance2 = getCurrentInstance();
  if (instance2 == null) {
    throw createI18nError(16);
  }
  if (!instance2.appContext.app.__VUE_I18N_SYMBOL__) {
    throw createI18nError(17);
  }
  const i18n2 = inject(instance2.appContext.app.__VUE_I18N_SYMBOL__);
  if (!i18n2) {
    throw createI18nError(22);
  }
  const global2 = i18n2.mode === "composition" ? i18n2.global : i18n2.global.__composer;
  const scope = isEmptyObject(options) ? "__i18n" in instance2.type ? "local" : "global" : !options.useScope ? "local" : options.useScope;
  if (scope === "global") {
    let messages = isObject$4(options.messages) ? options.messages : {};
    if ("__i18nGlobal" in instance2.type) {
      messages = getLocaleMessages(global2.locale.value, {
        messages,
        __i18n: instance2.type.__i18nGlobal
      });
    }
    const locales2 = Object.keys(messages);
    if (locales2.length) {
      locales2.forEach((locale2) => {
        global2.mergeLocaleMessage(locale2, messages[locale2]);
      });
    }
    if (isObject$4(options.datetimeFormats)) {
      const locales3 = Object.keys(options.datetimeFormats);
      if (locales3.length) {
        locales3.forEach((locale2) => {
          global2.mergeDateTimeFormat(locale2, options.datetimeFormats[locale2]);
        });
      }
    }
    if (isObject$4(options.numberFormats)) {
      const locales3 = Object.keys(options.numberFormats);
      if (locales3.length) {
        locales3.forEach((locale2) => {
          global2.mergeNumberFormat(locale2, options.numberFormats[locale2]);
        });
      }
    }
    return global2;
  }
  if (scope === "parent") {
    let composer2 = getComposer(i18n2, instance2, options.__useComponent);
    if (composer2 == null) {
      composer2 = global2;
    }
    return composer2;
  }
  if (i18n2.mode === "legacy") {
    throw createI18nError(18);
  }
  const i18nInternal = i18n2;
  let composer = i18nInternal.__getInstance(instance2);
  if (composer == null) {
    const type = instance2.type;
    const composerOptions = assign$1({}, options);
    if (type.__i18n) {
      composerOptions.__i18n = type.__i18n;
    }
    if (global2) {
      composerOptions.__root = global2;
    }
    composer = createComposer(composerOptions);
    setupLifeCycle(i18nInternal, instance2);
    i18nInternal.__setInstance(instance2, composer);
  }
  return composer;
}
function getComposer(i18n2, target, useComponent = false) {
  let composer = null;
  const root = target.root;
  let current = target.parent;
  while (current != null) {
    const i18nInternal = i18n2;
    if (i18n2.mode === "composition") {
      composer = i18nInternal.__getInstance(current);
    } else {
      const vueI18n = i18nInternal.__getInstance(current);
      if (vueI18n != null) {
        composer = vueI18n.__composer;
      }
      if (useComponent && composer && !composer[InejctWithOption]) {
        composer = null;
      }
    }
    if (composer != null) {
      break;
    }
    if (root === current) {
      break;
    }
    current = current.parent;
  }
  return composer;
}
function setupLifeCycle(i18n2, target, composer) {
  onMounted(() => {
  }, target);
  onUnmounted(() => {
    i18n2.__deleteInstance(target);
  }, target);
}
const globalExportProps = [
  "locale",
  "fallbackLocale",
  "availableLocales"
];
const globalExportMethods = ["t", "rt", "d", "n", "tm"];
function injectGlobalFields(app, composer) {
  const i18n2 = /* @__PURE__ */ Object.create(null);
  globalExportProps.forEach((prop) => {
    const desc = Object.getOwnPropertyDescriptor(composer, prop);
    if (!desc) {
      throw createI18nError(22);
    }
    const wrap = isRef(desc.value) ? {
      get() {
        return desc.value.value;
      },
      set(val) {
        desc.value.value = val;
      }
    } : {
      get() {
        return desc.get && desc.get();
      }
    };
    Object.defineProperty(i18n2, prop, wrap);
  });
  app.config.globalProperties.$i18n = i18n2;
  globalExportMethods.forEach((method) => {
    const desc = Object.getOwnPropertyDescriptor(composer, method);
    if (!desc || !desc.value) {
      throw createI18nError(22);
    }
    Object.defineProperty(app.config.globalProperties, `$${method}`, desc);
  });
}
registerMessageCompiler(compileToFunction);
{
  initFeatureFlags();
}
if (__INTLIFY_PROD_DEVTOOLS__) {
  const target = getGlobalThis();
  target.__INTLIFY__ = true;
  setDevToolsHook(target.__INTLIFY_DEVTOOLS_GLOBAL_HOOK__);
}
/**!
 * Sortable 1.14.0
 * @author	RubaXa   <trash@rubaxa.org>
 * @author	owenm    <owen23355@gmail.com>
 * @license MIT
 */
function ownKeys$1(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2$1(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    if (i2 % 2) {
      ownKeys$1(Object(source2), true).forEach(function(key) {
        _defineProperty$1(target, key, source2[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
    } else {
      ownKeys$1(Object(source2)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
      });
    }
  }
  return target;
}
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$1 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$1(obj);
}
function _defineProperty$1(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source2 = arguments[i2];
      for (var key in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key)) {
          target[key] = source2[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutPropertiesLoose(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source2[key];
  }
  return target;
}
function _objectWithoutProperties(source2, excluded) {
  if (source2 == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source2, excluded);
  var key, i2;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source2);
    for (i2 = 0; i2 < sourceSymbolKeys.length; i2++) {
      key = sourceSymbolKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source2, key))
        continue;
      target[key] = source2[key];
    }
  }
  return target;
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var version$1 = "1.14.0";
function userAgent(pattern) {
  if (typeof window !== "undefined" && window.navigator) {
    return !!/* @__PURE__ */ navigator.userAgent.match(pattern);
  }
}
var IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i);
var Edge = userAgent(/Edge/i);
var FireFox = userAgent(/firefox/i);
var Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);
var IOS = userAgent(/iP(ad|od|hone)/i);
var ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);
var captureMode = {
  capture: false,
  passive: false
};
function on(el, event, fn) {
  el.addEventListener(event, fn, !IE11OrLess && captureMode);
}
function off(el, event, fn) {
  el.removeEventListener(event, fn, !IE11OrLess && captureMode);
}
function matches(el, selector) {
  if (!selector)
    return;
  selector[0] === ">" && (selector = selector.substring(1));
  if (el) {
    try {
      if (el.matches) {
        return el.matches(selector);
      } else if (el.msMatchesSelector) {
        return el.msMatchesSelector(selector);
      } else if (el.webkitMatchesSelector) {
        return el.webkitMatchesSelector(selector);
      }
    } catch (_2) {
      return false;
    }
  }
  return false;
}
function getParentOrHost(el) {
  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;
}
function closest(el, selector, ctx, includeCTX) {
  if (el) {
    ctx = ctx || document;
    do {
      if (selector != null && (selector[0] === ">" ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {
        return el;
      }
      if (el === ctx)
        break;
    } while (el = getParentOrHost(el));
  }
  return null;
}
var R_SPACE = /\s+/g;
function toggleClass$1(el, name, state) {
  if (el && name) {
    if (el.classList) {
      el.classList[state ? "add" : "remove"](name);
    } else {
      var className = (" " + el.className + " ").replace(R_SPACE, " ").replace(" " + name + " ", " ");
      el.className = (className + (state ? " " + name : "")).replace(R_SPACE, " ");
    }
  }
}
function css(el, prop, val) {
  var style = el && el.style;
  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, "");
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }
      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf("webkit") === -1) {
        prop = "-webkit-" + prop;
      }
      style[prop] = val + (typeof val === "string" ? "" : "px");
    }
  }
}
function matrix(el, selfOnly) {
  var appliedTransforms = "";
  if (typeof el === "string") {
    appliedTransforms = el;
  } else {
    do {
      var transform2 = css(el, "transform");
      if (transform2 && transform2 !== "none") {
        appliedTransforms = transform2 + " " + appliedTransforms;
      }
    } while (!selfOnly && (el = el.parentNode));
  }
  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;
  return matrixFn && new matrixFn(appliedTransforms);
}
function find(ctx, tagName, iterator) {
  if (ctx) {
    var list = ctx.getElementsByTagName(tagName), i2 = 0, n = list.length;
    if (iterator) {
      for (; i2 < n; i2++) {
        iterator(list[i2], i2);
      }
    }
    return list;
  }
  return [];
}
function getWindowScrollingElement() {
  var scrollingElement = document.scrollingElement;
  if (scrollingElement) {
    return scrollingElement;
  } else {
    return document.documentElement;
  }
}
function getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {
  if (!el.getBoundingClientRect && el !== window)
    return;
  var elRect, top, left, bottom, right, height, width;
  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {
    elRect = el.getBoundingClientRect();
    top = elRect.top;
    left = elRect.left;
    bottom = elRect.bottom;
    right = elRect.right;
    height = elRect.height;
    width = elRect.width;
  } else {
    top = 0;
    left = 0;
    bottom = window.innerHeight;
    right = window.innerWidth;
    height = window.innerHeight;
    width = window.innerWidth;
  }
  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {
    container = container || el.parentNode;
    if (!IE11OrLess) {
      do {
        if (container && container.getBoundingClientRect && (css(container, "transform") !== "none" || relativeToNonStaticParent && css(container, "position") !== "static")) {
          var containerRect = container.getBoundingClientRect();
          top -= containerRect.top + parseInt(css(container, "border-top-width"));
          left -= containerRect.left + parseInt(css(container, "border-left-width"));
          bottom = top + elRect.height;
          right = left + elRect.width;
          break;
        }
      } while (container = container.parentNode);
    }
  }
  if (undoScale && el !== window) {
    var elMatrix = matrix(container || el), scaleX2 = elMatrix && elMatrix.a, scaleY2 = elMatrix && elMatrix.d;
    if (elMatrix) {
      top /= scaleY2;
      left /= scaleX2;
      width /= scaleX2;
      height /= scaleY2;
      bottom = top + height;
      right = left + width;
    }
  }
  return {
    top,
    left,
    bottom,
    right,
    width,
    height
  };
}
function isScrolledPast(el, elSide, parentSide) {
  var parent = getParentAutoScrollElement(el, true), elSideVal = getRect(el)[elSide];
  while (parent) {
    var parentSideVal = getRect(parent)[parentSide], visible = void 0;
    if (parentSide === "top" || parentSide === "left") {
      visible = elSideVal >= parentSideVal;
    } else {
      visible = elSideVal <= parentSideVal;
    }
    if (!visible)
      return parent;
    if (parent === getWindowScrollingElement())
      break;
    parent = getParentAutoScrollElement(parent, false);
  }
  return false;
}
function getChild(el, childNum, options, includeDragEl) {
  var currentChild = 0, i2 = 0, children = el.children;
  while (i2 < children.length) {
    if (children[i2].style.display !== "none" && children[i2] !== Sortable.ghost && (includeDragEl || children[i2] !== Sortable.dragged) && closest(children[i2], options.draggable, el, false)) {
      if (currentChild === childNum) {
        return children[i2];
      }
      currentChild++;
    }
    i2++;
  }
  return null;
}
function lastChild(el, selector) {
  var last = el.lastElementChild;
  while (last && (last === Sortable.ghost || css(last, "display") === "none" || selector && !matches(last, selector))) {
    last = last.previousElementSibling;
  }
  return last || null;
}
function index$2(el, selector) {
  var index2 = 0;
  if (!el || !el.parentNode) {
    return -1;
  }
  while (el = el.previousElementSibling) {
    if (el.nodeName.toUpperCase() !== "TEMPLATE" && el !== Sortable.clone && (!selector || matches(el, selector))) {
      index2++;
    }
  }
  return index2;
}
function getRelativeScrollOffset(el) {
  var offsetLeft = 0, offsetTop = 0, winScroller = getWindowScrollingElement();
  if (el) {
    do {
      var elMatrix = matrix(el), scaleX2 = elMatrix.a, scaleY2 = elMatrix.d;
      offsetLeft += el.scrollLeft * scaleX2;
      offsetTop += el.scrollTop * scaleY2;
    } while (el !== winScroller && (el = el.parentNode));
  }
  return [offsetLeft, offsetTop];
}
function indexOfObject(arr, obj) {
  for (var i2 in arr) {
    if (!arr.hasOwnProperty(i2))
      continue;
    for (var key in obj) {
      if (obj.hasOwnProperty(key) && obj[key] === arr[i2][key])
        return Number(i2);
    }
  }
  return -1;
}
function getParentAutoScrollElement(el, includeSelf) {
  if (!el || !el.getBoundingClientRect)
    return getWindowScrollingElement();
  var elem = el;
  var gotSelf = false;
  do {
    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {
      var elemCSS = css(elem);
      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == "auto" || elemCSS.overflowX == "scroll") || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == "auto" || elemCSS.overflowY == "scroll")) {
        if (!elem.getBoundingClientRect || elem === document.body)
          return getWindowScrollingElement();
        if (gotSelf || includeSelf)
          return elem;
        gotSelf = true;
      }
    }
  } while (elem = elem.parentNode);
  return getWindowScrollingElement();
}
function extend$2(dst, src) {
  if (dst && src) {
    for (var key in src) {
      if (src.hasOwnProperty(key)) {
        dst[key] = src[key];
      }
    }
  }
  return dst;
}
function isRectEqual(rect1, rect2) {
  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);
}
var _throttleTimeout;
function throttle(callback, ms) {
  return function() {
    if (!_throttleTimeout) {
      var args = arguments, _this = this;
      if (args.length === 1) {
        callback.call(_this, args[0]);
      } else {
        callback.apply(_this, args);
      }
      _throttleTimeout = setTimeout(function() {
        _throttleTimeout = void 0;
      }, ms);
    }
  };
}
function cancelThrottle() {
  clearTimeout(_throttleTimeout);
  _throttleTimeout = void 0;
}
function scrollBy(el, x, y) {
  el.scrollLeft += x;
  el.scrollTop += y;
}
function clone$2(el) {
  var Polymer = window.Polymer;
  var $ = window.jQuery || window.Zepto;
  if (Polymer && Polymer.dom) {
    return Polymer.dom(el).cloneNode(true);
  } else if ($) {
    return $(el).clone(true)[0];
  } else {
    return el.cloneNode(true);
  }
}
function setRect(el, rect) {
  css(el, "position", "absolute");
  css(el, "top", rect.top);
  css(el, "left", rect.left);
  css(el, "width", rect.width);
  css(el, "height", rect.height);
}
function unsetRect(el) {
  css(el, "position", "");
  css(el, "top", "");
  css(el, "left", "");
  css(el, "width", "");
  css(el, "height", "");
}
var expando = "Sortable" + new Date().getTime();
function AnimationStateManager() {
  var animationStates = [], animationCallbackId;
  return {
    captureAnimationState: function captureAnimationState() {
      animationStates = [];
      if (!this.options.animation)
        return;
      var children = [].slice.call(this.el.children);
      children.forEach(function(child) {
        if (css(child, "display") === "none" || child === Sortable.ghost)
          return;
        animationStates.push({
          target: child,
          rect: getRect(child)
        });
        var fromRect = _objectSpread2$1({}, animationStates[animationStates.length - 1].rect);
        if (child.thisAnimationDuration) {
          var childMatrix = matrix(child, true);
          if (childMatrix) {
            fromRect.top -= childMatrix.f;
            fromRect.left -= childMatrix.e;
          }
        }
        child.fromRect = fromRect;
      });
    },
    addAnimationState: function addAnimationState(state) {
      animationStates.push(state);
    },
    removeAnimationState: function removeAnimationState(target) {
      animationStates.splice(indexOfObject(animationStates, {
        target
      }), 1);
    },
    animateAll: function animateAll(callback) {
      var _this = this;
      if (!this.options.animation) {
        clearTimeout(animationCallbackId);
        if (typeof callback === "function")
          callback();
        return;
      }
      var animating = false, animationTime = 0;
      animationStates.forEach(function(state) {
        var time = 0, target = state.target, fromRect = target.fromRect, toRect = getRect(target), prevFromRect = target.prevFromRect, prevToRect = target.prevToRect, animatingRect = state.rect, targetMatrix = matrix(target, true);
        if (targetMatrix) {
          toRect.top -= targetMatrix.f;
          toRect.left -= targetMatrix.e;
        }
        target.toRect = toRect;
        if (target.thisAnimationDuration) {
          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {
            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);
          }
        }
        if (!isRectEqual(toRect, fromRect)) {
          target.prevFromRect = fromRect;
          target.prevToRect = toRect;
          if (!time) {
            time = _this.options.animation;
          }
          _this.animate(target, animatingRect, toRect, time);
        }
        if (time) {
          animating = true;
          animationTime = Math.max(animationTime, time);
          clearTimeout(target.animationResetTimer);
          target.animationResetTimer = setTimeout(function() {
            target.animationTime = 0;
            target.prevFromRect = null;
            target.fromRect = null;
            target.prevToRect = null;
            target.thisAnimationDuration = null;
          }, time);
          target.thisAnimationDuration = time;
        }
      });
      clearTimeout(animationCallbackId);
      if (!animating) {
        if (typeof callback === "function")
          callback();
      } else {
        animationCallbackId = setTimeout(function() {
          if (typeof callback === "function")
            callback();
        }, animationTime);
      }
      animationStates = [];
    },
    animate: function animate(target, currentRect, toRect, duration) {
      if (duration) {
        css(target, "transition", "");
        css(target, "transform", "");
        var elMatrix = matrix(this.el), scaleX2 = elMatrix && elMatrix.a, scaleY2 = elMatrix && elMatrix.d, translateX = (currentRect.left - toRect.left) / (scaleX2 || 1), translateY = (currentRect.top - toRect.top) / (scaleY2 || 1);
        target.animatingX = !!translateX;
        target.animatingY = !!translateY;
        css(target, "transform", "translate3d(" + translateX + "px," + translateY + "px,0)");
        this.forRepaintDummy = repaint(target);
        css(target, "transition", "transform " + duration + "ms" + (this.options.easing ? " " + this.options.easing : ""));
        css(target, "transform", "translate3d(0,0,0)");
        typeof target.animated === "number" && clearTimeout(target.animated);
        target.animated = setTimeout(function() {
          css(target, "transition", "");
          css(target, "transform", "");
          target.animated = false;
          target.animatingX = false;
          target.animatingY = false;
        }, duration);
      }
    }
  };
}
function repaint(target) {
  return target.offsetWidth;
}
function calculateRealTime(animatingRect, fromRect, toRect, options) {
  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;
}
var plugins = [];
var defaults$5 = {
  initializeByDefault: true
};
var PluginManager = {
  mount: function mount(plugin) {
    for (var option2 in defaults$5) {
      if (defaults$5.hasOwnProperty(option2) && !(option2 in plugin)) {
        plugin[option2] = defaults$5[option2];
      }
    }
    plugins.forEach(function(p) {
      if (p.pluginName === plugin.pluginName) {
        throw "Sortable: Cannot mount plugin ".concat(plugin.pluginName, " more than once");
      }
    });
    plugins.push(plugin);
  },
  pluginEvent: function pluginEvent2(eventName, sortable, evt) {
    var _this = this;
    this.eventCanceled = false;
    evt.cancel = function() {
      _this.eventCanceled = true;
    };
    var eventNameGlobal = eventName + "Global";
    plugins.forEach(function(plugin) {
      if (!sortable[plugin.pluginName])
        return;
      if (sortable[plugin.pluginName][eventNameGlobal]) {
        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2$1({
          sortable
        }, evt));
      }
      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {
        sortable[plugin.pluginName][eventName](_objectSpread2$1({
          sortable
        }, evt));
      }
    });
  },
  initializePlugins: function initializePlugins(sortable, el, defaults2, options) {
    plugins.forEach(function(plugin) {
      var pluginName = plugin.pluginName;
      if (!sortable.options[pluginName] && !plugin.initializeByDefault)
        return;
      var initialized = new plugin(sortable, el, sortable.options);
      initialized.sortable = sortable;
      initialized.options = sortable.options;
      sortable[pluginName] = initialized;
      _extends(defaults2, initialized.defaults);
    });
    for (var option2 in sortable.options) {
      if (!sortable.options.hasOwnProperty(option2))
        continue;
      var modified = this.modifyOption(sortable, option2, sortable.options[option2]);
      if (typeof modified !== "undefined") {
        sortable.options[option2] = modified;
      }
    }
  },
  getEventProperties: function getEventProperties(name, sortable) {
    var eventProperties = {};
    plugins.forEach(function(plugin) {
      if (typeof plugin.eventProperties !== "function")
        return;
      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));
    });
    return eventProperties;
  },
  modifyOption: function modifyOption(sortable, name, value) {
    var modifiedValue;
    plugins.forEach(function(plugin) {
      if (!sortable[plugin.pluginName])
        return;
      if (plugin.optionListeners && typeof plugin.optionListeners[name] === "function") {
        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);
      }
    });
    return modifiedValue;
  }
};
function dispatchEvent$1(_ref) {
  var sortable = _ref.sortable, rootEl2 = _ref.rootEl, name = _ref.name, targetEl = _ref.targetEl, cloneEl2 = _ref.cloneEl, toEl = _ref.toEl, fromEl = _ref.fromEl, oldIndex2 = _ref.oldIndex, newIndex2 = _ref.newIndex, oldDraggableIndex2 = _ref.oldDraggableIndex, newDraggableIndex2 = _ref.newDraggableIndex, originalEvent = _ref.originalEvent, putSortable2 = _ref.putSortable, extraEventProperties = _ref.extraEventProperties;
  sortable = sortable || rootEl2 && rootEl2[expando];
  if (!sortable)
    return;
  var evt, options = sortable.options, onName = "on" + name.charAt(0).toUpperCase() + name.substr(1);
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent(name, {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent("Event");
    evt.initEvent(name, true, true);
  }
  evt.to = toEl || rootEl2;
  evt.from = fromEl || rootEl2;
  evt.item = targetEl || rootEl2;
  evt.clone = cloneEl2;
  evt.oldIndex = oldIndex2;
  evt.newIndex = newIndex2;
  evt.oldDraggableIndex = oldDraggableIndex2;
  evt.newDraggableIndex = newDraggableIndex2;
  evt.originalEvent = originalEvent;
  evt.pullMode = putSortable2 ? putSortable2.lastPutMode : void 0;
  var allEventProperties = _objectSpread2$1(_objectSpread2$1({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));
  for (var option2 in allEventProperties) {
    evt[option2] = allEventProperties[option2];
  }
  if (rootEl2) {
    rootEl2.dispatchEvent(evt);
  }
  if (options[onName]) {
    options[onName].call(sortable, evt);
  }
}
var _excluded = ["evt"];
var pluginEvent = function pluginEvent3(eventName, sortable) {
  var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, originalEvent = _ref.evt, data2 = _objectWithoutProperties(_ref, _excluded);
  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2$1({
    dragEl,
    parentEl,
    ghostEl,
    rootEl,
    nextEl,
    lastDownEl,
    cloneEl,
    cloneHidden,
    dragStarted: moved,
    putSortable,
    activeSortable: Sortable.active,
    originalEvent,
    oldIndex,
    oldDraggableIndex,
    newIndex,
    newDraggableIndex,
    hideGhostForTarget: _hideGhostForTarget,
    unhideGhostForTarget: _unhideGhostForTarget,
    cloneNowHidden: function cloneNowHidden() {
      cloneHidden = true;
    },
    cloneNowShown: function cloneNowShown() {
      cloneHidden = false;
    },
    dispatchSortableEvent: function dispatchSortableEvent(name) {
      _dispatchEvent({
        sortable,
        name,
        originalEvent
      });
    }
  }, data2));
};
function _dispatchEvent(info) {
  dispatchEvent$1(_objectSpread2$1({
    putSortable,
    cloneEl,
    targetEl: dragEl,
    rootEl,
    oldIndex,
    oldDraggableIndex,
    newIndex,
    newDraggableIndex
  }, info));
}
var dragEl, parentEl, ghostEl, rootEl, nextEl, lastDownEl, cloneEl, cloneHidden, oldIndex, newIndex, oldDraggableIndex, newDraggableIndex, activeGroup, putSortable, awaitingDragStarted = false, ignoreNextClick = false, sortables = [], tapEvt, touchEvt, lastDx, lastDy, tapDistanceLeft, tapDistanceTop, moved, lastTarget, lastDirection, pastFirstInvertThresh = false, isCircumstantialInvert = false, targetMoveDistance, ghostRelativeParent, ghostRelativeParentInitialScroll = [], _silent = false, savedInputChecked = [];
var documentExists = typeof document !== "undefined", PositionGhostAbsolutely = IOS, CSSFloatProperty = Edge || IE11OrLess ? "cssFloat" : "float", supportDraggable = documentExists && !ChromeForAndroid && !IOS && "draggable" in document.createElement("div"), supportCssPointerEvents = function() {
  if (!documentExists)
    return;
  if (IE11OrLess) {
    return false;
  }
  var el = document.createElement("x");
  el.style.cssText = "pointer-events:auto";
  return el.style.pointerEvents === "auto";
}(), _detectDirection = function _detectDirection2(el, options) {
  var elCSS = css(el), elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth), child1 = getChild(el, 0, options), child2 = getChild(el, 1, options), firstChildCSS = child1 && css(child1), secondChildCSS = child2 && css(child2), firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width, secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;
  if (elCSS.display === "flex") {
    return elCSS.flexDirection === "column" || elCSS.flexDirection === "column-reverse" ? "vertical" : "horizontal";
  }
  if (elCSS.display === "grid") {
    return elCSS.gridTemplateColumns.split(" ").length <= 1 ? "vertical" : "horizontal";
  }
  if (child1 && firstChildCSS["float"] && firstChildCSS["float"] !== "none") {
    var touchingSideChild2 = firstChildCSS["float"] === "left" ? "left" : "right";
    return child2 && (secondChildCSS.clear === "both" || secondChildCSS.clear === touchingSideChild2) ? "vertical" : "horizontal";
  }
  return child1 && (firstChildCSS.display === "block" || firstChildCSS.display === "flex" || firstChildCSS.display === "table" || firstChildCSS.display === "grid" || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === "none" || child2 && elCSS[CSSFloatProperty] === "none" && firstChildWidth + secondChildWidth > elWidth) ? "vertical" : "horizontal";
}, _dragElInRowColumn = function _dragElInRowColumn2(dragRect, targetRect, vertical) {
  var dragElS1Opp = vertical ? dragRect.left : dragRect.top, dragElS2Opp = vertical ? dragRect.right : dragRect.bottom, dragElOppLength = vertical ? dragRect.width : dragRect.height, targetS1Opp = vertical ? targetRect.left : targetRect.top, targetS2Opp = vertical ? targetRect.right : targetRect.bottom, targetOppLength = vertical ? targetRect.width : targetRect.height;
  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;
}, _detectNearestEmptySortable = function _detectNearestEmptySortable2(x, y) {
  var ret;
  sortables.some(function(sortable) {
    var threshold = sortable[expando].options.emptyInsertThreshold;
    if (!threshold || lastChild(sortable))
      return;
    var rect = getRect(sortable), insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold, insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;
    if (insideHorizontally && insideVertically) {
      return ret = sortable;
    }
  });
  return ret;
}, _prepareGroup = function _prepareGroup2(options) {
  function toFn(value, pull) {
    return function(to2, from2, dragEl2, evt) {
      var sameGroup = to2.options.group.name && from2.options.group.name && to2.options.group.name === from2.options.group.name;
      if (value == null && (pull || sameGroup)) {
        return true;
      } else if (value == null || value === false) {
        return false;
      } else if (pull && value === "clone") {
        return value;
      } else if (typeof value === "function") {
        return toFn(value(to2, from2, dragEl2, evt), pull)(to2, from2, dragEl2, evt);
      } else {
        var otherGroup = (pull ? to2 : from2).options.group.name;
        return value === true || typeof value === "string" && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;
      }
    };
  }
  var group = {};
  var originalGroup = options.group;
  if (!originalGroup || _typeof$1(originalGroup) != "object") {
    originalGroup = {
      name: originalGroup
    };
  }
  group.name = originalGroup.name;
  group.checkPull = toFn(originalGroup.pull, true);
  group.checkPut = toFn(originalGroup.put);
  group.revertClone = originalGroup.revertClone;
  options.group = group;
}, _hideGhostForTarget = function _hideGhostForTarget2() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, "display", "none");
  }
}, _unhideGhostForTarget = function _unhideGhostForTarget2() {
  if (!supportCssPointerEvents && ghostEl) {
    css(ghostEl, "display", "");
  }
};
if (documentExists) {
  document.addEventListener("click", function(evt) {
    if (ignoreNextClick) {
      evt.preventDefault();
      evt.stopPropagation && evt.stopPropagation();
      evt.stopImmediatePropagation && evt.stopImmediatePropagation();
      ignoreNextClick = false;
      return false;
    }
  }, true);
}
var nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent2(evt) {
  if (dragEl) {
    evt = evt.touches ? evt.touches[0] : evt;
    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);
    if (nearest) {
      var event = {};
      for (var i2 in evt) {
        if (evt.hasOwnProperty(i2)) {
          event[i2] = evt[i2];
        }
      }
      event.target = event.rootEl = nearest;
      event.preventDefault = void 0;
      event.stopPropagation = void 0;
      nearest[expando]._onDragOver(event);
    }
  }
};
var _checkOutsideTargetEl = function _checkOutsideTargetEl2(evt) {
  if (dragEl) {
    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
  }
};
function Sortable(el, options) {
  if (!(el && el.nodeType && el.nodeType === 1)) {
    throw "Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(el));
  }
  this.el = el;
  this.options = options = _extends({}, options);
  el[expando] = this;
  var defaults2 = {
    group: null,
    sort: true,
    disabled: false,
    store: null,
    handle: null,
    draggable: /^[uo]l$/i.test(el.nodeName) ? ">li" : ">*",
    swapThreshold: 1,
    invertSwap: false,
    invertedSwapThreshold: null,
    removeCloneOnHide: true,
    direction: function direction() {
      return _detectDirection(el, this.options);
    },
    ghostClass: "sortable-ghost",
    chosenClass: "sortable-chosen",
    dragClass: "sortable-drag",
    ignore: "a, img",
    filter: null,
    preventOnFilter: true,
    animation: 0,
    easing: null,
    setData: function setData2(dataTransfer, dragEl2) {
      dataTransfer.setData("Text", dragEl2.textContent);
    },
    dropBubble: false,
    dragoverBubble: false,
    dataIdAttr: "data-id",
    delay: 0,
    delayOnTouchOnly: false,
    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,
    forceFallback: false,
    fallbackClass: "sortable-fallback",
    fallbackOnBody: false,
    fallbackTolerance: 0,
    fallbackOffset: {
      x: 0,
      y: 0
    },
    supportPointer: Sortable.supportPointer !== false && "PointerEvent" in window && !Safari,
    emptyInsertThreshold: 5
  };
  PluginManager.initializePlugins(this, el, defaults2);
  for (var name in defaults2) {
    !(name in options) && (options[name] = defaults2[name]);
  }
  _prepareGroup(options);
  for (var fn in this) {
    if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
      this[fn] = this[fn].bind(this);
    }
  }
  this.nativeDraggable = options.forceFallback ? false : supportDraggable;
  if (this.nativeDraggable) {
    this.options.touchStartThreshold = 1;
  }
  if (options.supportPointer) {
    on(el, "pointerdown", this._onTapStart);
  } else {
    on(el, "mousedown", this._onTapStart);
    on(el, "touchstart", this._onTapStart);
  }
  if (this.nativeDraggable) {
    on(el, "dragover", this);
    on(el, "dragenter", this);
  }
  sortables.push(this.el);
  options.store && options.store.get && this.sort(options.store.get(this) || []);
  _extends(this, AnimationStateManager());
}
Sortable.prototype = {
  constructor: Sortable,
  _isOutsideThisEl: function _isOutsideThisEl(target) {
    if (!this.el.contains(target) && target !== this.el) {
      lastTarget = null;
    }
  },
  _getDirection: function _getDirection(evt, target) {
    return typeof this.options.direction === "function" ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;
  },
  _onTapStart: function _onTapStart(evt) {
    if (!evt.cancelable)
      return;
    var _this = this, el = this.el, options = this.options, preventOnFilter = options.preventOnFilter, type = evt.type, touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === "touch" && evt, target = (touch || evt).target, originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target, filter = options.filter;
    _saveInputCheckedState(el);
    if (dragEl) {
      return;
    }
    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {
      return;
    }
    if (originalTarget.isContentEditable) {
      return;
    }
    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === "SELECT") {
      return;
    }
    target = closest(target, options.draggable, el, false);
    if (target && target.animated) {
      return;
    }
    if (lastDownEl === target) {
      return;
    }
    oldIndex = index$2(target);
    oldDraggableIndex = index$2(target, options.draggable);
    if (typeof filter === "function") {
      if (filter.call(this, evt, target, this)) {
        _dispatchEvent({
          sortable: _this,
          rootEl: originalTarget,
          name: "filter",
          targetEl: target,
          toEl: el,
          fromEl: el
        });
        pluginEvent("filter", _this, {
          evt
        });
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return;
      }
    } else if (filter) {
      filter = filter.split(",").some(function(criteria) {
        criteria = closest(originalTarget, criteria.trim(), el, false);
        if (criteria) {
          _dispatchEvent({
            sortable: _this,
            rootEl: criteria,
            name: "filter",
            targetEl: target,
            fromEl: el,
            toEl: el
          });
          pluginEvent("filter", _this, {
            evt
          });
          return true;
        }
      });
      if (filter) {
        preventOnFilter && evt.cancelable && evt.preventDefault();
        return;
      }
    }
    if (options.handle && !closest(originalTarget, options.handle, el, false)) {
      return;
    }
    this._prepareDragStart(evt, touch, target);
  },
  _prepareDragStart: function _prepareDragStart(evt, touch, target) {
    var _this = this, el = _this.el, options = _this.options, ownerDocument = el.ownerDocument, dragStartFn;
    if (target && !dragEl && target.parentNode === el) {
      var dragRect = getRect(target);
      rootEl = el;
      dragEl = target;
      parentEl = dragEl.parentNode;
      nextEl = dragEl.nextSibling;
      lastDownEl = target;
      activeGroup = options.group;
      Sortable.dragged = dragEl;
      tapEvt = {
        target: dragEl,
        clientX: (touch || evt).clientX,
        clientY: (touch || evt).clientY
      };
      tapDistanceLeft = tapEvt.clientX - dragRect.left;
      tapDistanceTop = tapEvt.clientY - dragRect.top;
      this._lastX = (touch || evt).clientX;
      this._lastY = (touch || evt).clientY;
      dragEl.style["will-change"] = "all";
      dragStartFn = function dragStartFn2() {
        pluginEvent("delayEnded", _this, {
          evt
        });
        if (Sortable.eventCanceled) {
          _this._onDrop();
          return;
        }
        _this._disableDelayedDragEvents();
        if (!FireFox && _this.nativeDraggable) {
          dragEl.draggable = true;
        }
        _this._triggerDragStart(evt, touch);
        _dispatchEvent({
          sortable: _this,
          name: "choose",
          originalEvent: evt
        });
        toggleClass$1(dragEl, options.chosenClass, true);
      };
      options.ignore.split(",").forEach(function(criteria) {
        find(dragEl, criteria.trim(), _disableDraggable);
      });
      on(ownerDocument, "dragover", nearestEmptyInsertDetectEvent);
      on(ownerDocument, "mousemove", nearestEmptyInsertDetectEvent);
      on(ownerDocument, "touchmove", nearestEmptyInsertDetectEvent);
      on(ownerDocument, "mouseup", _this._onDrop);
      on(ownerDocument, "touchend", _this._onDrop);
      on(ownerDocument, "touchcancel", _this._onDrop);
      if (FireFox && this.nativeDraggable) {
        this.options.touchStartThreshold = 4;
        dragEl.draggable = true;
      }
      pluginEvent("delayStart", this, {
        evt
      });
      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {
        if (Sortable.eventCanceled) {
          this._onDrop();
          return;
        }
        on(ownerDocument, "mouseup", _this._disableDelayedDrag);
        on(ownerDocument, "touchend", _this._disableDelayedDrag);
        on(ownerDocument, "touchcancel", _this._disableDelayedDrag);
        on(ownerDocument, "mousemove", _this._delayedDragTouchMoveHandler);
        on(ownerDocument, "touchmove", _this._delayedDragTouchMoveHandler);
        options.supportPointer && on(ownerDocument, "pointermove", _this._delayedDragTouchMoveHandler);
        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);
      } else {
        dragStartFn();
      }
    }
  },
  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(e) {
    var touch = e.touches ? e.touches[0] : e;
    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {
      this._disableDelayedDrag();
    }
  },
  _disableDelayedDrag: function _disableDelayedDrag() {
    dragEl && _disableDraggable(dragEl);
    clearTimeout(this._dragStartTimer);
    this._disableDelayedDragEvents();
  },
  _disableDelayedDragEvents: function _disableDelayedDragEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, "mouseup", this._disableDelayedDrag);
    off(ownerDocument, "touchend", this._disableDelayedDrag);
    off(ownerDocument, "touchcancel", this._disableDelayedDrag);
    off(ownerDocument, "mousemove", this._delayedDragTouchMoveHandler);
    off(ownerDocument, "touchmove", this._delayedDragTouchMoveHandler);
    off(ownerDocument, "pointermove", this._delayedDragTouchMoveHandler);
  },
  _triggerDragStart: function _triggerDragStart(evt, touch) {
    touch = touch || evt.pointerType == "touch" && evt;
    if (!this.nativeDraggable || touch) {
      if (this.options.supportPointer) {
        on(document, "pointermove", this._onTouchMove);
      } else if (touch) {
        on(document, "touchmove", this._onTouchMove);
      } else {
        on(document, "mousemove", this._onTouchMove);
      }
    } else {
      on(dragEl, "dragend", this);
      on(rootEl, "dragstart", this._onDragStart);
    }
    try {
      if (document.selection) {
        _nextTick(function() {
          document.selection.empty();
        });
      } else {
        window.getSelection().removeAllRanges();
      }
    } catch (err) {
    }
  },
  _dragStarted: function _dragStarted(fallback, evt) {
    awaitingDragStarted = false;
    if (rootEl && dragEl) {
      pluginEvent("dragStarted", this, {
        evt
      });
      if (this.nativeDraggable) {
        on(document, "dragover", _checkOutsideTargetEl);
      }
      var options = this.options;
      !fallback && toggleClass$1(dragEl, options.dragClass, false);
      toggleClass$1(dragEl, options.ghostClass, true);
      Sortable.active = this;
      fallback && this._appendGhost();
      _dispatchEvent({
        sortable: this,
        name: "start",
        originalEvent: evt
      });
    } else {
      this._nulling();
    }
  },
  _emulateDragOver: function _emulateDragOver() {
    if (touchEvt) {
      this._lastX = touchEvt.clientX;
      this._lastY = touchEvt.clientY;
      _hideGhostForTarget();
      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
      var parent = target;
      while (target && target.shadowRoot) {
        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);
        if (target === parent)
          break;
        parent = target;
      }
      dragEl.parentNode[expando]._isOutsideThisEl(target);
      if (parent) {
        do {
          if (parent[expando]) {
            var inserted = void 0;
            inserted = parent[expando]._onDragOver({
              clientX: touchEvt.clientX,
              clientY: touchEvt.clientY,
              target,
              rootEl: parent
            });
            if (inserted && !this.options.dragoverBubble) {
              break;
            }
          }
          target = parent;
        } while (parent = parent.parentNode);
      }
      _unhideGhostForTarget();
    }
  },
  _onTouchMove: function _onTouchMove(evt) {
    if (tapEvt) {
      var options = this.options, fallbackTolerance = options.fallbackTolerance, fallbackOffset = options.fallbackOffset, touch = evt.touches ? evt.touches[0] : evt, ghostMatrix = ghostEl && matrix(ghostEl, true), scaleX2 = ghostEl && ghostMatrix && ghostMatrix.a, scaleY2 = ghostEl && ghostMatrix && ghostMatrix.d, relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent), dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX2 || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX2 || 1), dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY2 || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY2 || 1);
      if (!Sortable.active && !awaitingDragStarted) {
        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {
          return;
        }
        this._onDragStart(evt, true);
      }
      if (ghostEl) {
        if (ghostMatrix) {
          ghostMatrix.e += dx - (lastDx || 0);
          ghostMatrix.f += dy - (lastDy || 0);
        } else {
          ghostMatrix = {
            a: 1,
            b: 0,
            c: 0,
            d: 1,
            e: dx,
            f: dy
          };
        }
        var cssMatrix = "matrix(".concat(ghostMatrix.a, ",").concat(ghostMatrix.b, ",").concat(ghostMatrix.c, ",").concat(ghostMatrix.d, ",").concat(ghostMatrix.e, ",").concat(ghostMatrix.f, ")");
        css(ghostEl, "webkitTransform", cssMatrix);
        css(ghostEl, "mozTransform", cssMatrix);
        css(ghostEl, "msTransform", cssMatrix);
        css(ghostEl, "transform", cssMatrix);
        lastDx = dx;
        lastDy = dy;
        touchEvt = touch;
      }
      evt.cancelable && evt.preventDefault();
    }
  },
  _appendGhost: function _appendGhost() {
    if (!ghostEl) {
      var container = this.options.fallbackOnBody ? document.body : rootEl, rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container), options = this.options;
      if (PositionGhostAbsolutely) {
        ghostRelativeParent = container;
        while (css(ghostRelativeParent, "position") === "static" && css(ghostRelativeParent, "transform") === "none" && ghostRelativeParent !== document) {
          ghostRelativeParent = ghostRelativeParent.parentNode;
        }
        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {
          if (ghostRelativeParent === document)
            ghostRelativeParent = getWindowScrollingElement();
          rect.top += ghostRelativeParent.scrollTop;
          rect.left += ghostRelativeParent.scrollLeft;
        } else {
          ghostRelativeParent = getWindowScrollingElement();
        }
        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);
      }
      ghostEl = dragEl.cloneNode(true);
      toggleClass$1(ghostEl, options.ghostClass, false);
      toggleClass$1(ghostEl, options.fallbackClass, true);
      toggleClass$1(ghostEl, options.dragClass, true);
      css(ghostEl, "transition", "");
      css(ghostEl, "transform", "");
      css(ghostEl, "box-sizing", "border-box");
      css(ghostEl, "margin", 0);
      css(ghostEl, "top", rect.top);
      css(ghostEl, "left", rect.left);
      css(ghostEl, "width", rect.width);
      css(ghostEl, "height", rect.height);
      css(ghostEl, "opacity", "0.8");
      css(ghostEl, "position", PositionGhostAbsolutely ? "absolute" : "fixed");
      css(ghostEl, "zIndex", "100000");
      css(ghostEl, "pointerEvents", "none");
      Sortable.ghost = ghostEl;
      container.appendChild(ghostEl);
      css(ghostEl, "transform-origin", tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + "% " + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + "%");
    }
  },
  _onDragStart: function _onDragStart(evt, fallback) {
    var _this = this;
    var dataTransfer = evt.dataTransfer;
    var options = _this.options;
    pluginEvent("dragStart", this, {
      evt
    });
    if (Sortable.eventCanceled) {
      this._onDrop();
      return;
    }
    pluginEvent("setupClone", this);
    if (!Sortable.eventCanceled) {
      cloneEl = clone$2(dragEl);
      cloneEl.draggable = false;
      cloneEl.style["will-change"] = "";
      this._hideClone();
      toggleClass$1(cloneEl, this.options.chosenClass, false);
      Sortable.clone = cloneEl;
    }
    _this.cloneId = _nextTick(function() {
      pluginEvent("clone", _this);
      if (Sortable.eventCanceled)
        return;
      if (!_this.options.removeCloneOnHide) {
        rootEl.insertBefore(cloneEl, dragEl);
      }
      _this._hideClone();
      _dispatchEvent({
        sortable: _this,
        name: "clone"
      });
    });
    !fallback && toggleClass$1(dragEl, options.dragClass, true);
    if (fallback) {
      ignoreNextClick = true;
      _this._loopId = setInterval(_this._emulateDragOver, 50);
    } else {
      off(document, "mouseup", _this._onDrop);
      off(document, "touchend", _this._onDrop);
      off(document, "touchcancel", _this._onDrop);
      if (dataTransfer) {
        dataTransfer.effectAllowed = "move";
        options.setData && options.setData.call(_this, dataTransfer, dragEl);
      }
      on(document, "drop", _this);
      css(dragEl, "transform", "translateZ(0)");
    }
    awaitingDragStarted = true;
    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));
    on(document, "selectstart", _this);
    moved = true;
    if (Safari) {
      css(document.body, "user-select", "none");
    }
  },
  _onDragOver: function _onDragOver(evt) {
    var el = this.el, target = evt.target, dragRect, targetRect, revert, options = this.options, group = options.group, activeSortable = Sortable.active, isOwner = activeGroup === group, canSort = options.sort, fromSortable = putSortable || activeSortable, vertical, _this = this, completedFired = false;
    if (_silent)
      return;
    function dragOverEvent(name, extra) {
      pluginEvent(name, _this, _objectSpread2$1({
        evt,
        isOwner,
        axis: vertical ? "vertical" : "horizontal",
        revert,
        dragRect,
        targetRect,
        canSort,
        fromSortable,
        target,
        completed,
        onMove: function onMove(target2, after2) {
          return _onMove(rootEl, el, dragEl, dragRect, target2, getRect(target2), evt, after2);
        },
        changed
      }, extra));
    }
    function capture() {
      dragOverEvent("dragOverAnimationCapture");
      _this.captureAnimationState();
      if (_this !== fromSortable) {
        fromSortable.captureAnimationState();
      }
    }
    function completed(insertion) {
      dragOverEvent("dragOverCompleted", {
        insertion
      });
      if (insertion) {
        if (isOwner) {
          activeSortable._hideClone();
        } else {
          activeSortable._showClone(_this);
        }
        if (_this !== fromSortable) {
          toggleClass$1(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);
          toggleClass$1(dragEl, options.ghostClass, true);
        }
        if (putSortable !== _this && _this !== Sortable.active) {
          putSortable = _this;
        } else if (_this === Sortable.active && putSortable) {
          putSortable = null;
        }
        if (fromSortable === _this) {
          _this._ignoreWhileAnimating = target;
        }
        _this.animateAll(function() {
          dragOverEvent("dragOverAnimationComplete");
          _this._ignoreWhileAnimating = null;
        });
        if (_this !== fromSortable) {
          fromSortable.animateAll();
          fromSortable._ignoreWhileAnimating = null;
        }
      }
      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {
        lastTarget = null;
      }
      if (!options.dragoverBubble && !evt.rootEl && target !== document) {
        dragEl.parentNode[expando]._isOutsideThisEl(evt.target);
        !insertion && nearestEmptyInsertDetectEvent(evt);
      }
      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();
      return completedFired = true;
    }
    function changed() {
      newIndex = index$2(dragEl);
      newDraggableIndex = index$2(dragEl, options.draggable);
      _dispatchEvent({
        sortable: _this,
        name: "change",
        toEl: el,
        newIndex,
        newDraggableIndex,
        originalEvent: evt
      });
    }
    if (evt.preventDefault !== void 0) {
      evt.cancelable && evt.preventDefault();
    }
    target = closest(target, options.draggable, el, true);
    dragOverEvent("dragOver");
    if (Sortable.eventCanceled)
      return completedFired;
    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {
      return completed(false);
    }
    ignoreNextClick = false;
    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {
      vertical = this._getDirection(evt, target) === "vertical";
      dragRect = getRect(dragEl);
      dragOverEvent("dragOverValid");
      if (Sortable.eventCanceled)
        return completedFired;
      if (revert) {
        parentEl = rootEl;
        capture();
        this._hideClone();
        dragOverEvent("revert");
        if (!Sortable.eventCanceled) {
          if (nextEl) {
            rootEl.insertBefore(dragEl, nextEl);
          } else {
            rootEl.appendChild(dragEl);
          }
        }
        return completed(true);
      }
      var elLastChild = lastChild(el, options.draggable);
      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {
        if (elLastChild === dragEl) {
          return completed(false);
        }
        if (elLastChild && el === evt.target) {
          target = elLastChild;
        }
        if (target) {
          targetRect = getRect(target);
        }
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {
          capture();
          el.appendChild(dragEl);
          parentEl = el;
          changed();
          return completed(true);
        }
      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {
        var firstChild = getChild(el, 0, options, true);
        if (firstChild === dragEl) {
          return completed(false);
        }
        target = firstChild;
        targetRect = getRect(target);
        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {
          capture();
          el.insertBefore(dragEl, firstChild);
          parentEl = el;
          changed();
          return completed(true);
        }
      } else if (target.parentNode === el) {
        targetRect = getRect(target);
        var direction = 0, targetBeforeFirstSwap, differentLevel = dragEl.parentNode !== el, differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical), side1 = vertical ? "top" : "left", scrolledPastTop = isScrolledPast(target, "top", "top") || isScrolledPast(dragEl, "top", "top"), scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;
        if (lastTarget !== target) {
          targetBeforeFirstSwap = targetRect[side1];
          pastFirstInvertThresh = false;
          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;
        }
        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);
        var sibling;
        if (direction !== 0) {
          var dragIndex = index$2(dragEl);
          do {
            dragIndex -= direction;
            sibling = parentEl.children[dragIndex];
          } while (sibling && (css(sibling, "display") === "none" || sibling === ghostEl));
        }
        if (direction === 0 || sibling === target) {
          return completed(false);
        }
        lastTarget = target;
        lastDirection = direction;
        var nextSibling = target.nextElementSibling, after = false;
        after = direction === 1;
        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);
        if (moveVector !== false) {
          if (moveVector === 1 || moveVector === -1) {
            after = moveVector === 1;
          }
          _silent = true;
          setTimeout(_unsilent, 30);
          capture();
          if (after && !nextSibling) {
            el.appendChild(dragEl);
          } else {
            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);
          }
          if (scrolledPastTop) {
            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);
          }
          parentEl = dragEl.parentNode;
          if (targetBeforeFirstSwap !== void 0 && !isCircumstantialInvert) {
            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);
          }
          changed();
          return completed(true);
        }
      }
      if (el.contains(dragEl)) {
        return completed(false);
      }
    }
    return false;
  },
  _ignoreWhileAnimating: null,
  _offMoveEvents: function _offMoveEvents() {
    off(document, "mousemove", this._onTouchMove);
    off(document, "touchmove", this._onTouchMove);
    off(document, "pointermove", this._onTouchMove);
    off(document, "dragover", nearestEmptyInsertDetectEvent);
    off(document, "mousemove", nearestEmptyInsertDetectEvent);
    off(document, "touchmove", nearestEmptyInsertDetectEvent);
  },
  _offUpEvents: function _offUpEvents() {
    var ownerDocument = this.el.ownerDocument;
    off(ownerDocument, "mouseup", this._onDrop);
    off(ownerDocument, "touchend", this._onDrop);
    off(ownerDocument, "pointerup", this._onDrop);
    off(ownerDocument, "touchcancel", this._onDrop);
    off(document, "selectstart", this);
  },
  _onDrop: function _onDrop(evt) {
    var el = this.el, options = this.options;
    newIndex = index$2(dragEl);
    newDraggableIndex = index$2(dragEl, options.draggable);
    pluginEvent("drop", this, {
      evt
    });
    parentEl = dragEl && dragEl.parentNode;
    newIndex = index$2(dragEl);
    newDraggableIndex = index$2(dragEl, options.draggable);
    if (Sortable.eventCanceled) {
      this._nulling();
      return;
    }
    awaitingDragStarted = false;
    isCircumstantialInvert = false;
    pastFirstInvertThresh = false;
    clearInterval(this._loopId);
    clearTimeout(this._dragStartTimer);
    _cancelNextTick(this.cloneId);
    _cancelNextTick(this._dragStartId);
    if (this.nativeDraggable) {
      off(document, "drop", this);
      off(el, "dragstart", this._onDragStart);
    }
    this._offMoveEvents();
    this._offUpEvents();
    if (Safari) {
      css(document.body, "user-select", "");
    }
    css(dragEl, "transform", "");
    if (evt) {
      if (moved) {
        evt.cancelable && evt.preventDefault();
        !options.dropBubble && evt.stopPropagation();
      }
      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);
      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== "clone") {
        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);
      }
      if (dragEl) {
        if (this.nativeDraggable) {
          off(dragEl, "dragend", this);
        }
        _disableDraggable(dragEl);
        dragEl.style["will-change"] = "";
        if (moved && !awaitingDragStarted) {
          toggleClass$1(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);
        }
        toggleClass$1(dragEl, this.options.chosenClass, false);
        _dispatchEvent({
          sortable: this,
          name: "unchoose",
          toEl: parentEl,
          newIndex: null,
          newDraggableIndex: null,
          originalEvent: evt
        });
        if (rootEl !== parentEl) {
          if (newIndex >= 0) {
            _dispatchEvent({
              rootEl: parentEl,
              name: "add",
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });
            _dispatchEvent({
              sortable: this,
              name: "remove",
              toEl: parentEl,
              originalEvent: evt
            });
            _dispatchEvent({
              rootEl: parentEl,
              name: "sort",
              toEl: parentEl,
              fromEl: rootEl,
              originalEvent: evt
            });
            _dispatchEvent({
              sortable: this,
              name: "sort",
              toEl: parentEl,
              originalEvent: evt
            });
          }
          putSortable && putSortable.save();
        } else {
          if (newIndex !== oldIndex) {
            if (newIndex >= 0) {
              _dispatchEvent({
                sortable: this,
                name: "update",
                toEl: parentEl,
                originalEvent: evt
              });
              _dispatchEvent({
                sortable: this,
                name: "sort",
                toEl: parentEl,
                originalEvent: evt
              });
            }
          }
        }
        if (Sortable.active) {
          if (newIndex == null || newIndex === -1) {
            newIndex = oldIndex;
            newDraggableIndex = oldDraggableIndex;
          }
          _dispatchEvent({
            sortable: this,
            name: "end",
            toEl: parentEl,
            originalEvent: evt
          });
          this.save();
        }
      }
    }
    this._nulling();
  },
  _nulling: function _nulling() {
    pluginEvent("nulling", this);
    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;
    savedInputChecked.forEach(function(el) {
      el.checked = true;
    });
    savedInputChecked.length = lastDx = lastDy = 0;
  },
  handleEvent: function handleEvent(evt) {
    switch (evt.type) {
      case "drop":
      case "dragend":
        this._onDrop(evt);
        break;
      case "dragenter":
      case "dragover":
        if (dragEl) {
          this._onDragOver(evt);
          _globalDragOver(evt);
        }
        break;
      case "selectstart":
        evt.preventDefault();
        break;
    }
  },
  toArray: function toArray2() {
    var order = [], el, children = this.el.children, i2 = 0, n = children.length, options = this.options;
    for (; i2 < n; i2++) {
      el = children[i2];
      if (closest(el, options.draggable, this.el, false)) {
        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));
      }
    }
    return order;
  },
  sort: function sort(order, useAnimation) {
    var items = {}, rootEl2 = this.el;
    this.toArray().forEach(function(id, i2) {
      var el = rootEl2.children[i2];
      if (closest(el, this.options.draggable, rootEl2, false)) {
        items[id] = el;
      }
    }, this);
    useAnimation && this.captureAnimationState();
    order.forEach(function(id) {
      if (items[id]) {
        rootEl2.removeChild(items[id]);
        rootEl2.appendChild(items[id]);
      }
    });
    useAnimation && this.animateAll();
  },
  save: function save() {
    var store = this.options.store;
    store && store.set && store.set(this);
  },
  closest: function closest$1(el, selector) {
    return closest(el, selector || this.options.draggable, this.el, false);
  },
  option: function option(name, value) {
    var options = this.options;
    if (value === void 0) {
      return options[name];
    } else {
      var modifiedValue = PluginManager.modifyOption(this, name, value);
      if (typeof modifiedValue !== "undefined") {
        options[name] = modifiedValue;
      } else {
        options[name] = value;
      }
      if (name === "group") {
        _prepareGroup(options);
      }
    }
  },
  destroy: function destroy() {
    pluginEvent("destroy", this);
    var el = this.el;
    el[expando] = null;
    off(el, "mousedown", this._onTapStart);
    off(el, "touchstart", this._onTapStart);
    off(el, "pointerdown", this._onTapStart);
    if (this.nativeDraggable) {
      off(el, "dragover", this);
      off(el, "dragenter", this);
    }
    Array.prototype.forEach.call(el.querySelectorAll("[draggable]"), function(el2) {
      el2.removeAttribute("draggable");
    });
    this._onDrop();
    this._disableDelayedDragEvents();
    sortables.splice(sortables.indexOf(this.el), 1);
    this.el = el = null;
  },
  _hideClone: function _hideClone() {
    if (!cloneHidden) {
      pluginEvent("hideClone", this);
      if (Sortable.eventCanceled)
        return;
      css(cloneEl, "display", "none");
      if (this.options.removeCloneOnHide && cloneEl.parentNode) {
        cloneEl.parentNode.removeChild(cloneEl);
      }
      cloneHidden = true;
    }
  },
  _showClone: function _showClone(putSortable2) {
    if (putSortable2.lastPutMode !== "clone") {
      this._hideClone();
      return;
    }
    if (cloneHidden) {
      pluginEvent("showClone", this);
      if (Sortable.eventCanceled)
        return;
      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {
        rootEl.insertBefore(cloneEl, dragEl);
      } else if (nextEl) {
        rootEl.insertBefore(cloneEl, nextEl);
      } else {
        rootEl.appendChild(cloneEl);
      }
      if (this.options.group.revertClone) {
        this.animate(dragEl, cloneEl);
      }
      css(cloneEl, "display", "");
      cloneHidden = false;
    }
  }
};
function _globalDragOver(evt) {
  if (evt.dataTransfer) {
    evt.dataTransfer.dropEffect = "move";
  }
  evt.cancelable && evt.preventDefault();
}
function _onMove(fromEl, toEl, dragEl2, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {
  var evt, sortable = fromEl[expando], onMoveFn = sortable.options.onMove, retVal;
  if (window.CustomEvent && !IE11OrLess && !Edge) {
    evt = new CustomEvent("move", {
      bubbles: true,
      cancelable: true
    });
  } else {
    evt = document.createEvent("Event");
    evt.initEvent("move", true, true);
  }
  evt.to = toEl;
  evt.from = fromEl;
  evt.dragged = dragEl2;
  evt.draggedRect = dragRect;
  evt.related = targetEl || toEl;
  evt.relatedRect = targetRect || getRect(toEl);
  evt.willInsertAfter = willInsertAfter;
  evt.originalEvent = originalEvent;
  fromEl.dispatchEvent(evt);
  if (onMoveFn) {
    retVal = onMoveFn.call(sortable, evt, originalEvent);
  }
  return retVal;
}
function _disableDraggable(el) {
  el.draggable = false;
}
function _unsilent() {
  _silent = false;
}
function _ghostIsFirst(evt, vertical, sortable) {
  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));
  var spacer = 10;
  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;
}
function _ghostIsLast(evt, vertical, sortable) {
  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));
  var spacer = 10;
  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;
}
function _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {
  var mouseOnAxis = vertical ? evt.clientY : evt.clientX, targetLength = vertical ? targetRect.height : targetRect.width, targetS1 = vertical ? targetRect.top : targetRect.left, targetS2 = vertical ? targetRect.bottom : targetRect.right, invert = false;
  if (!invertSwap) {
    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {
      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {
        pastFirstInvertThresh = true;
      }
      if (!pastFirstInvertThresh) {
        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance : mouseOnAxis > targetS2 - targetMoveDistance) {
          return -lastDirection;
        }
      } else {
        invert = true;
      }
    } else {
      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {
        return _getInsertDirection(target);
      }
    }
  }
  invert = invert || invertSwap;
  if (invert) {
    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {
      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;
    }
  }
  return 0;
}
function _getInsertDirection(target) {
  if (index$2(dragEl) < index$2(target)) {
    return 1;
  } else {
    return -1;
  }
}
function _generateId(el) {
  var str = el.tagName + el.className + el.src + el.href + el.textContent, i2 = str.length, sum2 = 0;
  while (i2--) {
    sum2 += str.charCodeAt(i2);
  }
  return sum2.toString(36);
}
function _saveInputCheckedState(root) {
  savedInputChecked.length = 0;
  var inputs = root.getElementsByTagName("input");
  var idx = inputs.length;
  while (idx--) {
    var el = inputs[idx];
    el.checked && savedInputChecked.push(el);
  }
}
function _nextTick(fn) {
  return setTimeout(fn, 0);
}
function _cancelNextTick(id) {
  return clearTimeout(id);
}
if (documentExists) {
  on(document, "touchmove", function(evt) {
    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {
      evt.preventDefault();
    }
  });
}
Sortable.utils = {
  on,
  off,
  css,
  find,
  is: function is(el, selector) {
    return !!closest(el, selector, el, false);
  },
  extend: extend$2,
  throttle,
  closest,
  toggleClass: toggleClass$1,
  clone: clone$2,
  index: index$2,
  nextTick: _nextTick,
  cancelNextTick: _cancelNextTick,
  detectDirection: _detectDirection,
  getChild
};
Sortable.get = function(element) {
  return element[expando];
};
Sortable.mount = function() {
  for (var _len = arguments.length, plugins2 = new Array(_len), _key = 0; _key < _len; _key++) {
    plugins2[_key] = arguments[_key];
  }
  if (plugins2[0].constructor === Array)
    plugins2 = plugins2[0];
  plugins2.forEach(function(plugin) {
    if (!plugin.prototype || !plugin.prototype.constructor) {
      throw "Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(plugin));
    }
    if (plugin.utils)
      Sortable.utils = _objectSpread2$1(_objectSpread2$1({}, Sortable.utils), plugin.utils);
    PluginManager.mount(plugin);
  });
};
Sortable.create = function(el, options) {
  return new Sortable(el, options);
};
Sortable.version = version$1;
var autoScrolls = [], scrollEl, scrollRootEl, scrolling = false, lastAutoScrollX, lastAutoScrollY, touchEvt$1, pointerElemChangedInterval;
function AutoScrollPlugin() {
  function AutoScroll() {
    this.defaults = {
      scroll: true,
      forceAutoScrollFallback: false,
      scrollSensitivity: 30,
      scrollSpeed: 10,
      bubbleScroll: true
    };
    for (var fn in this) {
      if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
        this[fn] = this[fn].bind(this);
      }
    }
  }
  AutoScroll.prototype = {
    dragStarted: function dragStarted2(_ref) {
      var originalEvent = _ref.originalEvent;
      if (this.sortable.nativeDraggable) {
        on(document, "dragover", this._handleAutoScroll);
      } else {
        if (this.options.supportPointer) {
          on(document, "pointermove", this._handleFallbackAutoScroll);
        } else if (originalEvent.touches) {
          on(document, "touchmove", this._handleFallbackAutoScroll);
        } else {
          on(document, "mousemove", this._handleFallbackAutoScroll);
        }
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref2) {
      var originalEvent = _ref2.originalEvent;
      if (!this.options.dragOverBubble && !originalEvent.rootEl) {
        this._handleAutoScroll(originalEvent);
      }
    },
    drop: function drop3() {
      if (this.sortable.nativeDraggable) {
        off(document, "dragover", this._handleAutoScroll);
      } else {
        off(document, "pointermove", this._handleFallbackAutoScroll);
        off(document, "touchmove", this._handleFallbackAutoScroll);
        off(document, "mousemove", this._handleFallbackAutoScroll);
      }
      clearPointerElemChangedInterval();
      clearAutoScrolls();
      cancelThrottle();
    },
    nulling: function nulling() {
      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;
      autoScrolls.length = 0;
    },
    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {
      this._handleAutoScroll(evt, true);
    },
    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {
      var _this = this;
      var x = (evt.touches ? evt.touches[0] : evt).clientX, y = (evt.touches ? evt.touches[0] : evt).clientY, elem = document.elementFromPoint(x, y);
      touchEvt$1 = evt;
      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {
        autoScroll(evt, this.options, elem, fallback);
        var ogElemScroller = getParentAutoScrollElement(elem, true);
        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {
          pointerElemChangedInterval && clearPointerElemChangedInterval();
          pointerElemChangedInterval = setInterval(function() {
            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);
            if (newElem !== ogElemScroller) {
              ogElemScroller = newElem;
              clearAutoScrolls();
            }
            autoScroll(evt, _this.options, newElem, fallback);
          }, 10);
          lastAutoScrollX = x;
          lastAutoScrollY = y;
        }
      } else {
        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {
          clearAutoScrolls();
          return;
        }
        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);
      }
    }
  };
  return _extends(AutoScroll, {
    pluginName: "scroll",
    initializeByDefault: true
  });
}
function clearAutoScrolls() {
  autoScrolls.forEach(function(autoScroll2) {
    clearInterval(autoScroll2.pid);
  });
  autoScrolls = [];
}
function clearPointerElemChangedInterval() {
  clearInterval(pointerElemChangedInterval);
}
var autoScroll = throttle(function(evt, options, rootEl2, isFallback) {
  if (!options.scroll)
    return;
  var x = (evt.touches ? evt.touches[0] : evt).clientX, y = (evt.touches ? evt.touches[0] : evt).clientY, sens = options.scrollSensitivity, speed = options.scrollSpeed, winScroller = getWindowScrollingElement();
  var scrollThisInstance = false, scrollCustomFn;
  if (scrollRootEl !== rootEl2) {
    scrollRootEl = rootEl2;
    clearAutoScrolls();
    scrollEl = options.scroll;
    scrollCustomFn = options.scrollFn;
    if (scrollEl === true) {
      scrollEl = getParentAutoScrollElement(rootEl2, true);
    }
  }
  var layersOut = 0;
  var currentParent = scrollEl;
  do {
    var el = currentParent, rect = getRect(el), top = rect.top, bottom = rect.bottom, left = rect.left, right = rect.right, width = rect.width, height = rect.height, canScrollX = void 0, canScrollY = void 0, scrollWidth = el.scrollWidth, scrollHeight = el.scrollHeight, elCSS = css(el), scrollPosX = el.scrollLeft, scrollPosY = el.scrollTop;
    if (el === winScroller) {
      canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll" || elCSS.overflowX === "visible");
      canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll" || elCSS.overflowY === "visible");
    } else {
      canScrollX = width < scrollWidth && (elCSS.overflowX === "auto" || elCSS.overflowX === "scroll");
      canScrollY = height < scrollHeight && (elCSS.overflowY === "auto" || elCSS.overflowY === "scroll");
    }
    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);
    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);
    if (!autoScrolls[layersOut]) {
      for (var i2 = 0; i2 <= layersOut; i2++) {
        if (!autoScrolls[i2]) {
          autoScrolls[i2] = {};
        }
      }
    }
    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {
      autoScrolls[layersOut].el = el;
      autoScrolls[layersOut].vx = vx;
      autoScrolls[layersOut].vy = vy;
      clearInterval(autoScrolls[layersOut].pid);
      if (vx != 0 || vy != 0) {
        scrollThisInstance = true;
        autoScrolls[layersOut].pid = setInterval(function() {
          if (isFallback && this.layer === 0) {
            Sortable.active._onTouchMove(touchEvt$1);
          }
          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;
          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;
          if (typeof scrollCustomFn === "function") {
            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== "continue") {
              return;
            }
          }
          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);
        }.bind({
          layer: layersOut
        }), 24);
      }
    }
    layersOut++;
  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));
  scrolling = scrollThisInstance;
}, 30);
var drop = function drop2(_ref) {
  var originalEvent = _ref.originalEvent, putSortable2 = _ref.putSortable, dragEl2 = _ref.dragEl, activeSortable = _ref.activeSortable, dispatchSortableEvent = _ref.dispatchSortableEvent, hideGhostForTarget = _ref.hideGhostForTarget, unhideGhostForTarget = _ref.unhideGhostForTarget;
  if (!originalEvent)
    return;
  var toSortable = putSortable2 || activeSortable;
  hideGhostForTarget();
  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;
  var target = document.elementFromPoint(touch.clientX, touch.clientY);
  unhideGhostForTarget();
  if (toSortable && !toSortable.el.contains(target)) {
    dispatchSortableEvent("spill");
    this.onSpill({
      dragEl: dragEl2,
      putSortable: putSortable2
    });
  }
};
function Revert() {
}
Revert.prototype = {
  startIndex: null,
  dragStart: function dragStart(_ref2) {
    var oldDraggableIndex2 = _ref2.oldDraggableIndex;
    this.startIndex = oldDraggableIndex2;
  },
  onSpill: function onSpill(_ref3) {
    var dragEl2 = _ref3.dragEl, putSortable2 = _ref3.putSortable;
    this.sortable.captureAnimationState();
    if (putSortable2) {
      putSortable2.captureAnimationState();
    }
    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);
    if (nextSibling) {
      this.sortable.el.insertBefore(dragEl2, nextSibling);
    } else {
      this.sortable.el.appendChild(dragEl2);
    }
    this.sortable.animateAll();
    if (putSortable2) {
      putSortable2.animateAll();
    }
  },
  drop
};
_extends(Revert, {
  pluginName: "revertOnSpill"
});
function Remove() {
}
Remove.prototype = {
  onSpill: function onSpill2(_ref4) {
    var dragEl2 = _ref4.dragEl, putSortable2 = _ref4.putSortable;
    var parentSortable = putSortable2 || this.sortable;
    parentSortable.captureAnimationState();
    dragEl2.parentNode && dragEl2.parentNode.removeChild(dragEl2);
    parentSortable.animateAll();
  },
  drop
};
_extends(Remove, {
  pluginName: "removeOnSpill"
});
var lastSwapEl;
function SwapPlugin() {
  function Swap() {
    this.defaults = {
      swapClass: "sortable-swap-highlight"
    };
  }
  Swap.prototype = {
    dragStart: function dragStart2(_ref) {
      var dragEl2 = _ref.dragEl;
      lastSwapEl = dragEl2;
    },
    dragOverValid: function dragOverValid(_ref2) {
      var completed = _ref2.completed, target = _ref2.target, onMove = _ref2.onMove, activeSortable = _ref2.activeSortable, changed = _ref2.changed, cancel = _ref2.cancel;
      if (!activeSortable.options.swap)
        return;
      var el = this.sortable.el, options = this.options;
      if (target && target !== el) {
        var prevSwapEl = lastSwapEl;
        if (onMove(target) !== false) {
          toggleClass$1(target, options.swapClass, true);
          lastSwapEl = target;
        } else {
          lastSwapEl = null;
        }
        if (prevSwapEl && prevSwapEl !== lastSwapEl) {
          toggleClass$1(prevSwapEl, options.swapClass, false);
        }
      }
      changed();
      completed(true);
      cancel();
    },
    drop: function drop3(_ref3) {
      var activeSortable = _ref3.activeSortable, putSortable2 = _ref3.putSortable, dragEl2 = _ref3.dragEl;
      var toSortable = putSortable2 || this.sortable;
      var options = this.options;
      lastSwapEl && toggleClass$1(lastSwapEl, options.swapClass, false);
      if (lastSwapEl && (options.swap || putSortable2 && putSortable2.options.swap)) {
        if (dragEl2 !== lastSwapEl) {
          toSortable.captureAnimationState();
          if (toSortable !== activeSortable)
            activeSortable.captureAnimationState();
          swapNodes(dragEl2, lastSwapEl);
          toSortable.animateAll();
          if (toSortable !== activeSortable)
            activeSortable.animateAll();
        }
      }
    },
    nulling: function nulling() {
      lastSwapEl = null;
    }
  };
  return _extends(Swap, {
    pluginName: "swap",
    eventProperties: function eventProperties() {
      return {
        swapItem: lastSwapEl
      };
    }
  });
}
function swapNodes(n1, n2) {
  var p1 = n1.parentNode, p2 = n2.parentNode, i1, i2;
  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1))
    return;
  i1 = index$2(n1);
  i2 = index$2(n2);
  if (p1.isEqualNode(p2) && i1 < i2) {
    i2++;
  }
  p1.insertBefore(n2, p1.children[i1]);
  p2.insertBefore(n1, p2.children[i2]);
}
var multiDragElements = [], multiDragClones = [], lastMultiDragSelect, multiDragSortable, initialFolding = false, folding = false, dragStarted = false, dragEl$1, clonesFromRect, clonesHidden;
function MultiDragPlugin() {
  function MultiDrag(sortable) {
    for (var fn in this) {
      if (fn.charAt(0) === "_" && typeof this[fn] === "function") {
        this[fn] = this[fn].bind(this);
      }
    }
    if (sortable.options.supportPointer) {
      on(document, "pointerup", this._deselectMultiDrag);
    } else {
      on(document, "mouseup", this._deselectMultiDrag);
      on(document, "touchend", this._deselectMultiDrag);
    }
    on(document, "keydown", this._checkKeyDown);
    on(document, "keyup", this._checkKeyUp);
    this.defaults = {
      selectedClass: "sortable-selected",
      multiDragKey: null,
      setData: function setData2(dataTransfer, dragEl2) {
        var data2 = "";
        if (multiDragElements.length && multiDragSortable === sortable) {
          multiDragElements.forEach(function(multiDragElement, i2) {
            data2 += (!i2 ? "" : ", ") + multiDragElement.textContent;
          });
        } else {
          data2 = dragEl2.textContent;
        }
        dataTransfer.setData("Text", data2);
      }
    };
  }
  MultiDrag.prototype = {
    multiDragKeyDown: false,
    isMultiDrag: false,
    delayStartGlobal: function delayStartGlobal(_ref) {
      var dragged = _ref.dragEl;
      dragEl$1 = dragged;
    },
    delayEnded: function delayEnded() {
      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);
    },
    setupClone: function setupClone(_ref2) {
      var sortable = _ref2.sortable, cancel = _ref2.cancel;
      if (!this.isMultiDrag)
        return;
      for (var i2 = 0; i2 < multiDragElements.length; i2++) {
        multiDragClones.push(clone$2(multiDragElements[i2]));
        multiDragClones[i2].sortableIndex = multiDragElements[i2].sortableIndex;
        multiDragClones[i2].draggable = false;
        multiDragClones[i2].style["will-change"] = "";
        toggleClass$1(multiDragClones[i2], this.options.selectedClass, false);
        multiDragElements[i2] === dragEl$1 && toggleClass$1(multiDragClones[i2], this.options.chosenClass, false);
      }
      sortable._hideClone();
      cancel();
    },
    clone: function clone2(_ref3) {
      var sortable = _ref3.sortable, rootEl2 = _ref3.rootEl, dispatchSortableEvent = _ref3.dispatchSortableEvent, cancel = _ref3.cancel;
      if (!this.isMultiDrag)
        return;
      if (!this.options.removeCloneOnHide) {
        if (multiDragElements.length && multiDragSortable === sortable) {
          insertMultiDragClones(true, rootEl2);
          dispatchSortableEvent("clone");
          cancel();
        }
      }
    },
    showClone: function showClone(_ref4) {
      var cloneNowShown = _ref4.cloneNowShown, rootEl2 = _ref4.rootEl, cancel = _ref4.cancel;
      if (!this.isMultiDrag)
        return;
      insertMultiDragClones(false, rootEl2);
      multiDragClones.forEach(function(clone2) {
        css(clone2, "display", "");
      });
      cloneNowShown();
      clonesHidden = false;
      cancel();
    },
    hideClone: function hideClone(_ref5) {
      var _this = this;
      _ref5.sortable;
      var cloneNowHidden = _ref5.cloneNowHidden, cancel = _ref5.cancel;
      if (!this.isMultiDrag)
        return;
      multiDragClones.forEach(function(clone2) {
        css(clone2, "display", "none");
        if (_this.options.removeCloneOnHide && clone2.parentNode) {
          clone2.parentNode.removeChild(clone2);
        }
      });
      cloneNowHidden();
      clonesHidden = true;
      cancel();
    },
    dragStartGlobal: function dragStartGlobal(_ref6) {
      _ref6.sortable;
      if (!this.isMultiDrag && multiDragSortable) {
        multiDragSortable.multiDrag._deselectMultiDrag();
      }
      multiDragElements.forEach(function(multiDragElement) {
        multiDragElement.sortableIndex = index$2(multiDragElement);
      });
      multiDragElements = multiDragElements.sort(function(a, b) {
        return a.sortableIndex - b.sortableIndex;
      });
      dragStarted = true;
    },
    dragStarted: function dragStarted2(_ref7) {
      var _this2 = this;
      var sortable = _ref7.sortable;
      if (!this.isMultiDrag)
        return;
      if (this.options.sort) {
        sortable.captureAnimationState();
        if (this.options.animation) {
          multiDragElements.forEach(function(multiDragElement) {
            if (multiDragElement === dragEl$1)
              return;
            css(multiDragElement, "position", "absolute");
          });
          var dragRect = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function(multiDragElement) {
            if (multiDragElement === dragEl$1)
              return;
            setRect(multiDragElement, dragRect);
          });
          folding = true;
          initialFolding = true;
        }
      }
      sortable.animateAll(function() {
        folding = false;
        initialFolding = false;
        if (_this2.options.animation) {
          multiDragElements.forEach(function(multiDragElement) {
            unsetRect(multiDragElement);
          });
        }
        if (_this2.options.sort) {
          removeMultiDragElements();
        }
      });
    },
    dragOver: function dragOver(_ref8) {
      var target = _ref8.target, completed = _ref8.completed, cancel = _ref8.cancel;
      if (folding && ~multiDragElements.indexOf(target)) {
        completed(false);
        cancel();
      }
    },
    revert: function revert(_ref9) {
      var fromSortable = _ref9.fromSortable, rootEl2 = _ref9.rootEl, sortable = _ref9.sortable, dragRect = _ref9.dragRect;
      if (multiDragElements.length > 1) {
        multiDragElements.forEach(function(multiDragElement) {
          sortable.addAnimationState({
            target: multiDragElement,
            rect: folding ? getRect(multiDragElement) : dragRect
          });
          unsetRect(multiDragElement);
          multiDragElement.fromRect = dragRect;
          fromSortable.removeAnimationState(multiDragElement);
        });
        folding = false;
        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl2);
      }
    },
    dragOverCompleted: function dragOverCompleted(_ref10) {
      var sortable = _ref10.sortable, isOwner = _ref10.isOwner, insertion = _ref10.insertion, activeSortable = _ref10.activeSortable, parentEl2 = _ref10.parentEl, putSortable2 = _ref10.putSortable;
      var options = this.options;
      if (insertion) {
        if (isOwner) {
          activeSortable._hideClone();
        }
        initialFolding = false;
        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable2)) {
          var dragRectAbsolute = getRect(dragEl$1, false, true, true);
          multiDragElements.forEach(function(multiDragElement) {
            if (multiDragElement === dragEl$1)
              return;
            setRect(multiDragElement, dragRectAbsolute);
            parentEl2.appendChild(multiDragElement);
          });
          folding = true;
        }
        if (!isOwner) {
          if (!folding) {
            removeMultiDragElements();
          }
          if (multiDragElements.length > 1) {
            var clonesHiddenBefore = clonesHidden;
            activeSortable._showClone(sortable);
            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {
              multiDragClones.forEach(function(clone2) {
                activeSortable.addAnimationState({
                  target: clone2,
                  rect: clonesFromRect
                });
                clone2.fromRect = clonesFromRect;
                clone2.thisAnimationDuration = null;
              });
            }
          } else {
            activeSortable._showClone(sortable);
          }
        }
      }
    },
    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {
      var dragRect = _ref11.dragRect, isOwner = _ref11.isOwner, activeSortable = _ref11.activeSortable;
      multiDragElements.forEach(function(multiDragElement) {
        multiDragElement.thisAnimationDuration = null;
      });
      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {
        clonesFromRect = _extends({}, dragRect);
        var dragMatrix = matrix(dragEl$1, true);
        clonesFromRect.top -= dragMatrix.f;
        clonesFromRect.left -= dragMatrix.e;
      }
    },
    dragOverAnimationComplete: function dragOverAnimationComplete() {
      if (folding) {
        folding = false;
        removeMultiDragElements();
      }
    },
    drop: function drop3(_ref12) {
      var evt = _ref12.originalEvent, rootEl2 = _ref12.rootEl, parentEl2 = _ref12.parentEl, sortable = _ref12.sortable, dispatchSortableEvent = _ref12.dispatchSortableEvent, oldIndex2 = _ref12.oldIndex, putSortable2 = _ref12.putSortable;
      var toSortable = putSortable2 || this.sortable;
      if (!evt)
        return;
      var options = this.options, children = parentEl2.children;
      if (!dragStarted) {
        if (options.multiDragKey && !this.multiDragKeyDown) {
          this._deselectMultiDrag();
        }
        toggleClass$1(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));
        if (!~multiDragElements.indexOf(dragEl$1)) {
          multiDragElements.push(dragEl$1);
          dispatchEvent$1({
            sortable,
            rootEl: rootEl2,
            name: "select",
            targetEl: dragEl$1,
            originalEvt: evt
          });
          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {
            var lastIndex = index$2(lastMultiDragSelect), currentIndex = index$2(dragEl$1);
            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {
              var n, i2;
              if (currentIndex > lastIndex) {
                i2 = lastIndex;
                n = currentIndex;
              } else {
                i2 = currentIndex;
                n = lastIndex + 1;
              }
              for (; i2 < n; i2++) {
                if (~multiDragElements.indexOf(children[i2]))
                  continue;
                toggleClass$1(children[i2], options.selectedClass, true);
                multiDragElements.push(children[i2]);
                dispatchEvent$1({
                  sortable,
                  rootEl: rootEl2,
                  name: "select",
                  targetEl: children[i2],
                  originalEvt: evt
                });
              }
            }
          } else {
            lastMultiDragSelect = dragEl$1;
          }
          multiDragSortable = toSortable;
        } else {
          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);
          lastMultiDragSelect = null;
          dispatchEvent$1({
            sortable,
            rootEl: rootEl2,
            name: "deselect",
            targetEl: dragEl$1,
            originalEvt: evt
          });
        }
      }
      if (dragStarted && this.isMultiDrag) {
        folding = false;
        if ((parentEl2[expando].options.sort || parentEl2 !== rootEl2) && multiDragElements.length > 1) {
          var dragRect = getRect(dragEl$1), multiDragIndex = index$2(dragEl$1, ":not(." + this.options.selectedClass + ")");
          if (!initialFolding && options.animation)
            dragEl$1.thisAnimationDuration = null;
          toSortable.captureAnimationState();
          if (!initialFolding) {
            if (options.animation) {
              dragEl$1.fromRect = dragRect;
              multiDragElements.forEach(function(multiDragElement) {
                multiDragElement.thisAnimationDuration = null;
                if (multiDragElement !== dragEl$1) {
                  var rect = folding ? getRect(multiDragElement) : dragRect;
                  multiDragElement.fromRect = rect;
                  toSortable.addAnimationState({
                    target: multiDragElement,
                    rect
                  });
                }
              });
            }
            removeMultiDragElements();
            multiDragElements.forEach(function(multiDragElement) {
              if (children[multiDragIndex]) {
                parentEl2.insertBefore(multiDragElement, children[multiDragIndex]);
              } else {
                parentEl2.appendChild(multiDragElement);
              }
              multiDragIndex++;
            });
            if (oldIndex2 === index$2(dragEl$1)) {
              var update2 = false;
              multiDragElements.forEach(function(multiDragElement) {
                if (multiDragElement.sortableIndex !== index$2(multiDragElement)) {
                  update2 = true;
                  return;
                }
              });
              if (update2) {
                dispatchSortableEvent("update");
              }
            }
          }
          multiDragElements.forEach(function(multiDragElement) {
            unsetRect(multiDragElement);
          });
          toSortable.animateAll();
        }
        multiDragSortable = toSortable;
      }
      if (rootEl2 === parentEl2 || putSortable2 && putSortable2.lastPutMode !== "clone") {
        multiDragClones.forEach(function(clone2) {
          clone2.parentNode && clone2.parentNode.removeChild(clone2);
        });
      }
    },
    nullingGlobal: function nullingGlobal() {
      this.isMultiDrag = dragStarted = false;
      multiDragClones.length = 0;
    },
    destroyGlobal: function destroyGlobal() {
      this._deselectMultiDrag();
      off(document, "pointerup", this._deselectMultiDrag);
      off(document, "mouseup", this._deselectMultiDrag);
      off(document, "touchend", this._deselectMultiDrag);
      off(document, "keydown", this._checkKeyDown);
      off(document, "keyup", this._checkKeyUp);
    },
    _deselectMultiDrag: function _deselectMultiDrag(evt) {
      if (typeof dragStarted !== "undefined" && dragStarted)
        return;
      if (multiDragSortable !== this.sortable)
        return;
      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false))
        return;
      if (evt && evt.button !== 0)
        return;
      while (multiDragElements.length) {
        var el = multiDragElements[0];
        toggleClass$1(el, this.options.selectedClass, false);
        multiDragElements.shift();
        dispatchEvent$1({
          sortable: this.sortable,
          rootEl: this.sortable.el,
          name: "deselect",
          targetEl: el,
          originalEvt: evt
        });
      }
    },
    _checkKeyDown: function _checkKeyDown(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = true;
      }
    },
    _checkKeyUp: function _checkKeyUp(evt) {
      if (evt.key === this.options.multiDragKey) {
        this.multiDragKeyDown = false;
      }
    }
  };
  return _extends(MultiDrag, {
    pluginName: "multiDrag",
    utils: {
      select: function select(el) {
        var sortable = el.parentNode[expando];
        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el))
          return;
        if (multiDragSortable && multiDragSortable !== sortable) {
          multiDragSortable.multiDrag._deselectMultiDrag();
          multiDragSortable = sortable;
        }
        toggleClass$1(el, sortable.options.selectedClass, true);
        multiDragElements.push(el);
      },
      deselect: function deselect(el) {
        var sortable = el.parentNode[expando], index2 = multiDragElements.indexOf(el);
        if (!sortable || !sortable.options.multiDrag || !~index2)
          return;
        toggleClass$1(el, sortable.options.selectedClass, false);
        multiDragElements.splice(index2, 1);
      }
    },
    eventProperties: function eventProperties() {
      var _this3 = this;
      var oldIndicies = [], newIndicies = [];
      multiDragElements.forEach(function(multiDragElement) {
        oldIndicies.push({
          multiDragElement,
          index: multiDragElement.sortableIndex
        });
        var newIndex2;
        if (folding && multiDragElement !== dragEl$1) {
          newIndex2 = -1;
        } else if (folding) {
          newIndex2 = index$2(multiDragElement, ":not(." + _this3.options.selectedClass + ")");
        } else {
          newIndex2 = index$2(multiDragElement);
        }
        newIndicies.push({
          multiDragElement,
          index: newIndex2
        });
      });
      return {
        items: _toConsumableArray(multiDragElements),
        clones: [].concat(multiDragClones),
        oldIndicies,
        newIndicies
      };
    },
    optionListeners: {
      multiDragKey: function multiDragKey(key) {
        key = key.toLowerCase();
        if (key === "ctrl") {
          key = "Control";
        } else if (key.length > 1) {
          key = key.charAt(0).toUpperCase() + key.substr(1);
        }
        return key;
      }
    }
  });
}
function insertMultiDragElements(clonesInserted, rootEl2) {
  multiDragElements.forEach(function(multiDragElement, i2) {
    var target = rootEl2.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i2) : 0)];
    if (target) {
      rootEl2.insertBefore(multiDragElement, target);
    } else {
      rootEl2.appendChild(multiDragElement);
    }
  });
}
function insertMultiDragClones(elementsInserted, rootEl2) {
  multiDragClones.forEach(function(clone2, i2) {
    var target = rootEl2.children[clone2.sortableIndex + (elementsInserted ? Number(i2) : 0)];
    if (target) {
      rootEl2.insertBefore(clone2, target);
    } else {
      rootEl2.appendChild(clone2);
    }
  });
}
function removeMultiDragElements() {
  multiDragElements.forEach(function(multiDragElement) {
    if (multiDragElement === dragEl$1)
      return;
    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);
  });
}
Sortable.mount(new AutoScrollPlugin());
Sortable.mount(Remove, Revert);
var sortable_esm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": Sortable,
  MultiDrag: MultiDragPlugin,
  Sortable,
  Swap: SwapPlugin
}, Symbol.toStringTag, { value: "Module" }));
function removeNode(node) {
  if (node.parentElement !== null) {
    node.parentElement.removeChild(node);
  }
}
function insertNodeAt(fatherNode, node, position) {
  const refNode = position === 0 ? fatherNode.children[0] : fatherNode.children[position - 1].nextSibling;
  fatherNode.insertBefore(node, refNode);
}
function getConsole() {
  if (typeof window !== "undefined") {
    return window.console;
  }
  return global.console;
}
const console$1 = getConsole();
function cached(fn) {
  const cache2 = /* @__PURE__ */ Object.create(null);
  return function cachedFn(str) {
    const hit = cache2[str];
    return hit || (cache2[str] = fn(str));
  };
}
const regex = /-(\w)/g;
const camelize = cached((str) => str.replace(regex, (_2, c) => c.toUpperCase()));
const manageAndEmit$1 = ["Start", "Add", "Remove", "Update", "End"];
const emit$1 = ["Choose", "Unchoose", "Sort", "Filter", "Clone"];
const manage$1 = ["Move"];
const eventHandlerNames = [manage$1, manageAndEmit$1, emit$1].flatMap((events2) => events2).map((evt) => `on${evt}`);
const events$1 = {
  manage: manage$1,
  manageAndEmit: manageAndEmit$1,
  emit: emit$1
};
function isReadOnly(eventName) {
  return eventHandlerNames.indexOf(eventName) !== -1;
}
const tags = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "math",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rb",
  "rp",
  "rt",
  "rtc",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "slot",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "svg",
  "table",
  "tbody",
  "td",
  "template",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr"
];
function isHtmlTag(name) {
  return tags.includes(name);
}
function isTransition(name) {
  return ["transition-group", "TransitionGroup"].includes(name);
}
function isHtmlAttribute(value) {
  return ["id", "class", "role", "style"].includes(value) || value.startsWith("data-") || value.startsWith("aria-") || value.startsWith("on");
}
function project(entries) {
  return entries.reduce((res, [key, value]) => {
    res[key] = value;
    return res;
  }, {});
}
function getComponentAttributes({ $attrs, componentData = {} }) {
  const attributes = project(Object.entries($attrs).filter(([key, _2]) => isHtmlAttribute(key)));
  return __spreadValues(__spreadValues({}, attributes), componentData);
}
function createSortableOption({ $attrs, callBackBuilder }) {
  const options = project(getValidSortableEntries($attrs));
  Object.entries(callBackBuilder).forEach(([eventType, eventBuilder]) => {
    events$1[eventType].forEach((event) => {
      options[`on${event}`] = eventBuilder(event);
    });
  });
  const draggable = `[data-draggable]${options.draggable || ""}`;
  return __spreadProps(__spreadValues({}, options), {
    draggable
  });
}
function getValidSortableEntries(value) {
  return Object.entries(value).filter(([key, _2]) => !isHtmlAttribute(key)).map(([key, value2]) => [camelize(key), value2]).filter(([key, _2]) => !isReadOnly(key));
}
const getHtmlElementFromNode = ({ el }) => el;
const addContext = (domElement, context) => domElement.__draggable_context = context;
const getContext = (domElement) => domElement.__draggable_context;
class ComponentStructure {
  constructor({
    nodes: { header, default: defaultNodes, footer },
    root,
    realList
  }) {
    this.defaultNodes = defaultNodes;
    this.children = [...header, ...defaultNodes, ...footer];
    this.externalComponent = root.externalComponent;
    this.rootTransition = root.transition;
    this.tag = root.tag;
    this.realList = realList;
  }
  get _isRootComponent() {
    return this.externalComponent || this.rootTransition;
  }
  render(h2, attributes) {
    const { tag, children, _isRootComponent } = this;
    const option2 = !_isRootComponent ? children : { default: () => children };
    return h2(tag, attributes, option2);
  }
  updated() {
    const { defaultNodes, realList } = this;
    defaultNodes.forEach((node, index2) => {
      addContext(getHtmlElementFromNode(node), {
        element: realList[index2],
        index: index2
      });
    });
  }
  getUnderlyingVm(domElement) {
    return getContext(domElement);
  }
  getVmIndexFromDomIndex(domIndex, element) {
    const { defaultNodes } = this;
    const { length } = defaultNodes;
    const domChildren = element.children;
    const domElement = domChildren.item(domIndex);
    if (domElement === null) {
      return length;
    }
    const context = getContext(domElement);
    if (context) {
      return context.index;
    }
    if (length === 0) {
      return 0;
    }
    const firstDomListElement = getHtmlElementFromNode(defaultNodes[0]);
    const indexFirstDomListElement = [...domChildren].findIndex((element2) => element2 === firstDomListElement);
    return domIndex < indexFirstDomListElement ? 0 : length;
  }
}
function getSlot(slots, key) {
  const slotValue = slots[key];
  return slotValue ? slotValue() : [];
}
function computeNodes({ $slots, realList, getKey }) {
  const normalizedList = realList || [];
  const [header, footer] = ["header", "footer"].map((name) => getSlot($slots, name));
  const { item: item2 } = $slots;
  if (!item2) {
    throw new Error("draggable element must have an item slot");
  }
  const defaultNodes = normalizedList.flatMap((element, index2) => item2({ element, index: index2 }).map((node) => {
    node.key = getKey(element);
    node.props = __spreadProps(__spreadValues({}, node.props || {}), { "data-draggable": true });
    return node;
  }));
  if (defaultNodes.length !== normalizedList.length) {
    throw new Error("Item slot must have only one child");
  }
  return {
    header,
    footer,
    default: defaultNodes
  };
}
function getRootInformation(tag) {
  const transition = isTransition(tag);
  const externalComponent = !isHtmlTag(tag) && !transition;
  return {
    transition,
    externalComponent,
    tag: externalComponent ? resolveComponent(tag) : transition ? TransitionGroup : tag
  };
}
function computeComponentStructure({ $slots, tag, realList, getKey }) {
  const nodes = computeNodes({ $slots, realList, getKey });
  const root = getRootInformation(tag);
  return new ComponentStructure({ nodes, root, realList });
}
function emit(evtName, evtData) {
  nextTick(() => this.$emit(evtName.toLowerCase(), evtData));
}
function manage(evtName) {
  return (evtData, originalElement) => {
    if (this.realList !== null) {
      return this[`onDrag${evtName}`](evtData, originalElement);
    }
  };
}
function manageAndEmit(evtName) {
  const delegateCallBack = manage.call(this, evtName);
  return (evtData, originalElement) => {
    delegateCallBack.call(this, evtData, originalElement);
    emit.call(this, evtName, evtData);
  };
}
let draggingElement = null;
const props = {
  list: {
    type: Array,
    required: false,
    default: null
  },
  modelValue: {
    type: Array,
    required: false,
    default: null
  },
  itemKey: {
    type: [String, Function],
    required: true
  },
  clone: {
    type: Function,
    default: (original) => {
      return original;
    }
  },
  tag: {
    type: String,
    default: "div"
  },
  move: {
    type: Function,
    default: null
  },
  componentData: {
    type: Object,
    required: false,
    default: null
  }
};
const emits = [
  "update:modelValue",
  "change",
  ...[...events$1.manageAndEmit, ...events$1.emit].map((evt) => evt.toLowerCase())
];
const draggableComponent = defineComponent({
  name: "draggable",
  inheritAttrs: false,
  props,
  emits,
  data() {
    return {
      error: false
    };
  },
  render() {
    try {
      this.error = false;
      const { $slots, $attrs, tag, componentData, realList, getKey } = this;
      const componentStructure = computeComponentStructure({
        $slots,
        tag,
        realList,
        getKey
      });
      this.componentStructure = componentStructure;
      const attributes = getComponentAttributes({ $attrs, componentData });
      return componentStructure.render(h, attributes);
    } catch (err) {
      this.error = true;
      return h("pre", { style: { color: "red" } }, err.stack);
    }
  },
  created() {
    if (this.list !== null && this.modelValue !== null) {
      console$1.error("modelValue and list props are mutually exclusive! Please set one or another.");
    }
  },
  mounted() {
    if (this.error) {
      return;
    }
    const { $attrs, $el, componentStructure } = this;
    componentStructure.updated();
    const sortableOptions = createSortableOption({
      $attrs,
      callBackBuilder: {
        manageAndEmit: (event) => manageAndEmit.call(this, event),
        emit: (event) => emit.bind(this, event),
        manage: (event) => manage.call(this, event)
      }
    });
    const targetDomElement = $el.nodeType === 1 ? $el : $el.parentElement;
    this._sortable = new Sortable(targetDomElement, sortableOptions);
    this.targetDomElement = targetDomElement;
    targetDomElement.__draggable_component__ = this;
  },
  updated() {
    this.componentStructure.updated();
  },
  beforeUnmount() {
    if (this._sortable !== void 0)
      this._sortable.destroy();
  },
  computed: {
    realList() {
      const { list } = this;
      return list ? list : this.modelValue;
    },
    getKey() {
      const { itemKey } = this;
      if (typeof itemKey === "function") {
        return itemKey;
      }
      return (element) => element[itemKey];
    }
  },
  watch: {
    $attrs: {
      handler(newOptionValue) {
        const { _sortable } = this;
        if (!_sortable)
          return;
        getValidSortableEntries(newOptionValue).forEach(([key, value]) => {
          _sortable.option(key, value);
        });
      },
      deep: true
    }
  },
  methods: {
    getUnderlyingVm(domElement) {
      return this.componentStructure.getUnderlyingVm(domElement) || null;
    },
    getUnderlyingPotencialDraggableComponent(htmElement) {
      return htmElement.__draggable_component__;
    },
    emitChanges(evt) {
      nextTick(() => this.$emit("change", evt));
    },
    alterList(onList) {
      if (this.list) {
        onList(this.list);
        return;
      }
      const newList = [...this.modelValue];
      onList(newList);
      this.$emit("update:modelValue", newList);
    },
    spliceList() {
      const spliceList = (list) => list.splice(...arguments);
      this.alterList(spliceList);
    },
    updatePosition(oldIndex2, newIndex2) {
      const updatePosition = (list) => list.splice(newIndex2, 0, list.splice(oldIndex2, 1)[0]);
      this.alterList(updatePosition);
    },
    getRelatedContextFromMoveEvent({ to: to2, related }) {
      const component = this.getUnderlyingPotencialDraggableComponent(to2);
      if (!component) {
        return { component };
      }
      const list = component.realList;
      const context = { list, component };
      if (to2 !== related && list) {
        const destination = component.getUnderlyingVm(related) || {};
        return __spreadValues(__spreadValues({}, destination), context);
      }
      return context;
    },
    getVmIndexFromDomIndex(domIndex) {
      return this.componentStructure.getVmIndexFromDomIndex(domIndex, this.targetDomElement);
    },
    onDragStart(evt) {
      this.context = this.getUnderlyingVm(evt.item);
      evt.item._underlying_vm_ = this.clone(this.context.element);
      draggingElement = evt.item;
    },
    onDragAdd(evt) {
      const element = evt.item._underlying_vm_;
      if (element === void 0) {
        return;
      }
      removeNode(evt.item);
      const newIndex2 = this.getVmIndexFromDomIndex(evt.newIndex);
      this.spliceList(newIndex2, 0, element);
      const added = { element, newIndex: newIndex2 };
      this.emitChanges({ added });
    },
    onDragRemove(evt) {
      insertNodeAt(this.$el, evt.item, evt.oldIndex);
      if (evt.pullMode === "clone") {
        removeNode(evt.clone);
        return;
      }
      const { index: oldIndex2, element } = this.context;
      this.spliceList(oldIndex2, 1);
      const removed = { element, oldIndex: oldIndex2 };
      this.emitChanges({ removed });
    },
    onDragUpdate(evt) {
      removeNode(evt.item);
      insertNodeAt(evt.from, evt.item, evt.oldIndex);
      const oldIndex2 = this.context.index;
      const newIndex2 = this.getVmIndexFromDomIndex(evt.newIndex);
      this.updatePosition(oldIndex2, newIndex2);
      const moved2 = { element: this.context.element, oldIndex: oldIndex2, newIndex: newIndex2 };
      this.emitChanges({ moved: moved2 });
    },
    computeFutureIndex(relatedContext, evt) {
      if (!relatedContext.element) {
        return 0;
      }
      const domChildren = [...evt.to.children].filter((el) => el.style["display"] !== "none");
      const currentDomIndex = domChildren.indexOf(evt.related);
      const currentIndex = relatedContext.component.getVmIndexFromDomIndex(currentDomIndex);
      const draggedInList = domChildren.indexOf(draggingElement) !== -1;
      return draggedInList || !evt.willInsertAfter ? currentIndex : currentIndex + 1;
    },
    onDragMove(evt, originalEvent) {
      const { move: move2, realList } = this;
      if (!move2 || !realList) {
        return true;
      }
      const relatedContext = this.getRelatedContextFromMoveEvent(evt);
      const futureIndex = this.computeFutureIndex(relatedContext, evt);
      const draggedContext = __spreadProps(__spreadValues({}, this.context), {
        futureIndex
      });
      const sendEvent = __spreadProps(__spreadValues({}, evt), {
        relatedContext,
        draggedContext
      });
      return move2(sendEvent, originalEvent);
    },
    onDragEnd() {
      draggingElement = null;
    }
  }
});
const loadJs = (url) => {
  return new Promise((resolve, reject) => {
    const script = document.createElement("script");
    script.src = url;
    script.type = "text/javascript";
    document.body.appendChild(script);
    script.onload = () => {
      resolve();
    };
  });
};
const generateKeyToTD = (rows) => {
  for (let i2 = 0; i2 < rows.length; i2++) {
    for (let j = 0; j < rows[i2].columns.length; j++) {
      rows[i2].columns[j].key = Math.random().toString(36).slice(-8);
    }
  }
  return rows;
};
const generateKeyToCol = (columns) => {
  for (let i2 = 0; i2 < columns.length; i2++) {
    columns[i2].key = Math.random().toString(36).slice(-8);
  }
  return columns;
};
const splitStyleSheets = (str) => {
  if (!str) {
    return [];
  }
  let r = /}\s+./;
  let arr = str.split(r).filter((item2) => item2);
  return arr.map((sty) => {
    sty = sty.trim();
    if (sty[0] !== ".") {
      sty = "." + sty;
    }
    if (sty[sty.length - 1] !== "}") {
      sty = sty + "}";
    }
    return sty;
  });
};
const splitSheetName = (sheets) => {
  return Array.from(new Set(sheets.map((sheet) => {
    let spaceIndex = sheet.indexOf(" ");
    let nameIndex = sheet.indexOf("{");
    let index2 = nameIndex;
    if (spaceIndex > 0 && spaceIndex < nameIndex) {
      index2 = spaceIndex;
    }
    sheet = sheet.substring(1, index2);
    return sheet;
  })));
};
const updateStyleSheets = (sheets, head) => {
  let stylesheets = document.styleSheets[0];
  if (stylesheets.href) {
    let head2 = document.head || document.getElementsByTagName("head")[0];
    let style = document.createElement("style");
    style.type = "text/css";
    head2.appendChild(style);
    stylesheets = style.sheet || style.styleSheet;
  }
  let index2 = 0;
  while (stylesheets.cssRules.length > index2) {
    if (stylesheets.cssRules[index2].selectorText && stylesheets.cssRules[index2].selectorText.indexOf(head) === 0) {
      stylesheets.deleteRule(index2);
    } else {
      index2++;
    }
  }
  for (let i2 = 0; i2 < sheets.length; i2++) {
    stylesheets.insertRule(head + sheets[i2], 0);
  }
};
const clearStyleSheets = (head) => {
  let stylesheets = document.styleSheets[0];
  if (stylesheets.href) {
    return false;
  }
  let index2 = 0;
  while (stylesheets.cssRules.length > index2) {
    if (stylesheets.cssRules[index2].selectorText && stylesheets.cssRules[index2].selectorText.indexOf(head) === 0) {
      stylesheets.deleteRule(index2);
    } else {
      index2++;
    }
  }
};
const fixDraggbleList = (list, newIndex2) => {
  const listIndex = list.findIndex((item2) => !item2.key);
  if (listIndex >= 0) {
    list.splice(newIndex2, 0, list.splice(listIndex, 1)[0]);
  }
};
var index_vue_vue_type_style_index_0_lang$6 = "";
var _export_sfc = (sfc, props2) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props2) {
    target[key] = val;
  }
  return target;
};
const _sfc_main$D = {
  name: "code-editor",
  props: {
    width: {
      type: String,
      default: "100%"
    },
    height: {
      type: String,
      default: "100%"
    },
    mode: {
      type: String,
      default: "xml"
    },
    modelValue: {
      type: [String, Object, Array]
    },
    fontSize: {
      type: Number,
      default: 13
    }
  },
  emits: ["update:modelValue"],
  data() {
    return {
      id: "code_" + Math.random().toString(36).slice(-8),
      codeValue: this.modelValue,
      loading: true
    };
  },
  computed: {
    aceMode() {
      switch (this.mode) {
        case "xml":
          return "ace/mode/xml";
        case "html":
          return "ace/mode/html";
        case "json":
          return "ace/mode/json";
        case "css":
          return "ace/mode/css";
        case "javascript":
          return "ace/mode/javascript";
        default:
          return "ace/mode/xml";
      }
    }
  },
  mounted() {
    setTimeout(() => {
      if (window.ace) {
        this.loadEditor();
      } else {
        loadJs(`${window.FormMaking_OPTIONS.aceurl}/ace.js`).then(() => {
          loadJs(`${window.FormMaking_OPTIONS.aceurl}/ext-language_tools.js`).then(() => {
            this.loadEditor();
          });
        });
      }
    }, 0);
  },
  methods: {
    loadEditor() {
      this.loading = false;
      ace.require("ace/ext/language_tools");
      const editor2 = ace.edit(this.id);
      editor2.session.setMode(this.aceMode);
      editor2.setFontSize(this.fontSize);
      editor2.getSession().setTabSize(2);
      editor2.setShowPrintMargin(false);
      editor2.setOptions({
        enableBasicAutoCompletion: true,
        enableSnippets: true,
        enableLiveAutocompletion: true
      });
      editor2.commands.addCommand({
        name: "myCommand",
        bindKey: { win: "Ctrl-Enter", mac: "Command-Enter" },
        exec: function(editor3) {
          editor3.selection.getCursor();
          editor3.selection.moveCursorLineEnd();
          editor3.selection.moveTo(editor3.selection.getCursor().row, editor3.selection.getCursor().column);
          editor3.session.insert(editor3.getCursorPosition(), "\n");
        }
      });
      editor2.setValue(typeof this.codeValue === "string" ? this.codeValue : JSON.stringify(this.codeValue, null, "	"), -1);
      editor2.on("change", (e) => {
        this.codeValue = editor2.getValue();
      });
    }
  },
  watch: {
    modelValue(val) {
      this.codeValue = val;
    },
    codeValue(val) {
      this.$emit("update:modelValue", val);
    }
  }
};
const _hoisted_1$t = ["id"];
function _sfc_render$A(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", {
    id: $data.id,
    class: "fm-code-editor",
    style: normalizeStyle({ width: $props.width, height: $props.height })
  }, null, 12, _hoisted_1$t);
}
var CodeEditor = /* @__PURE__ */ _export_sfc(_sfc_main$D, [["render", _sfc_render$A]]);
var CusDialog_vue_vue_type_style_index_0_lang = "";
const _sfc_main$C = {
  props: {
    visible: Boolean,
    loadingText: {
      type: String,
      default: ""
    },
    title: {
      type: String,
      default: ""
    },
    width: {
      type: String,
      default: "600px"
    },
    form: {
      type: Boolean,
      default: true
    },
    action: {
      type: Boolean,
      default: true
    },
    fullscreen: {
      type: Boolean,
      default: false
    },
    closeOnClickModal: {
      type: Boolean,
      default: false
    },
    customClass: {
      type: String,
      default: ""
    }
  },
  emits: ["on-submit", "on-close"],
  computed: {
    show() {
      if (this.form) {
        return this.showForm;
      } else {
        return true;
      }
    }
  },
  data() {
    return {
      loading: false,
      dialogVisible: this.visible,
      showForm: false
    };
  },
  methods: {
    close() {
      this.dialogVisible = false;
    },
    submit() {
      this.loading = true;
      this.$emit("on-submit");
    },
    end() {
      this.loading = false;
    }
  },
  mounted() {
  },
  watch: {
    dialogVisible(val) {
      if (!val) {
        this.loading = false;
        this.$emit("on-close");
        setTimeout(() => {
          this.showForm = false;
        }, 300);
      } else {
        this.showForm = true;
      }
    },
    visible(val) {
      this.dialogVisible = val;
    }
  }
};
const _hoisted_1$s = { key: 0 };
const _hoisted_2$o = ["element-loading-text"];
function _sfc_render$z(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_button = resolveComponent("el-button");
  const _component_el_dialog = resolveComponent("el-dialog");
  const _directive_loading = resolveDirective("loading");
  return openBlock(), createBlock(_component_el_dialog, {
    "custom-class": $props.customClass + " cus-dialog-container",
    title: $props.title,
    modelValue: $data.dialogVisible,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.dialogVisible = $event),
    "close-on-click-modal": $props.closeOnClickModal,
    "append-to-body": "",
    center: "",
    width: $props.width,
    ref: "elDialog",
    fullscreen: $props.fullscreen,
    top: "10vh",
    draggable: ""
  }, createSlots({
    default: withCtx(() => [
      $options.show ? (openBlock(), createElementBlock("span", _hoisted_1$s, [
        renderSlot(_ctx.$slots, "default")
      ])) : createCommentVNode("", true)
    ]),
    _: 2
  }, [
    $props.action ? {
      name: "footer",
      fn: withCtx(() => [
        withDirectives((openBlock(), createElementBlock("span", {
          class: "dialog-footer",
          "element-loading-text": $props.loadingText
        }, [
          renderSlot(_ctx.$slots, "action", {}, () => [
            createVNode(_component_el_button, { onClick: $options.close }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.cancel")), 1)
              ]),
              _: 1
            }, 8, ["onClick"]),
            createVNode(_component_el_button, {
              type: "primary",
              onClick: $options.submit
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.confirm")), 1)
              ]),
              _: 1
            }, 8, ["onClick"])
          ])
        ], 8, _hoisted_2$o)), [
          [_directive_loading, $data.loading]
        ])
      ])
    } : void 0
  ]), 1032, ["custom-class", "title", "modelValue", "close-on-click-modal", "width", "fullscreen"]);
}
var CusDialog = /* @__PURE__ */ _export_sfc(_sfc_main$C, [["render", _sfc_render$z]]);
var CodeDialog_vue_vue_type_style_index_0_lang = "";
const _sfc_main$B = {
  components: {
    CusDialog,
    CodeEditor
  },
  props: {
    mode: {
      type: String,
      default: "xml"
    },
    title: {
      type: String,
      default: ""
    },
    help: {
      type: String,
      default: ""
    },
    width: {
      type: String,
      default: "900px"
    },
    codeHeight: {
      type: String,
      default: "460px"
    }
  },
  emits: ["on-confirm"],
  data() {
    return {
      templateVisible: false,
      templ: ""
    };
  },
  methods: {
    handleSubmit() {
      this.$emit("on-confirm", this.templ);
    },
    open(val) {
      this.templ = val;
      this.templateVisible = true;
    },
    close() {
      this.templateVisible = false;
    },
    handleHelp() {
      window.open(this.help);
    }
  }
};
const _hoisted_1$r = {
  key: 0,
  class: "code-dialog-help"
};
const _hoisted_2$n = /* @__PURE__ */ createTextVNode("\u5E2E\u52A9");
const _hoisted_3$m = /* @__PURE__ */ createElementVNode("i", { class: "el-icon-question el-icon--right" }, null, -1);
function _sfc_render$y(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_code_editor = resolveComponent("code-editor");
  const _component_el_button = resolveComponent("el-button");
  const _component_cus_dialog = resolveComponent("cus-dialog");
  return openBlock(), createBlock(_component_cus_dialog, {
    visible: $data.templateVisible,
    onOnClose: _cache[1] || (_cache[1] = ($event) => $data.templateVisible = false),
    ref: "templateDialog",
    width: $props.width,
    form: "",
    title: $props.title,
    onOnSubmit: $options.handleSubmit,
    "custom-class": "code-dialog-container"
  }, {
    default: withCtx(() => [
      createVNode(_component_code_editor, {
        height: $props.codeHeight,
        mode: this.mode,
        modelValue: $data.templ,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.templ = $event)
      }, null, 8, ["height", "mode", "modelValue"]),
      $props.help ? (openBlock(), createElementBlock("div", _hoisted_1$r, [
        createVNode(_component_el_button, {
          type: "text",
          onClick: $options.handleHelp
        }, {
          default: withCtx(() => [
            _hoisted_2$n,
            _hoisted_3$m
          ]),
          _: 1
        }, 8, ["onClick"])
      ])) : createCommentVNode("", true)
    ]),
    _: 1
  }, 8, ["visible", "width", "title", "onOnSubmit"]);
}
var CodeDialog = /* @__PURE__ */ _export_sfc(_sfc_main$B, [["render", _sfc_render$y]]);
var index_vue_vue_type_style_index_0_lang$5 = "";
const _sfc_main$A = {
  components: {
    GenerateElementItem: defineAsyncComponent(() => Promise.resolve().then(function() {
      return GenerateElementItem$1;
    }))
  },
  props: ["columns", "value", "models", "remote", "blanks", "disableddata", "rules", "name", "remoteOption", "preview", "platform", "dataSourceValue", "eventFunction", "widget", "printRead", "formComponent", "paging", "pageSize"],
  data() {
    return {
      tableData: this.value,
      displayFields: {},
      changeItem: {},
      pagingData: [],
      currentPage: 1,
      tableHideFields: this.value ? this.value.map((item2) => Object.keys(item2).map((o) => ({ [o]: false }))) : [],
      tableDisabledFields: this.value ? this.value.map((item2) => Object.keys(item2).map((o) => ({ [o]: false }))) : []
    };
  },
  created() {
    for (let i2 = 0; i2 < this.columns.length; i2++) {
      this.displayFields[this.columns[i2].model] = !this.columns[i2].options.hidden;
    }
    this.loadPagingData();
  },
  methods: {
    handleAddRow() {
      let item2 = {};
      let hideItem = {};
      let disabledItem = {};
      for (let i2 = 0; i2 < this.columns.length; i2++) {
        if (this.columns[i2].type === "blank") {
          item2[this.columns[i2].model] = this.columns[i2].options.defaultType == "String" ? "" : this.columns[i2].options.defaultType == "Object" ? {} : [];
        } else if (this.columns[i2].type === "component" || this.columns[i2].type === "link" || this.columns[i2].type === "button") {
          item2[this.columns[i2].model] = void 0;
        } else {
          item2[this.columns[i2].model] = JSON.parse(JSON.stringify(this.columns[i2].options.defaultValue));
        }
        hideItem[this.columns[i2].model] = false;
        disabledItem[this.columns[i2].mode] = false;
      }
      this.tableData.push(item2);
      this.tableHideFields.push(hideItem);
      this.tableDisabledFields.push(disabledItem);
      if (this.widget && this.widget.events && this.widget.events.onRowAdd) {
        let funcKey = this.widget.events.onRowAdd;
        this.eventFunction[funcKey]({ rowIndex: this.tableData.length - 1, field: this.widget.model });
      }
      this.changeItem = {};
      if (this.paging) {
        this.$nextTick(() => {
          if (this.tableData.length > this.currentPage * this.pageSize) {
            this.currentPage = parseInt((this.tableData.length - 1) / this.pageSize) + 1;
          }
          this.loadPagingData();
        });
      }
    },
    handleRemove(index2) {
      this.tableData.splice(index2, 1);
      if (this.widget && this.widget.events && this.widget.events.onRowRemove) {
        let funcKey = this.widget.events.onRowRemove;
        this.eventFunction[funcKey]({ removeIndex: index2, field: this.widget.model });
      }
      this.changeItem = {};
      this.pagingData = [];
      if (this.paging) {
        this.$nextTick(() => {
          if (this.tableData.length % this.pageSize == 0 && this.currentPage > parseInt(this.tableData.length / this.pageSize)) {
            this.currentPage = parseInt(this.tableData.length / this.pageSize);
          }
          this.loadPagingData();
        });
      }
    },
    hideChild(rowIndex, fields) {
      fields.forEach((field) => {
        this.tableHideFields[rowIndex][field] = true;
      });
    },
    displayChild(rowIndex, fields) {
      fields.forEach((field) => {
        this.tableHideFields[rowIndex][field] = false;
      });
    },
    hide(fields) {
      Object.keys(this.displayFields).forEach((key) => {
        if (fields.indexOf(key) >= 0) {
          this.displayFields[key] = false;
        }
      });
      this.displayFields = __spreadValues({}, this.displayFields);
    },
    display(fields) {
      Object.keys(this.displayFields).forEach((key) => {
        if (fields.indexOf(key) >= 0) {
          this.displayFields[key] = true;
        }
      });
      this.displayFields = __spreadValues({}, this.displayFields);
    },
    disabledChild(rowIndex, fields, disabled) {
      fields.forEach((field) => {
        this.tableDisabledFields[rowIndex][field] = disabled;
      });
    },
    disabled(fields, disabled) {
      for (let i2 = 0; i2 < this.columns.length; i2++) {
        if (fields.indexOf(this.columns[i2].model) >= 0) {
          this.columns[i2].options.disabled = disabled;
        }
      }
    },
    handleTableChange(value) {
      this.changeItem = value;
    },
    handlePageChange(val) {
      this.currentPage = val;
      this.pagingData = [];
      this.$nextTick(() => {
        this.loadPagingData();
        this.$refs[this.name + "-item"].forEach((item2) => {
          item2.clearValidate();
        });
      });
    },
    loadPagingData() {
      let beginIndex = (this.currentPage - 1) * this.pageSize;
      let endIndex = beginIndex + this.pageSize;
      this.pagingData = this.tableData.slice(beginIndex, endIndex);
    }
  },
  watch: {
    value(val) {
      var _a2, _b, _c, _d, _e, _f;
      this.tableData = val;
      let hideFields = [];
      let disabledFields = [];
      for (let i2 = 0; i2 < this.value.length; i2++) {
        let row = this.value[i2];
        let rowArray = Object.keys(row);
        let hideRow = {};
        let disabledRow = {};
        for (let f = 0; f < rowArray.length; f++) {
          hideRow[rowArray[f]] = (_c = (_b = (_a2 = this.tableHideFields) == null ? void 0 : _a2[i2]) == null ? void 0 : _b[rowArray[f]]) != null ? _c : false;
          disabledRow[rowArray[f]] = (_f = (_e = (_d = this.tableDisabledFields) == null ? void 0 : _d[i2]) == null ? void 0 : _e[rowArray[f]]) != null ? _f : false;
        }
        hideFields.push(hideRow);
        disabledFields.push(disabledRow);
      }
      this.tableHideFields = hideFields;
      this.tableDisabledFields = disabledFields;
    },
    "tableData": {
      deep: true,
      handler(val) {
        this.loadPagingData();
        if (this.changeItem.haveEvent) {
          this.eventFunction[this.changeItem.haveEvent](this.changeItem);
        }
      }
    }
  }
};
const _hoisted_1$q = { class: "scope-index" };
const _hoisted_2$m = { class: "scope-action" };
const _hoisted_3$l = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-trash",
  style: { "font-size": "12px", "margin": "5px" }
}, null, -1);
const _hoisted_4$l = { key: 1 };
const _hoisted_5$k = { class: "form-table-mobile-item__top" };
const _hoisted_6$h = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-trash",
  style: { "font-size": "12px", "margin": "5px" }
}, null, -1);
const _hoisted_7$f = { class: "form-table-mobile-item__content" };
const _hoisted_8$d = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-plus",
  style: { "font-size": "12px", "margin": "5px" }
}, null, -1);
function _sfc_render$x(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_button = resolveComponent("el-button");
  const _component_el_table_column = resolveComponent("el-table-column");
  const _component_GenerateElementItem = resolveComponent("GenerateElementItem");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_el_table = resolveComponent("el-table");
  const _component_el_col = resolveComponent("el-col");
  const _component_el_pagination = resolveComponent("el-pagination");
  const _component_el_row = resolveComponent("el-row");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["form-table", { "is-disabled": $props.disableddata }])
  }, [
    withDirectives(createVNode(_component_el_table, {
      data: $props.paging ? $data.pagingData : $data.tableData,
      border: "",
      class: normalizeClass({ "form-table-pc": !$props.preview })
    }, {
      default: withCtx(() => [
        createVNode(_component_el_table_column, {
          label: "#",
          fixed: "",
          width: "50"
        }, {
          default: withCtx((scope) => [
            createElementVNode("div", _hoisted_1$q, [
              createElementVNode("span", null, toDisplayString$1(($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + scope.$index + 1), 1)
            ]),
            createElementVNode("div", _hoisted_2$m, [
              !$props.printRead ? (openBlock(), createBlock(_component_el_button, {
                key: 0,
                disabled: $props.disableddata,
                onClick: ($event) => $options.handleRemove(($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + scope.$index),
                type: "danger",
                size: "small",
                circle: ""
              }, {
                default: withCtx(() => [
                  _hoisted_3$l
                ]),
                _: 2
              }, 1032, ["disabled", "onClick"])) : createCommentVNode("", true),
              $props.printRead ? (openBlock(), createElementBlock("span", _hoisted_4$l, toDisplayString$1(($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + scope.$index + 1), 1)) : createCommentVNode("", true)
            ])
          ]),
          _: 1
        }),
        $props.columns.length == 0 ? (openBlock(), createBlock(_component_el_table_column, { key: 0 })) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList($props.columns, (column) => {
          return openBlock(), createElementBlock(Fragment, {
            key: column.model
          }, [
            $data.displayFields[column.model] ? (openBlock(), createBlock(_component_el_table_column, {
              key: 0,
              label: column.options.hideLabel ? "" : column.name,
              width: column.options.width,
              "label-class-name": column.options.required ? "required" : ""
            }, {
              default: withCtx((scope) => [
                createVNode(_component_el_form_item, {
                  ref_for: true,
                  ref: `${$props.name}-item`,
                  prop: `${$props.name}.${($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + scope.$index}.${column.model}`,
                  rules: $props.rules[`${$props.name}.${column.model}`]
                }, {
                  default: withCtx(() => {
                    var _a2, _b;
                    return [
                      !((_b = (_a2 = $data.tableHideFields) == null ? void 0 : _a2[scope.$index]) == null ? void 0 : _b[column.model]) ? (openBlock(), createBlock(_component_GenerateElementItem, {
                        key: 0,
                        edit: !$data.tableDisabledFields[scope.$index][column.model] && !$props.disableddata,
                        blanks: $props.blanks,
                        "is-table": true,
                        widget: column,
                        modelValue: scope.row[column.model],
                        "onUpdate:modelValue": ($event) => scope.row[column.model] = $event,
                        models: $data.tableData[($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + scope.$index],
                        remote: $props.remote,
                        "remote-option": $props.remoteOption,
                        "row-index": ($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + scope.$index,
                        "table-name": $props.name,
                        "event-function": $props.eventFunction,
                        "data-source-value": $props.dataSourceValue,
                        "print-read": $props.printRead,
                        onOnTableChange: $options.handleTableChange
                      }, createSlots({ _: 2 }, [
                        renderList($props.blanks, (blank) => {
                          return {
                            name: blank.name,
                            fn: withCtx(() => [
                              renderSlot(_ctx.$slots, blank.name, {
                                model: scope.row
                              })
                            ])
                          };
                        })
                      ]), 1032, ["edit", "blanks", "widget", "modelValue", "onUpdate:modelValue", "models", "remote", "remote-option", "row-index", "table-name", "event-function", "data-source-value", "print-read", "onOnTableChange"])) : createCommentVNode("", true)
                    ];
                  }),
                  _: 2
                }, 1032, ["prop", "rules"])
              ]),
              _: 2
            }, 1032, ["label", "width", "label-class-name"])) : createCommentVNode("", true)
          ], 64);
        }), 128))
      ]),
      _: 3
    }, 8, ["data", "class"]), [
      [vShow, $props.preview && $props.platform != "mobile" || !$props.preview]
    ]),
    withDirectives(createElementVNode("div", {
      class: "form-table-mobile",
      style: normalizeStyle({ "display": $props.preview && $props.platform === "mobile" ? "block" : "" })
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList($props.paging ? $data.pagingData : $data.tableData, (t, index2) => {
        return openBlock(), createElementBlock("div", {
          class: "form-table-mobile-item",
          key: ($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2
        }, [
          createElementVNode("div", _hoisted_5$k, [
            createElementVNode("span", null, "# " + toDisplayString$1(($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2 + 1), 1),
            !$props.printRead ? (openBlock(), createBlock(_component_el_button, {
              key: 0,
              disabled: $props.disableddata,
              onClick: ($event) => $options.handleRemove(($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2),
              type: "danger",
              size: "small",
              circle: ""
            }, {
              default: withCtx(() => [
                _hoisted_6$h
              ]),
              _: 2
            }, 1032, ["disabled", "onClick"])) : createCommentVNode("", true)
          ]),
          createElementVNode("div", _hoisted_7$f, [
            (openBlock(true), createElementBlock(Fragment, null, renderList($props.columns, (column) => {
              return openBlock(), createElementBlock(Fragment, {
                key: column.key
              }, [
                $data.displayFields[column.model] ? (openBlock(), createBlock(_component_el_form_item, {
                  key: 0,
                  ref_for: true,
                  ref: `${$props.name}-item`,
                  label: column.options.hideLabel ? "" : column.name,
                  "label-width": column.options.hideLabel ? "0px" : column.options.isLabelWidth ? column.options.labelWidth + "px" : "",
                  prop: `${$props.name}.${($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2}.${column.model}`,
                  rules: $props.rules[`${$props.name}.${column.model}`]
                }, {
                  default: withCtx(() => {
                    var _a2, _b;
                    return [
                      !((_b = (_a2 = $data.tableHideFields) == null ? void 0 : _a2[index2]) == null ? void 0 : _b[column.model]) ? (openBlock(), createBlock(_component_GenerateElementItem, {
                        key: 0,
                        edit: !$data.tableDisabledFields[index2][column.model] && !$props.disableddata,
                        blanks: $props.blanks,
                        "is-table": true,
                        widget: column,
                        modelValue: $data.tableData[($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2][column.model],
                        "onUpdate:modelValue": ($event) => $data.tableData[($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2][column.model] = $event,
                        models: $data.tableData[($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2],
                        remote: $props.remote,
                        "remote-option": $props.remoteOption,
                        "row-index": ($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2,
                        "table-name": $props.name,
                        "event-function": $props.eventFunction,
                        "data-source-value": $props.dataSourceValue,
                        "print-read": $props.printRead,
                        onOnTableChange: $options.handleTableChange,
                        "is-mobile": true
                      }, createSlots({ _: 2 }, [
                        renderList($props.blanks, (blank) => {
                          return {
                            name: blank.name,
                            fn: withCtx(() => [
                              renderSlot(_ctx.$slots, blank.name, {
                                model: $data.tableData[($props.paging ? $props.pageSize * ($data.currentPage - 1) : 0) + index2]
                              })
                            ])
                          };
                        })
                      ]), 1032, ["edit", "blanks", "widget", "modelValue", "onUpdate:modelValue", "models", "remote", "remote-option", "row-index", "table-name", "event-function", "data-source-value", "print-read", "onOnTableChange"])) : createCommentVNode("", true)
                    ];
                  }),
                  _: 2
                }, 1032, ["label", "label-width", "prop", "rules"])) : createCommentVNode("", true)
              ], 64);
            }), 128))
          ])
        ]);
      }), 128))
    ], 4), [
      [vShow, $props.preview && $props.platform === "mobile" || !$props.preview]
    ]),
    createVNode(_component_el_row, null, {
      default: withCtx(() => [
        createVNode(_component_el_col, {
          span: $props.preview && $props.platform != "mobile" || !$props.preview ? 12 : 24,
          xs: 24
        }, {
          default: withCtx(() => [
            !$props.disableddata ? (openBlock(), createBlock(_component_el_button, {
              key: 0,
              type: "text",
              onClick: $options.handleAddRow
            }, {
              default: withCtx(() => [
                _hoisted_8$d,
                createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.add")), 1)
              ]),
              _: 1
            }, 8, ["onClick"])) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["span"]),
        createVNode(_component_el_col, {
          span: ($props.preview && $props.platform != "mobile" || !$props.preview) && !$props.disableddata ? 12 : 24,
          xs: 24
        }, {
          default: withCtx(() => [
            $props.paging && $data.tableData.length ? (openBlock(), createBlock(_component_el_pagination, {
              key: 0,
              style: { "float": "right" },
              layout: "total, prev, pager, next",
              "page-size": $props.pageSize,
              "current-page": $data.currentPage,
              total: $data.tableData.length,
              "pager-count": 5,
              onCurrentChange: $options.handlePageChange
            }, null, 8, ["page-size", "current-page", "total", "onCurrentChange"])) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["span"])
      ]),
      _: 1
    })
  ], 2);
}
var FmFormTable = /* @__PURE__ */ _export_sfc(_sfc_main$A, [["render", _sfc_render$x]]);
var config_vue_vue_type_style_index_0_lang = "";
const _sfc_main$z = {
  name: "event-config",
  props: ["events", "eventscripts"],
  emits: ["on-add", "on-remove", "on-edit", "update:events"],
  data() {
    return {
      eventsModel: this.events,
      eventArray: Object.keys(this.events).map((item2) => ({
        eventName: item2,
        functionKey: this.events[item2]
      })).filter((item2) => item2.functionKey),
      eventEnum: {
        onChange: "onChange \u503C\u53D1\u751F\u53D8\u5316",
        onClick: "onClick \u5355\u51FB",
        onFocus: "onFocus \u83B7\u53D6\u7126\u70B9",
        onBlur: "onBlur \u5931\u53BB\u7126\u70B9",
        onRowAdd: "onRowAdd \u5B50\u8868\u5355\u6DFB\u52A0\u884C",
        onRowRemove: "onRowRemove \u5B50\u8868\u5355\u5220\u9664\u884C",
        onUploadSuccess: "onUploadSuccess \u4E0A\u4F20\u6210\u529F",
        onUploadError: "onUploadError \u4E0A\u4F20\u5931\u8D25",
        onRemove: "onRemove \u79FB\u9664",
        onUploadProgress: "onUploadProgress \u4E0A\u4F20\u4E2D",
        onSelect: "onSelect \u6587\u4EF6\u9009\u62E9"
      }
    };
  },
  methods: {
    handleCommand(command) {
      this.$emit("on-add", command);
    },
    handleRemove(item2, index2) {
      this.$emit("on-remove", item2.eventName);
    },
    handleCode(item2) {
      this.$emit("on-edit", item2);
    }
  },
  watch: {
    events: {
      deep: true,
      handler(val) {
        this.eventsModel = val;
        this.eventArray = Object.keys(this.events).map((item2) => ({
          eventName: item2,
          functionKey: this.events[item2]
        })).filter((item2) => item2.functionKey);
      }
    },
    eventsModel: {
      deep: true,
      handler(val) {
        this.$emit("update:events", val);
      }
    },
    eventArray: {
      deep: true,
      handler(val) {
        for (let i2 = 0; i2 < val.length; i2++) {
          this.eventsModel[val[i2].eventName] = val[i2].functionKey;
        }
      }
    }
  }
};
const _hoisted_1$p = { class: "event-panel-config" };
const _hoisted_2$l = { class: "event-panel-item" };
const _hoisted_3$k = ["onClick", "title"];
const _hoisted_4$k = ["onClick", "title"];
const _hoisted_5$j = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-plus",
  style: { "font-size": "12px", "margin": "5px" }
}, null, -1);
function _sfc_render$w(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_option = resolveComponent("el-option");
  const _component_el_select = resolveComponent("el-select");
  const _component_el_collapse_item = resolveComponent("el-collapse-item");
  const _component_el_collapse = resolveComponent("el-collapse");
  const _component_el_button = resolveComponent("el-button");
  const _component_el_dropdown_item = resolveComponent("el-dropdown-item");
  const _component_el_dropdown_menu = resolveComponent("el-dropdown-menu");
  const _component_el_dropdown = resolveComponent("el-dropdown");
  return openBlock(), createElementBlock("div", _hoisted_1$p, [
    $data.eventArray.length ? (openBlock(), createBlock(_component_el_collapse, {
      key: 0,
      modelValue: $data.eventArray.map((item2) => item2.eventName)
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList($data.eventArray, (item2, index2) => {
          return openBlock(), createBlock(_component_el_collapse_item, {
            key: item2.eventName,
            name: item2.eventName,
            title: _ctx.$i18n.locale == "zh-cn" ? $data.eventEnum[item2.eventName] : item2.eventName
          }, {
            default: withCtx(() => [
              createElementVNode("div", _hoisted_2$l, [
                createVNode(_component_el_select, {
                  size: "default",
                  style: { "width": "100%", "margin-bottom": "5px" },
                  modelValue: item2.functionKey,
                  "onUpdate:modelValue": ($event) => item2.functionKey = $event
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList($props.eventscripts, (item3) => {
                      return openBlock(), createBlock(_component_el_option, {
                        key: item3.value,
                        label: item3.label,
                        value: item3.value
                      }, null, 8, ["label", "value"]);
                    }), 128))
                  ]),
                  _: 2
                }, 1032, ["modelValue", "onUpdate:modelValue"]),
                createElementVNode("i", {
                  class: "iconfont icon-code",
                  onClick: ($event) => $options.handleCode(item2),
                  title: _ctx.$t("fm.eventscript.config.code")
                }, null, 8, _hoisted_3$k),
                createElementVNode("i", {
                  class: "iconfont icon-trash",
                  onClick: ($event) => $options.handleRemove(item2, index2),
                  title: _ctx.$t("fm.tooltip.trash")
                }, null, 8, _hoisted_4$k)
              ])
            ]),
            _: 2
          }, 1032, ["name", "title"]);
        }), 128))
      ]),
      _: 1
    }, 8, ["modelValue"])) : createCommentVNode("", true),
    createVNode(_component_el_dropdown, {
      style: { "width": "100%", "margin-top": "5px", "display": "block" },
      trigger: "click",
      onCommand: $options.handleCommand,
      szie: "small"
    }, {
      dropdown: withCtx(() => [
        createVNode(_component_el_dropdown_menu, { style: { "width": "280px" } }, {
          default: withCtx(() => [
            (openBlock(true), createElementBlock(Fragment, null, renderList(Object.keys($props.events), (e) => {
              return openBlock(), createElementBlock(Fragment, { key: e }, [
                _ctx.$i18n.locale == "zh-cn" ? (openBlock(), createBlock(_component_el_dropdown_item, {
                  key: 0,
                  disabled: $data.eventArray.filter((item2) => item2.eventName == e).length != 0,
                  command: e
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1($data.eventEnum[e]), 1)
                  ]),
                  _: 2
                }, 1032, ["disabled", "command"])) : (openBlock(), createBlock(_component_el_dropdown_item, {
                  key: 1,
                  disabled: $data.eventArray.filter((item2) => item2.eventName == e).length != 0,
                  command: e
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(e), 1)
                  ]),
                  _: 2
                }, 1032, ["disabled", "command"]))
              ], 64);
            }), 128))
          ]),
          _: 1
        })
      ]),
      default: withCtx(() => [
        createVNode(_component_el_button, {
          type: "primary",
          plain: "",
          style: { "width": "100%" },
          size: "default"
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString$1(_ctx.$t("fm.eventscript.config.create")), 1),
            _hoisted_5$j
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["onCommand"])
  ]);
}
var EventConfig = /* @__PURE__ */ _export_sfc(_sfc_main$z, [["render", _sfc_render$w]]);
const _sfc_main$y = {
  name: "index",
  props: {
    modelValue: {
      type: String,
      default: ""
    },
    toolbar: { type: Array },
    disabled: { type: Boolean },
    customStyle: { type: Object }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: emit2 }) {
    const props2 = __props;
    const editorValue = ref(props2.modelValue);
    let newValue = props2.modelValue;
    const quillEditor = ref(null);
    watch(() => props2.modelValue, (val) => {
      if (newValue === val)
        return;
      quillEditor.value.setHTML(val);
      nextTick(() => {
        let q = quillEditor.value.getQuill();
        q.setSelection(val.length, 0, "api");
        q.focus();
      });
    });
    watch(editorValue, (val) => {
      emit2("update:modelValue", val);
      newValue = val;
    });
    return (_ctx, _cache) => {
      const _component_QuillEditor = resolveComponent("QuillEditor");
      return openBlock(), createBlock(_component_QuillEditor, {
        content: editorValue.value,
        "onUpdate:content": _cache[0] || (_cache[0] = ($event) => editorValue.value = $event),
        style: normalizeStyle(__props.customStyle),
        toolbar: __props.toolbar,
        enable: !__props.disabled,
        "read-only": __props.disabled,
        "content-type": "html",
        ref_key: "quillEditor",
        ref: quillEditor
      }, null, 8, ["content", "style", "toolbar", "enable", "read-only"]);
    };
  }
};
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
}
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var a = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var tinyEmitter = { exports: {} };
function E$1() {
}
E$1.prototype = {
  on: function(name, callback, ctx) {
    var e = this.e || (this.e = {});
    (e[name] || (e[name] = [])).push({
      fn: callback,
      ctx
    });
    return this;
  },
  once: function(name, callback, ctx) {
    var self2 = this;
    function listener() {
      self2.off(name, listener);
      callback.apply(ctx, arguments);
    }
    listener._ = callback;
    return this.on(name, listener, ctx);
  },
  emit: function(name) {
    var data2 = [].slice.call(arguments, 1);
    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
    var i2 = 0;
    var len = evtArr.length;
    for (i2; i2 < len; i2++) {
      evtArr[i2].fn.apply(evtArr[i2].ctx, data2);
    }
    return this;
  },
  off: function(name, callback) {
    var e = this.e || (this.e = {});
    var evts = e[name];
    var liveEvents = [];
    if (evts && callback) {
      for (var i2 = 0, len = evts.length; i2 < len; i2++) {
        if (evts[i2].fn !== callback && evts[i2].fn._ !== callback)
          liveEvents.push(evts[i2]);
      }
    }
    liveEvents.length ? e[name] = liveEvents : delete e[name];
    return this;
  }
};
tinyEmitter.exports = E$1;
tinyEmitter.exports.TinyEmitter = E$1;
var E = tinyEmitter.exports;
var instance = new E();
const EventBus = {
  $on: (...args) => instance.on(...args),
  $once: (...args) => instance.once(...args),
  $off: (...args) => instance.off(...args),
  $emit: (...args) => instance.emit(...args)
};
const SYS_PATH = "/system-server";
let request$5;
var dictService = {
  build: function($http) {
    request$5 = $http;
    return this;
  },
  queryById: function(id) {
    return request$5({
      url: SYS_PATH + `/sys/dict/queryById`,
      method: "get",
      params: { id }
    });
  },
  save: function(inputForm) {
    return request$5({
      url: SYS_PATH + `/sys/dict/save`,
      method: "post",
      data: inputForm
    });
  },
  list: function(params) {
    return request$5({
      url: SYS_PATH + "/sys/dict/type/list",
      method: "get",
      params
    });
  },
  delete: function(ids) {
    return request$5({
      url: SYS_PATH + "/sys/dict/delete",
      method: "delete",
      params: { "ids": ids }
    });
  },
  queryDictValue: function(id) {
    return request$5({
      url: SYS_PATH + `/sys/dict/queryDictValue`,
      method: "get",
      params: { dictValueId: id },
      loading: false
    });
  },
  saveDictValue: function(inputForm) {
    return request$5({
      url: SYS_PATH + `/sys/dict/saveDictValue`,
      method: "post",
      data: inputForm
    });
  },
  getDictValue: function(dictTypeId) {
    return request$5({
      url: SYS_PATH + "/sys/dict/getDictValue",
      method: "get",
      params: {
        "dictTypeId": dictTypeId
      }
    });
  },
  getDictMap: function(dictTypeId) {
    return request$5({
      url: SYS_PATH + "/sys/dict/getDictMap",
      method: "get",
      params: {
        "dictTypeId": dictTypeId
      }
    });
  },
  deleteDictValue: function(ids) {
    return request$5({
      url: SYS_PATH + "/sys/dict/deleteDictValue",
      method: "delete",
      params: { ids }
    });
  }
};
var request$4 = globalThis.$http;
var makeFormService = {
  save: function(inputForm) {
    return request$4({
      url: SYS_PATH + `/form/make/save`,
      method: "post",
      data: inputForm
    });
  },
  saveFormSource: function(inputForm) {
    return request$4({
      url: SYS_PATH + `/form/make/saveFormSource`,
      method: "post",
      data: inputForm
    });
  },
  saveBasicInfo: function(inputForm) {
    return request$4({
      url: SYS_PATH + `/form/make/saveBasicInfo`,
      method: "post",
      data: inputForm
    });
  },
  delete: function(ids) {
    return request$4({
      url: SYS_PATH + "/form/make/delete",
      method: "delete",
      params: { ids }
    });
  },
  queryById: function(id) {
    return request$4({
      url: SYS_PATH + `/form/make/queryById`,
      method: "get",
      params: { id }
    });
  },
  getTableColumnList: function(params) {
    return request$4({
      url: SYS_PATH + `/form/make/getTableColumnList`,
      method: "get",
      params
    });
  },
  getTableList: function(params) {
    return request$4({
      url: SYS_PATH + `/form/make/getTableList`,
      method: "get",
      params
    });
  },
  list: function(params) {
    return request$4({
      url: SYS_PATH + "/form/make/list",
      method: "get",
      params
    });
  },
  validateTableNoExist: function(params) {
    return request$4({
      url: SYS_PATH + `/form/make/validateTableNoExist`,
      method: "get",
      params
    });
  },
  validateKeyNoExist: function(params) {
    return request$4({
      url: SYS_PATH + `/form/make/validateKeyNoExist`,
      method: "get",
      params
    });
  },
  createMenu: function(inputForm) {
    return request$4({
      url: SYS_PATH + `/form/make/createMenu`,
      method: "post",
      headers: { "Content-Type": "application/x-www-form-urlencoded; charset=utf-8" },
      data: inputForm
    });
  }
};
const _sfc_main$x = {
  components: {
    Draggable: draggableComponent,
    CodeEditor,
    CodeDialog,
    CusDialog,
    FmFormTable,
    EventConfig,
    Editor: _sfc_main$y
  },
  props: {
    bindDataTable: {
      type: Boolean,
      default: false
    },
    data: {
      type: Object,
      default: () => {
      }
    },
    widgetForm: {
      type: Object,
      default: () => {
      }
    },
    mainTable: {
      type: String,
      default: ""
    },
    sheets: {
      type: Array,
      default: () => []
    },
    platform: {
      type: String,
      default: ""
    },
    datasources: {
      type: String,
      default: ""
    },
    eventscripts: {
      type: String,
      default: ""
    },
    formKey: {
      type: String,
      default: ""
    }
  },
  emits: ["update:data", "on-event-add", "on-event-edit", "on-event-remove"],
  data() {
    return {
      dictList: [],
      dataTables: [],
      dataTableColumns: [],
      parentTableColumns: [],
      mainTableColumns: [],
      dataBindFields: [],
      parentWidget: {},
      validator: {
        type: null,
        required: null,
        pattern: null,
        range: null,
        length: null,
        validator: null
      },
      editorVisible: false,
      tableVisible: false,
      customClassArray: this.data && this.data.options && this.data.options.customClass ? this.data.options.customClass.split(" ").filter((item2) => item2) : []
    };
  },
  computed: {
    show() {
      if (this.data && Object.keys(this.data).length > 0 && this.data.key && this.data.options) {
        return true;
      }
      return false;
    },
    parent() {
      if (this.data && Object.keys(this.data).length > 0 && this.data.key) {
        this._findParentItem(this.widgetForm.list, this.data.key, this.widgetForm);
        return this.parentWidget;
      } else {
        return {};
      }
    }
  },
  mounted() {
    var _a2, _b;
    this.validateRequired(this.data && this.data.options ? this.data.options.required : false);
    this.validateDataType(this.data && this.data.options ? this.data.options.dataType : "");
    this.valiatePattern(this.data && this.data.options ? this.data.options.pattern : "");
    this.validateCustom(this.data && this.data.options ? this.data.options.validator : "");
    dictService.build(this.$http).list({ "current": 1, "size": -1 }).then((data2) => {
      this.dictList = data2.records;
    });
    if (this.bindDataTable) {
      makeFormService.build(this.$http).getTableList({ "dataSource.enName": (_b = (_a2 = this.data) == null ? void 0 : _a2.enName) != null ? _b : "master" }).then((data2) => {
        this.dataTables = data2.rows;
      });
    }
  },
  methods: {
    clearModel() {
      this.data.model = "";
    },
    querySearch(queryString, cb) {
      var results = [
        { title: "\u59D3\u540D", value: "${user.name}" },
        { title: "\u7528\u6237id", value: "${user.id}" },
        { title: "\u767B\u5F55\u540D", value: "${user.loginName}" },
        { title: "\u5DE5\u53F7", value: "${user.no}" },
        { title: "\u516C\u53F8", value: "${user.company.name}" },
        { title: "\u516C\u53F8id", value: "${user.company.id}" },
        { title: "\u90E8\u95E8", value: "${user.office.name}" },
        { title: "\u90E8\u95E8id", value: "${user.office.id}" },
        { title: "\u5F53\u524D\u65E5\u671F", value: "${new Date()}" }
      ];
      cb(results);
    },
    _findParentItem(list, key, node) {
      const index2 = list.findIndex((item2) => item2.key == key);
      if (index2 >= 0) {
        this.parentWidget = node;
      } else {
        for (let m = 0; m < list.length; m++) {
          const item2 = list[m];
          if (item2.type === "grid") {
            for (let i2 = 0; i2 < item2.columns.length; i2++) {
              this._findParentItem(item2.columns[i2].list, key, item2);
            }
          }
          if (item2.type === "table") {
            this._findParentItem(item2.tableColumns, key, item2);
          }
          if (item2.type === "tabs") {
            for (let i2 = 0; i2 < item2.tabs.length; i2++) {
              this._findParentItem(item2.tabs[i2].list, key, item2);
            }
          }
        }
      }
    },
    generateModel(genList2) {
      if (!genList2)
        return;
      for (let i2 = 0; i2 < genList2.length; i2++) {
        if (genList2[i2].type === "grid") {
          genList2[i2].columns.forEach((item2) => {
            this.generateModel(item2.list);
          });
        } else if (genList2[i2].type === "tabs") {
          genList2[i2].tabs.forEach((item2) => {
            this.generateModel(item2.list);
          });
        } else if (genList2[i2].type === "report") {
          genList2[i2].rows.forEach((row) => {
            row.columns.forEach((column) => {
              this.generateModel(column.list);
            });
          });
        } else {
          if (genList2[i2].options.dataBind) {
            this.dataBindFields.push({
              "model": genList2[i2].model,
              "tableName": genList2[i2].tableName,
              "primaryKey": genList2[i2].primaryKey,
              "foreignKey": genList2[i2].foreignKey
            });
          }
        }
      }
      return this.dataBindFields;
    },
    setFK(genList2, tableName, primaryKey, foreignKey) {
      for (let i2 = 0; i2 < genList2.length; i2++) {
        if (genList2[i2].type === "grid") {
          genList2[i2].columns.forEach((item2) => {
            this.generateModel(item2.list);
          });
        } else if (genList2[i2].type === "tabs") {
          genList2[i2].tabs.forEach((item2) => {
            this.generateModel(item2.list);
          });
        } else if (genList2[i2].type === "report") {
          genList2[i2].rows.forEach((row) => {
            row.columns.forEach((column) => {
              this.generateModel(column.list);
            });
          });
        } else {
          if (genList2[i2].options.dataBind) {
            if (genList2[i2].tableName === tableName) {
              genList2[i2].primaryKey = primaryKey;
              genList2[i2].foreignKey = foreignKey;
            }
          }
        }
      }
      return this.dataBindFields;
    },
    handleOptionsRemove(index2) {
      if (this.data.type === "grid") {
        this.data.columns.splice(index2, 1);
      } else if (this.data.type === "tabs") {
        this.data.tabs.splice(index2, 1);
      } else if (this.data.type === "imgupload" || this.data.type === "fileupload") {
        this.data.options.headers.splice(index2, 1);
      } else if (this.data.type === "steps") {
        this.data.options.steps.splice(index2, 1);
      } else {
        if (!this.data.options.remote && this.data.options.options[index2].value) {
          this.data.options.defaultValue = typeof this.data.options.defaultValue === "string" ? "" : [];
        }
        this.data.options.options.splice(index2, 1);
      }
      this.$emit("update:data", this.data);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleClearSelect() {
      if (this.data.type == "checkbox" || this.data.type == "select" && this.data.options.multiple || this.data.type == "transfer") {
        this.data.options.defaultValue = [];
      } else {
        this.data.options.defaultValue = "";
      }
      this.$emit("update:data", this.data);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleAddData() {
      this.data.options.data.push({
        key: "",
        label: ""
      });
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleAddStep() {
      this.data.options.steps.push({
        title: "New Step",
        description: ""
      });
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleAddOption() {
      if (this.data.options.showLabel) {
        this.data.options.options.push({
          value: this.$t("fm.config.widget.newOption"),
          label: this.$t("fm.config.widget.newOption")
        });
      } else {
        this.data.options.options.push({
          value: this.$t("fm.config.widget.newOption")
        });
      }
      this.$emit("update:data", this.data);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleAddTab() {
      let length = this.data.tabs.length;
      this.data.tabs.push({
        label: this.$t("fm.config.widget.tab") + (length + 1),
        name: "tab_" + Math.random().toString(36).slice(-8),
        list: []
      });
      this.$emit("update:data", this.data);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleAddHeader() {
      if ("headers" in this.data.options) {
        this.data.options.headers.push({
          key: "",
          value: ""
        });
      } else {
        this.data.options["headers"] = [{ key: "", value: "" }];
      }
      this.$emit("update:data", this.data);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    generateRule() {
      if (this.data) {
        this.data.rules = [];
        Object.keys(this.validator).forEach((key) => {
          if (this.validator[key]) {
            this.data.rules.push(this.validator[key]);
          }
        });
        this.$emit("update:data", this.data);
      }
    },
    handleSelectMuliple(value) {
      if (this.data.type == "select" || this.data.type == "treeselect") {
        if (value) {
          if (this.data.options.defaultValue) {
            this.data.options.defaultValue = [this.data.options.defaultValue];
          } else {
            this.data.options.defaultValue = [];
          }
        } else {
          if (this.data.options.defaultValue.length > 0) {
            this.data.options.defaultValue = this.data.options.defaultValue[0];
          } else {
            this.data.options.defaultValue = "";
          }
        }
      }
      this.$emit("update:data", this.data);
    },
    handleSetTemplate() {
      this.$refs.codeDialog.open(this.data.options.template);
    },
    handleTemplateConfirm(value) {
      this.data.options.template = value;
      this.$emit("update:data", this.data);
      this.$refs.codeDialog.close();
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSetCascader() {
      this.$refs.cascaderDialog.open(this.data.options.options);
    },
    handleCascaderConfirm(value) {
      if (typeof value == "string") {
        this.data.options.options = Function('"use strict";return (' + value + ")")();
      } else {
        this.data.options.options = value;
      }
      this.$emit("update:data", this.data);
      this.$refs.cascaderDialog.close();
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSetTree() {
      this.$refs.treeDialog.open(this.data.options.options);
    },
    handleTreeConfirm(value) {
      if (typeof value == "string") {
        this.data.options.data = Function('"use strict";return (' + value + ")")();
      } else {
        this.data.options.data = value;
      }
      this.$emit("update:data", this.data);
      this.$refs.treeDialog.close();
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSetProps() {
      if (!this.data.options.extendProps) {
        this.data.options.extendProps = {};
      }
      this.$emit("update:data", this.data);
      this.$refs.extendPropsDialog.open(this.data.options.extendProps);
    },
    handlePropsConfirm(value) {
      if (typeof value == "string") {
        this.data.options.extendProps = Function('"use strict";return (' + value + ")")();
      } else {
        this.data.options.extendProps = value;
      }
      this.$emit("update:data", this.data);
      this.$refs.extendPropsDialog.close();
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    validateRequired(val) {
      if (val) {
        this.validator.required = { required: true, message: this.data.options.requiredMessage ? this.data.options.requiredMessage : `${this.$t("fm.config.widget.validatorRequired")}` };
      } else {
        this.validator.required = null;
      }
      this.$nextTick(() => {
        this.generateRule();
      });
    },
    validateDataType(val) {
      if (!this.show) {
        return false;
      }
      if (val && (this.data.options.dataTypeCheck || !Object.keys(this.data.options).includes("dataTypeCheck"))) {
        this.validator.type = { type: val, message: this.data.options.dataTypeMessage ? this.data.options.dataTypeMessage : this.$t("fm.config.widget.validatorType") };
      } else {
        this.validator.type = null;
      }
      this.generateRule();
    },
    valiatePattern(val) {
      if (!this.show) {
        return false;
      }
      if (val && (this.data.options.patternCheck || !Object.keys(this.data.options).includes("patternCheck"))) {
        this.validator.pattern = { pattern: val, message: this.data.options.patternMessage ? this.data.options.patternMessage : this.$t("fm.config.widget.validatorPattern") };
      } else {
        this.validator.pattern = null;
      }
      this.generateRule();
    },
    validateCustom(val) {
      if (!this.show) {
        return false;
      }
      if (val && this.data.options.validatorCheck) {
        this.validator.validator = { func: val };
      } else {
        this.validator.validator = null;
      }
      this.generateRule();
    },
    handleEventAdd(name) {
      this.$emit("on-event-add", name);
    },
    handleEventEdit({ eventName, functionKey }) {
      this.$emit("on-event-edit", { eventName, functionKey });
    },
    handleEventRemove(eventName) {
      this.$emit("on-event-remove", eventName);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    setEvent(eventObj) {
      this.data.events[eventObj.type] = eventObj.key;
      this.$emit("update:data", this.data);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleDataSourceChange(value) {
      var _a2;
      let args = (_a2 = this.datasources.find((item2) => item2.value == value)) == null ? void 0 : _a2.args;
      if (args) {
        this.data.options.remoteArgs = args;
      }
    }
  },
  watch: {
    "widgetForm.list": {
      handler(val, oldVal) {
        this.generateModel(val);
      },
      immediate: true,
      deep: true
    },
    dataTables(val) {
      var list = val.filter((table) => {
        var _a2;
        return table.name === ((_a2 = this.data) == null ? void 0 : _a2.tableName);
      });
      if (list.length === 0 && this.data) {
        this.data.tableName = "";
      }
    },
    "data.primaryKey"(val) {
      if (!val) {
        return;
      }
      if (!this.data.tableName || !this.data.primaryKey || !this.data.foreignKey) {
        return;
      }
      this.setFK(this.widgetForm.list, this.data.tableName, this.data.primaryKey, this.data.foreignKey);
    },
    "data.foreignKey"(val) {
      if (!val) {
        return;
      }
      if (!this.data.tableName || !this.data.primaryKey || !this.data.foreignKey) {
        return;
      }
      this.setFK(this.widgetForm.list, this.data.tableName, this.data.primaryKey, this.data.foreignKey);
    },
    "data.tableName": {
      handler(newVal) {
        var _a2, _b, _c, _d;
        if (this.bindDataTable && newVal) {
          if (this.mainTable !== newVal) {
            let fieldArra = this.dataBindFields.filter((field) => {
              if (field.tableName === this.data.tableName) {
                return true;
              } else {
                return false;
              }
            });
            if (fieldArra.length > 0 && fieldArra[0].primaryKey && fieldArra[0].foreignKey) {
              this.data.primaryKey = fieldArra[0].primaryKey;
              this.data.foreignKey = fieldArra[0].foreignKey;
            } else {
              this.data.primaryKey = "";
              this.data.foreignKey = "";
            }
            makeFormService.build(this.$http).getTableColumnList({ name: newVal, "dataSource.enName": (_b = (_a2 = this.data) == null ? void 0 : _a2.enName) != null ? _b : "master" }).then((data2) => {
              this.dataTableColumns = data2.rows;
              this.dataTableColumns.forEach((column) => {
                column.name = newVal + "->" + column.name;
              });
            });
            if (this.data.type === "table") {
              this.data.model = `childTable->${newVal}`;
            }
          } else {
            makeFormService.build(this.$http).getTableColumnList({ name: newVal, "dataSource.enName": (_d = (_c = this.data) == null ? void 0 : _c.enName) != null ? _d : "master" }).then((data2) => {
              this.dataTableColumns = data2.rows;
            });
          }
        }
      },
      immediate: true,
      deep: true
    },
    "parent.tableName": {
      handler(newVal) {
        var _a2, _b, _c, _d;
        if (this.bindDataTable && newVal && this.parent.type === "table") {
          if (this.mainTable !== newVal) {
            let fieldArra = this.dataBindFields.filter((field) => {
              if (field.tableName === this.data.tableName) {
                return true;
              } else {
                return false;
              }
            });
            if (fieldArra.length > 0 && fieldArra[0].primaryKey && fieldArra[0].foreignKey) {
              this.data.primaryKey = fieldArra[0].primaryKey;
              this.data.foreignKey = fieldArra[0].foreignKey;
            } else {
              this.data.primaryKey = "";
              this.data.foreignKey = "";
            }
            makeFormService.build(this.$http).getTableColumnList({ name: newVal, "dataSource.enName": (_b = (_a2 = this.data) == null ? void 0 : _a2.enName) != null ? _b : "master" }).then((data2) => {
              this.parentTableColumns = data2.rows;
              this.parentTableColumns.forEach((column) => {
                column.name = newVal + "->" + column.name;
              });
            });
          } else {
            makeFormService.build(this.$http).getTableColumnList({ name: newVal, "dataSource.enName": (_d = (_c = this.data) == null ? void 0 : _c.enName) != null ? _d : "master" }).then((data2) => {
              this.parentTableColumns = data2.rows;
            });
          }
        }
      },
      immediate: true,
      deep: true
    },
    "mainTable": {
      handler(newVal) {
        var _a2, _b;
        if (this.bindDataTable && newVal) {
          makeFormService.build(this.$http).getTableColumnList({ name: newVal, "dataSource.enName": (_b = (_a2 = this.data) == null ? void 0 : _a2.enName) != null ? _b : "master" }).then((data2) => {
            this.mainTableColumns = data2.rows;
          });
        }
      },
      immediate: true,
      deep: true
    },
    "data.options.remote": function(val) {
      if (this.data.type === "select") {
        if (this.data.options.multiple) {
          this.data.options.defaultValue = [];
        } else {
          this.data.options.defaultValue = "";
        }
      }
      if (this.data.type === "radio") {
        this.data.options.defaultValue = "";
      }
      if (this.data.type === "checkbox") {
        this.data.options.defaultValue = [];
      }
    },
    "data.options.isRange": function(val) {
      if (typeof val !== "undefined") {
        if (val) {
          this.data.options.defaultValue = null;
        } else {
          if (Object.keys(this.data.options).indexOf("defaultValue") >= 0)
            this.data.options.defaultValue = "";
        }
      }
      this.$emit("update:data", this.data);
    },
    "data.options.type": function(val) {
      if (this.data.type == "date") {
        if (val == "daterange" || val == "datetimerange" || val == "dates") {
          this.data.options.defaultValue = [];
        } else {
          this.data.options.defaultValue = "";
        }
      }
      this.$emit("update:data", this.data);
    },
    "data.options.required": function(val) {
      this.validateRequired(val);
      this.$emit("update:data", this.data);
    },
    "data.options.requiredMessage": function(val) {
      this.validateRequired(this.data && this.data.options ? this.data.options.required : false);
      this.$emit("update:data", this.data);
    },
    "data.options.dataType": function(val) {
      this.validateDataType(val);
      this.$emit("update:data", this.data);
    },
    "data.options.dataTypeCheck": function(val) {
      this.validateDataType(this.data && this.data.options ? this.data.options.dataType : "");
      this.$emit("update:data", this.data);
    },
    "data.options.dataTypeMessage": function(val) {
      this.validateDataType(this.data && this.data.options ? this.data.options.dataType : "");
      this.$emit("update:data", this.data);
    },
    "data.options.pattern": function(val) {
      this.valiatePattern(val);
      this.$emit("update:data", this.data);
    },
    "data.options.patternCheck": function(val) {
      this.valiatePattern(this.data && this.data.options ? this.data.options.pattern : "");
      this.$emit("update:data", this.data);
    },
    "data.options.patternMessage": function(val) {
      this.valiatePattern(this.data && this.data.options ? this.data.options.pattern : "");
      this.$emit("update:data", this.data);
    },
    "data.options.validator": function(val) {
      this.validateCustom(val);
      this.$emit("update:data", this.data);
    },
    "data.options.validatorCheck": function(val) {
      this.validateCustom(this.data && this.data.options ? this.data.options.validator : "");
      this.$emit("update:data", this.data);
    },
    "data.options.options": {
      deep: true,
      handler(val) {
        if (this.data.options && typeof this.data.options.defaultValue == "object" && Array.isArray(this.data.options.defaultValue)) {
          this.data.options.defaultValue = this.data.options.defaultValue.filter((item2) => val.map((item3) => item3.value).includes(item2));
        }
        if (this.data.options && typeof this.data.options.defaultValue == "string") {
          if (typeof val == "object" && !val.map((item2) => item2.value).includes(this.data.options.defaultValue)) {
            this.data.options.defaultValue = "";
          }
        }
        this.$emit("update:data", this.data);
      }
    },
    "data.options.customClass": function(val) {
      this.customClassArray = this.data && this.data.options && this.data.options.customClass ? this.data.options.customClass.split(" ").filter((item2) => item2) : [];
      this.$emit("update:data", this.data);
    },
    customClassArray(val) {
      this.data.options.customClass = val.join(" ");
      this.$emit("update:data", this.data);
    }
  }
};
const _hoisted_1$o = /* @__PURE__ */ createElementVNode("div", { class: "card-header" }, [
  /* @__PURE__ */ createElementVNode("span", null, "\u8BF7\u914D\u7F6E\u8868\u5173\u8054\u5B57\u6BB5")
], -1);
const _hoisted_2$k = /* @__PURE__ */ createTextVNode("\u7B49\u4E8E");
const _hoisted_3$j = /* @__PURE__ */ createTextVNode("light");
const _hoisted_4$j = /* @__PURE__ */ createTextVNode("dark");
const _hoisted_5$i = { key: 0 };
const _hoisted_6$g = { style: { "width": "30px" } };
const _hoisted_7$e = { style: { "width": "30px" } };
const _hoisted_8$c = /* @__PURE__ */ createTextVNode("\u6E05\u7A7A");
const _hoisted_9$b = { key: 0 };
const _hoisted_10$8 = /* @__PURE__ */ createElementVNode("i", {
  class: "drag-item",
  style: { "font-size": "16px", "margin": "0 5px", "cursor": "move" }
}, [
  /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-icon_bars" })
], -1);
const _hoisted_11$6 = ["onClick"];
const _hoisted_12$6 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-delete" }, null, -1);
const _hoisted_13$4 = [
  _hoisted_12$6
];
const _hoisted_14$3 = /* @__PURE__ */ createElementVNode("i", {
  class: "drag-item",
  style: { "font-size": "16px", "margin": "0 5px", "cursor": "move" }
}, [
  /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-icon_bars" })
], -1);
const _hoisted_15$3 = ["onClick"];
const _hoisted_16$2 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-delete" }, null, -1);
const _hoisted_17$1 = [
  _hoisted_16$2
];
const _hoisted_18$1 = {
  key: 3,
  style: { "margin-left": "22px" }
};
const _hoisted_19$1 = /* @__PURE__ */ createElementVNode("div", { style: { "width": "30px" } }, "Title", -1);
const _hoisted_20$1 = /* @__PURE__ */ createElementVNode("div", { style: { "width": "60px" } }, "Description", -1);
const _hoisted_21$1 = { style: { "display": "inline-block", "vertical-align": "middle" } };
const _hoisted_22$1 = /* @__PURE__ */ createTextVNode();
const _hoisted_23$1 = /* @__PURE__ */ createElementVNode("br", null, null, -1);
const _hoisted_24$1 = /* @__PURE__ */ createElementVNode("i", {
  class: "drag-item",
  style: { "font-size": "16px", "margin": "0 5px", "cursor": "move" }
}, [
  /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-icon_bars" })
], -1);
const _hoisted_25$1 = ["onClick"];
const _hoisted_26$1 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-delete" }, null, -1);
const _hoisted_27$1 = [
  _hoisted_26$1
];
const _hoisted_28 = { style: { "margin-left": "5px" } };
const _hoisted_29 = /* @__PURE__ */ createTextVNode("Horizontal");
const _hoisted_30 = /* @__PURE__ */ createTextVNode("Vertical");
const _hoisted_31 = /* @__PURE__ */ createElementVNode("div", { style: { "width": "30px" } }, "Key", -1);
const _hoisted_32 = /* @__PURE__ */ createElementVNode("div", { style: { "width": "30px" } }, "Label", -1);
const _hoisted_33 = /* @__PURE__ */ createElementVNode("div", { style: { "width": "50px" } }, "Disabled", -1);
const _hoisted_34 = { style: { "display": "inline-block", "vertical-align": "middle" } };
const _hoisted_35 = /* @__PURE__ */ createTextVNode();
const _hoisted_36 = /* @__PURE__ */ createElementVNode("br", null, null, -1);
const _hoisted_37 = /* @__PURE__ */ createElementVNode("i", {
  class: "drag-item",
  style: { "font-size": "16px", "margin": "0 5px", "cursor": "move" }
}, [
  /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-icon_bars" })
], -1);
const _hoisted_38 = ["onClick"];
const _hoisted_39 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-delete" }, null, -1);
const _hoisted_40 = [
  _hoisted_39
];
const _hoisted_41 = { style: { "margin-left": "5px" } };
const _hoisted_42 = /* @__PURE__ */ createTextVNode(" - ");
const _hoisted_43 = /* @__PURE__ */ createTextVNode("Large");
const _hoisted_44 = /* @__PURE__ */ createTextVNode("Default");
const _hoisted_45 = /* @__PURE__ */ createTextVNode("Small");
const _hoisted_46 = ["onClick"];
const _hoisted_47 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-delete" }, null, -1);
const _hoisted_48 = [
  _hoisted_47
];
const _hoisted_49 = /* @__PURE__ */ createElementVNode("i", {
  class: "drag-item",
  style: { "font-size": "16px", "margin": "0 5px", "cursor": "move" }
}, [
  /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-icon_bars" })
], -1);
const _hoisted_50 = ["onClick"];
const _hoisted_51 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-delete" }, null, -1);
const _hoisted_52 = [
  _hoisted_51
];
const _hoisted_53 = { style: { "margin-left": "22px" } };
const _hoisted_54 = {
  key: 0,
  class: "validate-block"
};
const _hoisted_55 = {
  key: 1,
  class: "validate-block"
};
const _hoisted_56 = {
  key: 2,
  class: "validate-block"
};
const _hoisted_57 = {
  key: 3,
  class: "validate-block"
};
const _hoisted_58 = { key: 0 };
const _hoisted_59 = /* @__PURE__ */ createElementVNode("div", { style: { "font-size": "14px", "color": "blue", "font-weight": "500" } }, "(rule, value, callback) => {", -1);
const _hoisted_60 = /* @__PURE__ */ createElementVNode("div", { style: { "font-size": "14px", "color": "blue", "font-weight": "500" } }, "}", -1);
const _hoisted_61 = {
  key: 1,
  class: "empty"
};
function _sfc_render$v(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_option = resolveComponent("el-option");
  const _component_el_select = resolveComponent("el-select");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_el_tag = resolveComponent("el-tag");
  const _component_el_card = resolveComponent("el-card");
  const _component_el_input = resolveComponent("el-input");
  const _component_el_checkbox = resolveComponent("el-checkbox");
  const _component_el_input_number = resolveComponent("el-input-number");
  const _component_el_switch = resolveComponent("el-switch");
  const _component_el_radio_button = resolveComponent("el-radio-button");
  const _component_el_radio_group = resolveComponent("el-radio-group");
  const _component_el_radio = resolveComponent("el-radio");
  const _component_code_editor = resolveComponent("code-editor");
  const _component_el_checkbox_group = resolveComponent("el-checkbox-group");
  const _component_el_button = resolveComponent("el-button");
  const _component_el_form = resolveComponent("el-form");
  const _component_draggable = resolveComponent("draggable");
  const _component_el_autocomplete = resolveComponent("el-autocomplete");
  const _component_el_rate = resolveComponent("el-rate");
  const _component_el_color_picker = resolveComponent("el-color-picker");
  const _component_el_cascader = resolveComponent("el-cascader");
  const _component_el_tree_select = resolveComponent("el-tree-select");
  const _component_Editor = resolveComponent("Editor");
  const _component_cus_dialog = resolveComponent("cus-dialog");
  const _component_fm_form_table = resolveComponent("fm-form-table");
  const _component_el_time_picker = resolveComponent("el-time-picker");
  const _component_el_date_picker = resolveComponent("el-date-picker");
  const _component_event_config = resolveComponent("event-config");
  const _component_code_dialog = resolveComponent("code-dialog");
  return $options.show ? (openBlock(), createElementBlock("div", {
    key: $props.data.key
  }, [
    createVNode(_component_el_form, {
      "label-position": "top",
      size: "default",
      model: $props.data
    }, {
      default: withCtx(() => [
        $props.bindDataTable ? (openBlock(), createBlock(_component_el_form_item, {
          key: 0,
          label: "\u8868\u540D",
          prop: "tableName"
        }, {
          default: withCtx(() => [
            $options.parent.type !== "table" ? (openBlock(), createBlock(_component_el_select, {
              key: 0,
              modelValue: $props.data.tableName,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $props.data.tableName = $event),
              style: { "width": "100%" },
              onChange: $options.clearModel,
              filterable: "",
              placeholder: "\u8BF7\u9009\u62E9\u8868"
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.dataTables, (item2) => {
                  return openBlock(), createBlock(_component_el_option, {
                    key: item2.name,
                    label: item2.nameAndComments,
                    value: item2.name
                  }, null, 8, ["label", "value"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue", "onChange"])) : (openBlock(), createBlock(_component_el_select, {
              key: 1,
              modelValue: $options.parent.tableName,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $options.parent.tableName = $event),
              disabled: true,
              style: { "width": "100%" },
              onChange: $options.clearModel,
              filterable: "",
              placeholder: "\u8BF7\u9009\u62E9\u8868"
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.dataTables, (item2) => {
                  return openBlock(), createBlock(_component_el_option, {
                    key: item2.name,
                    label: item2.nameAndComments,
                    value: item2.name
                  }, null, 8, ["label", "value"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue", "onChange"]))
          ]),
          _: 1
        })) : createCommentVNode("", true),
        $props.bindDataTable && $props.mainTable !== $props.data.tableName && $options.parent.type !== "table" ? (openBlock(), createBlock(_component_el_card, {
          key: 1,
          class: "box-card"
        }, {
          header: withCtx(() => [
            _hoisted_1$o
          ]),
          default: withCtx(() => [
            createVNode(_component_el_form_item, {
              label: `\u4E3B\u8868[${$props.mainTable}]:`,
              style: { "border-bottom": "0px", "padding-bottom": "0px" }
            }, {
              default: withCtx(() => [
                createVNode(_component_el_select, {
                  modelValue: $props.data.primaryKey,
                  "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $props.data.primaryKey = $event),
                  filterable: "",
                  placeholder: "\u8BF7\u9009\u62E9\u5B57\u6BB5"
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList($data.mainTableColumns, (item2) => {
                      return openBlock(), createBlock(_component_el_option, {
                        key: item2.name,
                        label: item2.nameAndComments,
                        value: item2.name
                      }, null, 8, ["label", "value"]);
                    }), 128))
                  ]),
                  _: 1
                }, 8, ["modelValue"])
              ]),
              _: 1
            }, 8, ["label"]),
            createVNode(_component_el_tag, null, {
              default: withCtx(() => [
                _hoisted_2$k
              ]),
              _: 1
            }),
            createVNode(_component_el_form_item, {
              label: `\u9644\u8868[${$props.data.tableName}]:`,
              style: { "border-bottom": "0px", "padding-bottom": "0px" }
            }, {
              default: withCtx(() => [
                createVNode(_component_el_select, {
                  modelValue: $props.data.foreignKey,
                  "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $props.data.foreignKey = $event),
                  filterable: "",
                  placeholder: "\u8BF7\u9009\u62E9\u5B57\u6BB5"
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList($data.dataTableColumns, (item2) => {
                      return openBlock(), createBlock(_component_el_option, {
                        key: item2.name,
                        label: item2.nameAndComments,
                        value: item2.name
                      }, null, 8, ["label", "value"]);
                    }), 128))
                  ]),
                  _: 1
                }, 8, ["modelValue"])
              ]),
              _: 1
            }, 8, ["label"])
          ]),
          _: 1
        })) : createCommentVNode("", true),
        $props.data.type != "td" && $props.data.type != "col" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 2,
          label: _ctx.$t("fm.config.widget.model"),
          required: true,
          prop: "model"
        }, {
          default: withCtx(() => [
            $props.bindDataTable && $props.mainTable !== $props.data.tableName && $props.data.type === "table" ? (openBlock(), createBlock(_component_el_input, {
              key: 0,
              disabled: true,
              modelValue: $props.data.model,
              "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $props.data.model = $event)
            }, null, 8, ["modelValue"])) : $props.bindDataTable && $props.mainTable === $props.data.tableName && $props.data.type === "table" ? (openBlock(), createBlock(_component_el_select, {
              key: 1,
              modelValue: $props.data.model,
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $props.data.model = $event),
              style: { "width": "100%" },
              clearable: "",
              filterable: "",
              placeholder: "\u8BF7\u9009\u62E9\u5B57\u6BB5"
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.dataTableColumns, (item2) => {
                  return openBlock(), createBlock(_component_el_option, {
                    key: item2.name,
                    label: item2.nameAndComments,
                    value: item2.name
                  }, null, 8, ["label", "value"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue"])) : $props.bindDataTable && $props.data.type !== "table" && $options.parent.type === "table" && $options.parent.tableColumns ? (openBlock(), createBlock(_component_el_select, {
              key: 2,
              modelValue: $props.data.model,
              "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $props.data.model = $event),
              style: { "width": "100%" },
              filterable: "",
              clearable: "",
              placeholder: "\u8BF7\u9009\u62E9\u5B57\u6BB5"
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.parentTableColumns, (item2) => {
                  return openBlock(), createBlock(_component_el_option, {
                    key: item2.name,
                    label: item2.nameAndComments,
                    value: item2.name
                  }, null, 8, ["label", "value"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue"])) : $props.bindDataTable && $props.data.type !== "table" ? (openBlock(), createBlock(_component_el_select, {
              key: 3,
              modelValue: $props.data.model,
              "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $props.data.model = $event),
              style: { "width": "100%" },
              filterable: "",
              clearable: "",
              placeholder: "\u8BF7\u9009\u62E9\u5B57\u6BB5"
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.dataTableColumns, (item2) => {
                  return openBlock(), createBlock(_component_el_option, {
                    key: item2.name,
                    label: item2.nameAndComments,
                    value: item2.name
                  }, null, 8, ["label", "value"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue"])) : (openBlock(), createBlock(_component_el_input, {
              key: 4,
              disabled: $props.data.type == "grid" || $props.data.type == "tabs" || $props.data.type == "report" || $props.data.type == "divider",
              modelValue: $props.data.model,
              "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $props.data.model = $event)
            }, null, 8, ["disabled", "modelValue"]))
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type != "grid" && $props.data.type != "tabs" && $props.data.type != "report" && $props.data.type != "inline" && $props.data.type != "td" && $props.data.type != "col" && $props.data.type != "alert" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 3,
          label: _ctx.$t("fm.config.widget.name")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              modelValue: $props.data.name,
              "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $props.data.name = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("buttonName") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 4,
          label: _ctx.$t("fm.config.widget.buttonName")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              modelValue: $props.data.options.buttonName,
              "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $props.data.options.buttonName = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("linkName") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 5,
          label: _ctx.$t("fm.config.widget.linkName")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              modelValue: $props.data.options.linkName,
              "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $props.data.options.linkName = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("title") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 6,
          label: _ctx.$t("fm.config.widget.otitle")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              modelValue: $props.data.options.title,
              "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $props.data.options.title = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("description") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 7,
          label: _ctx.$t("fm.config.widget.description")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              modelValue: $props.data.options.description,
              "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $props.data.options.description = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("width") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 8,
          label: _ctx.$t("fm.config.widget.width")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              modelValue: $props.data.options.width,
              "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $props.data.options.width = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("height") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 9,
          label: _ctx.$t("fm.config.widget.height")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              modelValue: $props.data.options.height,
              "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $props.data.options.height = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "imgupload" && Object.keys($props.data.options).indexOf("size") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 10,
          label: _ctx.$t("fm.config.widget.size")
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.width")) + " ", 1),
            createVNode(_component_el_input, {
              clearable: "",
              style: { "width": "90px" },
              type: "number",
              modelValue: $props.data.options.size.width,
              "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => $props.data.options.size.width = $event),
              modelModifiers: { number: true }
            }, null, 8, ["modelValue"]),
            createTextVNode(" " + toDisplayString$1(_ctx.$t("fm.config.widget.height")) + " ", 1),
            createVNode(_component_el_input, {
              clearable: "",
              style: { "width": "90px" },
              type: "number",
              modelValue: $props.data.options.size.height,
              "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => $props.data.options.size.height = $event),
              modelModifiers: { number: true }
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("labelWidth") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 11,
          label: _ctx.$t("fm.config.widget.labelWidth")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_checkbox, {
              modelValue: $props.data.options.isLabelWidth,
              "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => $props.data.options.isLabelWidth = $event),
              style: { "margin-right": "5px" }
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.custom")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"]),
            createVNode(_component_el_input_number, {
              modelValue: $props.data.options.labelWidth,
              "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => $props.data.options.labelWidth = $event),
              disabled: !$props.data.options.isLabelWidth,
              min: 0,
              max: 99999,
              step: 10
            }, null, 8, ["modelValue", "disabled"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type != "grid" && $props.data.type != "tabs" && $props.data.type != "report" && $props.data.type != "inline" && $props.data.type != "divider" && $props.data.type != "td" && $props.data.type != "col" && $props.data.type != "alert" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 12,
          label: _ctx.$t("fm.config.widget.hideLabel")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.hideLabel,
              "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => $props.data.options.hideLabel = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("placeholder") >= 0 && ($props.data.type != "time" && $props.data.type != "date") ? (openBlock(), createBlock(_component_el_form_item, {
          key: 13,
          label: _ctx.$t("fm.config.widget.placeholder")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              modelValue: $props.data.options.placeholder,
              "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => $props.data.options.placeholder = $event),
              clearable: ""
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("inline") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 14,
          label: _ctx.$t("fm.config.widget.layout")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_radio_group, {
              modelValue: $props.data.options.inline,
              "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => $props.data.options.inline = $event)
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_button, { label: false }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.block")), 1)
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: true }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.inline")), 1)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("effect") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 15,
          label: _ctx.$t("fm.config.widget.effect")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_radio_group, {
              modelValue: $props.data.options.effect,
              "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => $props.data.options.effect = $event)
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_button, { label: "light" }, {
                  default: withCtx(() => [
                    _hoisted_3$j
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "dark" }, {
                  default: withCtx(() => [
                    _hoisted_4$j
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("contentPosition") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 16,
          label: _ctx.$t("fm.config.widget.contentPosition")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_radio_group, {
              modelValue: $props.data.options.contentPosition,
              "onUpdate:modelValue": _cache[24] || (_cache[24] = ($event) => $props.data.options.contentPosition = $event)
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_button, { label: "left" }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.left")), 1)
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "center" }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.center")), 1)
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "right" }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.right")), 1)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("showInput") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 17,
          label: _ctx.$t("fm.config.widget.showInput")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.showInput,
              "onUpdate:modelValue": _cache[25] || (_cache[25] = ($event) => $props.data.options.showInput = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("min") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 18,
          label: _ctx.$t("fm.config.widget.min")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input_number, {
              modelValue: $props.data.options.min,
              "onUpdate:modelValue": _cache[26] || (_cache[26] = ($event) => $props.data.options.min = $event),
              step: 1
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("max") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 19,
          label: _ctx.$t("fm.config.widget.max")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input_number, {
              modelValue: $props.data.options.max,
              "onUpdate:modelValue": _cache[27] || (_cache[27] = ($event) => $props.data.options.max = $event),
              step: 1
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("step") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 20,
          label: _ctx.$t("fm.config.widget.step")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input_number, {
              modelValue: $props.data.options.step,
              "onUpdate:modelValue": _cache[28] || (_cache[28] = ($event) => $props.data.options.step = $event),
              min: -99999,
              max: 99999,
              step: 1
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("precision") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 21,
          label: _ctx.$t("fm.config.widget.precision")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input_number, {
              modelValue: $props.data.options.precision,
              "onUpdate:modelValue": _cache[29] || (_cache[29] = ($event) => $props.data.options.precision = $event),
              min: 0,
              max: 99999,
              step: 1
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("controls") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 22,
          label: _ctx.$t("fm.config.widget.controls")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.controls,
              "onUpdate:modelValue": _cache[30] || (_cache[30] = ($event) => $props.data.options.controls = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("controlsPosition") >= 0 && $props.data.options.controls ? (openBlock(), createBlock(_component_el_form_item, {
          key: 23,
          label: _ctx.$t("fm.config.widget.controlsPosition")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_radio_group, {
              modelValue: $props.data.options.controlsPosition,
              "onUpdate:modelValue": _cache[31] || (_cache[31] = ($event) => $props.data.options.controlsPosition = $event)
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_button, { label: "" }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.default")), 1)
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "right" }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.right")), 1)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "select" || $props.data.type == "imgupload" || $props.data.type == "fileupload" || $props.data.type == "cascader" || $props.data.type == "treeselect" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 24,
          label: _ctx.$t("fm.config.widget.multiple")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.multiple,
              "onUpdate:modelValue": _cache[32] || (_cache[32] = ($event) => $props.data.options.multiple = $event),
              onChange: $options.handleSelectMuliple
            }, null, 8, ["modelValue", "onChange"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "select" || $props.data.type == "cascader" || $props.data.type == "transfer" || $props.data.type == "treeselect" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 25,
          label: _ctx.$t("fm.config.widget.filterable")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.filterable,
              "onUpdate:modelValue": _cache[33] || (_cache[33] = ($event) => $props.data.options.filterable = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("checkStrictly") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 26,
          label: _ctx.$t("fm.config.widget.checkStrictly")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.checkStrictly,
              "onUpdate:modelValue": _cache[34] || (_cache[34] = ($event) => $props.data.options.checkStrictly = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("allowHalf") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 27,
          label: _ctx.$t("fm.config.widget.allowHalf")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.allowHalf,
              "onUpdate:modelValue": _cache[35] || (_cache[35] = ($event) => $props.data.options.allowHalf = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("showAlpha") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 28,
          label: _ctx.$t("fm.config.widget.showAlpha")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.showAlpha,
              "onUpdate:modelValue": _cache[36] || (_cache[36] = ($event) => $props.data.options.showAlpha = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("options") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 29,
          label: _ctx.$t("fm.config.widget.option")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_radio_group, {
              modelValue: $props.data.options.remote,
              "onUpdate:modelValue": _cache[37] || (_cache[37] = ($event) => $props.data.options.remote = $event),
              style: { "margin-bottom": "10px" }
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_button, { label: 1 }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.staticData")), 1)
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: 2 }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.remoteData")), 1)
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: 3 }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.dictData")), 1)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"]),
            $props.data.options.remote === 2 ? (openBlock(), createElementBlock("div", _hoisted_5$i, [
              createVNode(_component_el_radio_group, {
                modelValue: $props.data.options.remoteType,
                "onUpdate:modelValue": _cache[38] || (_cache[38] = ($event) => $props.data.options.remoteType = $event),
                style: { "margin-bottom": "8px" }
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_radio, { label: "datasource" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.datasource.name")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio, { label: "option" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.remoteAssigned")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio, { label: "func" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.remoteFunc")), 1)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue"]),
              $props.data.options.remoteType == "option" ? (openBlock(), createBlock(_component_el_input, {
                key: 0,
                clearable: "",
                modelValue: $props.data.options.remoteOption,
                "onUpdate:modelValue": _cache[39] || (_cache[39] = ($event) => $props.data.options.remoteOption = $event),
                style: { "margin-bottom": "5px" }
              }, null, 8, ["modelValue"])) : createCommentVNode("", true),
              $props.data.options.remoteType == "func" ? (openBlock(), createBlock(_component_el_input, {
                key: 1,
                clearable: "",
                modelValue: $props.data.options.remoteFunc,
                "onUpdate:modelValue": _cache[40] || (_cache[40] = ($event) => $props.data.options.remoteFunc = $event),
                style: { "margin-bottom": "5px" }
              }, null, 8, ["modelValue"])) : createCommentVNode("", true),
              $props.data.options.remoteType == "datasource" ? (openBlock(), createBlock(_component_el_select, {
                key: 2,
                style: { "width": "100%", "margin-bottom": "5px" },
                onChange: $options.handleDataSourceChange,
                modelValue: $props.data.options.remoteDataSource,
                "onUpdate:modelValue": _cache[41] || (_cache[41] = ($event) => $props.data.options.remoteDataSource = $event)
              }, {
                default: withCtx(() => [
                  (openBlock(true), createElementBlock(Fragment, null, renderList($props.datasources, (item2) => {
                    return openBlock(), createBlock(_component_el_option, {
                      key: item2.value,
                      label: item2.label,
                      value: item2.value
                    }, null, 8, ["label", "value"]);
                  }), 128))
                ]),
                _: 1
              }, 8, ["onChange", "modelValue"])) : createCommentVNode("", true),
              $props.data.options.remoteType == "datasource" && $props.data.options.remoteArgs ? (openBlock(), createBlock(_component_code_editor, {
                key: $props.data.options.remoteDataSource,
                mode: "json",
                modelValue: $props.data.options.remoteArgs,
                "onUpdate:modelValue": _cache[42] || (_cache[42] = ($event) => $props.data.options.remoteArgs = $event),
                height: "120px",
                style: { "width": "100%", "margin-bottom": "5px" }
              }, null, 8, ["modelValue"])) : createCommentVNode("", true),
              createVNode(_component_el_input, {
                clearable: "",
                modelValue: $props.data.options.props.value,
                "onUpdate:modelValue": _cache[43] || (_cache[43] = ($event) => $props.data.options.props.value = $event)
              }, {
                prepend: withCtx(() => [
                  createElementVNode("div", _hoisted_6$g, toDisplayString$1(_ctx.$t("fm.config.widget.value")), 1)
                ]),
                _: 1
              }, 8, ["modelValue"]),
              createVNode(_component_el_input, {
                clearable: "",
                modelValue: $props.data.options.props.label,
                "onUpdate:modelValue": _cache[44] || (_cache[44] = ($event) => $props.data.options.props.label = $event)
              }, {
                prepend: withCtx(() => [
                  createElementVNode("div", _hoisted_7$e, toDisplayString$1(_ctx.$t("fm.config.widget.label")), 1)
                ]),
                _: 1
              }, 8, ["modelValue"]),
              createVNode(_component_el_input, {
                clearable: "",
                modelValue: $props.data.options.props.children,
                "onUpdate:modelValue": _cache[45] || (_cache[45] = ($event) => $props.data.options.props.children = $event)
              }, {
                prepend: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.childrenOption")), 1)
                ]),
                _: 1
              }, 8, ["modelValue"])
            ])) : $props.data.options.remote === 3 ? (openBlock(), createBlock(_component_el_form, {
              key: 1,
              size: "small",
              inline: true,
              "label-width": "70px"
            }, {
              default: withCtx(() => [
                createVNode(_component_el_form_item, {
                  label: "\u5B57\u5178\u7C7B\u578B:",
                  style: { "border-bottom": "0" }
                }, {
                  default: withCtx(() => [
                    createVNode(_component_el_select, {
                      filterable: "",
                      modelValue: $props.data.options.dictType,
                      "onUpdate:modelValue": _cache[46] || (_cache[46] = ($event) => $props.data.options.dictType = $event),
                      placeholder: "\u8BF7\u9009\u62E9",
                      clearable: "",
                      style: { "width": "100%" }
                    }, {
                      default: withCtx(() => [
                        (openBlock(true), createElementBlock(Fragment, null, renderList($data.dictList, (item2, index2) => {
                          return openBlock(), createBlock(_component_el_option, {
                            key: index2,
                            label: `${item2.remarks}:${item2.type}`,
                            value: item2.type
                          }, null, 8, ["label", "value"]);
                        }), 128))
                      ]),
                      _: 1
                    }, 8, ["modelValue"])
                  ]),
                  _: 1
                }),
                createVNode(_component_el_form_item, {
                  label: "\u9ED8\u8BA4\u503C:",
                  style: { "border-bottom": "0" }
                }, {
                  default: withCtx(() => [
                    $props.data.type == "checkbox" ? (openBlock(), createBlock(_component_el_checkbox_group, {
                      key: 0,
                      modelValue: $props.data.options.defaultValue,
                      "onUpdate:modelValue": _cache[47] || (_cache[47] = ($event) => $props.data.options.defaultValue = $event)
                    }, {
                      default: withCtx(() => [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$dictUtils.getDictList($props.data.options.dictType), (item2, index2) => {
                          return openBlock(), createBlock(_component_el_checkbox, {
                            style: normalizeStyle({ display: $props.data.options.inline ? "inline-block" : "block" }),
                            label: item2.value,
                            key: index2
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString$1(item2.label), 1)
                            ]),
                            _: 2
                          }, 1032, ["style", "label"]);
                        }), 128))
                      ]),
                      _: 1
                    }, 8, ["modelValue"])) : createCommentVNode("", true),
                    $props.data.type == "radio" ? (openBlock(), createBlock(_component_el_radio_group, {
                      key: 1,
                      modelValue: $props.data.options.defaultValue,
                      "onUpdate:modelValue": _cache[48] || (_cache[48] = ($event) => $props.data.options.defaultValue = $event),
                      disabled: $props.data.options.disabled
                    }, {
                      default: withCtx(() => [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$dictUtils.getDictList($props.data.options.dictType), (item2, index2) => {
                          return openBlock(), createBlock(_component_el_radio, {
                            style: normalizeStyle({ display: $props.data.options.inline ? "inline-block" : "block" }),
                            label: item2.value,
                            key: item2.value + index2
                          }, {
                            default: withCtx(() => [
                              createTextVNode(toDisplayString$1(item2.label), 1)
                            ]),
                            _: 2
                          }, 1032, ["style", "label"]);
                        }), 128))
                      ]),
                      _: 1
                    }, 8, ["modelValue", "disabled"])) : createCommentVNode("", true),
                    $props.data.type == "radio" ? (openBlock(), createBlock(_component_el_button, {
                      key: 2,
                      size: "small",
                      onClick: _cache[49] || (_cache[49] = ($event) => $props.data.options.defaultValue = "")
                    }, {
                      default: withCtx(() => [
                        _hoisted_8$c
                      ]),
                      _: 1
                    })) : createCommentVNode("", true),
                    $props.data.type == "select" ? (openBlock(), createBlock(_component_el_select, {
                      key: 3,
                      modelValue: $props.data.options.defaultValue,
                      "onUpdate:modelValue": _cache[50] || (_cache[50] = ($event) => $props.data.options.defaultValue = $event),
                      disabled: $props.data.options.disabled,
                      multiple: $props.data.options.multiple,
                      clearable: "",
                      placeholder: $props.data.options.placeholder
                    }, {
                      default: withCtx(() => [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$dictUtils.getDictList($props.data.options.dictType), (item2) => {
                          return openBlock(), createBlock(_component_el_option, {
                            key: item2.value,
                            label: item2.label,
                            value: item2.value
                          }, null, 8, ["label", "value"]);
                        }), 128))
                      ]),
                      _: 1
                    }, 8, ["modelValue", "disabled", "multiple", "placeholder"])) : createCommentVNode("", true)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
              Object.keys($props.data.options).indexOf("showLabel") >= 0 ? (openBlock(), createElementBlock("div", _hoisted_9$b, [
                createVNode(_component_el_checkbox, {
                  modelValue: $props.data.options.showLabel,
                  "onUpdate:modelValue": _cache[51] || (_cache[51] = ($event) => $props.data.options.showLabel = $event)
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.showLabel")), 1)
                  ]),
                  _: 1
                }, 8, ["modelValue"])
              ])) : createCommentVNode("", true),
              $props.data.type == "radio" || $props.data.type == "select" && !$props.data.options.multiple ? (openBlock(), createBlock(_component_el_radio_group, {
                key: 1,
                modelValue: $props.data.options.defaultValue,
                "onUpdate:modelValue": _cache[53] || (_cache[53] = ($event) => $props.data.options.defaultValue = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_draggable, mergeProps({
                    tag: "ul",
                    modelValue: $props.data.options.options,
                    "onUpdate:modelValue": _cache[52] || (_cache[52] = ($event) => $props.data.options.options = $event)
                  }, { group: { name: "options" }, ghostClass: "ghost", handle: ".drag-item" }, {
                    handle: ".drag-item",
                    "item-key": "index"
                  }), {
                    item: withCtx(({ element: item2, index: index2 }) => [
                      (openBlock(), createElementBlock("li", { key: index2 }, [
                        createVNode(_component_el_radio, {
                          label: item2.value,
                          style: { "margin-right": "5px" }
                        }, {
                          default: withCtx(() => [
                            createVNode(_component_el_input, {
                              clearable: "",
                              style: normalizeStyle({ "width": $props.data.options.showLabel ? "90px" : "180px" }),
                              modelValue: item2.value,
                              "onUpdate:modelValue": ($event) => item2.value = $event
                            }, null, 8, ["style", "modelValue", "onUpdate:modelValue"]),
                            $props.data.options.showLabel ? (openBlock(), createBlock(_component_el_input, {
                              key: 0,
                              clearable: "",
                              style: { "width": "90px" },
                              modelValue: item2.label,
                              "onUpdate:modelValue": ($event) => item2.label = $event
                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                          ]),
                          _: 2
                        }, 1032, ["label"]),
                        _hoisted_10$8,
                        createElementVNode("i", {
                          onClick: ($event) => $options.handleOptionsRemove(index2),
                          style: { "font-size": "16px", "margin": "0 5px", "cursor": "pointer" }
                        }, _hoisted_13$4, 8, _hoisted_11$6)
                      ]))
                    ]),
                    _: 1
                  }, 16, ["modelValue"])
                ]),
                _: 1
              }, 8, ["modelValue"])) : createCommentVNode("", true),
              $props.data.type == "checkbox" || $props.data.type == "select" && $props.data.options.multiple ? (openBlock(), createBlock(_component_el_checkbox_group, {
                key: 2,
                modelValue: $props.data.options.defaultValue,
                "onUpdate:modelValue": _cache[54] || (_cache[54] = ($event) => $props.data.options.defaultValue = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_draggable, mergeProps({
                    tag: "ul",
                    list: $props.data.options.options
                  }, { group: { name: "options" }, ghostClass: "ghost", handle: ".drag-item" }, {
                    handle: ".drag-item",
                    "item-key": "index"
                  }), {
                    item: withCtx(({ element: item2, index: index2 }) => [
                      (openBlock(), createElementBlock("li", { key: index2 }, [
                        createVNode(_component_el_checkbox, {
                          label: item2.value,
                          style: { "margin-right": "5px", "margin-bottom": "3px" }
                        }, {
                          default: withCtx(() => [
                            createVNode(_component_el_input, {
                              clearable: "",
                              style: normalizeStyle({ "width": $props.data.options.showLabel ? "90px" : "180px" }),
                              modelValue: item2.value,
                              "onUpdate:modelValue": ($event) => item2.value = $event
                            }, null, 8, ["style", "modelValue", "onUpdate:modelValue"]),
                            $props.data.options.showLabel ? (openBlock(), createBlock(_component_el_input, {
                              key: 0,
                              clearable: "",
                              style: { "width": "90px" },
                              modelValue: item2.label,
                              "onUpdate:modelValue": ($event) => item2.label = $event
                            }, null, 8, ["modelValue", "onUpdate:modelValue"])) : createCommentVNode("", true)
                          ]),
                          _: 2
                        }, 1032, ["label"]),
                        _hoisted_14$3,
                        createElementVNode("i", {
                          onClick: ($event) => $options.handleOptionsRemove(index2),
                          style: { "font-size": "16px", "margin": "0 5px", "cursor": "pointer" }
                        }, _hoisted_17$1, 8, _hoisted_15$3)
                      ]))
                    ]),
                    _: 1
                  }, 16, ["list"])
                ]),
                _: 1
              }, 8, ["modelValue"])) : createCommentVNode("", true),
              $props.data.type != "cascader" && $props.data.type != "treeselect" ? (openBlock(), createElementBlock("div", _hoisted_18$1, [
                createVNode(_component_el_button, {
                  type: "text",
                  onClick: $options.handleAddOption
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.addOption")), 1)
                  ]),
                  _: 1
                }, 8, ["onClick"]),
                createVNode(_component_el_button, {
                  type: "text",
                  onClick: $options.handleClearSelect
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.clearSelect")), 1)
                  ]),
                  _: 1
                }, 8, ["onClick"])
              ])) : createCommentVNode("", true),
              $props.data.type == "cascader" ? (openBlock(), createBlock(_component_el_button, {
                key: 4,
                style: { "width": "100%" },
                onClick: $options.handleSetCascader
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
                ]),
                _: 1
              }, 8, ["onClick"])) : createCommentVNode("", true),
              $props.data.type == "treeselect" ? (openBlock(), createBlock(_component_el_button, {
                key: 5,
                style: { "width": "100%" },
                onClick: $options.handleSetTree
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
                ]),
                _: 1
              }, 8, ["onClick"])) : createCommentVNode("", true)
            ], 64))
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("steps") >= 0 ? (openBlock(), createElementBlock(Fragment, { key: 30 }, [
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.steps")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_radio_group, {
                modelValue: $props.data.options.remote,
                "onUpdate:modelValue": _cache[55] || (_cache[55] = ($event) => $props.data.options.remote = $event),
                style: { "margin-bottom": "10px" }
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_radio_button, { label: false }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.staticData")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio_button, { label: true }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.datasource.name")), 1)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue"]),
              $props.data.options.remote ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                createVNode(_component_el_select, {
                  style: { "width": "100%", "margin-bottom": "5px" },
                  modelValue: $props.data.options.remoteDataSource,
                  "onUpdate:modelValue": _cache[56] || (_cache[56] = ($event) => $props.data.options.remoteDataSource = $event)
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList($props.datasources, (item2) => {
                      return openBlock(), createBlock(_component_el_option, {
                        key: item2.value,
                        label: item2.label,
                        value: item2.value
                      }, null, 8, ["label", "value"]);
                    }), 128))
                  ]),
                  _: 1
                }, 8, ["modelValue"]),
                createVNode(_component_el_input, {
                  clearable: "",
                  modelValue: $props.data.options.props.title,
                  "onUpdate:modelValue": _cache[57] || (_cache[57] = ($event) => $props.data.options.props.title = $event)
                }, {
                  prepend: withCtx(() => [
                    _hoisted_19$1
                  ]),
                  _: 1
                }, 8, ["modelValue"]),
                createVNode(_component_el_input, {
                  clearable: "",
                  modelValue: $props.data.options.props.description,
                  "onUpdate:modelValue": _cache[58] || (_cache[58] = ($event) => $props.data.options.props.description = $event)
                }, {
                  prepend: withCtx(() => [
                    _hoisted_20$1
                  ]),
                  _: 1
                }, 8, ["modelValue"])
              ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createVNode(_component_el_radio_group, {
                  modelValue: $props.data.options.defaultValue,
                  "onUpdate:modelValue": _cache[59] || (_cache[59] = ($event) => $props.data.options.defaultValue = $event)
                }, {
                  default: withCtx(() => [
                    createVNode(_component_draggable, mergeProps({
                      tag: "ul",
                      list: $props.data.options.steps
                    }, { group: { name: "options" }, ghostClass: "ghost", handle: ".drag-item" }, {
                      handle: ".drag-item",
                      "item-key": "index"
                    }), {
                      item: withCtx(({ element: item2, index: index2 }) => [
                        (openBlock(), createElementBlock("li", {
                          key: index2,
                          style: { "background": "#F4F6FC", "padding": "5px", "margin-bottom": "5px", "display": "flex", "align-items": "center" }
                        }, [
                          createVNode(_component_el_radio, {
                            label: index2,
                            style: { "margin-right": "5px", "height": "100%" }
                          }, {
                            default: withCtx(() => [
                              createElementVNode("div", _hoisted_21$1, [
                                createVNode(_component_el_input, {
                                  placeholder: "Title",
                                  clearable: "",
                                  modelValue: item2.title,
                                  "onUpdate:modelValue": ($event) => item2.title = $event
                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                _hoisted_22$1,
                                _hoisted_23$1,
                                createVNode(_component_el_input, {
                                  placeholder: "Description",
                                  clearable: "",
                                  modelValue: item2.description,
                                  "onUpdate:modelValue": ($event) => item2.description = $event
                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                              ])
                            ]),
                            _: 2
                          }, 1032, ["label"]),
                          _hoisted_24$1,
                          createElementVNode("i", {
                            onClick: ($event) => $options.handleOptionsRemove(index2),
                            style: { "font-size": "16px", "margin": "0 5px", "cursor": "pointer" }
                          }, _hoisted_27$1, 8, _hoisted_25$1)
                        ]))
                      ]),
                      _: 1
                    }, 16, ["list"])
                  ]),
                  _: 1
                }, 8, ["modelValue"]),
                createElementVNode("div", _hoisted_28, [
                  createVNode(_component_el_button, {
                    type: "text",
                    onClick: $options.handleAddStep
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.addOption")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ])
              ], 64))
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.space")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input_number, {
                modelValue: $props.data.options.space,
                "onUpdate:modelValue": _cache[60] || (_cache[60] = ($event) => $props.data.options.space = $event),
                min: 0,
                step: 10
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.direction")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_radio_group, {
                modelValue: $props.data.options.direction,
                "onUpdate:modelValue": _cache[61] || (_cache[61] = ($event) => $props.data.options.direction = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_radio_button, { label: "horizontal" }, {
                    default: withCtx(() => [
                      _hoisted_29
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio_button, { label: "vertical" }, {
                    default: withCtx(() => [
                      _hoisted_30
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.processStatus")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_select, {
                modelValue: $props.data.options.processStatus,
                "onUpdate:modelValue": _cache[62] || (_cache[62] = ($event) => $props.data.options.processStatus = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_option, {
                    value: "wait",
                    label: "wait"
                  }),
                  createVNode(_component_el_option, {
                    value: "process",
                    label: "process"
                  }),
                  createVNode(_component_el_option, {
                    value: "finish",
                    label: "finish"
                  }),
                  createVNode(_component_el_option, {
                    value: "error",
                    label: "error"
                  }),
                  createVNode(_component_el_option, {
                    value: "success",
                    label: "success"
                  })
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.finishStatus")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_select, {
                modelValue: $props.data.options.finishStatus,
                "onUpdate:modelValue": _cache[63] || (_cache[63] = ($event) => $props.data.options.finishStatus = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_option, {
                    value: "wait",
                    label: "wait"
                  }),
                  createVNode(_component_el_option, {
                    value: "process",
                    label: "process"
                  }),
                  createVNode(_component_el_option, {
                    value: "finish",
                    label: "finish"
                  }),
                  createVNode(_component_el_option, {
                    value: "error",
                    label: "error"
                  }),
                  createVNode(_component_el_option, {
                    value: "success",
                    label: "success"
                  })
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.alignCenter")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_switch, {
                modelValue: $props.data.options.alignCenter,
                "onUpdate:modelValue": _cache[64] || (_cache[64] = ($event) => $props.data.options.alignCenter = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.simple")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_switch, {
                modelValue: $props.data.options.simple,
                "onUpdate:modelValue": _cache[65] || (_cache[65] = ($event) => $props.data.options.simple = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])
        ], 64)) : createCommentVNode("", true),
        $props.data.type == "transfer" ? (openBlock(), createElementBlock(Fragment, { key: 31 }, [
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.option")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_radio_group, {
                modelValue: $props.data.options.remote,
                "onUpdate:modelValue": _cache[66] || (_cache[66] = ($event) => $props.data.options.remote = $event),
                style: { "margin-bottom": "10px" }
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_radio_button, { label: false }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.staticData")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio_button, { label: true }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.datasource.name")), 1)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue"]),
              $props.data.options.remote ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                createVNode(_component_el_select, {
                  style: { "width": "100%", "margin-bottom": "5px" },
                  modelValue: $props.data.options.remoteDataSource,
                  "onUpdate:modelValue": _cache[67] || (_cache[67] = ($event) => $props.data.options.remoteDataSource = $event)
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList($props.datasources, (item2) => {
                      return openBlock(), createBlock(_component_el_option, {
                        key: item2.value,
                        label: item2.label,
                        value: item2.value
                      }, null, 8, ["label", "value"]);
                    }), 128))
                  ]),
                  _: 1
                }, 8, ["modelValue"]),
                createVNode(_component_el_input, {
                  clearable: "",
                  modelValue: $props.data.options.props.key,
                  "onUpdate:modelValue": _cache[68] || (_cache[68] = ($event) => $props.data.options.props.key = $event)
                }, {
                  prepend: withCtx(() => [
                    _hoisted_31
                  ]),
                  _: 1
                }, 8, ["modelValue"]),
                createVNode(_component_el_input, {
                  clearable: "",
                  modelValue: $props.data.options.props.label,
                  "onUpdate:modelValue": _cache[69] || (_cache[69] = ($event) => $props.data.options.props.label = $event)
                }, {
                  prepend: withCtx(() => [
                    _hoisted_32
                  ]),
                  _: 1
                }, 8, ["modelValue"]),
                createVNode(_component_el_input, {
                  clearable: "",
                  modelValue: $props.data.options.props.disabled,
                  "onUpdate:modelValue": _cache[70] || (_cache[70] = ($event) => $props.data.options.props.disabled = $event)
                }, {
                  prepend: withCtx(() => [
                    _hoisted_33
                  ]),
                  _: 1
                }, 8, ["modelValue"])
              ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                createVNode(_component_el_checkbox_group, {
                  modelValue: $props.data.options.defaultValue,
                  "onUpdate:modelValue": _cache[71] || (_cache[71] = ($event) => $props.data.options.defaultValue = $event)
                }, {
                  default: withCtx(() => [
                    createVNode(_component_draggable, mergeProps({
                      tag: "ul",
                      list: $props.data.options.data
                    }, { group: { name: "options" }, ghostClass: "ghost", handle: ".drag-item" }, {
                      handle: ".drag-item",
                      "item-key": "index"
                    }), {
                      item: withCtx(({ element: item2, index: index2 }) => [
                        (openBlock(), createElementBlock("li", {
                          key: item2.key,
                          style: { "background": "#F4F6FC", "padding": "5px", "margin-bottom": "5px", "display": "flex", "align-items": "center" }
                        }, [
                          createVNode(_component_el_checkbox, {
                            label: item2.key,
                            style: { "margin-right": "5px", "height": "100%" }
                          }, {
                            default: withCtx(() => [
                              createElementVNode("div", _hoisted_34, [
                                createVNode(_component_el_input, {
                                  placeholder: "Key",
                                  clearable: "",
                                  modelValue: item2.key,
                                  "onUpdate:modelValue": ($event) => item2.key = $event,
                                  style: { "margin-bottom": "3px" }
                                }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                                _hoisted_35,
                                _hoisted_36,
                                createVNode(_component_el_input, {
                                  placeholder: "Label",
                                  clearable: "",
                                  modelValue: item2.label,
                                  "onUpdate:modelValue": ($event) => item2.label = $event
                                }, null, 8, ["modelValue", "onUpdate:modelValue"])
                              ])
                            ]),
                            _: 2
                          }, 1032, ["label"]),
                          _hoisted_37,
                          createElementVNode("i", {
                            onClick: ($event) => $options.handleOptionsRemove(index2),
                            style: { "font-size": "16px", "margin": "0 5px", "cursor": "pointer" }
                          }, _hoisted_40, 8, _hoisted_38)
                        ]))
                      ]),
                      _: 1
                    }, 16, ["list"])
                  ]),
                  _: 1
                }, 8, ["modelValue"]),
                createElementVNode("div", _hoisted_41, [
                  createVNode(_component_el_button, {
                    type: "text",
                    onClick: $options.handleAddData
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.addOption")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"]),
                  createVNode(_component_el_button, {
                    type: "text",
                    onClick: $options.handleClearSelect
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.clearSelect")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ])
              ], 64))
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.titles")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input, {
                placeholder: "List 1",
                modelValue: $props.data.options.titles[0],
                "onUpdate:modelValue": _cache[72] || (_cache[72] = ($event) => $props.data.options.titles[0] = $event),
                style: { "width": "130px" }
              }, null, 8, ["modelValue"]),
              _hoisted_42,
              createVNode(_component_el_input, {
                placeholder: "List 2",
                modelValue: $props.data.options.titles[1],
                "onUpdate:modelValue": _cache[73] || (_cache[73] = ($event) => $props.data.options.titles[1] = $event),
                style: { "width": "130px" }
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])
        ], 64)) : createCommentVNode("", true),
        $props.data.type == "alert" ? (openBlock(), createElementBlock(Fragment, { key: 32 }, [
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.type")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_select, {
                modelValue: $props.data.options.type,
                "onUpdate:modelValue": _cache[74] || (_cache[74] = ($event) => $props.data.options.type = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_option, { value: "success" }),
                  createVNode(_component_el_option, { value: "warning" }),
                  createVNode(_component_el_option, { value: "info" }),
                  createVNode(_component_el_option, { value: "error" })
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.closable")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_switch, {
                modelValue: $props.data.options.closable,
                "onUpdate:modelValue": _cache[75] || (_cache[75] = ($event) => $props.data.options.closable = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.center")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_switch, {
                modelValue: $props.data.options.center,
                "onUpdate:modelValue": _cache[76] || (_cache[76] = ($event) => $props.data.options.center = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.showIcon")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_switch, {
                modelValue: $props.data.options.showIcon,
                "onUpdate:modelValue": _cache[77] || (_cache[77] = ($event) => $props.data.options.showIcon = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])
        ], 64)) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("buttonSize") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 33,
          label: _ctx.$t("fm.config.widget.buttonSize")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_radio_group, {
              modelValue: $props.data.options.buttonSize,
              "onUpdate:modelValue": _cache[78] || (_cache[78] = ($event) => $props.data.options.buttonSize = $event)
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_button, { label: "large" }, {
                  default: withCtx(() => [
                    _hoisted_43
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "default" }, {
                  default: withCtx(() => [
                    _hoisted_44
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "small" }, {
                  default: withCtx(() => [
                    _hoisted_45
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("buttonType") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 34,
          label: _ctx.$t("fm.config.widget.buttonType")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_select, {
              modelValue: $props.data.options.buttonType,
              "onUpdate:modelValue": _cache[79] || (_cache[79] = ($event) => $props.data.options.buttonType = $event),
              style: { "width": "100%" }
            }, {
              default: withCtx(() => [
                createVNode(_component_el_option, {
                  value: "",
                  label: "Default"
                }),
                createVNode(_component_el_option, {
                  value: "primary",
                  label: "Primary"
                }),
                createVNode(_component_el_option, {
                  value: "success",
                  label: "Success"
                }),
                createVNode(_component_el_option, {
                  value: "warning",
                  label: "Warning"
                }),
                createVNode(_component_el_option, {
                  value: "danger",
                  label: "Danger"
                }),
                createVNode(_component_el_option, {
                  value: "info",
                  label: "Info"
                }),
                createVNode(_component_el_option, {
                  value: "text",
                  label: "Text / Link"
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("linkType") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 35,
          label: _ctx.$t("fm.config.widget.linkType")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_select, {
              modelValue: $props.data.options.linkType,
              "onUpdate:modelValue": _cache[80] || (_cache[80] = ($event) => $props.data.options.linkType = $event),
              style: { "width": "100%" }
            }, {
              default: withCtx(() => [
                createVNode(_component_el_option, {
                  value: "default",
                  label: "Default"
                }),
                createVNode(_component_el_option, {
                  value: "primary",
                  label: "Primary"
                }),
                createVNode(_component_el_option, {
                  value: "success",
                  label: "Success"
                }),
                createVNode(_component_el_option, {
                  value: "warning",
                  label: "Warning"
                }),
                createVNode(_component_el_option, {
                  value: "danger",
                  label: "Danger"
                }),
                createVNode(_component_el_option, {
                  value: "info",
                  label: "Info"
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("buttonPlain") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 36,
          label: _ctx.$t("fm.config.widget.buttonPlain")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.buttonPlain,
              "onUpdate:modelValue": _cache[81] || (_cache[81] = ($event) => $props.data.options.buttonPlain = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("buttonRound") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 37,
          label: _ctx.$t("fm.config.widget.buttonRound")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.buttonRound,
              "onUpdate:modelValue": _cache[82] || (_cache[82] = ($event) => $props.data.options.buttonRound = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("buttonCircle") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 38,
          label: _ctx.$t("fm.config.widget.buttonCircle")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.buttonCircle,
              "onUpdate:modelValue": _cache[83] || (_cache[83] = ($event) => $props.data.options.buttonCircle = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("href") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 39,
          label: "href"
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              modelValue: $props.data.options.href,
              "onUpdate:modelValue": _cache[84] || (_cache[84] = ($event) => $props.data.options.href = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        })) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("underline") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 40,
          label: _ctx.$t("fm.config.widget.underline")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.underline,
              "onUpdate:modelValue": _cache[85] || (_cache[85] = ($event) => $props.data.options.underline = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("blank") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 41,
          label: _ctx.$t("fm.config.widget.isBlank")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.blank,
              "onUpdate:modelValue": _cache[86] || (_cache[86] = ($event) => $props.data.options.blank = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("paging") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 42,
          label: _ctx.$t("fm.config.widget.paging")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_switch, {
              modelValue: $props.data.options.paging,
              "onUpdate:modelValue": _cache[87] || (_cache[87] = ($event) => $props.data.options.paging = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.options.paging && Object.keys($props.data.options).indexOf("pageSize") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
          key: 43,
          label: _ctx.$t("fm.config.widget.pageSize")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input_number, {
              modelValue: $props.data.options.pageSize,
              "onUpdate:modelValue": _cache[88] || (_cache[88] = ($event) => $props.data.options.pageSize = $event),
              step: 5,
              min: 1
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "dict" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 44,
          label: _ctx.$t("fm.config.widget.dictType")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_select, {
              filterable: "",
              modelValue: $props.data.options.dictType,
              "onUpdate:modelValue": _cache[89] || (_cache[89] = ($event) => $props.data.options.dictType = $event),
              placeholder: "\u8BF7\u9009\u62E9",
              clearable: "",
              style: { "width": "100%" }
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.dictList, (item2, index2) => {
                  return openBlock(), createBlock(_component_el_option, {
                    key: index2,
                    label: `${item2.remarks}:${item2.type}`,
                    value: item2.type
                  }, null, 8, ["label", "value"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        Object.keys($props.data.options).indexOf("defaultValue") >= 0 && $props.data.type != "custom" && $props.data.type != "imgupload" && $props.data.type != "fileupload" && $props.data.type != "radio" && $props.data.type != "checkbox" && $props.data.type != "select" && $props.data.type != "date" && $props.data.type != "time" && $props.data.type != "steps" && $props.data.type != "transfer" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 45,
          label: _ctx.$t("fm.config.widget.defaultValue")
        }, {
          default: withCtx(() => [
            $props.data.type == "textarea" ? (openBlock(), createBlock(_component_el_input, {
              key: 0,
              clearable: "",
              type: "textarea",
              rows: 5,
              modelValue: $props.data.options.defaultValue,
              "onUpdate:modelValue": _cache[90] || (_cache[90] = ($event) => $props.data.options.defaultValue = $event)
            }, null, 8, ["modelValue"])) : createCommentVNode("", true),
            $props.data.type == "input" || $props.data.type == "text" || $props.data.type == "user" || $props.data.type == "office" ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              $props.data.options.dataType == "number" || $props.data.options.dataType == "integer" || $props.data.options.dataType == "float" ? (openBlock(), createBlock(_component_el_input, {
                key: 0,
                clearable: "",
                type: "number",
                modelValue: $props.data.options.defaultValue,
                "onUpdate:modelValue": _cache[91] || (_cache[91] = ($event) => $props.data.options.defaultValue = $event),
                modelModifiers: { number: true }
              }, null, 8, ["modelValue"])) : (openBlock(), createBlock(_component_el_autocomplete, {
                key: 1,
                class: "inline-input",
                clearable: "",
                modelValue: $props.data.options.defaultValue,
                "onUpdate:modelValue": _cache[92] || (_cache[92] = ($event) => $props.data.options.defaultValue = $event),
                "fetch-suggestions": $options.querySearch,
                placeholder: "\u8BF7\u8F93\u5165\u5185\u5BB9"
              }, null, 8, ["modelValue", "fetch-suggestions"]))
            ], 64)) : createCommentVNode("", true),
            $props.data.type == "rate" ? (openBlock(), createBlock(_component_el_rate, {
              key: 2,
              style: { "display": "inline-block", "vertical-align": "middle" },
              max: $props.data.options.max,
              "allow-half": $props.data.options.allowHalf,
              modelValue: $props.data.options.defaultValue,
              "onUpdate:modelValue": _cache[93] || (_cache[93] = ($event) => $props.data.options.defaultValue = $event)
            }, null, 8, ["max", "allow-half", "modelValue"])) : createCommentVNode("", true),
            $props.data.type == "rate" ? (openBlock(), createBlock(_component_el_button, {
              key: 3,
              type: "text",
              style: { "display": "inline-block", "vertical-align": "middle", "margin-left": "10px" },
              onClick: _cache[94] || (_cache[94] = ($event) => $props.data.options.defaultValue = 0)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.clear")), 1)
              ]),
              _: 1
            })) : createCommentVNode("", true),
            $props.data.type == "color" ? (openBlock(), createBlock(_component_el_color_picker, {
              key: 4,
              modelValue: $props.data.options.defaultValue,
              "onUpdate:modelValue": _cache[95] || (_cache[95] = ($event) => $props.data.options.defaultValue = $event),
              "show-alpha": $props.data.options.showAlpha
            }, null, 8, ["modelValue", "show-alpha"])) : createCommentVNode("", true),
            $props.data.type == "switch" ? (openBlock(), createBlock(_component_el_switch, {
              key: 5,
              modelValue: $props.data.options.defaultValue,
              "onUpdate:modelValue": _cache[96] || (_cache[96] = ($event) => $props.data.options.defaultValue = $event)
            }, null, 8, ["modelValue"])) : createCommentVNode("", true),
            $props.data.type == "number" ? (openBlock(), createBlock(_component_el_input_number, {
              key: 6,
              modelValue: $props.data.options.defaultValue,
              "onUpdate:modelValue": _cache[97] || (_cache[97] = ($event) => $props.data.options.defaultValue = $event),
              step: $props.data.options.step,
              min: $props.data.options.min,
              max: $props.data.options.max
            }, null, 8, ["modelValue", "step", "min", "max"])) : createCommentVNode("", true),
            $props.data.type == "html" ? (openBlock(), createBlock(_component_code_editor, {
              key: $props.data.key,
              modelValue: $props.data.options.defaultValue,
              "onUpdate:modelValue": _cache[98] || (_cache[98] = ($event) => $props.data.options.defaultValue = $event),
              height: "200px"
            }, null, 8, ["modelValue"])) : createCommentVNode("", true),
            $props.data.type == "cascader" ? (openBlock(), createBlock(_component_el_cascader, {
              key: 8,
              modelValue: $props.data.options.defaultValue,
              "onUpdate:modelValue": _cache[99] || (_cache[99] = ($event) => $props.data.options.defaultValue = $event),
              clearable: "",
              options: $props.data.options.remote ? [] : $props.data.options.options,
              style: { "width": "100%" },
              props: { multiple: $props.data.options.multiple, checkStrictly: $props.data.options.checkStrictly },
              filterable: $props.data.options.filterable,
              "collapse-tags": ""
            }, null, 8, ["modelValue", "options", "props", "filterable"])) : createCommentVNode("", true),
            $props.data.type == "treeselect" ? (openBlock(), createBlock(_component_el_tree_select, {
              key: 9,
              modelValue: $props.data.options.defaultValue,
              "onUpdate:modelValue": _cache[100] || (_cache[100] = ($event) => $props.data.options.defaultValue = $event),
              clearable: "",
              data: $props.data.options.remote ? [] : $props.data.options.options,
              style: { "width": "100%" },
              multiple: $props.data.options.multiple,
              "check-strictly": $props.data.options.checkStrictly,
              filterable: $props.data.options.filterable
            }, null, 8, ["modelValue", "data", "multiple", "check-strictly", "filterable"])) : createCommentVNode("", true),
            $props.data.type == "editor" ? (openBlock(), createElementBlock(Fragment, { key: 10 }, [
              createVNode(_component_el_button, {
                style: { "width": "100%" },
                onClick: _cache[101] || (_cache[101] = ($event) => $data.editorVisible = true)
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
                ]),
                _: 1
              }),
              createVNode(_component_cus_dialog, {
                visible: $data.editorVisible,
                onOnClose: _cache[103] || (_cache[103] = ($event) => $data.editorVisible = false),
                width: `calc(${$props.data.options.width || "900px"} + 40px)`,
                form: "",
                action: false,
                title: _ctx.$t("fm.config.widget.defaultValue"),
                "close-on-click-modal": ""
              }, {
                default: withCtx(() => [
                  createVNode(_component_Editor, {
                    modelValue: $props.data.options.defaultValue,
                    "onUpdate:modelValue": _cache[102] || (_cache[102] = ($event) => $props.data.options.defaultValue = $event),
                    "custom-style": { width: $props.data.options.width },
                    toolbar: $props.data.options.customToolbar,
                    class: "fm-editor"
                  }, null, 8, ["modelValue", "custom-style", "toolbar"])
                ]),
                _: 1
              }, 8, ["visible", "width", "title"])
            ], 64)) : createCommentVNode("", true),
            $props.data.type == "table" ? (openBlock(), createElementBlock(Fragment, { key: 11 }, [
              createVNode(_component_el_button, {
                style: { "width": "100%" },
                onClick: _cache[104] || (_cache[104] = ($event) => $data.tableVisible = true)
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
                ]),
                _: 1
              }),
              createVNode(_component_cus_dialog, {
                visible: $data.tableVisible,
                onOnClose: _cache[105] || (_cache[105] = ($event) => $data.tableVisible = false),
                width: `calc(${$props.data.options.width || "900px"} + 40px)`,
                form: "",
                action: false,
                title: _ctx.$t("fm.config.widget.defaultValue"),
                "close-on-click-modal": ""
              }, {
                default: withCtx(() => [
                  createVNode(_component_fm_form_table, {
                    value: $props.data.options.defaultValue,
                    columns: $props.data.tableColumns,
                    name: $props.data.model,
                    rules: [],
                    paging: $props.data.options.paging,
                    "page-size": $props.data.options.pageSize
                  }, null, 8, ["value", "columns", "name", "paging", "page-size"])
                ]),
                _: 1
              }, 8, ["visible", "width", "title"])
            ], 64)) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "time" || $props.data.type == "date" ? (openBlock(), createElementBlock(Fragment, { key: 46 }, [
          $props.data.type == "date" ? (openBlock(), createBlock(_component_el_form_item, {
            key: 0,
            label: _ctx.$t("fm.config.widget.showType")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_select, {
                modelValue: $props.data.options.type,
                "onUpdate:modelValue": _cache[106] || (_cache[106] = ($event) => $props.data.options.type = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_option, { value: "year" }),
                  createVNode(_component_el_option, { value: "month" }),
                  createVNode(_component_el_option, { value: "date" }),
                  createVNode(_component_el_option, { value: "week" }),
                  createVNode(_component_el_option, { value: "dates" }),
                  createVNode(_component_el_option, { value: "datetime" }),
                  createVNode(_component_el_option, { value: "datetimerange" }),
                  createVNode(_component_el_option, { value: "daterange" })
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true),
          $props.data.type == "time" ? (openBlock(), createBlock(_component_el_form_item, {
            key: 1,
            label: _ctx.$t("fm.config.widget.isRange")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_switch, {
                modelValue: $props.data.options.isRange,
                "onUpdate:modelValue": _cache[107] || (_cache[107] = ($event) => $props.data.options.isRange = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true),
          !$props.data.options.isRange && $props.data.type == "time" || $props.data.type != "time" && $props.data.options.type != "datetimerange" && $props.data.options.type != "daterange" ? (openBlock(), createBlock(_component_el_form_item, {
            key: 2,
            label: _ctx.$t("fm.config.widget.placeholder")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input, {
                clearable: "",
                modelValue: $props.data.options.placeholder,
                "onUpdate:modelValue": _cache[108] || (_cache[108] = ($event) => $props.data.options.placeholder = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true),
          $props.data.options.isRange || $props.data.options.type == "datetimerange" || $props.data.options.type == "daterange" ? (openBlock(), createBlock(_component_el_form_item, {
            key: 3,
            label: _ctx.$t("fm.config.widget.startPlaceholder")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input, {
                clearable: "",
                modelValue: $props.data.options.startPlaceholder,
                "onUpdate:modelValue": _cache[109] || (_cache[109] = ($event) => $props.data.options.startPlaceholder = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true),
          $props.data.options.isRange || $props.data.options.type == "datetimerange" || $props.data.options.type == "daterange" ? (openBlock(), createBlock(_component_el_form_item, {
            key: 4,
            label: _ctx.$t("fm.config.widget.endPlaceholder")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input, {
                clearable: "",
                modelValue: $props.data.options.endPlaceholder,
                "onUpdate:modelValue": _cache[110] || (_cache[110] = ($event) => $props.data.options.endPlaceholder = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.format")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input, {
                clearable: "",
                modelValue: $props.data.options.format,
                "onUpdate:modelValue": _cache[111] || (_cache[111] = ($event) => $props.data.options.format = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          $props.data.type == "time" && Object.keys($props.data.options).indexOf("isRange") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
            key: 5,
            label: _ctx.$t("fm.config.widget.defaultValue")
          }, {
            default: withCtx(() => [
              !$props.data.options.isRange ? (openBlock(), createBlock(_component_el_time_picker, {
                key: "1",
                style: { "width": "100%" },
                modelValue: $props.data.options.defaultValue,
                "onUpdate:modelValue": _cache[112] || (_cache[112] = ($event) => $props.data.options.defaultValue = $event),
                arrowControl: $props.data.options.arrowControl,
                "value-format": $props.data.options.format
              }, null, 8, ["modelValue", "arrowControl", "value-format"])) : createCommentVNode("", true),
              $props.data.options.isRange ? (openBlock(), createBlock(_component_el_time_picker, {
                key: "2",
                style: { "width": "100%" },
                modelValue: $props.data.options.defaultValue,
                "onUpdate:modelValue": _cache[113] || (_cache[113] = ($event) => $props.data.options.defaultValue = $event),
                "is-range": "",
                arrowControl: $props.data.options.arrowControl,
                "value-format": $props.data.options.format
              }, null, 8, ["modelValue", "arrowControl", "value-format"])) : createCommentVNode("", true)
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true),
          $props.data.type == "date" ? (openBlock(), createBlock(_component_el_form_item, {
            key: 6,
            label: _ctx.$t("fm.config.widget.defaultValue")
          }, {
            default: withCtx(() => [
              $props.data.options.type == "datetimerange" || $props.data.options.type == "daterange" ? (openBlock(), createBlock(_component_el_date_picker, {
                key: "1",
                modelValue: $props.data.options.defaultValue,
                "onUpdate:modelValue": _cache[114] || (_cache[114] = ($event) => $props.data.options.defaultValue = $event),
                type: $props.data.options.type,
                clearable: true,
                "value-format": $props.data.options.timestamp ? "timestamp" : $props.data.options.format,
                format: $props.data.options.format,
                style: { "width": "100%" }
              }, null, 8, ["modelValue", "type", "value-format", "format"])) : (openBlock(), createBlock(_component_el_date_picker, {
                key: "2",
                modelValue: $props.data.options.defaultValue,
                "onUpdate:modelValue": _cache[115] || (_cache[115] = ($event) => $props.data.options.defaultValue = $event),
                type: $props.data.options.type,
                clearable: true,
                "value-format": $props.data.options.timestamp ? "timestamp" : $props.data.options.format,
                format: $props.data.options.format,
                style: { "width": "100%" }
              }, null, 8, ["modelValue", "type", "value-format", "format"]))
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true)
        ], 64)) : createCommentVNode("", true),
        $props.data.type == "user" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 47,
          label: _ctx.$t("fm.config.widget.userMax")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              clearable: "",
              type: "number",
              modelValue: $props.data.options.limit,
              "onUpdate:modelValue": _cache[116] || (_cache[116] = ($event) => $props.data.options.limit = $event),
              modelModifiers: { number: true }
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "imgupload" || $props.data.type == "fileupload" ? (openBlock(), createElementBlock(Fragment, { key: 48 }, [
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.limit")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input, {
                clearable: "",
                type: "number",
                modelValue: $props.data.options.limit,
                "onUpdate:modelValue": _cache[117] || (_cache[117] = ($event) => $props.data.options.limit = $event),
                modelModifiers: { number: true }
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          Object.keys($props.data.options).indexOf("tip") >= 0 ? (openBlock(), createBlock(_component_el_form_item, {
            key: 0,
            label: _ctx.$t("fm.config.widget.tip")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input, {
                clearable: "",
                modelValue: $props.data.options.tip,
                "onUpdate:modelValue": _cache[118] || (_cache[118] = ($event) => $props.data.options.tip = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.isQiniu")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_switch, {
                modelValue: $props.data.options.isQiniu,
                "onUpdate:modelValue": _cache[119] || (_cache[119] = ($event) => $props.data.options.isQiniu = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          $props.data.options.isQiniu ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createVNode(_component_el_form_item, {
              label: "Domain",
              required: true,
              prop: "options.domain"
            }, {
              default: withCtx(() => [
                createVNode(_component_el_input, {
                  clearable: "",
                  modelValue: $props.data.options.domain,
                  "onUpdate:modelValue": _cache[120] || (_cache[120] = ($event) => $props.data.options.domain = $event)
                }, null, 8, ["modelValue"])
              ]),
              _: 1
            }),
            createVNode(_component_el_form_item, {
              label: _ctx.$t("fm.config.widget.tokenFunc"),
              required: true,
              prop: "options.tokenType"
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_group, {
                  modelValue: $props.data.options.tokenType,
                  "onUpdate:modelValue": _cache[121] || (_cache[121] = ($event) => $props.data.options.tokenType = $event)
                }, {
                  default: withCtx(() => [
                    createVNode(_component_el_radio, { label: "datasource" }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString$1(_ctx.$t("fm.datasource.name")), 1)
                      ]),
                      _: 1
                    }),
                    createVNode(_component_el_radio, { label: "func" }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.remoteFunc")), 1)
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                }, 8, ["modelValue"]),
                $props.data.options.tokenType == "func" ? (openBlock(), createBlock(_component_el_input, {
                  key: 0,
                  clearable: "",
                  modelValue: $props.data.options.tokenFunc,
                  "onUpdate:modelValue": _cache[122] || (_cache[122] = ($event) => $props.data.options.tokenFunc = $event)
                }, null, 8, ["modelValue"])) : createCommentVNode("", true),
                $props.data.options.tokenType == "datasource" ? (openBlock(), createBlock(_component_el_select, {
                  key: 1,
                  style: { "width": "100%" },
                  modelValue: $props.data.options.tokenDataSource,
                  "onUpdate:modelValue": _cache[123] || (_cache[123] = ($event) => $props.data.options.tokenDataSource = $event)
                }, {
                  default: withCtx(() => [
                    (openBlock(true), createElementBlock(Fragment, null, renderList($props.datasources, (item2) => {
                      return openBlock(), createBlock(_component_el_option, {
                        key: item2.value,
                        label: item2.label,
                        value: item2.value
                      }, null, 8, ["label", "value"]);
                    }), 128))
                  ]),
                  _: 1
                }, 8, ["modelValue"])) : createCommentVNode("", true)
              ]),
              _: 1
            }, 8, ["label"])
          ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
            createVNode(_component_el_form_item, {
              label: _ctx.$t("fm.config.widget.action"),
              required: true,
              prop: "options.action",
              trigger: "change"
            }, {
              default: withCtx(() => [
                createVNode(_component_el_input, {
                  clearable: "",
                  modelValue: $props.data.options.action,
                  "onUpdate:modelValue": _cache[124] || (_cache[124] = ($event) => $props.data.options.action = $event)
                }, null, 8, ["modelValue"])
              ]),
              _: 1
            }, 8, ["label"]),
            createVNode(_component_el_form_item, {
              label: _ctx.$t("fm.config.widget.headers")
            }, {
              default: withCtx(() => [
                createElementVNode("ul", null, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList($props.data.options.headers, (item2, index2) => {
                    return openBlock(), createElementBlock("li", {
                      key: index2,
                      style: { "display": "flex", "align-items": "center" }
                    }, [
                      createVNode(_component_el_input, {
                        type: "textarea",
                        clearable: "",
                        rows: 1,
                        placeholder: "KEY",
                        size: "small",
                        style: { "width": "100px", "margin-right": "5px" },
                        modelValue: item2.key,
                        "onUpdate:modelValue": ($event) => item2.key = $event
                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                      createVNode(_component_el_input, {
                        type: "textarea",
                        clearable: "",
                        rows: 1,
                        placeholder: "VALUE",
                        size: "small",
                        style: { "width": "130px" },
                        modelValue: item2.value,
                        "onUpdate:modelValue": ($event) => item2.value = $event
                      }, null, 8, ["modelValue", "onUpdate:modelValue"]),
                      createElementVNode("i", {
                        onClick: ($event) => $options.handleOptionsRemove(index2),
                        style: { "font-size": "16px", "margin": "5px", "cursor": "pointer" }
                      }, _hoisted_48, 8, _hoisted_46)
                    ]);
                  }), 128))
                ]),
                createElementVNode("div", null, [
                  createVNode(_component_el_button, {
                    type: "text",
                    onClick: $options.handleAddHeader
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.add")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ])
              ]),
              _: 1
            }, 8, ["label"]),
            createVNode(_component_el_form_item, {
              label: _ctx.$t("fm.config.widget.withCredentials")
            }, {
              default: withCtx(() => [
                createVNode(_component_el_switch, {
                  modelValue: $props.data.options.withCredentials,
                  "onUpdate:modelValue": _cache[125] || (_cache[125] = ($event) => $props.data.options.withCredentials = $event)
                }, null, 8, ["modelValue"])
              ]),
              _: 1
            }, 8, ["label"])
          ], 64))
        ], 64)) : createCommentVNode("", true),
        $props.data.type == "blank" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 49,
          label: _ctx.$t("fm.config.widget.defaultType")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_select, {
              modelValue: $props.data.options.defaultType,
              "onUpdate:modelValue": _cache[126] || (_cache[126] = ($event) => $props.data.options.defaultType = $event)
            }, {
              default: withCtx(() => [
                createVNode(_component_el_option, {
                  value: "String",
                  label: _ctx.$t("fm.config.widget.string")
                }, null, 8, ["label"]),
                createVNode(_component_el_option, {
                  value: "Object",
                  label: _ctx.$t("fm.config.widget.object")
                }, null, 8, ["label"]),
                createVNode(_component_el_option, {
                  value: "Array",
                  label: _ctx.$t("fm.config.widget.array")
                }, null, 8, ["label"])
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "component" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 50,
          label: _ctx.$t("fm.config.widget.customTemplates")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_button, {
              style: { "width": "100%" },
              onClick: $options.handleSetTemplate
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
              ]),
              _: 1
            }, 8, ["onClick"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "inline" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 51,
          label: _ctx.$t("fm.config.widget.spaceSize")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input_number, {
              clearable: "",
              min: 0,
              modelValue: $props.data.options.spaceSize,
              "onUpdate:modelValue": _cache[127] || (_cache[127] = ($event) => $props.data.options.spaceSize = $event)
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.type == "grid" ? (openBlock(), createElementBlock(Fragment, { key: 52 }, [
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.gutter"),
            key: "gutter"
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input, {
                clearable: "",
                type: "number",
                modelValue: $props.data.options.gutter,
                "onUpdate:modelValue": _cache[128] || (_cache[128] = ($event) => $props.data.options.gutter = $event),
                modelModifiers: { number: true }
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.flex"),
            key: "flex"
          }, {
            default: withCtx(() => [
              createVNode(_component_el_switch, {
                modelValue: $props.data.options.flex,
                "onUpdate:modelValue": _cache[129] || (_cache[129] = ($event) => $props.data.options.flex = $event),
                disabled: ""
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          $props.data.options.flex ? (openBlock(), createBlock(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.justify"),
            key: "justify"
          }, {
            default: withCtx(() => [
              createVNode(_component_el_select, {
                modelValue: $props.data.options.justify,
                "onUpdate:modelValue": _cache[130] || (_cache[130] = ($event) => $props.data.options.justify = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_option, {
                    value: "start",
                    label: _ctx.$t("fm.config.widget.justifyStart")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "end",
                    label: _ctx.$t("fm.config.widget.justifyEnd")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "center",
                    label: _ctx.$t("fm.config.widget.justifyCenter")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "space-around",
                    label: _ctx.$t("fm.config.widget.justifySpaceAround")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "space-between",
                    label: _ctx.$t("fm.config.widget.justifySpaceBetween")
                  }, null, 8, ["label"])
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true),
          $props.data.options.flex ? (openBlock(), createBlock(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.align"),
            key: "align"
          }, {
            default: withCtx(() => [
              createVNode(_component_el_select, {
                modelValue: $props.data.options.align,
                "onUpdate:modelValue": _cache[131] || (_cache[131] = ($event) => $props.data.options.align = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_option, {
                    value: "top",
                    label: _ctx.$t("fm.config.widget.alignTop")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "middle",
                    label: _ctx.$t("fm.config.widget.alignMiddle")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "bottom",
                    label: _ctx.$t("fm.config.widget.alignBottom")
                  }, null, 8, ["label"])
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true)
        ], 64)) : createCommentVNode("", true),
        $props.data.type == "col" ? (openBlock(), createElementBlock(Fragment, { key: 53 }, [
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.span")
          }, {
            default: withCtx(() => [
              $props.platform == "pc" ? (openBlock(), createBlock(_component_el_input_number, {
                key: 0,
                modelValue: $props.data.options.md,
                "onUpdate:modelValue": _cache[132] || (_cache[132] = ($event) => $props.data.options.md = $event),
                step: 1,
                min: 1,
                max: 24
              }, null, 8, ["modelValue"])) : createCommentVNode("", true),
              $props.platform == "pad" ? (openBlock(), createBlock(_component_el_input_number, {
                key: 1,
                modelValue: $props.data.options.sm,
                "onUpdate:modelValue": _cache[133] || (_cache[133] = ($event) => $props.data.options.sm = $event),
                step: 1,
                min: 1,
                max: 24
              }, null, 8, ["modelValue"])) : createCommentVNode("", true),
              $props.platform == "mobile" ? (openBlock(), createBlock(_component_el_input_number, {
                key: 2,
                modelValue: $props.data.options.xs,
                "onUpdate:modelValue": _cache[134] || (_cache[134] = ($event) => $props.data.options.xs = $event),
                step: 1,
                min: 1,
                max: 24
              }, null, 8, ["modelValue"])) : createCommentVNode("", true)
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.offset")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input_number, {
                modelValue: $props.data.options.offset,
                "onUpdate:modelValue": _cache[135] || (_cache[135] = ($event) => $props.data.options.offset = $event),
                step: 1,
                min: 0,
                max: 24
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.push")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input_number, {
                modelValue: $props.data.options.push,
                "onUpdate:modelValue": _cache[136] || (_cache[136] = ($event) => $props.data.options.push = $event),
                step: 1,
                min: 0,
                max: 24
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.pull")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input_number, {
                modelValue: $props.data.options.pull,
                "onUpdate:modelValue": _cache[137] || (_cache[137] = ($event) => $props.data.options.pull = $event),
                step: 1,
                min: 0,
                max: 24
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])
        ], 64)) : createCommentVNode("", true),
        $props.data.type == "tabs" ? (openBlock(), createElementBlock(Fragment, { key: 54 }, [
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.type")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_radio_group, {
                modelValue: $props.data.options.type,
                "onUpdate:modelValue": _cache[138] || (_cache[138] = ($event) => $props.data.options.type = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_radio_button, { label: "" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.default")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio_button, { label: "card" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.card")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio_button, { label: "border-card" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.borderCard")), 1)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.tabPosition")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_radio_group, {
                modelValue: $props.data.options.tabPosition,
                "onUpdate:modelValue": _cache[139] || (_cache[139] = ($event) => $props.data.options.tabPosition = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_radio_button, { label: "top" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.top")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio_button, { label: "left" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.left")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio_button, { label: "right" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.right")), 1)
                    ]),
                    _: 1
                  }),
                  createVNode(_component_el_radio_button, { label: "bottom" }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.bottom")), 1)
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.tabOption")
          }, {
            default: withCtx(() => [
              createVNode(_component_draggable, mergeProps({
                tag: "ul",
                list: $props.data.tabs
              }, { group: { name: "options" }, ghostClass: "ghost", handle: ".drag-item" }, {
                handle: ".drag-item",
                "item-key": "index"
              }), {
                item: withCtx(({ element: item2, index: index2 }) => [
                  (openBlock(), createElementBlock("li", { key: index2 }, [
                    _hoisted_49,
                    createVNode(_component_el_input, {
                      clearable: "",
                      placeholder: _ctx.$t("fm.config.widget.tabName"),
                      style: { "width": "200px", "margin-bottom": "5px" },
                      modelValue: item2.label,
                      "onUpdate:modelValue": ($event) => item2.label = $event
                    }, null, 8, ["placeholder", "modelValue", "onUpdate:modelValue"]),
                    createElementVNode("i", {
                      onClick: ($event) => $options.handleOptionsRemove(index2),
                      style: { "font-size": "16px", "margin": "0 5px", "cursor": "pointer" }
                    }, _hoisted_52, 8, _hoisted_50)
                  ]))
                ]),
                _: 1
              }, 16, ["list"]),
              createElementVNode("div", _hoisted_53, [
                createVNode(_component_el_button, {
                  type: "text",
                  onClick: $options.handleAddTab
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.addTab")), 1)
                  ]),
                  _: 1
                }, 8, ["onClick"])
              ])
            ]),
            _: 1
          }, 8, ["label"])
        ], 64)) : createCommentVNode("", true),
        $props.data.type == "report" ? (openBlock(), createElementBlock(Fragment, { key: 55 }, [
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.borderWidth")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_input_number, {
                modelValue: $props.data.options.borderWidth,
                "onUpdate:modelValue": _cache[140] || (_cache[140] = ($event) => $props.data.options.borderWidth = $event),
                min: 0,
                step: 1
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_form_item, {
            label: _ctx.$t("fm.config.widget.borderColor")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_color_picker, {
                modelValue: $props.data.options.borderColor,
                "onUpdate:modelValue": _cache[141] || (_cache[141] = ($event) => $props.data.options.borderColor = $event)
              }, null, 8, ["modelValue"])
            ]),
            _: 1
          }, 8, ["label"])
        ], 64)) : createCommentVNode("", true),
        Object.keys($props.data.options).includes("customClass") && !$props.data.options.tableColumn ? (openBlock(), createBlock(_component_el_form_item, {
          key: 56,
          label: _ctx.$t("fm.config.widget.customClass")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_select, {
              style: { "width": "100%" },
              modelValue: $data.customClassArray,
              "onUpdate:modelValue": _cache[142] || (_cache[142] = ($event) => $data.customClassArray = $event),
              multiple: "",
              filterable: "",
              "allow-create": "",
              "default-first-option": ""
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($props.sheets, (item2) => {
                  return openBlock(), createBlock(_component_el_option, {
                    key: item2,
                    label: item2,
                    value: item2
                  }, null, 8, ["label", "value"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.config.widget.attribute"),
          key: "attribute"
        }, {
          default: withCtx(() => [
            Object.keys($props.data.options).indexOf("dataBind") >= 0 && !$props.data.options.tableColumn ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 0,
              modelValue: $props.data.options.dataBind,
              "onUpdate:modelValue": _cache[143] || (_cache[143] = ($event) => $props.data.options.dataBind = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.dataBind")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("hidden") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 1,
              modelValue: $props.data.options.hidden,
              "onUpdate:modelValue": _cache[144] || (_cache[144] = ($event) => $props.data.options.hidden = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.hidden")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("readonly") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 2,
              modelValue: $props.data.options.readonly,
              "onUpdate:modelValue": _cache[145] || (_cache[145] = ($event) => $props.data.options.readonly = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.readonly")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("disabled") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 3,
              modelValue: $props.data.options.disabled,
              "onUpdate:modelValue": _cache[146] || (_cache[146] = ($event) => $props.data.options.disabled = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.disabled")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("editable") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 4,
              modelValue: $props.data.options.editable,
              "onUpdate:modelValue": _cache[147] || (_cache[147] = ($event) => $props.data.options.editable = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.editable")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("clearable") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 5,
              modelValue: $props.data.options.clearable,
              "onUpdate:modelValue": _cache[148] || (_cache[148] = ($event) => $props.data.options.clearable = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.clearable")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("arrowControl") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 6,
              modelValue: $props.data.options.arrowControl,
              "onUpdate:modelValue": _cache[149] || (_cache[149] = ($event) => $props.data.options.arrowControl = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.arrowControl")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("isDelete") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 7,
              modelValue: $props.data.options.isDelete,
              "onUpdate:modelValue": _cache[150] || (_cache[150] = ($event) => $props.data.options.isDelete = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.isDelete")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("isEdit") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 8,
              modelValue: $props.data.options.isEdit,
              "onUpdate:modelValue": _cache[151] || (_cache[151] = ($event) => $props.data.options.isEdit = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.isEdit")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("showPassword") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 9,
              modelValue: $props.data.options.showPassword,
              "onUpdate:modelValue": _cache[152] || (_cache[152] = ($event) => $props.data.options.showPassword = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.showPassword")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("showScore") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 10,
              modelValue: $props.data.options.showScore,
              "onUpdate:modelValue": _cache[153] || (_cache[153] = ($event) => $props.data.options.showScore = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.showScore")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["label"]),
        $props.data.type == "custom" ? (openBlock(), createElementBlock(Fragment, { key: 57 }, [
          Object.keys($props.data.options).includes("extendProps") ? (openBlock(), createBlock(_component_el_form_item, {
            key: 0,
            label: _ctx.$t("fm.config.widget.extendPropsConfig")
          }, {
            default: withCtx(() => [
              createVNode(_component_el_button, {
                style: { "width": "100%" },
                onClick: $options.handleSetProps
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
                ]),
                _: 1
              }, 8, ["onClick"])
            ]),
            _: 1
          }, 8, ["label"])) : createCommentVNode("", true)
        ], 64)) : createCommentVNode("", true),
        $props.data.type != "grid" && $props.data.type != "tabs" && $props.data.type != "report" && $props.data.type != "inline" && $props.data.type != "divider" && $props.data.type != "td" && $props.data.type != "col" && $props.data.type != "button" && $props.data.type != "link" && $props.data.type != "steps" && $props.data.type != "alert" ? (openBlock(), createBlock(_component_el_form_item, {
          key: 58,
          label: _ctx.$t("fm.config.widget.validate")
        }, {
          default: withCtx(() => [
            Object.keys($props.data.options).indexOf("required") >= 0 ? (openBlock(), createElementBlock("div", _hoisted_54, [
              createVNode(_component_el_checkbox, {
                modelValue: $props.data.options.required,
                "onUpdate:modelValue": _cache[154] || (_cache[154] = ($event) => $props.data.options.required = $event)
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.required")), 1)
                ]),
                _: 1
              }, 8, ["modelValue"]),
              $props.data.options.required ? (openBlock(), createBlock(_component_el_input, {
                key: 0,
                class: "message-input",
                clearable: "",
                modelValue: $props.data.options.requiredMessage,
                "onUpdate:modelValue": _cache[155] || (_cache[155] = ($event) => $props.data.options.requiredMessage = $event),
                placeholder: _ctx.$t("fm.message.errorTip")
              }, null, 8, ["modelValue", "placeholder"])) : createCommentVNode("", true)
            ])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("dataType") >= 0 ? (openBlock(), createElementBlock("div", _hoisted_55, [
              createVNode(_component_el_checkbox, {
                modelValue: $props.data.options.dataTypeCheck,
                "onUpdate:modelValue": _cache[156] || (_cache[156] = ($event) => $props.data.options.dataTypeCheck = $event),
                style: { "margin-right": "10px" }
              }, null, 8, ["modelValue"]),
              Object.keys($props.data.options).indexOf("dataType") >= 0 ? (openBlock(), createBlock(_component_el_select, {
                key: 0,
                disabled: !$props.data.options.dataTypeCheck,
                modelValue: $props.data.options.dataType,
                "onUpdate:modelValue": _cache[157] || (_cache[157] = ($event) => $props.data.options.dataType = $event)
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_option, {
                    value: "string",
                    label: _ctx.$t("fm.config.widget.string")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "number",
                    label: _ctx.$t("fm.config.widget.number")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "integer",
                    label: _ctx.$t("fm.config.widget.integer")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "float",
                    label: _ctx.$t("fm.config.widget.float")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "url",
                    label: _ctx.$t("fm.config.widget.url")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "email",
                    label: _ctx.$t("fm.config.widget.email")
                  }, null, 8, ["label"]),
                  createVNode(_component_el_option, {
                    value: "hex",
                    label: _ctx.$t("fm.config.widget.hex")
                  }, null, 8, ["label"])
                ]),
                _: 1
              }, 8, ["disabled", "modelValue"])) : createCommentVNode("", true),
              $props.data.options.dataTypeCheck ? (openBlock(), createBlock(_component_el_input, {
                key: 1,
                class: "message-input",
                clearable: "",
                modelValue: $props.data.options.dataTypeMessage,
                "onUpdate:modelValue": _cache[158] || (_cache[158] = ($event) => $props.data.options.dataTypeMessage = $event),
                placeholder: _ctx.$t("fm.message.errorTip")
              }, null, 8, ["modelValue", "placeholder"])) : createCommentVNode("", true)
            ])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("pattern") >= 0 ? (openBlock(), createElementBlock("div", _hoisted_56, [
              createVNode(_component_el_checkbox, {
                modelValue: $props.data.options.patternCheck,
                "onUpdate:modelValue": _cache[159] || (_cache[159] = ($event) => $props.data.options.patternCheck = $event),
                style: { "margin-right": "10px" }
              }, null, 8, ["modelValue"]),
              createVNode(_component_el_input, {
                clearable: "",
                disabled: !$props.data.options.patternCheck,
                modelValue: $props.data.options.pattern,
                "onUpdate:modelValue": _cache[160] || (_cache[160] = ($event) => $props.data.options.pattern = $event),
                modelModifiers: { lazy: true },
                style: { "width": "239px" },
                placeholder: _ctx.$t("fm.config.widget.patternPlaceholder")
              }, null, 8, ["disabled", "modelValue", "placeholder"]),
              $props.data.options.patternCheck ? (openBlock(), createBlock(_component_el_input, {
                key: 0,
                class: "message-input",
                clearable: "",
                modelValue: $props.data.options.patternMessage,
                "onUpdate:modelValue": _cache[161] || (_cache[161] = ($event) => $props.data.options.patternMessage = $event),
                placeholder: _ctx.$t("fm.message.errorTip")
              }, null, 8, ["modelValue", "placeholder"])) : createCommentVNode("", true)
            ])) : createCommentVNode("", true),
            Object.keys($props.data.options).indexOf("validator") >= 0 ? (openBlock(), createElementBlock("div", _hoisted_57, [
              createVNode(_component_el_checkbox, {
                modelValue: $props.data.options.validatorCheck,
                "onUpdate:modelValue": _cache[162] || (_cache[162] = ($event) => $props.data.options.validatorCheck = $event),
                style: { "margin-right": "10px" }
              }, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.customValidation")), 1)
                ]),
                _: 1
              }, 8, ["modelValue"]),
              $props.data.options.validatorCheck ? (openBlock(), createElementBlock("div", _hoisted_58, [
                _hoisted_59,
                (openBlock(), createBlock(_component_code_editor, {
                  mode: "javascript",
                  key: $props.data.key,
                  modelValue: $props.data.options.validator,
                  "onUpdate:modelValue": _cache[163] || (_cache[163] = ($event) => $props.data.options.validator = $event),
                  height: "150px"
                }, null, 8, ["modelValue"])),
                _hoisted_60
              ])) : createCommentVNode("", true)
            ])) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        $props.data.events ? (openBlock(), createBlock(_component_el_form_item, {
          key: 59,
          label: _ctx.$t("fm.eventscript.config.title")
        }, {
          default: withCtx(() => [
            createVNode(_component_event_config, {
              events: $props.data.events,
              eventscripts: $props.eventscripts,
              onOnAdd: $options.handleEventAdd,
              onOnEdit: $options.handleEventEdit,
              onOnRemove: $options.handleEventRemove
            }, null, 8, ["events", "eventscripts", "onOnAdd", "onOnEdit", "onOnRemove"])
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true)
      ]),
      _: 1
    }, 8, ["model"]),
    createVNode(_component_code_dialog, {
      ref: "codeDialog",
      mode: "html",
      title: _ctx.$t("fm.config.widget.customTemplates"),
      help: "https://www.yuque.com/ln7ccx/ntgo8q/zr53m4",
      onOnConfirm: $options.handleTemplateConfirm
    }, null, 8, ["title", "onOnConfirm"]),
    createVNode(_component_code_dialog, {
      ref: "cascaderDialog",
      width: "800px",
      "code-height": "400px",
      mode: "javascript",
      title: _ctx.$t("fm.config.widget.option"),
      onOnConfirm: $options.handleCascaderConfirm
    }, null, 8, ["title", "onOnConfirm"]),
    createVNode(_component_code_dialog, {
      ref: "treeDialog",
      width: "800px",
      "code-height": "400px",
      mode: "javascript",
      title: _ctx.$t("fm.config.widget.option"),
      onOnConfirm: $options.handleTreeConfirm
    }, null, 8, ["title", "onOnConfirm"]),
    createVNode(_component_code_dialog, {
      ref: "extendPropsDialog",
      width: "800px",
      "code-height": "400px",
      mode: "javascript",
      title: _ctx.$t("fm.config.widget.extendPropsConfig"),
      onOnConfirm: $options.handlePropsConfirm
    }, null, 8, ["title", "onOnConfirm"])
  ])) : (openBlock(), createElementBlock("div", _hoisted_61, toDisplayString$1(_ctx.$t("fm.description.configEmpty")), 1));
}
var WidgetConfig = /* @__PURE__ */ _export_sfc(_sfc_main$x, [["render", _sfc_render$v]]);
var vuedraggable_umd = { exports: {} };
var require$$1 = /* @__PURE__ */ getAugmentedNamespace(sortable_esm);
(function(module2, exports) {
  (function webpackUniversalModuleDefinition(root, factory) {
    module2.exports = factory(require$$0, require$$1);
  })(typeof self !== "undefined" ? self : commonjsGlobal, function(__WEBPACK_EXTERNAL_MODULE__8bbf__, __WEBPACK_EXTERNAL_MODULE_a352__) {
    return function(modules) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module3 = installedModules[moduleId] = {
          i: moduleId,
          l: false,
          exports: {}
        };
        modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
        module3.l = true;
        return module3.exports;
      }
      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports2, name, getter) {
        if (!__webpack_require__.o(exports2, name)) {
          Object.defineProperty(exports2, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports2) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1)
          value = __webpack_require__(value);
        if (mode & 8)
          return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule)
          return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string")
          for (var key in value)
            __webpack_require__.d(ns, key, function(key2) {
              return value[key2];
            }.bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module3) {
        var getter = module3 && module3.__esModule ? function getDefault() {
          return module3["default"];
        } : function getModuleExports() {
          return module3;
        };
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = "fb15");
    }({
      "00ee": function(module3, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var test = {};
        test[TO_STRING_TAG] = "z";
        module3.exports = String(test) === "[object z]";
      },
      "0366": function(module3, exports2, __webpack_require__) {
        var aFunction = __webpack_require__("1c0b");
        module3.exports = function(fn, that, length) {
          aFunction(fn);
          if (that === void 0)
            return fn;
          switch (length) {
            case 0:
              return function() {
                return fn.call(that);
              };
            case 1:
              return function(a) {
                return fn.call(that, a);
              };
            case 2:
              return function(a, b) {
                return fn.call(that, a, b);
              };
            case 3:
              return function(a, b, c) {
                return fn.call(that, a, b, c);
              };
          }
          return function() {
            return fn.apply(that, arguments);
          };
        };
      },
      "057f": function(module3, exports2, __webpack_require__) {
        var toIndexedObject = __webpack_require__("fc6a");
        var nativeGetOwnPropertyNames = __webpack_require__("241c").f;
        var toString3 = {}.toString;
        var windowNames = typeof window == "object" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
        var getWindowNames = function(it) {
          try {
            return nativeGetOwnPropertyNames(it);
          } catch (error) {
            return windowNames.slice();
          }
        };
        module3.exports.f = function getOwnPropertyNames(it) {
          return windowNames && toString3.call(it) == "[object Window]" ? getWindowNames(it) : nativeGetOwnPropertyNames(toIndexedObject(it));
        };
      },
      "06cf": function(module3, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var propertyIsEnumerableModule = __webpack_require__("d1e7");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        var toIndexedObject = __webpack_require__("fc6a");
        var toPrimitive = __webpack_require__("c04e");
        var has = __webpack_require__("5135");
        var IE8_DOM_DEFINE = __webpack_require__("0cfb");
        var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        exports2.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
          O = toIndexedObject(O);
          P = toPrimitive(P, true);
          if (IE8_DOM_DEFINE)
            try {
              return nativeGetOwnPropertyDescriptor(O, P);
            } catch (error) {
            }
          if (has(O, P))
            return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
        };
      },
      "0cfb": function(module3, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var fails = __webpack_require__("d039");
        var createElement = __webpack_require__("cc12");
        module3.exports = !DESCRIPTORS && !fails(function() {
          return Object.defineProperty(createElement("div"), "a", {
            get: function() {
              return 7;
            }
          }).a != 7;
        });
      },
      "13d5": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var $reduce = __webpack_require__("d58f").left;
        var arrayMethodIsStrict = __webpack_require__("a640");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var STRICT_METHOD = arrayMethodIsStrict("reduce");
        var USES_TO_LENGTH = arrayMethodUsesToLength("reduce", { 1: 0 });
        $({ target: "Array", proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {
          reduce: function reduce(callbackfn) {
            return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
      },
      "14c3": function(module3, exports2, __webpack_require__) {
        var classof = __webpack_require__("c6b6");
        var regexpExec = __webpack_require__("9263");
        module3.exports = function(R, S) {
          var exec = R.exec;
          if (typeof exec === "function") {
            var result = exec.call(R, S);
            if (typeof result !== "object") {
              throw TypeError("RegExp exec method returned something other than an Object or null");
            }
            return result;
          }
          if (classof(R) !== "RegExp") {
            throw TypeError("RegExp#exec called on incompatible receiver");
          }
          return regexpExec.call(R, S);
        };
      },
      "159b": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var DOMIterables = __webpack_require__("fdbc");
        var forEach3 = __webpack_require__("17c2");
        var createNonEnumerableProperty = __webpack_require__("9112");
        for (var COLLECTION_NAME in DOMIterables) {
          var Collection = global2[COLLECTION_NAME];
          var CollectionPrototype = Collection && Collection.prototype;
          if (CollectionPrototype && CollectionPrototype.forEach !== forEach3)
            try {
              createNonEnumerableProperty(CollectionPrototype, "forEach", forEach3);
            } catch (error) {
              CollectionPrototype.forEach = forEach3;
            }
        }
      },
      "17c2": function(module3, exports2, __webpack_require__) {
        var $forEach = __webpack_require__("b727").forEach;
        var arrayMethodIsStrict = __webpack_require__("a640");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var STRICT_METHOD = arrayMethodIsStrict("forEach");
        var USES_TO_LENGTH = arrayMethodUsesToLength("forEach");
        module3.exports = !STRICT_METHOD || !USES_TO_LENGTH ? function forEach3(callbackfn) {
          return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
        } : [].forEach;
      },
      "1be4": function(module3, exports2, __webpack_require__) {
        var getBuiltIn = __webpack_require__("d066");
        module3.exports = getBuiltIn("document", "documentElement");
      },
      "1c0b": function(module3, exports2) {
        module3.exports = function(it) {
          if (typeof it != "function") {
            throw TypeError(String(it) + " is not a function");
          }
          return it;
        };
      },
      "1c7e": function(module3, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var ITERATOR = wellKnownSymbol("iterator");
        var SAFE_CLOSING = false;
        try {
          var called = 0;
          var iteratorWithReturn = {
            next: function() {
              return { done: !!called++ };
            },
            "return": function() {
              SAFE_CLOSING = true;
            }
          };
          iteratorWithReturn[ITERATOR] = function() {
            return this;
          };
          Array.from(iteratorWithReturn, function() {
            throw 2;
          });
        } catch (error) {
        }
        module3.exports = function(exec, SKIP_CLOSING) {
          if (!SKIP_CLOSING && !SAFE_CLOSING)
            return false;
          var ITERATION_SUPPORT = false;
          try {
            var object = {};
            object[ITERATOR] = function() {
              return {
                next: function() {
                  return { done: ITERATION_SUPPORT = true };
                }
              };
            };
            exec(object);
          } catch (error) {
          }
          return ITERATION_SUPPORT;
        };
      },
      "1d80": function(module3, exports2) {
        module3.exports = function(it) {
          if (it == void 0)
            throw TypeError("Can't call method on " + it);
          return it;
        };
      },
      "1dde": function(module3, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        var wellKnownSymbol = __webpack_require__("b622");
        var V8_VERSION = __webpack_require__("2d00");
        var SPECIES = wellKnownSymbol("species");
        module3.exports = function(METHOD_NAME) {
          return V8_VERSION >= 51 || !fails(function() {
            var array = [];
            var constructor = array.constructor = {};
            constructor[SPECIES] = function() {
              return { foo: 1 };
            };
            return array[METHOD_NAME](Boolean).foo !== 1;
          });
        };
      },
      "23cb": function(module3, exports2, __webpack_require__) {
        var toInteger = __webpack_require__("a691");
        var max2 = Math.max;
        var min2 = Math.min;
        module3.exports = function(index2, length) {
          var integer = toInteger(index2);
          return integer < 0 ? max2(integer + length, 0) : min2(integer, length);
        };
      },
      "23e7": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
        var createNonEnumerableProperty = __webpack_require__("9112");
        var redefine = __webpack_require__("6eeb");
        var setGlobal = __webpack_require__("ce4e");
        var copyConstructorProperties = __webpack_require__("e893");
        var isForced = __webpack_require__("94ca");
        module3.exports = function(options, source2) {
          var TARGET = options.target;
          var GLOBAL = options.global;
          var STATIC = options.stat;
          var FORCED, target, key, targetProperty, sourceProperty, descriptor;
          if (GLOBAL) {
            target = global2;
          } else if (STATIC) {
            target = global2[TARGET] || setGlobal(TARGET, {});
          } else {
            target = (global2[TARGET] || {}).prototype;
          }
          if (target)
            for (key in source2) {
              sourceProperty = source2[key];
              if (options.noTargetGet) {
                descriptor = getOwnPropertyDescriptor(target, key);
                targetProperty = descriptor && descriptor.value;
              } else
                targetProperty = target[key];
              FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? "." : "#") + key, options.forced);
              if (!FORCED && targetProperty !== void 0) {
                if (typeof sourceProperty === typeof targetProperty)
                  continue;
                copyConstructorProperties(sourceProperty, targetProperty);
              }
              if (options.sham || targetProperty && targetProperty.sham) {
                createNonEnumerableProperty(sourceProperty, "sham", true);
              }
              redefine(target, key, sourceProperty, options);
            }
        };
      },
      "241c": function(module3, exports2, __webpack_require__) {
        var internalObjectKeys = __webpack_require__("ca84");
        var enumBugKeys = __webpack_require__("7839");
        var hiddenKeys = enumBugKeys.concat("length", "prototype");
        exports2.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
          return internalObjectKeys(O, hiddenKeys);
        };
      },
      "25f0": function(module3, exports2, __webpack_require__) {
        var redefine = __webpack_require__("6eeb");
        var anObject = __webpack_require__("825a");
        var fails = __webpack_require__("d039");
        var flags = __webpack_require__("ad6d");
        var TO_STRING = "toString";
        var RegExpPrototype = RegExp.prototype;
        var nativeToString = RegExpPrototype[TO_STRING];
        var NOT_GENERIC = fails(function() {
          return nativeToString.call({ source: "a", flags: "b" }) != "/a/b";
        });
        var INCORRECT_NAME = nativeToString.name != TO_STRING;
        if (NOT_GENERIC || INCORRECT_NAME) {
          redefine(RegExp.prototype, TO_STRING, function toString3() {
            var R = anObject(this);
            var p = String(R.source);
            var rf = R.flags;
            var f = String(rf === void 0 && R instanceof RegExp && !("flags" in RegExpPrototype) ? flags.call(R) : rf);
            return "/" + p + "/" + f;
          }, { unsafe: true });
        }
      },
      "2ca0": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var getOwnPropertyDescriptor = __webpack_require__("06cf").f;
        var toLength = __webpack_require__("50c4");
        var notARegExp = __webpack_require__("5a34");
        var requireObjectCoercible = __webpack_require__("1d80");
        var correctIsRegExpLogic = __webpack_require__("ab13");
        var IS_PURE = __webpack_require__("c430");
        var nativeStartsWith = "".startsWith;
        var min2 = Math.min;
        var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic("startsWith");
        var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function() {
          var descriptor = getOwnPropertyDescriptor(String.prototype, "startsWith");
          return descriptor && !descriptor.writable;
        }();
        $({ target: "String", proto: true, forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC }, {
          startsWith: function startsWith(searchString) {
            var that = String(requireObjectCoercible(this));
            notARegExp(searchString);
            var index2 = toLength(min2(arguments.length > 1 ? arguments[1] : void 0, that.length));
            var search = String(searchString);
            return nativeStartsWith ? nativeStartsWith.call(that, search, index2) : that.slice(index2, index2 + search.length) === search;
          }
        });
      },
      "2d00": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var userAgent2 = __webpack_require__("342f");
        var process2 = global2.process;
        var versions = process2 && process2.versions;
        var v8 = versions && versions.v8;
        var match, version2;
        if (v8) {
          match = v8.split(".");
          version2 = match[0] + match[1];
        } else if (userAgent2) {
          match = userAgent2.match(/Edge\/(\d+)/);
          if (!match || match[1] >= 74) {
            match = userAgent2.match(/Chrome\/(\d+)/);
            if (match)
              version2 = match[1];
          }
        }
        module3.exports = version2 && +version2;
      },
      "342f": function(module3, exports2, __webpack_require__) {
        var getBuiltIn = __webpack_require__("d066");
        module3.exports = getBuiltIn("navigator", "userAgent") || "";
      },
      "35a1": function(module3, exports2, __webpack_require__) {
        var classof = __webpack_require__("f5df");
        var Iterators = __webpack_require__("3f8c");
        var wellKnownSymbol = __webpack_require__("b622");
        var ITERATOR = wellKnownSymbol("iterator");
        module3.exports = function(it) {
          if (it != void 0)
            return it[ITERATOR] || it["@@iterator"] || Iterators[classof(it)];
        };
      },
      "37e8": function(module3, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var definePropertyModule = __webpack_require__("9bf2");
        var anObject = __webpack_require__("825a");
        var objectKeys = __webpack_require__("df75");
        module3.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
          anObject(O);
          var keys2 = objectKeys(Properties);
          var length = keys2.length;
          var index2 = 0;
          var key;
          while (length > index2)
            definePropertyModule.f(O, key = keys2[index2++], Properties[key]);
          return O;
        };
      },
      "3bbe": function(module3, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        module3.exports = function(it) {
          if (!isObject2(it) && it !== null) {
            throw TypeError("Can't set " + String(it) + " as a prototype");
          }
          return it;
        };
      },
      "3ca3": function(module3, exports2, __webpack_require__) {
        var charAt = __webpack_require__("6547").charAt;
        var InternalStateModule = __webpack_require__("69f3");
        var defineIterator = __webpack_require__("7dd0");
        var STRING_ITERATOR = "String Iterator";
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);
        defineIterator(String, "String", function(iterated) {
          setInternalState(this, {
            type: STRING_ITERATOR,
            string: String(iterated),
            index: 0
          });
        }, function next2() {
          var state = getInternalState(this);
          var string = state.string;
          var index2 = state.index;
          var point;
          if (index2 >= string.length)
            return { value: void 0, done: true };
          point = charAt(string, index2);
          state.index += point.length;
          return { value: point, done: false };
        });
      },
      "3f8c": function(module3, exports2) {
        module3.exports = {};
      },
      "4160": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var forEach3 = __webpack_require__("17c2");
        $({ target: "Array", proto: true, forced: [].forEach != forEach3 }, {
          forEach: forEach3
        });
      },
      "428f": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        module3.exports = global2;
      },
      "44ad": function(module3, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        var classof = __webpack_require__("c6b6");
        var split = "".split;
        module3.exports = fails(function() {
          return !Object("z").propertyIsEnumerable(0);
        }) ? function(it) {
          return classof(it) == "String" ? split.call(it, "") : Object(it);
        } : Object;
      },
      "44d2": function(module3, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var create = __webpack_require__("7c73");
        var definePropertyModule = __webpack_require__("9bf2");
        var UNSCOPABLES = wellKnownSymbol("unscopables");
        var ArrayPrototype = Array.prototype;
        if (ArrayPrototype[UNSCOPABLES] == void 0) {
          definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
            configurable: true,
            value: create(null)
          });
        }
        module3.exports = function(key) {
          ArrayPrototype[UNSCOPABLES][key] = true;
        };
      },
      "44e7": function(module3, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        var classof = __webpack_require__("c6b6");
        var wellKnownSymbol = __webpack_require__("b622");
        var MATCH = wellKnownSymbol("match");
        module3.exports = function(it) {
          var isRegExp2;
          return isObject2(it) && ((isRegExp2 = it[MATCH]) !== void 0 ? !!isRegExp2 : classof(it) == "RegExp");
        };
      },
      "4930": function(module3, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        module3.exports = !!Object.getOwnPropertySymbols && !fails(function() {
          return !String(Symbol());
        });
      },
      "4d64": function(module3, exports2, __webpack_require__) {
        var toIndexedObject = __webpack_require__("fc6a");
        var toLength = __webpack_require__("50c4");
        var toAbsoluteIndex = __webpack_require__("23cb");
        var createMethod = function(IS_INCLUDES) {
          return function($this, el, fromIndex) {
            var O = toIndexedObject($this);
            var length = toLength(O.length);
            var index2 = toAbsoluteIndex(fromIndex, length);
            var value;
            if (IS_INCLUDES && el != el)
              while (length > index2) {
                value = O[index2++];
                if (value != value)
                  return true;
              }
            else
              for (; length > index2; index2++) {
                if ((IS_INCLUDES || index2 in O) && O[index2] === el)
                  return IS_INCLUDES || index2 || 0;
              }
            return !IS_INCLUDES && -1;
          };
        };
        module3.exports = {
          includes: createMethod(true),
          indexOf: createMethod(false)
        };
      },
      "4de4": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var $filter = __webpack_require__("b727").filter;
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("filter");
        var USES_TO_LENGTH = arrayMethodUsesToLength("filter");
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
          filter: function filter(callbackfn) {
            return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
      },
      "4df4": function(module3, exports2, __webpack_require__) {
        var bind4 = __webpack_require__("0366");
        var toObject2 = __webpack_require__("7b0b");
        var callWithSafeIterationClosing = __webpack_require__("9bdd");
        var isArrayIteratorMethod = __webpack_require__("e95a");
        var toLength = __webpack_require__("50c4");
        var createProperty = __webpack_require__("8418");
        var getIteratorMethod = __webpack_require__("35a1");
        module3.exports = function from2(arrayLike) {
          var O = toObject2(arrayLike);
          var C = typeof this == "function" ? this : Array;
          var argumentsLength = arguments.length;
          var mapfn = argumentsLength > 1 ? arguments[1] : void 0;
          var mapping = mapfn !== void 0;
          var iteratorMethod = getIteratorMethod(O);
          var index2 = 0;
          var length, result, step, iterator, next2, value;
          if (mapping)
            mapfn = bind4(mapfn, argumentsLength > 2 ? arguments[2] : void 0, 2);
          if (iteratorMethod != void 0 && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
            iterator = iteratorMethod.call(O);
            next2 = iterator.next;
            result = new C();
            for (; !(step = next2.call(iterator)).done; index2++) {
              value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index2], true) : step.value;
              createProperty(result, index2, value);
            }
          } else {
            length = toLength(O.length);
            result = new C(length);
            for (; length > index2; index2++) {
              value = mapping ? mapfn(O[index2], index2) : O[index2];
              createProperty(result, index2, value);
            }
          }
          result.length = index2;
          return result;
        };
      },
      "4fad": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var $entries = __webpack_require__("6f53").entries;
        $({ target: "Object", stat: true }, {
          entries: function entries(O) {
            return $entries(O);
          }
        });
      },
      "50c4": function(module3, exports2, __webpack_require__) {
        var toInteger = __webpack_require__("a691");
        var min2 = Math.min;
        module3.exports = function(argument) {
          return argument > 0 ? min2(toInteger(argument), 9007199254740991) : 0;
        };
      },
      "5135": function(module3, exports2) {
        var hasOwnProperty2 = {}.hasOwnProperty;
        module3.exports = function(it, key) {
          return hasOwnProperty2.call(it, key);
        };
      },
      "5319": function(module3, exports2, __webpack_require__) {
        var fixRegExpWellKnownSymbolLogic = __webpack_require__("d784");
        var anObject = __webpack_require__("825a");
        var toObject2 = __webpack_require__("7b0b");
        var toLength = __webpack_require__("50c4");
        var toInteger = __webpack_require__("a691");
        var requireObjectCoercible = __webpack_require__("1d80");
        var advanceStringIndex = __webpack_require__("8aa5");
        var regExpExec = __webpack_require__("14c3");
        var max2 = Math.max;
        var min2 = Math.min;
        var floor = Math.floor;
        var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d\d?|<[^>]*>)/g;
        var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d\d?)/g;
        var maybeToString = function(it) {
          return it === void 0 ? it : String(it);
        };
        fixRegExpWellKnownSymbolLogic("replace", 2, function(REPLACE, nativeReplace, maybeCallNative, reason) {
          var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = reason.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE;
          var REPLACE_KEEPS_$0 = reason.REPLACE_KEEPS_$0;
          var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? "$" : "$0";
          return [
            function replace(searchValue, replaceValue) {
              var O = requireObjectCoercible(this);
              var replacer = searchValue == void 0 ? void 0 : searchValue[REPLACE];
              return replacer !== void 0 ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
            },
            function(regexp, replaceValue) {
              if (!REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE && REPLACE_KEEPS_$0 || typeof replaceValue === "string" && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1) {
                var res = maybeCallNative(nativeReplace, regexp, this, replaceValue);
                if (res.done)
                  return res.value;
              }
              var rx = anObject(regexp);
              var S = String(this);
              var functionalReplace = typeof replaceValue === "function";
              if (!functionalReplace)
                replaceValue = String(replaceValue);
              var global2 = rx.global;
              if (global2) {
                var fullUnicode = rx.unicode;
                rx.lastIndex = 0;
              }
              var results = [];
              while (true) {
                var result = regExpExec(rx, S);
                if (result === null)
                  break;
                results.push(result);
                if (!global2)
                  break;
                var matchStr = String(result[0]);
                if (matchStr === "")
                  rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
              }
              var accumulatedResult = "";
              var nextSourcePosition = 0;
              for (var i2 = 0; i2 < results.length; i2++) {
                result = results[i2];
                var matched = String(result[0]);
                var position = max2(min2(toInteger(result.index), S.length), 0);
                var captures = [];
                for (var j = 1; j < result.length; j++)
                  captures.push(maybeToString(result[j]));
                var namedCaptures = result.groups;
                if (functionalReplace) {
                  var replacerArgs = [matched].concat(captures, position, S);
                  if (namedCaptures !== void 0)
                    replacerArgs.push(namedCaptures);
                  var replacement = String(replaceValue.apply(void 0, replacerArgs));
                } else {
                  replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
                }
                if (position >= nextSourcePosition) {
                  accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
                  nextSourcePosition = position + matched.length;
                }
              }
              return accumulatedResult + S.slice(nextSourcePosition);
            }
          ];
          function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {
            var tailPos = position + matched.length;
            var m = captures.length;
            var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;
            if (namedCaptures !== void 0) {
              namedCaptures = toObject2(namedCaptures);
              symbols = SUBSTITUTION_SYMBOLS;
            }
            return nativeReplace.call(replacement, symbols, function(match, ch) {
              var capture;
              switch (ch.charAt(0)) {
                case "$":
                  return "$";
                case "&":
                  return matched;
                case "`":
                  return str.slice(0, position);
                case "'":
                  return str.slice(tailPos);
                case "<":
                  capture = namedCaptures[ch.slice(1, -1)];
                  break;
                default:
                  var n = +ch;
                  if (n === 0)
                    return match;
                  if (n > m) {
                    var f = floor(n / 10);
                    if (f === 0)
                      return match;
                    if (f <= m)
                      return captures[f - 1] === void 0 ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                    return match;
                  }
                  capture = captures[n - 1];
              }
              return capture === void 0 ? "" : capture;
            });
          }
        });
      },
      "5692": function(module3, exports2, __webpack_require__) {
        var IS_PURE = __webpack_require__("c430");
        var store = __webpack_require__("c6cd");
        (module3.exports = function(key, value) {
          return store[key] || (store[key] = value !== void 0 ? value : {});
        })("versions", []).push({
          version: "3.6.5",
          mode: IS_PURE ? "pure" : "global",
          copyright: "\xA9 2020 Denis Pushkarev (zloirock.ru)"
        });
      },
      "56ef": function(module3, exports2, __webpack_require__) {
        var getBuiltIn = __webpack_require__("d066");
        var getOwnPropertyNamesModule = __webpack_require__("241c");
        var getOwnPropertySymbolsModule = __webpack_require__("7418");
        var anObject = __webpack_require__("825a");
        module3.exports = getBuiltIn("Reflect", "ownKeys") || function ownKeys2(it) {
          var keys2 = getOwnPropertyNamesModule.f(anObject(it));
          var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
          return getOwnPropertySymbols ? keys2.concat(getOwnPropertySymbols(it)) : keys2;
        };
      },
      "5a34": function(module3, exports2, __webpack_require__) {
        var isRegExp2 = __webpack_require__("44e7");
        module3.exports = function(it) {
          if (isRegExp2(it)) {
            throw TypeError("The method doesn't accept regular expressions");
          }
          return it;
        };
      },
      "5c6c": function(module3, exports2) {
        module3.exports = function(bitmap, value) {
          return {
            enumerable: !(bitmap & 1),
            configurable: !(bitmap & 2),
            writable: !(bitmap & 4),
            value
          };
        };
      },
      "5db7": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var flattenIntoArray = __webpack_require__("a2bf");
        var toObject2 = __webpack_require__("7b0b");
        var toLength = __webpack_require__("50c4");
        var aFunction = __webpack_require__("1c0b");
        var arraySpeciesCreate = __webpack_require__("65f0");
        $({ target: "Array", proto: true }, {
          flatMap: function flatMap(callbackfn) {
            var O = toObject2(this);
            var sourceLen = toLength(O.length);
            var A;
            aFunction(callbackfn);
            A = arraySpeciesCreate(O, 0);
            A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
            return A;
          }
        });
      },
      "6547": function(module3, exports2, __webpack_require__) {
        var toInteger = __webpack_require__("a691");
        var requireObjectCoercible = __webpack_require__("1d80");
        var createMethod = function(CONVERT_TO_STRING) {
          return function($this, pos) {
            var S = String(requireObjectCoercible($this));
            var position = toInteger(pos);
            var size = S.length;
            var first, second;
            if (position < 0 || position >= size)
              return CONVERT_TO_STRING ? "" : void 0;
            first = S.charCodeAt(position);
            return first < 55296 || first > 56319 || position + 1 === size || (second = S.charCodeAt(position + 1)) < 56320 || second > 57343 ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 55296 << 10) + (second - 56320) + 65536;
          };
        };
        module3.exports = {
          codeAt: createMethod(false),
          charAt: createMethod(true)
        };
      },
      "65f0": function(module3, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        var isArray2 = __webpack_require__("e8b5");
        var wellKnownSymbol = __webpack_require__("b622");
        var SPECIES = wellKnownSymbol("species");
        module3.exports = function(originalArray, length) {
          var C;
          if (isArray2(originalArray)) {
            C = originalArray.constructor;
            if (typeof C == "function" && (C === Array || isArray2(C.prototype)))
              C = void 0;
            else if (isObject2(C)) {
              C = C[SPECIES];
              if (C === null)
                C = void 0;
            }
          }
          return new (C === void 0 ? Array : C)(length === 0 ? 0 : length);
        };
      },
      "69f3": function(module3, exports2, __webpack_require__) {
        var NATIVE_WEAK_MAP = __webpack_require__("7f9a");
        var global2 = __webpack_require__("da84");
        var isObject2 = __webpack_require__("861d");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var objectHas = __webpack_require__("5135");
        var sharedKey = __webpack_require__("f772");
        var hiddenKeys = __webpack_require__("d012");
        var WeakMap = global2.WeakMap;
        var set2, get2, has;
        var enforce = function(it) {
          return has(it) ? get2(it) : set2(it, {});
        };
        var getterFor = function(TYPE) {
          return function(it) {
            var state;
            if (!isObject2(it) || (state = get2(it)).type !== TYPE) {
              throw TypeError("Incompatible receiver, " + TYPE + " required");
            }
            return state;
          };
        };
        if (NATIVE_WEAK_MAP) {
          var store = new WeakMap();
          var wmget = store.get;
          var wmhas = store.has;
          var wmset = store.set;
          set2 = function(it, metadata) {
            wmset.call(store, it, metadata);
            return metadata;
          };
          get2 = function(it) {
            return wmget.call(store, it) || {};
          };
          has = function(it) {
            return wmhas.call(store, it);
          };
        } else {
          var STATE = sharedKey("state");
          hiddenKeys[STATE] = true;
          set2 = function(it, metadata) {
            createNonEnumerableProperty(it, STATE, metadata);
            return metadata;
          };
          get2 = function(it) {
            return objectHas(it, STATE) ? it[STATE] : {};
          };
          has = function(it) {
            return objectHas(it, STATE);
          };
        }
        module3.exports = {
          set: set2,
          get: get2,
          has,
          enforce,
          getterFor
        };
      },
      "6eeb": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var has = __webpack_require__("5135");
        var setGlobal = __webpack_require__("ce4e");
        var inspectSource = __webpack_require__("8925");
        var InternalStateModule = __webpack_require__("69f3");
        var getInternalState = InternalStateModule.get;
        var enforceInternalState = InternalStateModule.enforce;
        var TEMPLATE2 = String(String).split("String");
        (module3.exports = function(O, key, value, options) {
          var unsafe = options ? !!options.unsafe : false;
          var simple = options ? !!options.enumerable : false;
          var noTargetGet = options ? !!options.noTargetGet : false;
          if (typeof value == "function") {
            if (typeof key == "string" && !has(value, "name"))
              createNonEnumerableProperty(value, "name", key);
            enforceInternalState(value).source = TEMPLATE2.join(typeof key == "string" ? key : "");
          }
          if (O === global2) {
            if (simple)
              O[key] = value;
            else
              setGlobal(key, value);
            return;
          } else if (!unsafe) {
            delete O[key];
          } else if (!noTargetGet && O[key]) {
            simple = true;
          }
          if (simple)
            O[key] = value;
          else
            createNonEnumerableProperty(O, key, value);
        })(Function.prototype, "toString", function toString3() {
          return typeof this == "function" && getInternalState(this).source || inspectSource(this);
        });
      },
      "6f53": function(module3, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var objectKeys = __webpack_require__("df75");
        var toIndexedObject = __webpack_require__("fc6a");
        var propertyIsEnumerable = __webpack_require__("d1e7").f;
        var createMethod = function(TO_ENTRIES) {
          return function(it) {
            var O = toIndexedObject(it);
            var keys2 = objectKeys(O);
            var length = keys2.length;
            var i2 = 0;
            var result = [];
            var key;
            while (length > i2) {
              key = keys2[i2++];
              if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
                result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
              }
            }
            return result;
          };
        };
        module3.exports = {
          entries: createMethod(true),
          values: createMethod(false)
        };
      },
      "73d9": function(module3, exports2, __webpack_require__) {
        var addToUnscopables = __webpack_require__("44d2");
        addToUnscopables("flatMap");
      },
      "7418": function(module3, exports2) {
        exports2.f = Object.getOwnPropertySymbols;
      },
      "746f": function(module3, exports2, __webpack_require__) {
        var path = __webpack_require__("428f");
        var has = __webpack_require__("5135");
        var wrappedWellKnownSymbolModule = __webpack_require__("e538");
        var defineProperty = __webpack_require__("9bf2").f;
        module3.exports = function(NAME) {
          var Symbol2 = path.Symbol || (path.Symbol = {});
          if (!has(Symbol2, NAME))
            defineProperty(Symbol2, NAME, {
              value: wrappedWellKnownSymbolModule.f(NAME)
            });
        };
      },
      "7839": function(module3, exports2) {
        module3.exports = [
          "constructor",
          "hasOwnProperty",
          "isPrototypeOf",
          "propertyIsEnumerable",
          "toLocaleString",
          "toString",
          "valueOf"
        ];
      },
      "7b0b": function(module3, exports2, __webpack_require__) {
        var requireObjectCoercible = __webpack_require__("1d80");
        module3.exports = function(argument) {
          return Object(requireObjectCoercible(argument));
        };
      },
      "7c73": function(module3, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        var defineProperties = __webpack_require__("37e8");
        var enumBugKeys = __webpack_require__("7839");
        var hiddenKeys = __webpack_require__("d012");
        var html = __webpack_require__("1be4");
        var documentCreateElement = __webpack_require__("cc12");
        var sharedKey = __webpack_require__("f772");
        var GT = ">";
        var LT = "<";
        var PROTOTYPE = "prototype";
        var SCRIPT = "script";
        var IE_PROTO = sharedKey("IE_PROTO");
        var EmptyConstructor = function() {
        };
        var scriptTag = function(content) {
          return LT + SCRIPT + GT + content + LT + "/" + SCRIPT + GT;
        };
        var NullProtoObjectViaActiveX = function(activeXDocument2) {
          activeXDocument2.write(scriptTag(""));
          activeXDocument2.close();
          var temp = activeXDocument2.parentWindow.Object;
          activeXDocument2 = null;
          return temp;
        };
        var NullProtoObjectViaIFrame = function() {
          var iframe = documentCreateElement("iframe");
          var JS = "java" + SCRIPT + ":";
          var iframeDocument;
          iframe.style.display = "none";
          html.appendChild(iframe);
          iframe.src = String(JS);
          iframeDocument = iframe.contentWindow.document;
          iframeDocument.open();
          iframeDocument.write(scriptTag("document.F=Object"));
          iframeDocument.close();
          return iframeDocument.F;
        };
        var activeXDocument;
        var NullProtoObject = function() {
          try {
            activeXDocument = document.domain && new ActiveXObject("htmlfile");
          } catch (error) {
          }
          NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
          var length = enumBugKeys.length;
          while (length--)
            delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
          return NullProtoObject();
        };
        hiddenKeys[IE_PROTO] = true;
        module3.exports = Object.create || function create(O, Properties) {
          var result;
          if (O !== null) {
            EmptyConstructor[PROTOTYPE] = anObject(O);
            result = new EmptyConstructor();
            EmptyConstructor[PROTOTYPE] = null;
            result[IE_PROTO] = O;
          } else
            result = NullProtoObject();
          return Properties === void 0 ? result : defineProperties(result, Properties);
        };
      },
      "7dd0": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var createIteratorConstructor = __webpack_require__("9ed3");
        var getPrototypeOf = __webpack_require__("e163");
        var setPrototypeOf = __webpack_require__("d2bb");
        var setToStringTag = __webpack_require__("d44e");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var redefine = __webpack_require__("6eeb");
        var wellKnownSymbol = __webpack_require__("b622");
        var IS_PURE = __webpack_require__("c430");
        var Iterators = __webpack_require__("3f8c");
        var IteratorsCore = __webpack_require__("ae93");
        var IteratorPrototype = IteratorsCore.IteratorPrototype;
        var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
        var ITERATOR = wellKnownSymbol("iterator");
        var KEYS = "keys";
        var VALUES = "values";
        var ENTRIES = "entries";
        var returnThis = function() {
          return this;
        };
        module3.exports = function(Iterable, NAME, IteratorConstructor, next2, DEFAULT, IS_SET, FORCED) {
          createIteratorConstructor(IteratorConstructor, NAME, next2);
          var getIterationMethod = function(KIND) {
            if (KIND === DEFAULT && defaultIterator)
              return defaultIterator;
            if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype)
              return IterablePrototype[KIND];
            switch (KIND) {
              case KEYS:
                return function keys2() {
                  return new IteratorConstructor(this, KIND);
                };
              case VALUES:
                return function values() {
                  return new IteratorConstructor(this, KIND);
                };
              case ENTRIES:
                return function entries() {
                  return new IteratorConstructor(this, KIND);
                };
            }
            return function() {
              return new IteratorConstructor(this);
            };
          };
          var TO_STRING_TAG = NAME + " Iterator";
          var INCORRECT_VALUES_NAME = false;
          var IterablePrototype = Iterable.prototype;
          var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype["@@iterator"] || DEFAULT && IterablePrototype[DEFAULT];
          var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
          var anyNativeIterator = NAME == "Array" ? IterablePrototype.entries || nativeIterator : nativeIterator;
          var CurrentIteratorPrototype, methods2, KEY;
          if (anyNativeIterator) {
            CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
            if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
              if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                if (setPrototypeOf) {
                  setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                } else if (typeof CurrentIteratorPrototype[ITERATOR] != "function") {
                  createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
                }
              }
              setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
              if (IS_PURE)
                Iterators[TO_STRING_TAG] = returnThis;
            }
          }
          if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
            INCORRECT_VALUES_NAME = true;
            defaultIterator = function values() {
              return nativeIterator.call(this);
            };
          }
          if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
            createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
          }
          Iterators[NAME] = defaultIterator;
          if (DEFAULT) {
            methods2 = {
              values: getIterationMethod(VALUES),
              keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
              entries: getIterationMethod(ENTRIES)
            };
            if (FORCED)
              for (KEY in methods2) {
                if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                  redefine(IterablePrototype, KEY, methods2[KEY]);
                }
              }
            else
              $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods2);
          }
          return methods2;
        };
      },
      "7f9a": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var inspectSource = __webpack_require__("8925");
        var WeakMap = global2.WeakMap;
        module3.exports = typeof WeakMap === "function" && /native code/.test(inspectSource(WeakMap));
      },
      "825a": function(module3, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        module3.exports = function(it) {
          if (!isObject2(it)) {
            throw TypeError(String(it) + " is not an object");
          }
          return it;
        };
      },
      "83ab": function(module3, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        module3.exports = !fails(function() {
          return Object.defineProperty({}, 1, { get: function() {
            return 7;
          } })[1] != 7;
        });
      },
      "8418": function(module3, exports2, __webpack_require__) {
        var toPrimitive = __webpack_require__("c04e");
        var definePropertyModule = __webpack_require__("9bf2");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        module3.exports = function(object, key, value) {
          var propertyKey = toPrimitive(key);
          if (propertyKey in object)
            definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
          else
            object[propertyKey] = value;
        };
      },
      "861d": function(module3, exports2) {
        module3.exports = function(it) {
          return typeof it === "object" ? it !== null : typeof it === "function";
        };
      },
      "8875": function(module3, exports2, __webpack_require__) {
        var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
        (function(root, factory) {
          {
            !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
          }
        })(typeof self !== "undefined" ? self : this, function() {
          function getCurrentScript() {
            var descriptor = Object.getOwnPropertyDescriptor(document, "currentScript");
            if (!descriptor && "currentScript" in document && document.currentScript) {
              return document.currentScript;
            }
            if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {
              return document.currentScript;
            }
            try {
              throw new Error();
            } catch (err) {
              var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig, ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig, stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack), scriptLocation = stackDetails && stackDetails[1] || false, line = stackDetails && stackDetails[2] || false, currentLocation = document.location.href.replace(document.location.hash, ""), pageSource, inlineScriptSourceRegExp, inlineScriptSource, scripts = document.getElementsByTagName("script");
              if (scriptLocation === currentLocation) {
                pageSource = document.documentElement.outerHTML;
                inlineScriptSourceRegExp = new RegExp("(?:[^\\n]+?\\n){0," + (line - 2) + "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*", "i");
                inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, "$1").trim();
              }
              for (var i2 = 0; i2 < scripts.length; i2++) {
                if (scripts[i2].readyState === "interactive") {
                  return scripts[i2];
                }
                if (scripts[i2].src === scriptLocation) {
                  return scripts[i2];
                }
                if (scriptLocation === currentLocation && scripts[i2].innerHTML && scripts[i2].innerHTML.trim() === inlineScriptSource) {
                  return scripts[i2];
                }
              }
              return null;
            }
          }
          return getCurrentScript;
        });
      },
      "8925": function(module3, exports2, __webpack_require__) {
        var store = __webpack_require__("c6cd");
        var functionToString = Function.toString;
        if (typeof store.inspectSource != "function") {
          store.inspectSource = function(it) {
            return functionToString.call(it);
          };
        }
        module3.exports = store.inspectSource;
      },
      "8aa5": function(module3, exports2, __webpack_require__) {
        var charAt = __webpack_require__("6547").charAt;
        module3.exports = function(S, index2, unicode) {
          return index2 + (unicode ? charAt(S, index2).length : 1);
        };
      },
      "8bbf": function(module3, exports2) {
        module3.exports = __WEBPACK_EXTERNAL_MODULE__8bbf__;
      },
      "90e3": function(module3, exports2) {
        var id = 0;
        var postfix = Math.random();
        module3.exports = function(key) {
          return "Symbol(" + String(key === void 0 ? "" : key) + ")_" + (++id + postfix).toString(36);
        };
      },
      "9112": function(module3, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var definePropertyModule = __webpack_require__("9bf2");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        module3.exports = DESCRIPTORS ? function(object, key, value) {
          return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
        } : function(object, key, value) {
          object[key] = value;
          return object;
        };
      },
      "9263": function(module3, exports2, __webpack_require__) {
        var regexpFlags = __webpack_require__("ad6d");
        var stickyHelpers = __webpack_require__("9f7f");
        var nativeExec = RegExp.prototype.exec;
        var nativeReplace = String.prototype.replace;
        var patchedExec = nativeExec;
        var UPDATES_LAST_INDEX_WRONG = function() {
          var re1 = /a/;
          var re2 = /b*/g;
          nativeExec.call(re1, "a");
          nativeExec.call(re2, "a");
          return re1.lastIndex !== 0 || re2.lastIndex !== 0;
        }();
        var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET;
        var NPCG_INCLUDED = /()??/.exec("")[1] !== void 0;
        var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y;
        if (PATCH) {
          patchedExec = function exec(str) {
            var re = this;
            var lastIndex, reCopy, match, i2;
            var sticky = UNSUPPORTED_Y && re.sticky;
            var flags = regexpFlags.call(re);
            var source2 = re.source;
            var charsAdded = 0;
            var strCopy = str;
            if (sticky) {
              flags = flags.replace("y", "");
              if (flags.indexOf("g") === -1) {
                flags += "g";
              }
              strCopy = String(str).slice(re.lastIndex);
              if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== "\n")) {
                source2 = "(?: " + source2 + ")";
                strCopy = " " + strCopy;
                charsAdded++;
              }
              reCopy = new RegExp("^(?:" + source2 + ")", flags);
            }
            if (NPCG_INCLUDED) {
              reCopy = new RegExp("^" + source2 + "$(?!\\s)", flags);
            }
            if (UPDATES_LAST_INDEX_WRONG)
              lastIndex = re.lastIndex;
            match = nativeExec.call(sticky ? reCopy : re, strCopy);
            if (sticky) {
              if (match) {
                match.input = match.input.slice(charsAdded);
                match[0] = match[0].slice(charsAdded);
                match.index = re.lastIndex;
                re.lastIndex += match[0].length;
              } else
                re.lastIndex = 0;
            } else if (UPDATES_LAST_INDEX_WRONG && match) {
              re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
            }
            if (NPCG_INCLUDED && match && match.length > 1) {
              nativeReplace.call(match[0], reCopy, function() {
                for (i2 = 1; i2 < arguments.length - 2; i2++) {
                  if (arguments[i2] === void 0)
                    match[i2] = void 0;
                }
              });
            }
            return match;
          };
        }
        module3.exports = patchedExec;
      },
      "94ca": function(module3, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        var replacement = /#|\.prototype\./;
        var isForced = function(feature, detection) {
          var value = data2[normalize2(feature)];
          return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == "function" ? fails(detection) : !!detection;
        };
        var normalize2 = isForced.normalize = function(string) {
          return String(string).replace(replacement, ".").toLowerCase();
        };
        var data2 = isForced.data = {};
        var NATIVE = isForced.NATIVE = "N";
        var POLYFILL = isForced.POLYFILL = "P";
        module3.exports = isForced;
      },
      "99af": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var fails = __webpack_require__("d039");
        var isArray2 = __webpack_require__("e8b5");
        var isObject2 = __webpack_require__("861d");
        var toObject2 = __webpack_require__("7b0b");
        var toLength = __webpack_require__("50c4");
        var createProperty = __webpack_require__("8418");
        var arraySpeciesCreate = __webpack_require__("65f0");
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
        var wellKnownSymbol = __webpack_require__("b622");
        var V8_VERSION = __webpack_require__("2d00");
        var IS_CONCAT_SPREADABLE = wellKnownSymbol("isConcatSpreadable");
        var MAX_SAFE_INTEGER = 9007199254740991;
        var MAXIMUM_ALLOWED_INDEX_EXCEEDED = "Maximum allowed index exceeded";
        var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {
          var array = [];
          array[IS_CONCAT_SPREADABLE] = false;
          return array.concat()[0] !== array;
        });
        var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("concat");
        var isConcatSpreadable = function(O) {
          if (!isObject2(O))
            return false;
          var spreadable = O[IS_CONCAT_SPREADABLE];
          return spreadable !== void 0 ? !!spreadable : isArray2(O);
        };
        var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;
        $({ target: "Array", proto: true, forced: FORCED }, {
          concat: function concat(arg) {
            var O = toObject2(this);
            var A = arraySpeciesCreate(O, 0);
            var n = 0;
            var i2, k, length, len, E2;
            for (i2 = -1, length = arguments.length; i2 < length; i2++) {
              E2 = i2 === -1 ? O : arguments[i2];
              if (isConcatSpreadable(E2)) {
                len = toLength(E2.length);
                if (n + len > MAX_SAFE_INTEGER)
                  throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                for (k = 0; k < len; k++, n++)
                  if (k in E2)
                    createProperty(A, n, E2[k]);
              } else {
                if (n >= MAX_SAFE_INTEGER)
                  throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
                createProperty(A, n++, E2);
              }
            }
            A.length = n;
            return A;
          }
        });
      },
      "9bdd": function(module3, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        module3.exports = function(iterator, fn, value, ENTRIES) {
          try {
            return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
          } catch (error) {
            var returnMethod = iterator["return"];
            if (returnMethod !== void 0)
              anObject(returnMethod.call(iterator));
            throw error;
          }
        };
      },
      "9bf2": function(module3, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var IE8_DOM_DEFINE = __webpack_require__("0cfb");
        var anObject = __webpack_require__("825a");
        var toPrimitive = __webpack_require__("c04e");
        var nativeDefineProperty = Object.defineProperty;
        exports2.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
          anObject(O);
          P = toPrimitive(P, true);
          anObject(Attributes);
          if (IE8_DOM_DEFINE)
            try {
              return nativeDefineProperty(O, P, Attributes);
            } catch (error) {
            }
          if ("get" in Attributes || "set" in Attributes)
            throw TypeError("Accessors not supported");
          if ("value" in Attributes)
            O[P] = Attributes.value;
          return O;
        };
      },
      "9ed3": function(module3, exports2, __webpack_require__) {
        var IteratorPrototype = __webpack_require__("ae93").IteratorPrototype;
        var create = __webpack_require__("7c73");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        var setToStringTag = __webpack_require__("d44e");
        var Iterators = __webpack_require__("3f8c");
        var returnThis = function() {
          return this;
        };
        module3.exports = function(IteratorConstructor, NAME, next2) {
          var TO_STRING_TAG = NAME + " Iterator";
          IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next2) });
          setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
          Iterators[TO_STRING_TAG] = returnThis;
          return IteratorConstructor;
        };
      },
      "9f7f": function(module3, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        function RE(s, f) {
          return RegExp(s, f);
        }
        exports2.UNSUPPORTED_Y = fails(function() {
          var re = RE("a", "y");
          re.lastIndex = 2;
          return re.exec("abcd") != null;
        });
        exports2.BROKEN_CARET = fails(function() {
          var re = RE("^r", "gy");
          re.lastIndex = 2;
          return re.exec("str") != null;
        });
      },
      "a2bf": function(module3, exports2, __webpack_require__) {
        var isArray2 = __webpack_require__("e8b5");
        var toLength = __webpack_require__("50c4");
        var bind4 = __webpack_require__("0366");
        var flattenIntoArray = function(target, original, source2, sourceLen, start, depth, mapper, thisArg) {
          var targetIndex = start;
          var sourceIndex = 0;
          var mapFn = mapper ? bind4(mapper, thisArg, 3) : false;
          var element;
          while (sourceIndex < sourceLen) {
            if (sourceIndex in source2) {
              element = mapFn ? mapFn(source2[sourceIndex], sourceIndex, original) : source2[sourceIndex];
              if (depth > 0 && isArray2(element)) {
                targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
              } else {
                if (targetIndex >= 9007199254740991)
                  throw TypeError("Exceed the acceptable array length");
                target[targetIndex] = element;
              }
              targetIndex++;
            }
            sourceIndex++;
          }
          return targetIndex;
        };
        module3.exports = flattenIntoArray;
      },
      "a352": function(module3, exports2) {
        module3.exports = __WEBPACK_EXTERNAL_MODULE_a352__;
      },
      "a434": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var toAbsoluteIndex = __webpack_require__("23cb");
        var toInteger = __webpack_require__("a691");
        var toLength = __webpack_require__("50c4");
        var toObject2 = __webpack_require__("7b0b");
        var arraySpeciesCreate = __webpack_require__("65f0");
        var createProperty = __webpack_require__("8418");
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("splice");
        var USES_TO_LENGTH = arrayMethodUsesToLength("splice", { ACCESSORS: true, 0: 0, 1: 2 });
        var max2 = Math.max;
        var min2 = Math.min;
        var MAX_SAFE_INTEGER = 9007199254740991;
        var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = "Maximum allowed length exceeded";
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
          splice: function splice(start, deleteCount) {
            var O = toObject2(this);
            var len = toLength(O.length);
            var actualStart = toAbsoluteIndex(start, len);
            var argumentsLength = arguments.length;
            var insertCount, actualDeleteCount, A, k, from2, to2;
            if (argumentsLength === 0) {
              insertCount = actualDeleteCount = 0;
            } else if (argumentsLength === 1) {
              insertCount = 0;
              actualDeleteCount = len - actualStart;
            } else {
              insertCount = argumentsLength - 2;
              actualDeleteCount = min2(max2(toInteger(deleteCount), 0), len - actualStart);
            }
            if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
              throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
            }
            A = arraySpeciesCreate(O, actualDeleteCount);
            for (k = 0; k < actualDeleteCount; k++) {
              from2 = actualStart + k;
              if (from2 in O)
                createProperty(A, k, O[from2]);
            }
            A.length = actualDeleteCount;
            if (insertCount < actualDeleteCount) {
              for (k = actualStart; k < len - actualDeleteCount; k++) {
                from2 = k + actualDeleteCount;
                to2 = k + insertCount;
                if (from2 in O)
                  O[to2] = O[from2];
                else
                  delete O[to2];
              }
              for (k = len; k > len - actualDeleteCount + insertCount; k--)
                delete O[k - 1];
            } else if (insertCount > actualDeleteCount) {
              for (k = len - actualDeleteCount; k > actualStart; k--) {
                from2 = k + actualDeleteCount - 1;
                to2 = k + insertCount - 1;
                if (from2 in O)
                  O[to2] = O[from2];
                else
                  delete O[to2];
              }
            }
            for (k = 0; k < insertCount; k++) {
              O[k + actualStart] = arguments[k + 2];
            }
            O.length = len - actualDeleteCount + insertCount;
            return A;
          }
        });
      },
      "a4d3": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var global2 = __webpack_require__("da84");
        var getBuiltIn = __webpack_require__("d066");
        var IS_PURE = __webpack_require__("c430");
        var DESCRIPTORS = __webpack_require__("83ab");
        var NATIVE_SYMBOL = __webpack_require__("4930");
        var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");
        var fails = __webpack_require__("d039");
        var has = __webpack_require__("5135");
        var isArray2 = __webpack_require__("e8b5");
        var isObject2 = __webpack_require__("861d");
        var anObject = __webpack_require__("825a");
        var toObject2 = __webpack_require__("7b0b");
        var toIndexedObject = __webpack_require__("fc6a");
        var toPrimitive = __webpack_require__("c04e");
        var createPropertyDescriptor = __webpack_require__("5c6c");
        var nativeObjectCreate = __webpack_require__("7c73");
        var objectKeys = __webpack_require__("df75");
        var getOwnPropertyNamesModule = __webpack_require__("241c");
        var getOwnPropertyNamesExternal = __webpack_require__("057f");
        var getOwnPropertySymbolsModule = __webpack_require__("7418");
        var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
        var definePropertyModule = __webpack_require__("9bf2");
        var propertyIsEnumerableModule = __webpack_require__("d1e7");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var redefine = __webpack_require__("6eeb");
        var shared = __webpack_require__("5692");
        var sharedKey = __webpack_require__("f772");
        var hiddenKeys = __webpack_require__("d012");
        var uid = __webpack_require__("90e3");
        var wellKnownSymbol = __webpack_require__("b622");
        var wrappedWellKnownSymbolModule = __webpack_require__("e538");
        var defineWellKnownSymbol = __webpack_require__("746f");
        var setToStringTag = __webpack_require__("d44e");
        var InternalStateModule = __webpack_require__("69f3");
        var $forEach = __webpack_require__("b727").forEach;
        var HIDDEN = sharedKey("hidden");
        var SYMBOL = "Symbol";
        var PROTOTYPE = "prototype";
        var TO_PRIMITIVE = wellKnownSymbol("toPrimitive");
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(SYMBOL);
        var ObjectPrototype = Object[PROTOTYPE];
        var $Symbol = global2.Symbol;
        var $stringify = getBuiltIn("JSON", "stringify");
        var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
        var nativeDefineProperty = definePropertyModule.f;
        var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
        var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
        var AllSymbols = shared("symbols");
        var ObjectPrototypeSymbols = shared("op-symbols");
        var StringToSymbolRegistry = shared("string-to-symbol-registry");
        var SymbolToStringRegistry = shared("symbol-to-string-registry");
        var WellKnownSymbolsStore = shared("wks");
        var QObject = global2.QObject;
        var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
        var setSymbolDescriptor = DESCRIPTORS && fails(function() {
          return nativeObjectCreate(nativeDefineProperty({}, "a", {
            get: function() {
              return nativeDefineProperty(this, "a", { value: 7 }).a;
            }
          })).a != 7;
        }) ? function(O, P, Attributes) {
          var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
          if (ObjectPrototypeDescriptor)
            delete ObjectPrototype[P];
          nativeDefineProperty(O, P, Attributes);
          if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
            nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
          }
        } : nativeDefineProperty;
        var wrap = function(tag, description) {
          var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
          setInternalState(symbol, {
            type: SYMBOL,
            tag,
            description
          });
          if (!DESCRIPTORS)
            symbol.description = description;
          return symbol;
        };
        var isSymbol = USE_SYMBOL_AS_UID ? function(it) {
          return typeof it == "symbol";
        } : function(it) {
          return Object(it) instanceof $Symbol;
        };
        var $defineProperty = function defineProperty(O, P, Attributes) {
          if (O === ObjectPrototype)
            $defineProperty(ObjectPrototypeSymbols, P, Attributes);
          anObject(O);
          var key = toPrimitive(P, true);
          anObject(Attributes);
          if (has(AllSymbols, key)) {
            if (!Attributes.enumerable) {
              if (!has(O, HIDDEN))
                nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
              O[HIDDEN][key] = true;
            } else {
              if (has(O, HIDDEN) && O[HIDDEN][key])
                O[HIDDEN][key] = false;
              Attributes = nativeObjectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
            }
            return setSymbolDescriptor(O, key, Attributes);
          }
          return nativeDefineProperty(O, key, Attributes);
        };
        var $defineProperties = function defineProperties(O, Properties) {
          anObject(O);
          var properties = toIndexedObject(Properties);
          var keys2 = objectKeys(properties).concat($getOwnPropertySymbols(properties));
          $forEach(keys2, function(key) {
            if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key))
              $defineProperty(O, key, properties[key]);
          });
          return O;
        };
        var $create = function create(O, Properties) {
          return Properties === void 0 ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
        };
        var $propertyIsEnumerable = function propertyIsEnumerable(V) {
          var P = toPrimitive(V, true);
          var enumerable = nativePropertyIsEnumerable.call(this, P);
          if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P))
            return false;
          return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
        };
        var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
          var it = toIndexedObject(O);
          var key = toPrimitive(P, true);
          if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key))
            return;
          var descriptor = nativeGetOwnPropertyDescriptor(it, key);
          if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
            descriptor.enumerable = true;
          }
          return descriptor;
        };
        var $getOwnPropertyNames = function getOwnPropertyNames(O) {
          var names = nativeGetOwnPropertyNames(toIndexedObject(O));
          var result = [];
          $forEach(names, function(key) {
            if (!has(AllSymbols, key) && !has(hiddenKeys, key))
              result.push(key);
          });
          return result;
        };
        var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
          var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
          var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
          var result = [];
          $forEach(names, function(key) {
            if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
              result.push(AllSymbols[key]);
            }
          });
          return result;
        };
        if (!NATIVE_SYMBOL) {
          $Symbol = function Symbol2() {
            if (this instanceof $Symbol)
              throw TypeError("Symbol is not a constructor");
            var description = !arguments.length || arguments[0] === void 0 ? void 0 : String(arguments[0]);
            var tag = uid(description);
            var setter = function(value) {
              if (this === ObjectPrototype)
                setter.call(ObjectPrototypeSymbols, value);
              if (has(this, HIDDEN) && has(this[HIDDEN], tag))
                this[HIDDEN][tag] = false;
              setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
            };
            if (DESCRIPTORS && USE_SETTER)
              setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
            return wrap(tag, description);
          };
          redefine($Symbol[PROTOTYPE], "toString", function toString3() {
            return getInternalState(this).tag;
          });
          redefine($Symbol, "withoutSetter", function(description) {
            return wrap(uid(description), description);
          });
          propertyIsEnumerableModule.f = $propertyIsEnumerable;
          definePropertyModule.f = $defineProperty;
          getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
          getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
          getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;
          wrappedWellKnownSymbolModule.f = function(name) {
            return wrap(wellKnownSymbol(name), name);
          };
          if (DESCRIPTORS) {
            nativeDefineProperty($Symbol[PROTOTYPE], "description", {
              configurable: true,
              get: function description() {
                return getInternalState(this).description;
              }
            });
            if (!IS_PURE) {
              redefine(ObjectPrototype, "propertyIsEnumerable", $propertyIsEnumerable, { unsafe: true });
            }
          }
        }
        $({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, {
          Symbol: $Symbol
        });
        $forEach(objectKeys(WellKnownSymbolsStore), function(name) {
          defineWellKnownSymbol(name);
        });
        $({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
          "for": function(key) {
            var string = String(key);
            if (has(StringToSymbolRegistry, string))
              return StringToSymbolRegistry[string];
            var symbol = $Symbol(string);
            StringToSymbolRegistry[string] = symbol;
            SymbolToStringRegistry[symbol] = string;
            return symbol;
          },
          keyFor: function keyFor(sym) {
            if (!isSymbol(sym))
              throw TypeError(sym + " is not a symbol");
            if (has(SymbolToStringRegistry, sym))
              return SymbolToStringRegistry[sym];
          },
          useSetter: function() {
            USE_SETTER = true;
          },
          useSimple: function() {
            USE_SETTER = false;
          }
        });
        $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
          create: $create,
          defineProperty: $defineProperty,
          defineProperties: $defineProperties,
          getOwnPropertyDescriptor: $getOwnPropertyDescriptor
        });
        $({ target: "Object", stat: true, forced: !NATIVE_SYMBOL }, {
          getOwnPropertyNames: $getOwnPropertyNames,
          getOwnPropertySymbols: $getOwnPropertySymbols
        });
        $({ target: "Object", stat: true, forced: fails(function() {
          getOwnPropertySymbolsModule.f(1);
        }) }, {
          getOwnPropertySymbols: function getOwnPropertySymbols(it) {
            return getOwnPropertySymbolsModule.f(toObject2(it));
          }
        });
        if ($stringify) {
          var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {
            var symbol = $Symbol();
            return $stringify([symbol]) != "[null]" || $stringify({ a: symbol }) != "{}" || $stringify(Object(symbol)) != "{}";
          });
          $({ target: "JSON", stat: true, forced: FORCED_JSON_STRINGIFY }, {
            stringify: function stringify2(it, replacer, space) {
              var args = [it];
              var index2 = 1;
              var $replacer;
              while (arguments.length > index2)
                args.push(arguments[index2++]);
              $replacer = replacer;
              if (!isObject2(replacer) && it === void 0 || isSymbol(it))
                return;
              if (!isArray2(replacer))
                replacer = function(key, value) {
                  if (typeof $replacer == "function")
                    value = $replacer.call(this, key, value);
                  if (!isSymbol(value))
                    return value;
                };
              args[1] = replacer;
              return $stringify.apply(null, args);
            }
          });
        }
        if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
          createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
        }
        setToStringTag($Symbol, SYMBOL);
        hiddenKeys[HIDDEN] = true;
      },
      "a630": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var from2 = __webpack_require__("4df4");
        var checkCorrectnessOfIteration = __webpack_require__("1c7e");
        var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function(iterable) {
          Array.from(iterable);
        });
        $({ target: "Array", stat: true, forced: INCORRECT_ITERATION }, {
          from: from2
        });
      },
      "a640": function(module3, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        module3.exports = function(METHOD_NAME, argument) {
          var method = [][METHOD_NAME];
          return !!method && fails(function() {
            method.call(null, argument || function() {
              throw 1;
            }, 1);
          });
        };
      },
      "a691": function(module3, exports2) {
        var ceil = Math.ceil;
        var floor = Math.floor;
        module3.exports = function(argument) {
          return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
        };
      },
      "ab13": function(module3, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var MATCH = wellKnownSymbol("match");
        module3.exports = function(METHOD_NAME) {
          var regexp = /./;
          try {
            "/./"[METHOD_NAME](regexp);
          } catch (e) {
            try {
              regexp[MATCH] = false;
              return "/./"[METHOD_NAME](regexp);
            } catch (f) {
            }
          }
          return false;
        };
      },
      "ac1f": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var exec = __webpack_require__("9263");
        $({ target: "RegExp", proto: true, forced: /./.exec !== exec }, {
          exec
        });
      },
      "ad6d": function(module3, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        module3.exports = function() {
          var that = anObject(this);
          var result = "";
          if (that.global)
            result += "g";
          if (that.ignoreCase)
            result += "i";
          if (that.multiline)
            result += "m";
          if (that.dotAll)
            result += "s";
          if (that.unicode)
            result += "u";
          if (that.sticky)
            result += "y";
          return result;
        };
      },
      "ae40": function(module3, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var fails = __webpack_require__("d039");
        var has = __webpack_require__("5135");
        var defineProperty = Object.defineProperty;
        var cache2 = {};
        var thrower = function(it) {
          throw it;
        };
        module3.exports = function(METHOD_NAME, options) {
          if (has(cache2, METHOD_NAME))
            return cache2[METHOD_NAME];
          if (!options)
            options = {};
          var method = [][METHOD_NAME];
          var ACCESSORS = has(options, "ACCESSORS") ? options.ACCESSORS : false;
          var argument0 = has(options, 0) ? options[0] : thrower;
          var argument1 = has(options, 1) ? options[1] : void 0;
          return cache2[METHOD_NAME] = !!method && !fails(function() {
            if (ACCESSORS && !DESCRIPTORS)
              return true;
            var O = { length: -1 };
            if (ACCESSORS)
              defineProperty(O, 1, { enumerable: true, get: thrower });
            else
              O[1] = 1;
            method.call(O, argument0, argument1);
          });
        };
      },
      "ae93": function(module3, exports2, __webpack_require__) {
        var getPrototypeOf = __webpack_require__("e163");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var has = __webpack_require__("5135");
        var wellKnownSymbol = __webpack_require__("b622");
        var IS_PURE = __webpack_require__("c430");
        var ITERATOR = wellKnownSymbol("iterator");
        var BUGGY_SAFARI_ITERATORS = false;
        var returnThis = function() {
          return this;
        };
        var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
        if ([].keys) {
          arrayIterator = [].keys();
          if (!("next" in arrayIterator))
            BUGGY_SAFARI_ITERATORS = true;
          else {
            PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
            if (PrototypeOfArrayIteratorPrototype !== Object.prototype)
              IteratorPrototype = PrototypeOfArrayIteratorPrototype;
          }
        }
        if (IteratorPrototype == void 0)
          IteratorPrototype = {};
        if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) {
          createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
        }
        module3.exports = {
          IteratorPrototype,
          BUGGY_SAFARI_ITERATORS
        };
      },
      "b041": function(module3, exports2, __webpack_require__) {
        var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
        var classof = __webpack_require__("f5df");
        module3.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString3() {
          return "[object " + classof(this) + "]";
        };
      },
      "b0c0": function(module3, exports2, __webpack_require__) {
        var DESCRIPTORS = __webpack_require__("83ab");
        var defineProperty = __webpack_require__("9bf2").f;
        var FunctionPrototype = Function.prototype;
        var FunctionPrototypeToString = FunctionPrototype.toString;
        var nameRE = /^\s*function ([^ (]*)/;
        var NAME = "name";
        if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
          defineProperty(FunctionPrototype, NAME, {
            configurable: true,
            get: function() {
              try {
                return FunctionPrototypeToString.call(this).match(nameRE)[1];
              } catch (error) {
                return "";
              }
            }
          });
        }
      },
      "b622": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var shared = __webpack_require__("5692");
        var has = __webpack_require__("5135");
        var uid = __webpack_require__("90e3");
        var NATIVE_SYMBOL = __webpack_require__("4930");
        var USE_SYMBOL_AS_UID = __webpack_require__("fdbf");
        var WellKnownSymbolsStore = shared("wks");
        var Symbol2 = global2.Symbol;
        var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol2 : Symbol2 && Symbol2.withoutSetter || uid;
        module3.exports = function(name) {
          if (!has(WellKnownSymbolsStore, name)) {
            if (NATIVE_SYMBOL && has(Symbol2, name))
              WellKnownSymbolsStore[name] = Symbol2[name];
            else
              WellKnownSymbolsStore[name] = createWellKnownSymbol("Symbol." + name);
          }
          return WellKnownSymbolsStore[name];
        };
      },
      "b64b": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var toObject2 = __webpack_require__("7b0b");
        var nativeKeys = __webpack_require__("df75");
        var fails = __webpack_require__("d039");
        var FAILS_ON_PRIMITIVES = fails(function() {
          nativeKeys(1);
        });
        $({ target: "Object", stat: true, forced: FAILS_ON_PRIMITIVES }, {
          keys: function keys2(it) {
            return nativeKeys(toObject2(it));
          }
        });
      },
      "b727": function(module3, exports2, __webpack_require__) {
        var bind4 = __webpack_require__("0366");
        var IndexedObject = __webpack_require__("44ad");
        var toObject2 = __webpack_require__("7b0b");
        var toLength = __webpack_require__("50c4");
        var arraySpeciesCreate = __webpack_require__("65f0");
        var push = [].push;
        var createMethod = function(TYPE) {
          var IS_MAP = TYPE == 1;
          var IS_FILTER = TYPE == 2;
          var IS_SOME = TYPE == 3;
          var IS_EVERY = TYPE == 4;
          var IS_FIND_INDEX = TYPE == 6;
          var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
          return function($this, callbackfn, that, specificCreate) {
            var O = toObject2($this);
            var self2 = IndexedObject(O);
            var boundFunction = bind4(callbackfn, that, 3);
            var length = toLength(self2.length);
            var index2 = 0;
            var create = specificCreate || arraySpeciesCreate;
            var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : void 0;
            var value, result;
            for (; length > index2; index2++)
              if (NO_HOLES || index2 in self2) {
                value = self2[index2];
                result = boundFunction(value, index2, O);
                if (TYPE) {
                  if (IS_MAP)
                    target[index2] = result;
                  else if (result)
                    switch (TYPE) {
                      case 3:
                        return true;
                      case 5:
                        return value;
                      case 6:
                        return index2;
                      case 2:
                        push.call(target, value);
                    }
                  else if (IS_EVERY)
                    return false;
                }
              }
            return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
          };
        };
        module3.exports = {
          forEach: createMethod(0),
          map: createMethod(1),
          filter: createMethod(2),
          some: createMethod(3),
          every: createMethod(4),
          find: createMethod(5),
          findIndex: createMethod(6)
        };
      },
      "c04e": function(module3, exports2, __webpack_require__) {
        var isObject2 = __webpack_require__("861d");
        module3.exports = function(input, PREFERRED_STRING) {
          if (!isObject2(input))
            return input;
          var fn, val;
          if (PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject2(val = fn.call(input)))
            return val;
          if (typeof (fn = input.valueOf) == "function" && !isObject2(val = fn.call(input)))
            return val;
          if (!PREFERRED_STRING && typeof (fn = input.toString) == "function" && !isObject2(val = fn.call(input)))
            return val;
          throw TypeError("Can't convert object to primitive value");
        };
      },
      "c430": function(module3, exports2) {
        module3.exports = false;
      },
      "c6b6": function(module3, exports2) {
        var toString3 = {}.toString;
        module3.exports = function(it) {
          return toString3.call(it).slice(8, -1);
        };
      },
      "c6cd": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var setGlobal = __webpack_require__("ce4e");
        var SHARED = "__core-js_shared__";
        var store = global2[SHARED] || setGlobal(SHARED, {});
        module3.exports = store;
      },
      "c740": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var $findIndex = __webpack_require__("b727").findIndex;
        var addToUnscopables = __webpack_require__("44d2");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var FIND_INDEX = "findIndex";
        var SKIPS_HOLES = true;
        var USES_TO_LENGTH = arrayMethodUsesToLength(FIND_INDEX);
        if (FIND_INDEX in [])
          Array(1)[FIND_INDEX](function() {
            SKIPS_HOLES = false;
          });
        $({ target: "Array", proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH }, {
          findIndex: function findIndex(callbackfn) {
            return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
        addToUnscopables(FIND_INDEX);
      },
      "c8ba": function(module3, exports2) {
        var g;
        g = function() {
          return this;
        }();
        try {
          g = g || new Function("return this")();
        } catch (e) {
          if (typeof window === "object")
            g = window;
        }
        module3.exports = g;
      },
      "c975": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var $indexOf = __webpack_require__("4d64").indexOf;
        var arrayMethodIsStrict = __webpack_require__("a640");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var nativeIndexOf = [].indexOf;
        var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
        var STRICT_METHOD = arrayMethodIsStrict("indexOf");
        var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", { ACCESSORS: true, 1: 0 });
        $({ target: "Array", proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD || !USES_TO_LENGTH }, {
          indexOf: function indexOf2(searchElement) {
            return NEGATIVE_ZERO ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
      },
      "ca84": function(module3, exports2, __webpack_require__) {
        var has = __webpack_require__("5135");
        var toIndexedObject = __webpack_require__("fc6a");
        var indexOf2 = __webpack_require__("4d64").indexOf;
        var hiddenKeys = __webpack_require__("d012");
        module3.exports = function(object, names) {
          var O = toIndexedObject(object);
          var i2 = 0;
          var result = [];
          var key;
          for (key in O)
            !has(hiddenKeys, key) && has(O, key) && result.push(key);
          while (names.length > i2)
            if (has(O, key = names[i2++])) {
              ~indexOf2(result, key) || result.push(key);
            }
          return result;
        };
      },
      "caad": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var $includes = __webpack_require__("4d64").includes;
        var addToUnscopables = __webpack_require__("44d2");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var USES_TO_LENGTH = arrayMethodUsesToLength("indexOf", { ACCESSORS: true, 1: 0 });
        $({ target: "Array", proto: true, forced: !USES_TO_LENGTH }, {
          includes: function includes(el) {
            return $includes(this, el, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
        addToUnscopables("includes");
      },
      "cc12": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var isObject2 = __webpack_require__("861d");
        var document2 = global2.document;
        var EXISTS = isObject2(document2) && isObject2(document2.createElement);
        module3.exports = function(it) {
          return EXISTS ? document2.createElement(it) : {};
        };
      },
      "ce4e": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var createNonEnumerableProperty = __webpack_require__("9112");
        module3.exports = function(key, value) {
          try {
            createNonEnumerableProperty(global2, key, value);
          } catch (error) {
            global2[key] = value;
          }
          return value;
        };
      },
      "d012": function(module3, exports2) {
        module3.exports = {};
      },
      "d039": function(module3, exports2) {
        module3.exports = function(exec) {
          try {
            return !!exec();
          } catch (error) {
            return true;
          }
        };
      },
      "d066": function(module3, exports2, __webpack_require__) {
        var path = __webpack_require__("428f");
        var global2 = __webpack_require__("da84");
        var aFunction = function(variable) {
          return typeof variable == "function" ? variable : void 0;
        };
        module3.exports = function(namespace, method) {
          return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global2[namespace]) : path[namespace] && path[namespace][method] || global2[namespace] && global2[namespace][method];
        };
      },
      "d1e7": function(module3, exports2, __webpack_require__) {
        var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
        var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
        var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);
        exports2.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
          var descriptor = getOwnPropertyDescriptor(this, V);
          return !!descriptor && descriptor.enumerable;
        } : nativePropertyIsEnumerable;
      },
      "d28b": function(module3, exports2, __webpack_require__) {
        var defineWellKnownSymbol = __webpack_require__("746f");
        defineWellKnownSymbol("iterator");
      },
      "d2bb": function(module3, exports2, __webpack_require__) {
        var anObject = __webpack_require__("825a");
        var aPossiblePrototype = __webpack_require__("3bbe");
        module3.exports = Object.setPrototypeOf || ("__proto__" in {} ? function() {
          var CORRECT_SETTER = false;
          var test = {};
          var setter;
          try {
            setter = Object.getOwnPropertyDescriptor(Object.prototype, "__proto__").set;
            setter.call(test, []);
            CORRECT_SETTER = test instanceof Array;
          } catch (error) {
          }
          return function setPrototypeOf(O, proto2) {
            anObject(O);
            aPossiblePrototype(proto2);
            if (CORRECT_SETTER)
              setter.call(O, proto2);
            else
              O.__proto__ = proto2;
            return O;
          };
        }() : void 0);
      },
      "d3b7": function(module3, exports2, __webpack_require__) {
        var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
        var redefine = __webpack_require__("6eeb");
        var toString3 = __webpack_require__("b041");
        if (!TO_STRING_TAG_SUPPORT) {
          redefine(Object.prototype, "toString", toString3, { unsafe: true });
        }
      },
      "d44e": function(module3, exports2, __webpack_require__) {
        var defineProperty = __webpack_require__("9bf2").f;
        var has = __webpack_require__("5135");
        var wellKnownSymbol = __webpack_require__("b622");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        module3.exports = function(it, TAG, STATIC) {
          if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
            defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
          }
        };
      },
      "d58f": function(module3, exports2, __webpack_require__) {
        var aFunction = __webpack_require__("1c0b");
        var toObject2 = __webpack_require__("7b0b");
        var IndexedObject = __webpack_require__("44ad");
        var toLength = __webpack_require__("50c4");
        var createMethod = function(IS_RIGHT) {
          return function(that, callbackfn, argumentsLength, memo) {
            aFunction(callbackfn);
            var O = toObject2(that);
            var self2 = IndexedObject(O);
            var length = toLength(O.length);
            var index2 = IS_RIGHT ? length - 1 : 0;
            var i2 = IS_RIGHT ? -1 : 1;
            if (argumentsLength < 2)
              while (true) {
                if (index2 in self2) {
                  memo = self2[index2];
                  index2 += i2;
                  break;
                }
                index2 += i2;
                if (IS_RIGHT ? index2 < 0 : length <= index2) {
                  throw TypeError("Reduce of empty array with no initial value");
                }
              }
            for (; IS_RIGHT ? index2 >= 0 : length > index2; index2 += i2)
              if (index2 in self2) {
                memo = callbackfn(memo, self2[index2], index2, O);
              }
            return memo;
          };
        };
        module3.exports = {
          left: createMethod(false),
          right: createMethod(true)
        };
      },
      "d784": function(module3, exports2, __webpack_require__) {
        __webpack_require__("ac1f");
        var redefine = __webpack_require__("6eeb");
        var fails = __webpack_require__("d039");
        var wellKnownSymbol = __webpack_require__("b622");
        var regexpExec = __webpack_require__("9263");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var SPECIES = wellKnownSymbol("species");
        var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function() {
          var re = /./;
          re.exec = function() {
            var result = [];
            result.groups = { a: "7" };
            return result;
          };
          return "".replace(re, "$<a>") !== "7";
        });
        var REPLACE_KEEPS_$0 = function() {
          return "a".replace(/./, "$0") === "$0";
        }();
        var REPLACE = wellKnownSymbol("replace");
        var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function() {
          if (/./[REPLACE]) {
            return /./[REPLACE]("a", "$0") === "";
          }
          return false;
        }();
        var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function() {
          var re = /(?:)/;
          var originalExec = re.exec;
          re.exec = function() {
            return originalExec.apply(this, arguments);
          };
          var result = "ab".split(re);
          return result.length !== 2 || result[0] !== "a" || result[1] !== "b";
        });
        module3.exports = function(KEY, length, exec, sham) {
          var SYMBOL = wellKnownSymbol(KEY);
          var DELEGATES_TO_SYMBOL = !fails(function() {
            var O = {};
            O[SYMBOL] = function() {
              return 7;
            };
            return ""[KEY](O) != 7;
          });
          var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function() {
            var execCalled = false;
            var re = /a/;
            if (KEY === "split") {
              re = {};
              re.constructor = {};
              re.constructor[SPECIES] = function() {
                return re;
              };
              re.flags = "";
              re[SYMBOL] = /./[SYMBOL];
            }
            re.exec = function() {
              execCalled = true;
              return null;
            };
            re[SYMBOL]("");
            return !execCalled;
          });
          if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || KEY === "replace" && !(REPLACE_SUPPORTS_NAMED_GROUPS && REPLACE_KEEPS_$0 && !REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE) || KEY === "split" && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC) {
            var nativeRegExpMethod = /./[SYMBOL];
            var methods2 = exec(SYMBOL, ""[KEY], function(nativeMethod, regexp, str, arg2, forceStringMethod) {
              if (regexp.exec === regexpExec) {
                if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                  return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };
                }
                return { done: true, value: nativeMethod.call(str, regexp, arg2) };
              }
              return { done: false };
            }, {
              REPLACE_KEEPS_$0,
              REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE
            });
            var stringMethod = methods2[0];
            var regexMethod = methods2[1];
            redefine(String.prototype, KEY, stringMethod);
            redefine(RegExp.prototype, SYMBOL, length == 2 ? function(string, arg) {
              return regexMethod.call(string, this, arg);
            } : function(string) {
              return regexMethod.call(string, this);
            });
          }
          if (sham)
            createNonEnumerableProperty(RegExp.prototype[SYMBOL], "sham", true);
        };
      },
      "d81d": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var $map = __webpack_require__("b727").map;
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("map");
        var USES_TO_LENGTH = arrayMethodUsesToLength("map");
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
          map: function map2(callbackfn) {
            return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : void 0);
          }
        });
      },
      "da84": function(module3, exports2, __webpack_require__) {
        (function(global2) {
          var check = function(it) {
            return it && it.Math == Math && it;
          };
          module3.exports = check(typeof globalThis == "object" && globalThis) || check(typeof window == "object" && window) || check(typeof self == "object" && self) || check(typeof global2 == "object" && global2) || Function("return this")();
        }).call(this, __webpack_require__("c8ba"));
      },
      "dbb4": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var DESCRIPTORS = __webpack_require__("83ab");
        var ownKeys2 = __webpack_require__("56ef");
        var toIndexedObject = __webpack_require__("fc6a");
        var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
        var createProperty = __webpack_require__("8418");
        $({ target: "Object", stat: true, sham: !DESCRIPTORS }, {
          getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
            var O = toIndexedObject(object);
            var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            var keys2 = ownKeys2(O);
            var result = {};
            var index2 = 0;
            var key, descriptor;
            while (keys2.length > index2) {
              descriptor = getOwnPropertyDescriptor(O, key = keys2[index2++]);
              if (descriptor !== void 0)
                createProperty(result, key, descriptor);
            }
            return result;
          }
        });
      },
      "dbf1": function(module3, __webpack_exports__, __webpack_require__) {
        (function(global2) {
          __webpack_require__.d(__webpack_exports__, "a", function() {
            return console2;
          });
          function getConsole2() {
            if (typeof window !== "undefined") {
              return window.console;
            }
            return global2.console;
          }
          var console2 = getConsole2();
        }).call(this, __webpack_require__("c8ba"));
      },
      "ddb0": function(module3, exports2, __webpack_require__) {
        var global2 = __webpack_require__("da84");
        var DOMIterables = __webpack_require__("fdbc");
        var ArrayIteratorMethods = __webpack_require__("e260");
        var createNonEnumerableProperty = __webpack_require__("9112");
        var wellKnownSymbol = __webpack_require__("b622");
        var ITERATOR = wellKnownSymbol("iterator");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var ArrayValues = ArrayIteratorMethods.values;
        for (var COLLECTION_NAME in DOMIterables) {
          var Collection = global2[COLLECTION_NAME];
          var CollectionPrototype = Collection && Collection.prototype;
          if (CollectionPrototype) {
            if (CollectionPrototype[ITERATOR] !== ArrayValues)
              try {
                createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
              } catch (error) {
                CollectionPrototype[ITERATOR] = ArrayValues;
              }
            if (!CollectionPrototype[TO_STRING_TAG]) {
              createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
            }
            if (DOMIterables[COLLECTION_NAME])
              for (var METHOD_NAME in ArrayIteratorMethods) {
                if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME])
                  try {
                    createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
                  } catch (error) {
                    CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
                  }
              }
          }
        }
      },
      "df75": function(module3, exports2, __webpack_require__) {
        var internalObjectKeys = __webpack_require__("ca84");
        var enumBugKeys = __webpack_require__("7839");
        module3.exports = Object.keys || function keys2(O) {
          return internalObjectKeys(O, enumBugKeys);
        };
      },
      "e01a": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var DESCRIPTORS = __webpack_require__("83ab");
        var global2 = __webpack_require__("da84");
        var has = __webpack_require__("5135");
        var isObject2 = __webpack_require__("861d");
        var defineProperty = __webpack_require__("9bf2").f;
        var copyConstructorProperties = __webpack_require__("e893");
        var NativeSymbol = global2.Symbol;
        if (DESCRIPTORS && typeof NativeSymbol == "function" && (!("description" in NativeSymbol.prototype) || NativeSymbol().description !== void 0)) {
          var EmptyStringDescriptionStore = {};
          var SymbolWrapper = function Symbol2() {
            var description = arguments.length < 1 || arguments[0] === void 0 ? void 0 : String(arguments[0]);
            var result = this instanceof SymbolWrapper ? new NativeSymbol(description) : description === void 0 ? NativeSymbol() : NativeSymbol(description);
            if (description === "")
              EmptyStringDescriptionStore[result] = true;
            return result;
          };
          copyConstructorProperties(SymbolWrapper, NativeSymbol);
          var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
          symbolPrototype.constructor = SymbolWrapper;
          var symbolToString = symbolPrototype.toString;
          var native = String(NativeSymbol("test")) == "Symbol(test)";
          var regexp = /^Symbol\((.*)\)[^)]+$/;
          defineProperty(symbolPrototype, "description", {
            configurable: true,
            get: function description() {
              var symbol = isObject2(this) ? this.valueOf() : this;
              var string = symbolToString.call(symbol);
              if (has(EmptyStringDescriptionStore, symbol))
                return "";
              var desc = native ? string.slice(7, -1) : string.replace(regexp, "$1");
              return desc === "" ? void 0 : desc;
            }
          });
          $({ global: true, forced: true }, {
            Symbol: SymbolWrapper
          });
        }
      },
      "e163": function(module3, exports2, __webpack_require__) {
        var has = __webpack_require__("5135");
        var toObject2 = __webpack_require__("7b0b");
        var sharedKey = __webpack_require__("f772");
        var CORRECT_PROTOTYPE_GETTER = __webpack_require__("e177");
        var IE_PROTO = sharedKey("IE_PROTO");
        var ObjectPrototype = Object.prototype;
        module3.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {
          O = toObject2(O);
          if (has(O, IE_PROTO))
            return O[IE_PROTO];
          if (typeof O.constructor == "function" && O instanceof O.constructor) {
            return O.constructor.prototype;
          }
          return O instanceof Object ? ObjectPrototype : null;
        };
      },
      "e177": function(module3, exports2, __webpack_require__) {
        var fails = __webpack_require__("d039");
        module3.exports = !fails(function() {
          function F() {
          }
          F.prototype.constructor = null;
          return Object.getPrototypeOf(new F()) !== F.prototype;
        });
      },
      "e260": function(module3, exports2, __webpack_require__) {
        var toIndexedObject = __webpack_require__("fc6a");
        var addToUnscopables = __webpack_require__("44d2");
        var Iterators = __webpack_require__("3f8c");
        var InternalStateModule = __webpack_require__("69f3");
        var defineIterator = __webpack_require__("7dd0");
        var ARRAY_ITERATOR = "Array Iterator";
        var setInternalState = InternalStateModule.set;
        var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);
        module3.exports = defineIterator(Array, "Array", function(iterated, kind) {
          setInternalState(this, {
            type: ARRAY_ITERATOR,
            target: toIndexedObject(iterated),
            index: 0,
            kind
          });
        }, function() {
          var state = getInternalState(this);
          var target = state.target;
          var kind = state.kind;
          var index2 = state.index++;
          if (!target || index2 >= target.length) {
            state.target = void 0;
            return { value: void 0, done: true };
          }
          if (kind == "keys")
            return { value: index2, done: false };
          if (kind == "values")
            return { value: target[index2], done: false };
          return { value: [index2, target[index2]], done: false };
        }, "values");
        Iterators.Arguments = Iterators.Array;
        addToUnscopables("keys");
        addToUnscopables("values");
        addToUnscopables("entries");
      },
      "e439": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var fails = __webpack_require__("d039");
        var toIndexedObject = __webpack_require__("fc6a");
        var nativeGetOwnPropertyDescriptor = __webpack_require__("06cf").f;
        var DESCRIPTORS = __webpack_require__("83ab");
        var FAILS_ON_PRIMITIVES = fails(function() {
          nativeGetOwnPropertyDescriptor(1);
        });
        var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES;
        $({ target: "Object", stat: true, forced: FORCED, sham: !DESCRIPTORS }, {
          getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
            return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
          }
        });
      },
      "e538": function(module3, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        exports2.f = wellKnownSymbol;
      },
      "e893": function(module3, exports2, __webpack_require__) {
        var has = __webpack_require__("5135");
        var ownKeys2 = __webpack_require__("56ef");
        var getOwnPropertyDescriptorModule = __webpack_require__("06cf");
        var definePropertyModule = __webpack_require__("9bf2");
        module3.exports = function(target, source2) {
          var keys2 = ownKeys2(source2);
          var defineProperty = definePropertyModule.f;
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          for (var i2 = 0; i2 < keys2.length; i2++) {
            var key = keys2[i2];
            if (!has(target, key))
              defineProperty(target, key, getOwnPropertyDescriptor(source2, key));
          }
        };
      },
      "e8b5": function(module3, exports2, __webpack_require__) {
        var classof = __webpack_require__("c6b6");
        module3.exports = Array.isArray || function isArray2(arg) {
          return classof(arg) == "Array";
        };
      },
      "e95a": function(module3, exports2, __webpack_require__) {
        var wellKnownSymbol = __webpack_require__("b622");
        var Iterators = __webpack_require__("3f8c");
        var ITERATOR = wellKnownSymbol("iterator");
        var ArrayPrototype = Array.prototype;
        module3.exports = function(it) {
          return it !== void 0 && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
        };
      },
      "f5df": function(module3, exports2, __webpack_require__) {
        var TO_STRING_TAG_SUPPORT = __webpack_require__("00ee");
        var classofRaw = __webpack_require__("c6b6");
        var wellKnownSymbol = __webpack_require__("b622");
        var TO_STRING_TAG = wellKnownSymbol("toStringTag");
        var CORRECT_ARGUMENTS = classofRaw(function() {
          return arguments;
        }()) == "Arguments";
        var tryGet = function(it, key) {
          try {
            return it[key];
          } catch (error) {
          }
        };
        module3.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {
          var O, tag, result;
          return it === void 0 ? "Undefined" : it === null ? "Null" : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == "string" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == "Object" && typeof O.callee == "function" ? "Arguments" : result;
        };
      },
      "f772": function(module3, exports2, __webpack_require__) {
        var shared = __webpack_require__("5692");
        var uid = __webpack_require__("90e3");
        var keys2 = shared("keys");
        module3.exports = function(key) {
          return keys2[key] || (keys2[key] = uid(key));
        };
      },
      "fb15": function(module3, __webpack_exports__, __webpack_require__) {
        __webpack_require__.r(__webpack_exports__);
        if (typeof window !== "undefined") {
          var currentScript = window.document.currentScript;
          {
            var getCurrentScript = __webpack_require__("8875");
            currentScript = getCurrentScript();
            if (!("currentScript" in document)) {
              Object.defineProperty(document, "currentScript", { get: getCurrentScript });
            }
          }
          var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
          if (src) {
            __webpack_require__.p = src[1];
          }
        }
        __webpack_require__("99af");
        __webpack_require__("4de4");
        __webpack_require__("4160");
        __webpack_require__("c975");
        __webpack_require__("d81d");
        __webpack_require__("a434");
        __webpack_require__("159b");
        __webpack_require__("a4d3");
        __webpack_require__("e439");
        __webpack_require__("dbb4");
        __webpack_require__("b64b");
        function _defineProperty2(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }
          return obj;
        }
        function ownKeys2(object, enumerableOnly) {
          var keys2 = Object.keys(object);
          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly)
              symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
              });
            keys2.push.apply(keys2, symbols);
          }
          return keys2;
        }
        function _objectSpread22(target) {
          for (var i2 = 1; i2 < arguments.length; i2++) {
            var source2 = arguments[i2] != null ? arguments[i2] : {};
            if (i2 % 2) {
              ownKeys2(Object(source2), true).forEach(function(key) {
                _defineProperty2(target, key, source2[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2));
            } else {
              ownKeys2(Object(source2)).forEach(function(key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
              });
            }
          }
          return target;
        }
        function _arrayWithHoles(arr) {
          if (Array.isArray(arr))
            return arr;
        }
        __webpack_require__("e01a");
        __webpack_require__("d28b");
        __webpack_require__("e260");
        __webpack_require__("d3b7");
        __webpack_require__("3ca3");
        __webpack_require__("ddb0");
        function _iterableToArrayLimit(arr, i2) {
          if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr)))
            return;
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i2 && _arr.length === i2)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"] != null)
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        __webpack_require__("a630");
        __webpack_require__("fb6a");
        __webpack_require__("b0c0");
        __webpack_require__("25f0");
        function _arrayLikeToArray2(arr, len) {
          if (len == null || len > arr.length)
            len = arr.length;
          for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
            arr2[i2] = arr[i2];
          }
          return arr2;
        }
        function _unsupportedIterableToArray2(o, minLen) {
          if (!o)
            return;
          if (typeof o === "string")
            return _arrayLikeToArray2(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor)
            n = o.constructor.name;
          if (n === "Map" || n === "Set")
            return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
            return _arrayLikeToArray2(o, minLen);
        }
        function _nonIterableRest() {
          throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _slicedToArray(arr, i2) {
          return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray2(arr, i2) || _nonIterableRest();
        }
        function _arrayWithoutHoles2(arr) {
          if (Array.isArray(arr))
            return _arrayLikeToArray2(arr);
        }
        function _iterableToArray2(iter) {
          if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
            return Array.from(iter);
        }
        function _nonIterableSpread2() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }
        function _toConsumableArray2(arr) {
          return _arrayWithoutHoles2(arr) || _iterableToArray2(arr) || _unsupportedIterableToArray2(arr) || _nonIterableSpread2();
        }
        var external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_ = __webpack_require__("a352");
        var external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_default = /* @__PURE__ */ __webpack_require__.n(external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_);
        function removeNode2(node) {
          if (node.parentElement !== null) {
            node.parentElement.removeChild(node);
          }
        }
        function insertNodeAt2(fatherNode, node, position) {
          var refNode = position === 0 ? fatherNode.children[0] : fatherNode.children[position - 1].nextSibling;
          fatherNode.insertBefore(node, refNode);
        }
        var console2 = __webpack_require__("dbf1");
        __webpack_require__("13d5");
        __webpack_require__("4fad");
        __webpack_require__("ac1f");
        __webpack_require__("5319");
        function cached2(fn) {
          var cache2 = /* @__PURE__ */ Object.create(null);
          return function cachedFn(str) {
            var hit = cache2[str];
            return hit || (cache2[str] = fn(str));
          };
        }
        var regex2 = /-(\w)/g;
        var camelize2 = cached2(function(str) {
          return str.replace(regex2, function(_2, c) {
            return c.toUpperCase();
          });
        });
        __webpack_require__("5db7");
        __webpack_require__("73d9");
        var manageAndEmit2 = ["Start", "Add", "Remove", "Update", "End"];
        var emit2 = ["Choose", "Unchoose", "Sort", "Filter", "Clone"];
        var manage2 = ["Move"];
        var eventHandlerNames2 = [manage2, manageAndEmit2, emit2].flatMap(function(events3) {
          return events3;
        }).map(function(evt) {
          return "on".concat(evt);
        });
        var events2 = {
          manage: manage2,
          manageAndEmit: manageAndEmit2,
          emit: emit2
        };
        function isReadOnly2(eventName) {
          return eventHandlerNames2.indexOf(eventName) !== -1;
        }
        __webpack_require__("caad");
        __webpack_require__("2ca0");
        var tags2 = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "label", "legend", "li", "link", "main", "map", "mark", "math", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rb", "rp", "rt", "rtc", "ruby", "s", "samp", "script", "section", "select", "slot", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "svg", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"];
        function isHtmlTag2(name) {
          return tags2.includes(name);
        }
        function isTransition2(name) {
          return ["transition-group", "TransitionGroup"].includes(name);
        }
        function isHtmlAttribute2(value) {
          return ["id", "class", "role", "style"].includes(value) || value.startsWith("data-") || value.startsWith("aria-") || value.startsWith("on");
        }
        function project2(entries) {
          return entries.reduce(function(res, _ref) {
            var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
            res[key] = value;
            return res;
          }, {});
        }
        function getComponentAttributes2(_ref3) {
          var $attrs = _ref3.$attrs, _ref3$componentData = _ref3.componentData, componentData = _ref3$componentData === void 0 ? {} : _ref3$componentData;
          var attributes = project2(Object.entries($attrs).filter(function(_ref4) {
            var _ref5 = _slicedToArray(_ref4, 2), key = _ref5[0];
            _ref5[1];
            return isHtmlAttribute2(key);
          }));
          return _objectSpread22(_objectSpread22({}, attributes), componentData);
        }
        function createSortableOption2(_ref6) {
          var $attrs = _ref6.$attrs, callBackBuilder = _ref6.callBackBuilder;
          var options = project2(getValidSortableEntries2($attrs));
          Object.entries(callBackBuilder).forEach(function(_ref7) {
            var _ref8 = _slicedToArray(_ref7, 2), eventType = _ref8[0], eventBuilder = _ref8[1];
            events2[eventType].forEach(function(event) {
              options["on".concat(event)] = eventBuilder(event);
            });
          });
          var draggable = "[data-draggable]".concat(options.draggable || "");
          return _objectSpread22(_objectSpread22({}, options), {}, {
            draggable
          });
        }
        function getValidSortableEntries2(value) {
          return Object.entries(value).filter(function(_ref9) {
            var _ref10 = _slicedToArray(_ref9, 2), key = _ref10[0];
            _ref10[1];
            return !isHtmlAttribute2(key);
          }).map(function(_ref11) {
            var _ref12 = _slicedToArray(_ref11, 2), key = _ref12[0], value2 = _ref12[1];
            return [camelize2(key), value2];
          }).filter(function(_ref13) {
            var _ref14 = _slicedToArray(_ref13, 2), key = _ref14[0];
            _ref14[1];
            return !isReadOnly2(key);
          });
        }
        __webpack_require__("c740");
        function _classCallCheck2(instance2, Constructor) {
          if (!(instance2 instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _defineProperties2(target, props3) {
          for (var i2 = 0; i2 < props3.length; i2++) {
            var descriptor = props3[i2];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        function _createClass2(Constructor, protoProps, staticProps) {
          if (protoProps)
            _defineProperties2(Constructor.prototype, protoProps);
          if (staticProps)
            _defineProperties2(Constructor, staticProps);
          return Constructor;
        }
        var getHtmlElementFromNode2 = function getHtmlElementFromNode3(_ref) {
          var el = _ref.el;
          return el;
        };
        var addContext2 = function addContext3(domElement, context) {
          return domElement.__draggable_context = context;
        };
        var getContext2 = function getContext3(domElement) {
          return domElement.__draggable_context;
        };
        var componentStructure_ComponentStructure = /* @__PURE__ */ function() {
          function ComponentStructure2(_ref2) {
            var _ref2$nodes = _ref2.nodes, header = _ref2$nodes.header, defaultNodes = _ref2$nodes.default, footer = _ref2$nodes.footer, root = _ref2.root, realList = _ref2.realList;
            _classCallCheck2(this, ComponentStructure2);
            this.defaultNodes = defaultNodes;
            this.children = [].concat(_toConsumableArray2(header), _toConsumableArray2(defaultNodes), _toConsumableArray2(footer));
            this.externalComponent = root.externalComponent;
            this.rootTransition = root.transition;
            this.tag = root.tag;
            this.realList = realList;
          }
          _createClass2(ComponentStructure2, [{
            key: "render",
            value: function render3(h2, attributes) {
              var tag = this.tag, children = this.children, _isRootComponent = this._isRootComponent;
              var option2 = !_isRootComponent ? children : {
                default: function _default() {
                  return children;
                }
              };
              return h2(tag, attributes, option2);
            }
          }, {
            key: "updated",
            value: function updated() {
              var defaultNodes = this.defaultNodes, realList = this.realList;
              defaultNodes.forEach(function(node, index2) {
                addContext2(getHtmlElementFromNode2(node), {
                  element: realList[index2],
                  index: index2
                });
              });
            }
          }, {
            key: "getUnderlyingVm",
            value: function getUnderlyingVm(domElement) {
              return getContext2(domElement);
            }
          }, {
            key: "getVmIndexFromDomIndex",
            value: function getVmIndexFromDomIndex(domIndex, element) {
              var defaultNodes = this.defaultNodes;
              var length = defaultNodes.length;
              var domChildren = element.children;
              var domElement = domChildren.item(domIndex);
              if (domElement === null) {
                return length;
              }
              var context = getContext2(domElement);
              if (context) {
                return context.index;
              }
              if (length === 0) {
                return 0;
              }
              var firstDomListElement = getHtmlElementFromNode2(defaultNodes[0]);
              var indexFirstDomListElement = _toConsumableArray2(domChildren).findIndex(function(element2) {
                return element2 === firstDomListElement;
              });
              return domIndex < indexFirstDomListElement ? 0 : length;
            }
          }, {
            key: "_isRootComponent",
            get: function get2() {
              return this.externalComponent || this.rootTransition;
            }
          }]);
          return ComponentStructure2;
        }();
        var external_commonjs_vue_commonjs2_vue_root_Vue_ = __webpack_require__("8bbf");
        function getSlot2(slots, key) {
          var slotValue = slots[key];
          return slotValue ? slotValue() : [];
        }
        function computeNodes2(_ref) {
          var $slots = _ref.$slots, realList = _ref.realList, getKey = _ref.getKey;
          var normalizedList = realList || [];
          var _map = ["header", "footer"].map(function(name) {
            return getSlot2($slots, name);
          }), _map2 = _slicedToArray(_map, 2), header = _map2[0], footer = _map2[1];
          var item2 = $slots.item;
          if (!item2) {
            throw new Error("draggable element must have an item slot");
          }
          var defaultNodes = normalizedList.flatMap(function(element, index2) {
            return item2({
              element,
              index: index2
            }).map(function(node) {
              node.key = getKey(element);
              node.props = _objectSpread22(_objectSpread22({}, node.props || {}), {}, {
                "data-draggable": true
              });
              return node;
            });
          });
          if (defaultNodes.length !== normalizedList.length) {
            throw new Error("Item slot must have only one child");
          }
          return {
            header,
            footer,
            default: defaultNodes
          };
        }
        function getRootInformation2(tag) {
          var transition = isTransition2(tag);
          var externalComponent = !isHtmlTag2(tag) && !transition;
          return {
            transition,
            externalComponent,
            tag: externalComponent ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])(tag) : transition ? external_commonjs_vue_commonjs2_vue_root_Vue_["TransitionGroup"] : tag
          };
        }
        function computeComponentStructure2(_ref2) {
          var $slots = _ref2.$slots, tag = _ref2.tag, realList = _ref2.realList, getKey = _ref2.getKey;
          var nodes = computeNodes2({
            $slots,
            realList,
            getKey
          });
          var root = getRootInformation2(tag);
          return new componentStructure_ComponentStructure({
            nodes,
            root,
            realList
          });
        }
        function _emit(evtName, evtData) {
          var _this = this;
          Object(external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"])(function() {
            return _this.$emit(evtName.toLowerCase(), evtData);
          });
        }
        function _manage(evtName) {
          var _this2 = this;
          return function(evtData, originalElement) {
            if (_this2.realList !== null) {
              return _this2["onDrag".concat(evtName)](evtData, originalElement);
            }
          };
        }
        function _manageAndEmit(evtName) {
          var _this3 = this;
          var delegateCallBack = _manage.call(this, evtName);
          return function(evtData, originalElement) {
            delegateCallBack.call(_this3, evtData, originalElement);
            _emit.call(_this3, evtName, evtData);
          };
        }
        var draggingElement2 = null;
        var props2 = {
          list: {
            type: Array,
            required: false,
            default: null
          },
          modelValue: {
            type: Array,
            required: false,
            default: null
          },
          itemKey: {
            type: [String, Function],
            required: true
          },
          clone: {
            type: Function,
            default: function _default(original) {
              return original;
            }
          },
          tag: {
            type: String,
            default: "div"
          },
          move: {
            type: Function,
            default: null
          },
          componentData: {
            type: Object,
            required: false,
            default: null
          }
        };
        var emits2 = ["update:modelValue", "change"].concat(_toConsumableArray2([].concat(_toConsumableArray2(events2.manageAndEmit), _toConsumableArray2(events2.emit)).map(function(evt) {
          return evt.toLowerCase();
        })));
        var draggableComponent2 = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["defineComponent"])({
          name: "draggable",
          inheritAttrs: false,
          props: props2,
          emits: emits2,
          data: function data2() {
            return {
              error: false
            };
          },
          render: function render3() {
            try {
              this.error = false;
              var $slots = this.$slots, $attrs = this.$attrs, tag = this.tag, componentData = this.componentData, realList = this.realList, getKey = this.getKey;
              var componentStructure = computeComponentStructure2({
                $slots,
                tag,
                realList,
                getKey
              });
              this.componentStructure = componentStructure;
              var attributes = getComponentAttributes2({
                $attrs,
                componentData
              });
              return componentStructure.render(external_commonjs_vue_commonjs2_vue_root_Vue_["h"], attributes);
            } catch (err) {
              this.error = true;
              return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["h"])("pre", {
                style: {
                  color: "red"
                }
              }, err.stack);
            }
          },
          created: function created() {
            if (this.list !== null && this.modelValue !== null) {
              console2["a"].error("modelValue and list props are mutually exclusive! Please set one or another.");
            }
          },
          mounted: function mounted() {
            var _this4 = this;
            if (this.error) {
              return;
            }
            var $attrs = this.$attrs, $el = this.$el, componentStructure = this.componentStructure;
            componentStructure.updated();
            var sortableOptions = createSortableOption2({
              $attrs,
              callBackBuilder: {
                manageAndEmit: function manageAndEmit3(event) {
                  return _manageAndEmit.call(_this4, event);
                },
                emit: function emit3(event) {
                  return _emit.bind(_this4, event);
                },
                manage: function manage3(event) {
                  return _manage.call(_this4, event);
                }
              }
            });
            var targetDomElement = $el.nodeType === 1 ? $el : $el.parentElement;
            this._sortable = new external_commonjs_sortablejs_commonjs2_sortablejs_amd_sortablejs_root_Sortable_default.a(targetDomElement, sortableOptions);
            this.targetDomElement = targetDomElement;
            targetDomElement.__draggable_component__ = this;
          },
          updated: function updated() {
            this.componentStructure.updated();
          },
          beforeUnmount: function beforeUnmount() {
            if (this._sortable !== void 0)
              this._sortable.destroy();
          },
          computed: {
            realList: function realList() {
              var list = this.list;
              return list ? list : this.modelValue;
            },
            getKey: function getKey() {
              var itemKey = this.itemKey;
              if (typeof itemKey === "function") {
                return itemKey;
              }
              return function(element) {
                return element[itemKey];
              };
            }
          },
          watch: {
            $attrs: {
              handler: function handler(newOptionValue) {
                var _sortable = this._sortable;
                if (!_sortable)
                  return;
                getValidSortableEntries2(newOptionValue).forEach(function(_ref) {
                  var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
                  _sortable.option(key, value);
                });
              },
              deep: true
            }
          },
          methods: {
            getUnderlyingVm: function getUnderlyingVm(domElement) {
              return this.componentStructure.getUnderlyingVm(domElement) || null;
            },
            getUnderlyingPotencialDraggableComponent: function getUnderlyingPotencialDraggableComponent(htmElement) {
              return htmElement.__draggable_component__;
            },
            emitChanges: function emitChanges(evt) {
              var _this5 = this;
              Object(external_commonjs_vue_commonjs2_vue_root_Vue_["nextTick"])(function() {
                return _this5.$emit("change", evt);
              });
            },
            alterList: function alterList(onList) {
              if (this.list) {
                onList(this.list);
                return;
              }
              var newList = _toConsumableArray2(this.modelValue);
              onList(newList);
              this.$emit("update:modelValue", newList);
            },
            spliceList: function spliceList() {
              var _arguments = arguments;
              var spliceList2 = function spliceList3(list) {
                return list.splice.apply(list, _toConsumableArray2(_arguments));
              };
              this.alterList(spliceList2);
            },
            updatePosition: function updatePosition(oldIndex2, newIndex2) {
              var updatePosition2 = function updatePosition3(list) {
                return list.splice(newIndex2, 0, list.splice(oldIndex2, 1)[0]);
              };
              this.alterList(updatePosition2);
            },
            getRelatedContextFromMoveEvent: function getRelatedContextFromMoveEvent(_ref3) {
              var to2 = _ref3.to, related = _ref3.related;
              var component = this.getUnderlyingPotencialDraggableComponent(to2);
              if (!component) {
                return {
                  component
                };
              }
              var list = component.realList;
              var context = {
                list,
                component
              };
              if (to2 !== related && list) {
                var destination = component.getUnderlyingVm(related) || {};
                return _objectSpread22(_objectSpread22({}, destination), context);
              }
              return context;
            },
            getVmIndexFromDomIndex: function getVmIndexFromDomIndex(domIndex) {
              return this.componentStructure.getVmIndexFromDomIndex(domIndex, this.targetDomElement);
            },
            onDragStart: function onDragStart(evt) {
              this.context = this.getUnderlyingVm(evt.item);
              evt.item._underlying_vm_ = this.clone(this.context.element);
              draggingElement2 = evt.item;
            },
            onDragAdd: function onDragAdd(evt) {
              var element = evt.item._underlying_vm_;
              if (element === void 0) {
                return;
              }
              removeNode2(evt.item);
              var newIndex2 = this.getVmIndexFromDomIndex(evt.newIndex);
              this.spliceList(newIndex2, 0, element);
              var added = {
                element,
                newIndex: newIndex2
              };
              this.emitChanges({
                added
              });
            },
            onDragRemove: function onDragRemove(evt) {
              insertNodeAt2(this.$el, evt.item, evt.oldIndex);
              if (evt.pullMode === "clone") {
                removeNode2(evt.clone);
                return;
              }
              var _this$context = this.context, oldIndex2 = _this$context.index, element = _this$context.element;
              this.spliceList(oldIndex2, 1);
              var removed = {
                element,
                oldIndex: oldIndex2
              };
              this.emitChanges({
                removed
              });
            },
            onDragUpdate: function onDragUpdate(evt) {
              removeNode2(evt.item);
              insertNodeAt2(evt.from, evt.item, evt.oldIndex);
              var oldIndex2 = this.context.index;
              var newIndex2 = this.getVmIndexFromDomIndex(evt.newIndex);
              this.updatePosition(oldIndex2, newIndex2);
              var moved2 = {
                element: this.context.element,
                oldIndex: oldIndex2,
                newIndex: newIndex2
              };
              this.emitChanges({
                moved: moved2
              });
            },
            computeFutureIndex: function computeFutureIndex(relatedContext, evt) {
              if (!relatedContext.element) {
                return 0;
              }
              var domChildren = _toConsumableArray2(evt.to.children).filter(function(el) {
                return el.style["display"] !== "none";
              });
              var currentDomIndex = domChildren.indexOf(evt.related);
              var currentIndex = relatedContext.component.getVmIndexFromDomIndex(currentDomIndex);
              var draggedInList = domChildren.indexOf(draggingElement2) !== -1;
              return draggedInList || !evt.willInsertAfter ? currentIndex : currentIndex + 1;
            },
            onDragMove: function onDragMove(evt, originalEvent) {
              var move2 = this.move, realList = this.realList;
              if (!move2 || !realList) {
                return true;
              }
              var relatedContext = this.getRelatedContextFromMoveEvent(evt);
              var futureIndex = this.computeFutureIndex(relatedContext, evt);
              var draggedContext = _objectSpread22(_objectSpread22({}, this.context), {}, {
                futureIndex
              });
              var sendEvent = _objectSpread22(_objectSpread22({}, evt), {}, {
                relatedContext,
                draggedContext
              });
              return move2(sendEvent, originalEvent);
            },
            onDragEnd: function onDragEnd() {
              draggingElement2 = null;
            }
          }
        });
        var vuedraggable = draggableComponent2;
        __webpack_exports__["default"] = vuedraggable;
      },
      "fb6a": function(module3, exports2, __webpack_require__) {
        var $ = __webpack_require__("23e7");
        var isObject2 = __webpack_require__("861d");
        var isArray2 = __webpack_require__("e8b5");
        var toAbsoluteIndex = __webpack_require__("23cb");
        var toLength = __webpack_require__("50c4");
        var toIndexedObject = __webpack_require__("fc6a");
        var createProperty = __webpack_require__("8418");
        var wellKnownSymbol = __webpack_require__("b622");
        var arrayMethodHasSpeciesSupport = __webpack_require__("1dde");
        var arrayMethodUsesToLength = __webpack_require__("ae40");
        var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport("slice");
        var USES_TO_LENGTH = arrayMethodUsesToLength("slice", { ACCESSORS: true, 0: 0, 1: 2 });
        var SPECIES = wellKnownSymbol("species");
        var nativeSlice = [].slice;
        var max2 = Math.max;
        $({ target: "Array", proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {
          slice: function slice(start, end) {
            var O = toIndexedObject(this);
            var length = toLength(O.length);
            var k = toAbsoluteIndex(start, length);
            var fin = toAbsoluteIndex(end === void 0 ? length : end, length);
            var Constructor, result, n;
            if (isArray2(O)) {
              Constructor = O.constructor;
              if (typeof Constructor == "function" && (Constructor === Array || isArray2(Constructor.prototype))) {
                Constructor = void 0;
              } else if (isObject2(Constructor)) {
                Constructor = Constructor[SPECIES];
                if (Constructor === null)
                  Constructor = void 0;
              }
              if (Constructor === Array || Constructor === void 0) {
                return nativeSlice.call(O, k, fin);
              }
            }
            result = new (Constructor === void 0 ? Array : Constructor)(max2(fin - k, 0));
            for (n = 0; k < fin; k++, n++)
              if (k in O)
                createProperty(result, n, O[k]);
            result.length = n;
            return result;
          }
        });
      },
      "fc6a": function(module3, exports2, __webpack_require__) {
        var IndexedObject = __webpack_require__("44ad");
        var requireObjectCoercible = __webpack_require__("1d80");
        module3.exports = function(it) {
          return IndexedObject(requireObjectCoercible(it));
        };
      },
      "fdbc": function(module3, exports2) {
        module3.exports = {
          CSSRuleList: 0,
          CSSStyleDeclaration: 0,
          CSSValueList: 0,
          ClientRectList: 0,
          DOMRectList: 0,
          DOMStringList: 0,
          DOMTokenList: 1,
          DataTransferItemList: 0,
          FileList: 0,
          HTMLAllCollection: 0,
          HTMLCollection: 0,
          HTMLFormElement: 0,
          HTMLSelectElement: 0,
          MediaList: 0,
          MimeTypeArray: 0,
          NamedNodeMap: 0,
          NodeList: 1,
          PaintRequestList: 0,
          Plugin: 0,
          PluginArray: 0,
          SVGLengthList: 0,
          SVGNumberList: 0,
          SVGPathSegList: 0,
          SVGPointList: 0,
          SVGStringList: 0,
          SVGTransformList: 0,
          SourceBufferList: 0,
          StyleSheetList: 0,
          TextTrackCueList: 0,
          TextTrackList: 0,
          TouchList: 0
        };
      },
      "fdbf": function(module3, exports2, __webpack_require__) {
        var NATIVE_SYMBOL = __webpack_require__("4930");
        module3.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == "symbol";
      }
    })["default"];
  });
})(vuedraggable_umd);
var Draggable = /* @__PURE__ */ getDefaultExportFromCjs(vuedraggable_umd.exports);
const _sfc_main$w = {
  components: {
    Draggable,
    CodeEditor
  },
  props: {
    data: {
      type: Object,
      default: () => {
      }
    },
    widgetForm: {
      type: Object,
      default: () => {
      }
    }
  },
  data() {
    return {
      visible: false,
      method: "",
      title: "",
      currentIndex: 0,
      inputForm: {
        name: "",
        link: "",
        paramKey: "",
        paramValue: "",
        position: []
      }
    };
  },
  computed: {
    show() {
      if (this.data && Object.keys(this.data).length > 0) {
        return true;
      }
      return false;
    }
  },
  methods: {
    handleAddColumn() {
      this.method = "add";
      this.visible = true;
      this.title = "\u6DFB\u52A0\u6309\u94AE";
      this.inputForm = {
        name: "",
        link: "",
        paramKey: "",
        paramValue: "",
        position: []
      };
    },
    handleOptionsRemove(index2) {
      this.widgetForm.config.actions.splice(index2, 1);
    },
    doSubmit() {
      if (this.method === "add") {
        this.widgetForm.config.actions.push(this.inputForm);
      } else {
        this.widgetForm.config.actions.splice(this.currentIndex, 1, this.inputForm);
      }
      this.visible = false;
    },
    edit(index2) {
      this.visible = true;
      this.currentIndex = index2;
      this.method = "edit";
      this.title = "\u4FEE\u6539\u6309\u94AE";
      this.inputForm = this.widgetForm.config.actions[index2];
    }
  }
};
const _hoisted_1$n = /* @__PURE__ */ createElementVNode("i", {
  class: "drag-item",
  style: { "font-size": "16px", "margin": "0 5px", "cursor": "move" }
}, [
  /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-icon_bars" })
], -1);
const _hoisted_2$j = { style: { "display": "inline-block" } };
const _hoisted_3$i = { style: { "display": "flex", "flex-direction": "column", "margin": "0 10px 10px 10px" } };
const _hoisted_4$i = { style: { "margin-left": "22px" } };
const _hoisted_5$h = /* @__PURE__ */ createTextVNode("\u6DFB\u52A0\u94FE\u63A5");
const _hoisted_6$f = /* @__PURE__ */ createTextVNode("\u5DE5\u5177\u680F");
const _hoisted_7$d = /* @__PURE__ */ createTextVNode("\u64CD\u4F5C\u5217");
const _hoisted_8$b = { class: "dialog-footer" };
const _hoisted_9$a = /* @__PURE__ */ createTextVNode("\u5173\u95ED");
const _hoisted_10$7 = /* @__PURE__ */ createTextVNode("\u786E\u5B9A");
function _sfc_render$u(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_checkbox = resolveComponent("el-checkbox");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_el_button = resolveComponent("el-button");
  const _component_draggable = resolveComponent("draggable");
  const _component_el_form = resolveComponent("el-form");
  const _component_el_input = resolveComponent("el-input");
  const _component_el_col = resolveComponent("el-col");
  const _component_el_checkbox_group = resolveComponent("el-checkbox-group");
  const _component_el_row = resolveComponent("el-row");
  const _component_el_dialog = resolveComponent("el-dialog");
  const _directive_noMoreClick = resolveDirective("noMoreClick");
  return openBlock(), createElementBlock("div", null, [
    createVNode(_component_el_form, { "label-position": "top" }, {
      default: withCtx(() => [
        $options.show ? (openBlock(), createBlock(_component_el_form_item, {
          key: 0,
          label: `${_ctx.$t("fm.config.list.attribute")} (\u5B57\u6BB5)`
        }, {
          default: withCtx(() => [
            $props.data && $props.data.options && Object.keys($props.data.options).indexOf("isShow") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 0,
              modelValue: $props.data.options.isShow,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $props.data.options.isShow = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.list.isShow")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            $props.data && $props.data.options && Object.keys($props.data.options).indexOf("isSort") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 1,
              modelValue: $props.data.options.isSort,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $props.data.options.isSort = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.list.isSort")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true),
            $props.data && $props.data.options && Object.keys($props.data.options).indexOf("isSearch") >= 0 ? (openBlock(), createBlock(_component_el_checkbox, {
              key: 2,
              modelValue: $props.data.options.isSearch,
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $props.data.options.isSearch = $event)
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.list.isSearch")), 1)
              ]),
              _: 1
            }, 8, ["modelValue"])) : createCommentVNode("", true)
          ]),
          _: 1
        }, 8, ["label"])) : createCommentVNode("", true),
        createVNode(_component_el_form_item, { label: "\u8DF3\u8F6C\u914D\u7F6E\uFF08\u5168\u5C40\uFF09" }, {
          default: withCtx(() => [
            createVNode(_component_draggable, mergeProps({
              tag: "ul",
              list: $props.widgetForm.config.actions
            }, { group: { name: "options" }, ghostClass: "ghost", handle: ".drag-item" }, { handle: ".drag-item" }), {
              item: withCtx(({ element, index: index2 }) => [
                (openBlock(), createElementBlock("li", { key: index2 }, [
                  _hoisted_1$n,
                  createElementVNode("div", _hoisted_2$j, [
                    createElementVNode("div", _hoisted_3$i, [
                      createElementVNode("span", null, toDisplayString$1(element.name), 1)
                    ])
                  ]),
                  createVNode(_component_el_button, {
                    onClick: ($event) => $options.edit(index2),
                    circle: "",
                    plain: "",
                    type: "primary",
                    size: "small",
                    icon: "el-icon-edit",
                    style: { "margin-left": "5px" }
                  }, null, 8, ["onClick"]),
                  createVNode(_component_el_button, {
                    onClick: ($event) => $options.handleOptionsRemove(index2),
                    circle: "",
                    plain: "",
                    type: "danger",
                    size: "small",
                    icon: "el-icon-minus",
                    style: { "margin-left": "10px" }
                  }, null, 8, ["onClick"])
                ]))
              ]),
              _: 1
            }, 16, ["list"]),
            createElementVNode("div", _hoisted_4$i, [
              createVNode(_component_el_button, {
                type: "text",
                onClick: $options.handleAddColumn
              }, {
                default: withCtx(() => [
                  _hoisted_5$h
                ]),
                _: 1
              }, 8, ["onClick"])
            ])
          ]),
          _: 1
        })
      ]),
      _: 1
    }),
    createVNode(_component_el_dialog, {
      title: $data.title,
      "close-on-click-modal": false,
      "append-to-body": "",
      modelValue: $data.visible,
      "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.visible = $event),
      draggable: ""
    }, {
      footer: withCtx(() => [
        createElementVNode("span", _hoisted_8$b, [
          createVNode(_component_el_button, {
            onClick: _cache[9] || (_cache[9] = ($event) => $data.visible = false),
            icon: "el-icon-circle-close"
          }, {
            default: withCtx(() => [
              _hoisted_9$a
            ]),
            _: 1
          }),
          withDirectives((openBlock(), createBlock(_component_el_button, {
            type: "primary",
            onClick: _cache[10] || (_cache[10] = ($event) => $options.doSubmit()),
            icon: "el-icon-circle-check"
          }, {
            default: withCtx(() => [
              _hoisted_10$7
            ]),
            _: 1
          })), [
            [_directive_noMoreClick]
          ])
        ])
      ]),
      default: withCtx(() => [
        createVNode(_component_el_form, {
          model: $data.inputForm,
          ref: "inputForm",
          "label-width": "120px"
        }, {
          default: withCtx(() => [
            createVNode(_component_el_row, { gutter: 15 }, {
              default: withCtx(() => [
                createVNode(_component_el_col, { span: 24 }, {
                  default: withCtx(() => [
                    createVNode(_component_el_form_item, {
                      label: "\u6309\u94AE\u540D\u79F0",
                      prop: "name",
                      rules: []
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_el_input, {
                          modelValue: $data.inputForm.name,
                          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.inputForm.name = $event),
                          placeholder: "\u8BF7\u586B\u5199\u6309\u94AE\u540D\u79F0"
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                }),
                createVNode(_component_el_col, { span: 24 }, {
                  default: withCtx(() => [
                    createVNode(_component_el_form_item, {
                      label: "\u94FE\u63A5",
                      prop: "link",
                      rules: []
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_el_input, {
                          modelValue: $data.inputForm.link,
                          "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.inputForm.link = $event),
                          placeholder: "\u8BF7\u586B\u5199\u94FE\u63A5, \u5916\u90E8URL\u8BF7\u7528'http://'\u6216\u8005'https://\u5F00\u5934\uFF0C\u5185\u90E8\u8DEF\u7531\u7528'/'\u5F00\u5934"
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                }),
                createVNode(_component_el_col, { span: 24 }, {
                  default: withCtx(() => [
                    createVNode(_component_el_form_item, {
                      label: "\u53C2\u6570\u540D",
                      prop: "paramKey",
                      rules: []
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_el_input, {
                          modelValue: $data.inputForm.paramKey,
                          "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.inputForm.paramKey = $event),
                          placeholder: "\u8BF7\u586B\u5199\u53C2\u6570\u540D"
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                }),
                createVNode(_component_el_col, { span: 24 }, {
                  default: withCtx(() => [
                    createVNode(_component_el_form_item, {
                      label: "\u53C2\u6570\u503C",
                      prop: "paramValue",
                      rules: []
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_el_input, {
                          modelValue: $data.inputForm.paramValue,
                          "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.inputForm.paramValue = $event),
                          placeholder: "\u5E38\u91CF\u53EF\u4EE5\u76F4\u63A5\u4F20\u53C2\uFF0C\u652F\u6301\u901A\u8FC7el\u8868\u8FBE\u5F0F\uFF08\u4F8B\u5982:${row.id}) \u83B7\u53D6\u6570\u636E\u884C\u7684\u5C5E\u6027\u4F5C\u4E3A\u52A8\u6001\u53C2\u6570"
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                }),
                createVNode(_component_el_col, { span: 24 }, {
                  default: withCtx(() => [
                    createVNode(_component_el_form_item, {
                      label: "\u6309\u94AE\u663E\u793A\u4F4D\u7F6E",
                      prop: "position",
                      rules: []
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_el_checkbox_group, {
                          modelValue: $data.inputForm.position,
                          "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.inputForm.position = $event)
                        }, {
                          default: withCtx(() => [
                            createVNode(_component_el_checkbox, { label: "1" }, {
                              default: withCtx(() => [
                                _hoisted_6$f
                              ]),
                              _: 1
                            }),
                            createVNode(_component_el_checkbox, { label: "2" }, {
                              default: withCtx(() => [
                                _hoisted_7$d
                              ]),
                              _: 1
                            })
                          ]),
                          _: 1
                        }, 8, ["modelValue"])
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                }),
                createVNode(_component_el_col, { span: 24 }, {
                  default: withCtx(() => [
                    createVNode(_component_el_form_item, {
                      label: "\u6743\u9650\u6807\u5FD7",
                      prop: "auth",
                      rules: []
                    }, {
                      default: withCtx(() => [
                        createVNode(_component_el_input, {
                          modelValue: $data.inputForm.auth,
                          "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.inputForm.auth = $event),
                          placeholder: "\u5982\u679C\u8981\u63A7\u5236\u662F\u5426\u663E\u793A\u6309\u94AE\uFF0C\u8BF7\u586B\u5199\u6743\u9650\u6807\u5FD7\uFF0C\u5E76\u5728\u83DC\u5355\u4E2D\u914D\u7F6E\u6743\u9650\u89C4\u5219\uFF0C\u7136\u540E\u5728\u89D2\u8272\u4E2D\u8FDB\u884C\u6388\u6743\u3002"
                        }, null, 8, ["modelValue"])
                      ]),
                      _: 1
                    })
                  ]),
                  _: 1
                })
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["model"])
      ]),
      _: 1
    }, 8, ["title", "modelValue"])
  ]);
}
var ListConfig = /* @__PURE__ */ _export_sfc(_sfc_main$w, [["render", _sfc_render$u]]);
var arrayDynamic_vue_vue_type_style_index_0_lang = "";
const _sfc_main$v = {
  props: {
    modelValue: {
      type: Array,
      default: () => []
    }
  },
  emits: ["update:modelValue"],
  data() {
    return {
      array: this.modelValue
    };
  },
  methods: {
    handleAdd() {
      this.array.push({ key: "", value: "" });
    },
    handleRemove(index2) {
      this.array.splice(index2, 1);
    }
  },
  watch: {
    modelValue(val) {
      this.array = val;
    },
    array: {
      deep: true,
      handler(val) {
        this.$emit("update:modelValue", val);
      }
    }
  }
};
const _hoisted_1$m = { class: "array-dynamic-container" };
const _hoisted_2$i = ["onClick"];
const _hoisted_3$h = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-delete" }, null, -1);
const _hoisted_4$h = [
  _hoisted_3$h
];
const _hoisted_5$g = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-plus",
  style: { "font-size": "12px", "margin": "5px" }
}, null, -1);
function _sfc_render$t(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_input = resolveComponent("el-input");
  const _component_el_button = resolveComponent("el-button");
  return openBlock(), createElementBlock("div", _hoisted_1$m, [
    (openBlock(true), createElementBlock(Fragment, null, renderList($data.array, (item2, index2) => {
      return openBlock(), createElementBlock("div", {
        key: index2,
        class: "array-dynamic-item"
      }, [
        createVNode(_component_el_input, {
          modelValue: item2.key,
          "onUpdate:modelValue": ($event) => item2.key = $event,
          size: "small",
          type: "textarea",
          rows: 1,
          autosize: "",
          placeholder: "KEY"
        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
        createVNode(_component_el_input, {
          modelValue: item2.value,
          "onUpdate:modelValue": ($event) => item2.value = $event,
          size: "small",
          type: "textarea",
          rows: 1,
          autosize: "",
          placeholder: "VALUE"
        }, null, 8, ["modelValue", "onUpdate:modelValue"]),
        createElementVNode("i", {
          onClick: ($event) => $options.handleRemove(index2),
          style: { "font-size": "16px", "margin": "0 10px", "cursor": "pointer", "color": "#F56C6C" }
        }, _hoisted_4$h, 8, _hoisted_2$i)
      ]);
    }), 128)),
    createVNode(_component_el_button, {
      type: "text",
      onClick: $options.handleAdd
    }, {
      default: withCtx(() => [
        _hoisted_5$g,
        createTextVNode(toDisplayString$1(_ctx.$t("fm.datasource.edit.add")), 1)
      ]),
      _: 1
    }, 8, ["onClick"])
  ]);
}
var ArrayDynamic = /* @__PURE__ */ _export_sfc(_sfc_main$v, [["render", _sfc_render$t]]);
var axios$2 = { exports: {} };
var bind$2 = function bind2(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i2 = 0; i2 < args.length; i2++) {
      args[i2] = arguments[i2];
    }
    return fn.apply(thisArg, args);
  };
};
var bind$1 = bind$2;
var toString$1 = Object.prototype.toString;
function isArray$1(val) {
  return Array.isArray(val);
}
function isUndefined$2(val) {
  return typeof val === "undefined";
}
function isBuffer(val) {
  return val !== null && !isUndefined$2(val) && val.constructor !== null && !isUndefined$2(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
function isArrayBuffer(val) {
  return toString$1.call(val) === "[object ArrayBuffer]";
}
function isFormData(val) {
  return toString$1.call(val) === "[object FormData]";
}
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
function isString$2(val) {
  return typeof val === "string";
}
function isNumber$2(val) {
  return typeof val === "number";
}
function isObject$2(val) {
  return val !== null && typeof val === "object";
}
function isPlainObject$1(val) {
  if (toString$1.call(val) !== "[object Object]") {
    return false;
  }
  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
function isDate$1(val) {
  return toString$1.call(val) === "[object Date]";
}
function isFile(val) {
  return toString$1.call(val) === "[object File]";
}
function isBlob(val) {
  return toString$1.call(val) === "[object Blob]";
}
function isFunction$2(val) {
  return toString$1.call(val) === "[object Function]";
}
function isStream(val) {
  return isObject$2(val) && isFunction$2(val.pipe);
}
function isURLSearchParams(val) {
  return toString$1.call(val) === "[object URLSearchParams]";
}
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
function isStandardBrowserEnv() {
  if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function forEach$1(obj, fn) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray$1(obj)) {
    for (var i2 = 0, l = obj.length; i2 < l; i2++) {
      fn.call(null, obj[i2], i2, obj);
    }
  } else {
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}
function merge() {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject$1(result[key]) && isPlainObject$1(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject$1(val)) {
      result[key] = merge({}, val);
    } else if (isArray$1(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }
  for (var i2 = 0, l = arguments.length; i2 < l; i2++) {
    forEach$1(arguments[i2], assignValue);
  }
  return result;
}
function extend$1(a, b, thisArg) {
  forEach$1(b, function assignValue(val, key) {
    if (thisArg && typeof val === "function") {
      a[key] = bind$1(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}
function stripBOM(content) {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
}
var utils$e = {
  isArray: isArray$1,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString: isString$2,
  isNumber: isNumber$2,
  isObject: isObject$2,
  isPlainObject: isPlainObject$1,
  isUndefined: isUndefined$2,
  isDate: isDate$1,
  isFile,
  isBlob,
  isFunction: isFunction$2,
  isStream,
  isURLSearchParams,
  isStandardBrowserEnv,
  forEach: forEach$1,
  merge,
  extend: extend$1,
  trim,
  stripBOM
};
var utils$d = utils$e;
function encode$1(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL$2 = function buildURL2(url, params, paramsSerializer) {
  if (!params) {
    return url;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$d.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils$d.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === "undefined") {
        return;
      }
      if (utils$d.isArray(val)) {
        key = key + "[]";
      } else {
        val = [val];
      }
      utils$d.forEach(val, function parseValue2(v) {
        if (utils$d.isDate(v)) {
          v = v.toISOString();
        } else if (utils$d.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode$1(key) + "=" + encode$1(v));
      });
    });
    serializedParams = parts.join("&");
  }
  if (serializedParams) {
    var hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
};
var utils$c = utils$e;
function InterceptorManager$1() {
  this.handlers = [];
}
InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled,
    rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};
InterceptorManager$1.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};
InterceptorManager$1.prototype.forEach = function forEach2(fn) {
  utils$c.forEach(this.handlers, function forEachHandler(h2) {
    if (h2 !== null) {
      fn(h2);
    }
  });
};
var InterceptorManager_1 = InterceptorManager$1;
var utils$b = utils$e;
var normalizeHeaderName$1 = function normalizeHeaderName2(headers, normalizedName) {
  utils$b.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};
var enhanceError$2 = function enhanceError2(error, config, code, request3, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request3;
  error.response = response;
  error.isAxiosError = true;
  error.toJSON = function toJSON2() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};
var transitional = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};
var enhanceError$1 = enhanceError$2;
var createError$2 = function createError2(message, config, code, request3, response) {
  var error = new Error(message);
  return enhanceError$1(error, config, code, request3, response);
};
var createError$1 = createError$2;
var settle$1 = function settle2(resolve, reject, response) {
  var validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(createError$1("Request failed with status code " + response.status, response.config, null, response.request, response));
  }
};
var utils$a = utils$e;
var cookies$1 = utils$a.isStandardBrowserEnv() ? function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + "=" + encodeURIComponent(value));
      if (utils$a.isNumber(expires)) {
        cookie.push("expires=" + new Date(expires).toGMTString());
      }
      if (utils$a.isString(path)) {
        cookie.push("path=" + path);
      }
      if (utils$a.isString(domain)) {
        cookie.push("domain=" + domain);
      }
      if (secure === true) {
        cookie.push("secure");
      }
      document.cookie = cookie.join("; ");
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, "", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove() {
    }
  };
}();
var isAbsoluteURL$1 = function isAbsoluteURL2(url) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};
var combineURLs$1 = function combineURLs2(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};
var isAbsoluteURL = isAbsoluteURL$1;
var combineURLs = combineURLs$1;
var buildFullPath$1 = function buildFullPath2(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};
var utils$9 = utils$e;
var ignoreDuplicateOf = [
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
];
var parseHeaders$1 = function parseHeaders2(headers) {
  var parsed = {};
  var key;
  var val;
  var i2;
  if (!headers) {
    return parsed;
  }
  utils$9.forEach(headers.split("\n"), function parser(line) {
    i2 = line.indexOf(":");
    key = utils$9.trim(line.substr(0, i2)).toLowerCase();
    val = utils$9.trim(line.substr(i2 + 1));
    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === "set-cookie") {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
      }
    }
  });
  return parsed;
};
var utils$8 = utils$e;
var isURLSameOrigin$1 = utils$8.isStandardBrowserEnv() ? function standardBrowserEnv2() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement("a");
  var originURL;
  function resolveURL(url) {
    var href = url;
    if (msie) {
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute("href", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin2(requestURL) {
    var parsed = utils$8.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin2() {
    return true;
  };
}();
function Cancel$3(message) {
  this.message = message;
}
Cancel$3.prototype.toString = function toString2() {
  return "Cancel" + (this.message ? ": " + this.message : "");
};
Cancel$3.prototype.__CANCEL__ = true;
var Cancel_1 = Cancel$3;
var utils$7 = utils$e;
var settle = settle$1;
var cookies = cookies$1;
var buildURL$1 = buildURL$2;
var buildFullPath = buildFullPath$1;
var parseHeaders = parseHeaders$1;
var isURLSameOrigin = isURLSameOrigin$1;
var createError = createError$2;
var transitionalDefaults$1 = transitional;
var Cancel$2 = Cancel_1;
var xhr = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", onCanceled);
      }
    }
    if (utils$7.isFormData(requestData)) {
      delete requestHeaders["Content-Type"];
    }
    var request3 = new XMLHttpRequest();
    if (config.auth) {
      var username = config.auth.username || "";
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
    }
    var fullPath = buildFullPath(config.baseURL, config.url);
    request3.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true);
    request3.timeout = config.timeout;
    function onloadend() {
      if (!request3) {
        return;
      }
      var responseHeaders = "getAllResponseHeaders" in request3 ? parseHeaders(request3.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === "text" || responseType === "json" ? request3.responseText : request3.response;
      var response = {
        data: responseData,
        status: request3.status,
        statusText: request3.statusText,
        headers: responseHeaders,
        config,
        request: request3
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request3 = null;
    }
    if ("onloadend" in request3) {
      request3.onloadend = onloadend;
    } else {
      request3.onreadystatechange = function handleLoad() {
        if (!request3 || request3.readyState !== 4) {
          return;
        }
        if (request3.status === 0 && !(request3.responseURL && request3.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request3.onabort = function handleAbort() {
      if (!request3) {
        return;
      }
      reject(createError("Request aborted", config, "ECONNABORTED", request3));
      request3 = null;
    };
    request3.onerror = function handleError() {
      reject(createError("Network Error", config, null, request3));
      request3 = null;
    };
    request3.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
      var transitional3 = config.transitional || transitionalDefaults$1;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, transitional3.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request3));
      request3 = null;
    };
    if (utils$7.isStandardBrowserEnv()) {
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }
    if ("setRequestHeader" in request3) {
      utils$7.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
          delete requestHeaders[key];
        } else {
          request3.setRequestHeader(key, val);
        }
      });
    }
    if (!utils$7.isUndefined(config.withCredentials)) {
      request3.withCredentials = !!config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request3.responseType = config.responseType;
    }
    if (typeof config.onDownloadProgress === "function") {
      request3.addEventListener("progress", config.onDownloadProgress);
    }
    if (typeof config.onUploadProgress === "function" && request3.upload) {
      request3.upload.addEventListener("progress", config.onUploadProgress);
    }
    if (config.cancelToken || config.signal) {
      onCanceled = function(cancel) {
        if (!request3) {
          return;
        }
        reject(!cancel || cancel && cancel.type ? new Cancel$2("canceled") : cancel);
        request3.abort();
        request3 = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
      }
    }
    if (!requestData) {
      requestData = null;
    }
    request3.send(requestData);
  });
};
var utils$6 = utils$e;
var normalizeHeaderName = normalizeHeaderName$1;
var enhanceError = enhanceError$2;
var transitionalDefaults = transitional;
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
  if (!utils$6.isUndefined(headers) && utils$6.isUndefined(headers["Content-Type"])) {
    headers["Content-Type"] = value;
  }
}
function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== "undefined") {
    adapter = xhr;
  } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
    adapter = xhr;
  }
  return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
  if (utils$6.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils$6.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults$4 = {
  transitional: transitionalDefaults,
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data2, headers) {
    normalizeHeaderName(headers, "Accept");
    normalizeHeaderName(headers, "Content-Type");
    if (utils$6.isFormData(data2) || utils$6.isArrayBuffer(data2) || utils$6.isBuffer(data2) || utils$6.isStream(data2) || utils$6.isFile(data2) || utils$6.isBlob(data2)) {
      return data2;
    }
    if (utils$6.isArrayBufferView(data2)) {
      return data2.buffer;
    }
    if (utils$6.isURLSearchParams(data2)) {
      setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
      return data2.toString();
    }
    if (utils$6.isObject(data2) || headers && headers["Content-Type"] === "application/json") {
      setContentTypeIfUnset(headers, "application/json");
      return stringifySafely(data2);
    }
    return data2;
  }],
  transformResponse: [function transformResponse(data2) {
    var transitional3 = this.transitional || defaults$4.transitional;
    var silentJSONParsing = transitional3 && transitional3.silentJSONParsing;
    var forcedJSONParsing = transitional3 && transitional3.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
    if (strictJSONParsing || forcedJSONParsing && utils$6.isString(data2) && data2.length) {
      try {
        return JSON.parse(data2);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw enhanceError(e, this, "E_JSON_PARSE");
          }
          throw e;
        }
      }
    }
    return data2;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      "Accept": "application/json, text/plain, */*"
    }
  }
};
utils$6.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults$4.headers[method] = {};
});
utils$6.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults$4.headers[method] = utils$6.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_1 = defaults$4;
var utils$5 = utils$e;
var defaults$3 = defaults_1;
var transformData$1 = function transformData2(data2, headers, fns) {
  var context = this || defaults$3;
  utils$5.forEach(fns, function transform2(fn) {
    data2 = fn.call(context, data2, headers);
  });
  return data2;
};
var isCancel$1 = function isCancel2(value) {
  return !!(value && value.__CANCEL__);
};
var utils$4 = utils$e;
var transformData = transformData$1;
var isCancel = isCancel$1;
var defaults$2 = defaults_1;
var Cancel$1 = Cancel_1;
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new Cancel$1("canceled");
  }
}
var dispatchRequest$1 = function dispatchRequest2(config) {
  throwIfCancellationRequested(config);
  config.headers = config.headers || {};
  config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
  config.headers = utils$4.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils$4.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults$2.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
      }
    }
    return Promise.reject(reason);
  });
};
var utils$3 = utils$e;
var mergeConfig$2 = function mergeConfig2(config1, config2) {
  config2 = config2 || {};
  var config = {};
  function getMergedValue(target, source2) {
    if (utils$3.isPlainObject(target) && utils$3.isPlainObject(source2)) {
      return utils$3.merge(target, source2);
    } else if (utils$3.isPlainObject(source2)) {
      return utils$3.merge({}, source2);
    } else if (utils$3.isArray(source2)) {
      return source2.slice();
    }
    return source2;
  }
  function mergeDeepProperties(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils$3.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function valueFromConfig2(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    }
  }
  function defaultToConfig2(prop) {
    if (!utils$3.isUndefined(config2[prop])) {
      return getMergedValue(void 0, config2[prop]);
    } else if (!utils$3.isUndefined(config1[prop])) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(void 0, config1[prop]);
    }
  }
  var mergeMap = {
    "url": valueFromConfig2,
    "method": valueFromConfig2,
    "data": valueFromConfig2,
    "baseURL": defaultToConfig2,
    "transformRequest": defaultToConfig2,
    "transformResponse": defaultToConfig2,
    "paramsSerializer": defaultToConfig2,
    "timeout": defaultToConfig2,
    "timeoutMessage": defaultToConfig2,
    "withCredentials": defaultToConfig2,
    "adapter": defaultToConfig2,
    "responseType": defaultToConfig2,
    "xsrfCookieName": defaultToConfig2,
    "xsrfHeaderName": defaultToConfig2,
    "onUploadProgress": defaultToConfig2,
    "onDownloadProgress": defaultToConfig2,
    "decompress": defaultToConfig2,
    "maxContentLength": defaultToConfig2,
    "maxBodyLength": defaultToConfig2,
    "transport": defaultToConfig2,
    "httpAgent": defaultToConfig2,
    "httpsAgent": defaultToConfig2,
    "cancelToken": defaultToConfig2,
    "socketPath": defaultToConfig2,
    "responseEncoding": defaultToConfig2,
    "validateStatus": mergeDirectKeys
  };
  utils$3.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge2 = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge2(prop);
    utils$3.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
};
var data$1 = {
  "version": "0.26.1"
};
var VERSION = data$1.version;
var validators$1 = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i2) {
  validators$1[type] = function validator2(thing) {
    return typeof thing === type || "a" + (i2 < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators$1.transitional = function transitional2(validator2, version2, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return function(value, opt, opts) {
    if (validator2 === false) {
      throw new Error(formatMessage(opt, " has been removed" + (version2 ? " in " + version2 : "")));
    }
    if (version2 && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(formatMessage(opt, " has been deprecated since v" + version2 + " and will be removed in the near future"));
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new TypeError("options must be an object");
  }
  var keys2 = Object.keys(options);
  var i2 = keys2.length;
  while (i2-- > 0) {
    var opt = keys2[i2];
    var validator2 = schema[opt];
    if (validator2) {
      var value = options[opt];
      var result = value === void 0 || validator2(value, opt, options);
      if (result !== true) {
        throw new TypeError("option " + opt + " must be " + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error("Unknown option " + opt);
    }
  }
}
var validator$1 = {
  assertOptions,
  validators: validators$1
};
var utils$2 = utils$e;
var buildURL = buildURL$2;
var InterceptorManager = InterceptorManager_1;
var dispatchRequest = dispatchRequest$1;
var mergeConfig$1 = mergeConfig$2;
var validator = validator$1;
var validators = validator.validators;
function Axios$1(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
Axios$1.prototype.request = function request2(configOrUrl, config) {
  if (typeof configOrUrl === "string") {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }
  config = mergeConfig$1(this.defaults, config);
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = "get";
  }
  var transitional3 = config.transitional;
  if (transitional3 !== void 0) {
    validator.assertOptions(transitional3, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
      return;
    }
    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });
  var promise;
  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, void 0];
    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);
    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }
    return promise;
  }
  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }
  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }
  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }
  return promise;
};
Axios$1.prototype.getUri = function getUri(config) {
  config = mergeConfig$1(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
utils$2.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios$1.prototype[method] = function(url, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils$2.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  Axios$1.prototype[method] = function(url, data2, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data: data2
    }));
  };
});
var Axios_1 = Axios$1;
var Cancel = Cancel_1;
function CancelToken(executor) {
  if (typeof executor !== "function") {
    throw new TypeError("executor must be a function.");
  }
  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });
  var token2 = this;
  this.promise.then(function(cancel) {
    if (!token2._listeners)
      return;
    var i2;
    var l = token2._listeners.length;
    for (i2 = 0; i2 < l; i2++) {
      token2._listeners[i2](cancel);
    }
    token2._listeners = null;
  });
  this.promise.then = function(onfulfilled) {
    var _resolve;
    var promise = new Promise(function(resolve) {
      token2.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);
    promise.cancel = function reject() {
      token2.unsubscribe(_resolve);
    };
    return promise;
  };
  executor(function cancel(message) {
    if (token2.reason) {
      return;
    }
    token2.reason = new Cancel(message);
    resolvePromise(token2.reason);
  });
}
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }
  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};
CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index2 = this._listeners.indexOf(listener);
  if (index2 !== -1) {
    this._listeners.splice(index2, 1);
  }
};
CancelToken.source = function source() {
  var cancel;
  var token2 = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token2,
    cancel
  };
};
var CancelToken_1 = CancelToken;
var spread = function spread2(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};
var utils$1 = utils$e;
var isAxiosError = function isAxiosError2(payload) {
  return utils$1.isObject(payload) && payload.isAxiosError === true;
};
var utils = utils$e;
var bind = bind$2;
var Axios = Axios_1;
var mergeConfig = mergeConfig$2;
var defaults$1 = defaults_1;
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance2 = bind(Axios.prototype.request, context);
  utils.extend(instance2, Axios.prototype, context);
  utils.extend(instance2, context);
  instance2.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance2;
}
var axios$1 = createInstance(defaults$1);
axios$1.Axios = Axios;
axios$1.Cancel = Cancel_1;
axios$1.CancelToken = CancelToken_1;
axios$1.isCancel = isCancel$1;
axios$1.VERSION = data$1.version;
axios$1.all = function all(promises) {
  return Promise.all(promises);
};
axios$1.spread = spread;
axios$1.isAxiosError = isAxiosError;
axios$2.exports = axios$1;
axios$2.exports.default = axios$1;
var axios = axios$2.exports;
var index_vue_vue_type_style_index_0_lang$4 = "";
const _sfc_main$u = {
  components: {
    ArrayDynamic,
    CodeEditor
  },
  props: {
    modelValue: {
      type: Array,
      default: () => []
    }
  },
  emits: ["update:modelValue"],
  data() {
    return {
      formData: {
        key: "",
        name: "",
        url: "",
        method: "GET",
        auto: true,
        params: [],
        headers: [],
        responseFunc: `return res;`,
        requestFunc: `return config;`,
        errorFunc: ``
      },
      formRules: {
        name: [
          { required: true, message: " " },
          { validator: (rule, value, callback) => {
            let currentItem = this.historyList.find((item2) => item2.name == value);
            if (currentItem && currentItem.key != this.selectKey) {
              callback(new Error(this.$t("fm.datasource.message.repeat")));
            } else {
              callback();
            }
          } }
        ],
        url: [
          { required: true, message: " " }
        ]
      },
      list: [...this.modelValue],
      selectIndex: -1,
      selectKey: "",
      historyList: [...this.modelValue],
      saved: true,
      requestError: false
    };
  },
  methods: {
    _getAttributeFunction(funcStrs) {
      let matchReg1 = new RegExp("(?<=args.)\\w*(?=[\\s|,|;])", "g");
      let matchReg2 = new RegExp(`(?<=args\\[['"])\\w*(?=['"]\\])`, "g");
      let matchReg3 = new RegExp("(?<=\\{)[\\s+\\w*\\s+,{0|1}]+(?=\\}\\s+=\\s+args)", "g");
      let args = /* @__PURE__ */ new Set();
      funcStrs.forEach((funcStr) => {
        var _a2, _b, _c;
        (_a2 = funcStr == null ? void 0 : funcStr.match(matchReg1)) == null ? void 0 : _a2.forEach((item2) => item2 && args.add(item2.trim()));
        (_b = funcStr == null ? void 0 : funcStr.match(matchReg2)) == null ? void 0 : _b.forEach((item2) => item2 && args.add(item2.trim()));
        (_c = funcStr == null ? void 0 : funcStr.match(matchReg3)) == null ? void 0 : _c.forEach((item2) => item2.split(",").forEach((sitem) => sitem && args.add(sitem.trim())));
      });
      return args;
    },
    _getArgsObject(argSet) {
      const args = {};
      for (let arg of argSet) {
        args[arg] = "";
      }
      return args;
    },
    handleTest() {
      this.$refs.dataForm.validate((valid) => {
        if (valid) {
          const argSet = this._getAttributeFunction([this.formData.requestFunc, this.formData.responseFunc]);
          if (argSet.size > 0) {
            let argsModel = this._getArgsObject(argSet);
            ElMessageBox({
              title: "Data source arguments",
              customStyle: "z-index: 3000",
              customClass: "aaa-aaa",
              class: "aaa",
              draggable: true,
              key: new Date().getTime(),
              message: h("div", null, [
                h(CodeEditor, {
                  modelValue: argsModel,
                  mode: typeof data == "object" ? "javascript" : "xml",
                  height: "200px",
                  key: new Date().getTime(),
                  "onUpdate:modelValue": (value) => {
                    argsModel = value;
                  }
                })
              ]),
              callback: (action) => {
                if (action == "confirm") {
                  let args = {};
                  if (typeof argsModel == "string") {
                    args = Function('"use strict";return (' + argsModel + ")")();
                  } else {
                    args = argsModel;
                  }
                  this.requestTest(args);
                }
              }
            });
          } else {
            this.requestTest();
          }
        } else {
          this.$message.warning(this.$t("fm.datasource.message.settingError"));
        }
      });
    },
    requestTest(args = {}) {
      let options = {
        method: this.formData.method,
        url: this.formData.url,
        headers: (() => {
          let headObj = {};
          this.formData.headers.forEach((item2) => {
            if (item2.key) {
              headObj[item2.key] = item2.value;
            }
          });
          return headObj;
        })()
      };
      options.params = (() => {
        let paramsObj = {};
        this.formData.params.forEach((item2) => {
          if (item2.key) {
            paramsObj[item2.key] = item2.value;
          }
        });
        return paramsObj;
      })();
      this.requestError = false;
      if (this.formData.requestFunc) {
        const requestDynamicFunc = new Function("config", "args", this.formData.requestFunc);
        try {
          options = requestDynamicFunc(options, args);
        } catch (error) {
          this.requestError = true;
        }
      }
      axios(options).then((res) => {
        try {
          let data2 = new Function("res", "args", this.formData.responseFunc)(res.data, args);
          ElMessageBox({
            title: "Response",
            customStyle: "z-index: 3000",
            customClass: "aaa-aaa",
            class: "aaa",
            draggable: true,
            key: new Date().getTime(),
            message: h("div", null, [
              h("div", { style: this.requestError ? "margin: 10px 0; " : "display: none;" }, [
                "The request test does not support ",
                h("b", { style: "color: red;" }, "this"),
                ", has been ignored."
              ]),
              h(CodeEditor, {
                modelValue: data2,
                mode: typeof data2 == "object" ? "javascript" : "xml",
                height: "300px",
                key: new Date().getTime()
              })
            ])
          });
        } catch (error) {
          ElMessageBox({
            title: "Response",
            customStyle: "z-index: 3000",
            customClass: "aaa-aaa",
            class: "aaa",
            draggable: true,
            key: new Date().getTime(),
            message: h("div", null, [
              h("div", { style: this.requestError ? "margin: 10px 0; " : "display: none;" }, [
                "The request test does not support ",
                h("b", { style: "color: red;" }, "this"),
                ", has been ignored."
              ]),
              h(CodeEditor, {
                modelValue: res.data,
                mode: typeof res.data == "object" ? "javascript" : "xml",
                height: "300px",
                key: new Date().getTime()
              })
            ])
          });
        }
      }).catch((err) => {
        this.$alert(err.message);
      });
    },
    handleSave() {
      this.$refs.dataForm.validate((valid) => {
        if (valid) {
          const argSet = this._getAttributeFunction([this.formData.requestFunc, this.formData.responseFunc]);
          let options = __spreadProps(__spreadValues({}, this.formData), {
            params: (() => {
              let paramsObj = {};
              this.formData.params.forEach((item2) => {
                if (item2.key) {
                  paramsObj[item2.key] = item2.value;
                }
              });
              return paramsObj;
            })(),
            headers: (() => {
              let headersObj = {};
              this.formData.headers.forEach((item2) => {
                if (item2.key) {
                  headersObj[item2.key] = item2.value;
                }
              });
              return headersObj;
            })(),
            args: [...argSet]
          });
          this.list[this.list.findIndex((item2) => item2.key === this.selectKey)] = options;
          this.historyList = [...this.list];
          this.saved = true;
          this.$emit("update:modelValue", this.historyList);
          this.$message.success(this.$t("fm.datasource.message.saveSuccess"));
        } else {
          this.$message.warning(this.$t("fm.datasource.message.settingError"));
        }
      });
    },
    handleAdd() {
      if (!this.saved) {
        this.$message.warning(this.$t("fm.datasource.message.saveError"));
        return;
      }
      let key = Math.random().toString(36).slice(-8);
      this.list.push({
        key,
        name: "DataSource_" + key,
        url: "",
        method: "GET",
        auto: false,
        params: {},
        headers: {},
        responseFunc: "return res;",
        requestFunc: `return config;`
      });
      this.selectKey = key;
      this.saved = false;
    },
    loadForm() {
      let currentData = this.list[this.selectIndex];
      this.formData = __spreadProps(__spreadValues({}, currentData), {
        params: currentData.params && Object.keys(currentData.params).map((item2) => ({ key: item2, value: currentData.params[item2] })) || [],
        headers: currentData.headers && Object.keys(currentData.headers).map((item2) => ({ key: item2, value: currentData.headers[item2] })) || [],
        requestFunc: currentData.requestFunc || `return config;`
      });
    },
    handleSelect(key) {
      if (key === this.selectKey) {
        return;
      }
      if (!this.saved) {
        this.$message.warning(this.$t("fm.datasource.message.saveError"));
        return;
      }
      this.selectKey = key;
    },
    handleCancal() {
      this.selectKey = "";
      this.list = [...this.historyList];
      this.saved = true;
    },
    handleClone(index2) {
      if (!this.saved) {
        this.$message.warning(this.$t("fm.datasource.message.saveError"));
        return;
      }
      let currentData = this.list[index2];
      let key = Math.random().toString(36).slice(-8);
      let cloneData = __spreadProps(__spreadValues({}, currentData), {
        key,
        name: currentData.name + "_copy"
      });
      this.list.push(cloneData);
      this.selectKey = key;
      this.saved = false;
    },
    handleRemove(index2) {
      let currentData = this.list[index2];
      this.$confirm(`${this.$t("fm.datasource.message.confirmRemove")} [${currentData.name}] ?`, "", {
        type: "warning"
      }).then(() => {
        if (currentData.key === this.selectKey) {
          this.selectKey = "";
          this.saved = true;
        }
        this.list.splice(index2, 1);
        if (index2 < this.historyList.length) {
          this.historyList.splice(index2, 1);
        }
        this.$emit("update:modelValue", this.historyList);
      }).catch(() => {
        console.log("catch");
      });
    }
  },
  watch: {
    selectKey(val) {
      if (val) {
        this.selectIndex = this.list.findIndex((item2) => item2.key === val);
        this.loadForm();
      } else {
        this.selectIndex = -1;
      }
    },
    modelValue(val) {
      this.historyList = [...val];
      this.list = [...val];
    }
  }
};
const _hoisted_1$l = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-plus",
  style: { "font-size": "12px", "margin": "5px" }
}, null, -1);
const _hoisted_2$h = { class: "data-source-menu-label" };
const _hoisted_3$g = { class: "data-source-menu-action" };
const _hoisted_4$g = ["onClick", "title"];
const _hoisted_5$f = ["onClick", "title"];
const _hoisted_6$e = { class: "data-source-action" };
const _hoisted_7$c = {
  key: 0,
  class: "code-desc"
};
const _hoisted_8$a = {
  key: 1,
  class: "code-desc"
};
const _hoisted_9$9 = {
  key: 2,
  class: "code-desc"
};
const _hoisted_10$6 = /* @__PURE__ */ createElementVNode("div", { class: "code-line" }, "(config, args) => {", -1);
const _hoisted_11$5 = /* @__PURE__ */ createElementVNode("div", { class: "code-line" }, "}", -1);
const _hoisted_12$5 = {
  key: 0,
  class: "code-desc"
};
const _hoisted_13$3 = /* @__PURE__ */ createElementVNode("div", { class: "code-line" }, "(res, args) => {", -1);
const _hoisted_14$2 = /* @__PURE__ */ createElementVNode("div", { class: "code-line" }, "}", -1);
const _hoisted_15$2 = /* @__PURE__ */ createElementVNode("div", { class: "code-line" }, "(error) => {", -1);
const _hoisted_16$1 = /* @__PURE__ */ createElementVNode("div", { class: "code-line" }, "}", -1);
function _sfc_render$s(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_button = resolveComponent("el-button");
  const _component_el_header = resolveComponent("el-header");
  const _component_el_menu_item = resolveComponent("el-menu-item");
  const _component_el_menu = resolveComponent("el-menu");
  const _component_el_main = resolveComponent("el-main");
  const _component_el_container = resolveComponent("el-container");
  const _component_el_aside = resolveComponent("el-aside");
  const _component_el_input = resolveComponent("el-input");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_el_radio_button = resolveComponent("el-radio-button");
  const _component_el_radio_group = resolveComponent("el-radio-group");
  const _component_array_dynamic = resolveComponent("array-dynamic");
  const _component_el_switch = resolveComponent("el-switch");
  const _component_code_editor = resolveComponent("code-editor");
  const _component_el_collapse_item = resolveComponent("el-collapse-item");
  const _component_el_collapse = resolveComponent("el-collapse");
  const _component_el_form = resolveComponent("el-form");
  return openBlock(), createBlock(_component_el_container, { class: "data-source-container" }, {
    default: withCtx(() => [
      createVNode(_component_el_aside, {
        width: "300px",
        class: "data-source-aside"
      }, {
        default: withCtx(() => [
          createVNode(_component_el_container, null, {
            default: withCtx(() => [
              createVNode(_component_el_header, { height: "42px" }, {
                default: withCtx(() => [
                  createVNode(_component_el_button, {
                    type: "text",
                    size: "default",
                    onClick: $options.handleAdd
                  }, {
                    default: withCtx(() => [
                      _hoisted_1$l,
                      createTextVNode(" " + toDisplayString$1(_ctx.$t("fm.datasource.config.add")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ]),
                _: 1
              }),
              createVNode(_component_el_main, null, {
                default: withCtx(() => [
                  createVNode(_component_el_menu, {
                    class: "data-source-aside-menu",
                    "default-active": $data.selectKey,
                    onSelect: $options.handleSelect
                  }, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(Fragment, null, renderList($data.list, (item2, index2) => {
                        return openBlock(), createBlock(_component_el_menu_item, {
                          index: item2.key,
                          key: item2.key,
                          disabled: !$data.saved,
                          onClick: ($event) => $options.handleSelect(item2.key)
                        }, {
                          title: withCtx(() => [
                            createElementVNode("div", null, [
                              createElementVNode("span", {
                                class: normalizeClass(["data-source-menu-i", item2.method])
                              }, toDisplayString$1(item2.method), 3),
                              createElementVNode("div", _hoisted_2$h, toDisplayString$1(item2.name), 1),
                              createElementVNode("div", _hoisted_3$g, [
                                createElementVNode("i", {
                                  class: "iconfont icon-icon_clone",
                                  onClick: withModifiers(($event) => $options.handleClone(index2), ["stop"]),
                                  title: _ctx.$t("fm.tooltip.clone")
                                }, null, 8, _hoisted_4$g),
                                createElementVNode("i", {
                                  class: "iconfont icon-trash",
                                  onClick: withModifiers(($event) => $options.handleRemove(index2), ["stop"]),
                                  title: _ctx.$t("fm.tooltip.trash")
                                }, null, 8, _hoisted_5$f)
                              ])
                            ])
                          ]),
                          _: 2
                        }, 1032, ["index", "disabled", "onClick"]);
                      }), 128))
                    ]),
                    _: 1
                  }, 8, ["default-active", "onSelect"])
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }),
      createVNode(_component_el_main, { class: "data-source-main" }, {
        default: withCtx(() => [
          $data.selectIndex >= 0 ? (openBlock(), createBlock(_component_el_container, { key: 0 }, {
            default: withCtx(() => [
              createVNode(_component_el_header, { height: "42px" }, {
                default: withCtx(() => [
                  createElementVNode("div", _hoisted_6$e, [
                    createVNode(_component_el_button, {
                      type: "primary",
                      size: "default",
                      onClick: $options.handleSave
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString$1(_ctx.$t("fm.datasource.config.save")), 1)
                      ]),
                      _: 1
                    }, 8, ["onClick"]),
                    createVNode(_component_el_button, {
                      size: "default",
                      onClick: $options.handleTest
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString$1(_ctx.$t("fm.datasource.config.test")), 1)
                      ]),
                      _: 1
                    }, 8, ["onClick"]),
                    createVNode(_component_el_button, {
                      size: "default",
                      onClick: $options.handleCancal
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString$1(_ctx.$t("fm.datasource.config.cancel")), 1)
                      ]),
                      _: 1
                    }, 8, ["onClick"])
                  ])
                ]),
                _: 1
              }),
              createVNode(_component_el_main, null, {
                default: withCtx(() => [
                  (openBlock(), createBlock(_component_el_form, {
                    ref: "dataForm",
                    model: $data.formData,
                    rules: $data.formRules,
                    "label-width": _ctx.$i18n.locale == "zh-cn" ? "79px" : "119px",
                    size: "default",
                    "label-position": "right",
                    key: $data.selectKey
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_el_form_item, {
                        label: _ctx.$t("fm.datasource.edit.name"),
                        prop: "name"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_input, {
                            modelValue: $data.formData.name,
                            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.formData.name = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                      }, 8, ["label"]),
                      createVNode(_component_el_form_item, {
                        label: _ctx.$t("fm.datasource.edit.url"),
                        prop: "url"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_input, {
                            type: "textarea",
                            rows: 1,
                            modelValue: $data.formData.url,
                            "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.formData.url = $event),
                            autosize: ""
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                      }, 8, ["label"]),
                      createVNode(_component_el_form_item, {
                        label: _ctx.$t("fm.datasource.edit.method"),
                        prop: "method"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_radio_group, {
                            modelValue: $data.formData.method,
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.formData.method = $event)
                          }, {
                            default: withCtx(() => [
                              createVNode(_component_el_radio_button, { label: "GET" }),
                              createVNode(_component_el_radio_button, { label: "POST" }),
                              createVNode(_component_el_radio_button, { label: "PUT" }),
                              createVNode(_component_el_radio_button, { label: "DELETE" })
                            ]),
                            _: 1
                          }, 8, ["modelValue"])
                        ]),
                        _: 1
                      }, 8, ["label"]),
                      createVNode(_component_el_form_item, {
                        label: _ctx.$t("fm.datasource.edit.headers")
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_array_dynamic, {
                            modelValue: $data.formData.headers,
                            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.formData.headers = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                      }, 8, ["label"]),
                      createVNode(_component_el_form_item, {
                        label: _ctx.$t("fm.datasource.edit.params")
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_array_dynamic, {
                            modelValue: $data.formData.params,
                            "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.formData.params = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                      }, 8, ["label"]),
                      createVNode(_component_el_form_item, {
                        label: _ctx.$t("fm.datasource.edit.auto"),
                        "label-width": _ctx.$i18n.locale == "zh-cn" ? "175px" : "340px"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_switch, {
                            modelValue: $data.formData.auto,
                            "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.formData.auto = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                      }, 8, ["label", "label-width"]),
                      createVNode(_component_el_form_item, {
                        label: _ctx.$t("fm.datasource.edit.response")
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_collapse, { modelValue: ["1", "2", "3"] }, {
                            default: withCtx(() => [
                              createVNode(_component_el_collapse_item, {
                                name: "1",
                                title: _ctx.$t("fm.datasource.edit.willRequest")
                              }, {
                                default: withCtx(() => [
                                  _ctx.$i18n.locale == "zh-cn" ? (openBlock(), createElementBlock("div", _hoisted_7$c, "// config: \u53D1\u51FA\u8BF7\u6C42\u7684\u53EF\u7528\u914D\u7F6E\u9009\u9879;")) : createCommentVNode("", true),
                                  _ctx.$i18n.locale == "zh-cn" ? (openBlock(), createElementBlock("div", _hoisted_8$a, "// \u901A\u8FC7 config.url \u53EF\u4EE5\u66F4\u6539\u8BF7\u6C42\u5730\u5740\uFF0C\u901A\u8FC7 config.headers \u53EF\u4EE5\u66F4\u6539\u8BF7\u6C42\u5934\u90E8")) : createCommentVNode("", true),
                                  _ctx.$i18n.locale == "zh-cn" ? (openBlock(), createElementBlock("div", _hoisted_9$9, "// \u901A\u8FC7 config.data \u53EF\u4EE5\u66F4\u6539\u53D1\u9001\u7684\u6570\u636E\uFF0C\uFF08GET \u8BF7\u6C42\u4E0D\u9002\u7528\uFF0C\u9700\u8981\u66F4\u6539 config.params\uFF09")) : createCommentVNode("", true),
                                  _hoisted_10$6,
                                  createVNode(_component_code_editor, {
                                    modelValue: $data.formData.requestFunc,
                                    "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.formData.requestFunc = $event),
                                    mode: "javascript",
                                    height: "150px"
                                  }, null, 8, ["modelValue"]),
                                  _hoisted_11$5
                                ]),
                                _: 1
                              }, 8, ["title"]),
                              createVNode(_component_el_collapse_item, {
                                title: _ctx.$t("fm.datasource.edit.responseSuccess"),
                                name: "2"
                              }, {
                                default: withCtx(() => [
                                  _ctx.$i18n.locale == "zh-cn" ? (openBlock(), createElementBlock("div", _hoisted_12$5, "// " + toDisplayString$1(_ctx.$t("fm.datasource.edit.annotation")), 1)) : createCommentVNode("", true),
                                  _hoisted_13$3,
                                  createVNode(_component_code_editor, {
                                    modelValue: $data.formData.responseFunc,
                                    "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.formData.responseFunc = $event),
                                    mode: "javascript",
                                    height: "150px"
                                  }, null, 8, ["modelValue"]),
                                  _hoisted_14$2
                                ]),
                                _: 1
                              }, 8, ["title"]),
                              createVNode(_component_el_collapse_item, {
                                title: _ctx.$t("fm.datasource.edit.requestError"),
                                name: "3"
                              }, {
                                default: withCtx(() => [
                                  _hoisted_15$2,
                                  createVNode(_component_code_editor, {
                                    modelValue: $data.formData.errorFunc,
                                    "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.formData.errorFunc = $event),
                                    mode: "javascript",
                                    height: "150px"
                                  }, null, 8, ["modelValue"]),
                                  _hoisted_16$1
                                ]),
                                _: 1
                              }, 8, ["title"])
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      }, 8, ["label"])
                    ]),
                    _: 1
                  }, 8, ["model", "rules", "label-width"]))
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ]),
        _: 1
      })
    ]),
    _: 1
  });
}
var DatasourceIndex = /* @__PURE__ */ _export_sfc(_sfc_main$u, [["render", _sfc_render$s]]);
const _sfc_main$t = {
  components: {
    CusDialog,
    DatasourceIndex
  },
  emits: ["dialog-close"],
  data: () => ({
    visible: false,
    dataSourceList: []
  }),
  methods: {
    open(list) {
      this.visible = true;
      if (list) {
        this.dataSourceList = list;
      }
    },
    handleClose() {
      this.$emit("dialog-close", this.dataSourceList);
      this.visible = false;
    }
  }
};
function _sfc_render$r(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_datasource_index = resolveComponent("datasource-index");
  const _component_el_container = resolveComponent("el-container");
  const _component_cus_dialog = resolveComponent("cus-dialog");
  return openBlock(), createBlock(_component_cus_dialog, {
    visible: _ctx.visible,
    onOnClose: $options.handleClose,
    ref: "dataSourceDialog",
    width: "1000px",
    form: "",
    title: _ctx.$t("fm.datasource.config.title"),
    action: false
  }, {
    default: withCtx(() => [
      createVNode(_component_el_container, { style: { "height": "600px", "border": "1px solid #eee" } }, {
        default: withCtx(() => [
          createVNode(_component_datasource_index, {
            modelValue: _ctx.dataSourceList,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.dataSourceList = $event)
          }, null, 8, ["modelValue"])
        ]),
        _: 1
      })
    ]),
    _: 1
  }, 8, ["visible", "onOnClose", "title"]);
}
var DatasourceDialog = /* @__PURE__ */ _export_sfc(_sfc_main$t, [["render", _sfc_render$r]]);
var index_vue_vue_type_style_index_0_lang$3 = "";
const _sfc_main$s = {
  components: {
    CodeEditor
  },
  props: {
    modelValue: {
      type: Array,
      default: () => []
    }
  },
  emits: ["update:modelValue", "on-confirm-event"],
  data() {
    return {
      formData: {
        key: "",
        name: "",
        func: ""
      },
      formRules: {
        name: [
          { required: true, message: " " },
          { validator: (rule, value, callback) => {
            let currentItem = this.historyList.find((item2) => item2.name == value);
            if (currentItem && currentItem.key != this.selectKey) {
              callback(new Error(this.$t("fm.eventscript.message.repeat")));
            } else {
              callback();
            }
          } }
        ]
      },
      list: [...this.modelValue],
      selectIndex: -1,
      selectKey: "",
      historyList: [...this.modelValue],
      saved: true,
      eventType: ""
    };
  },
  methods: {
    handleSave(confirm) {
      this.$refs.dataForm.validate((valid) => {
        if (valid) {
          this.list[this.list.findIndex((item2) => item2.key === this.selectKey)] = this.formData;
          this.historyList = [...this.list];
          this.saved = true;
          this.$emit("update:modelValue", this.historyList);
          if (confirm) {
            this.$emit("on-confirm-event", __spreadProps(__spreadValues({}, this.formData), { type: this.eventType }));
          } else {
            this.$message.success(this.$t("fm.eventscript.message.saveSuccess"));
          }
        }
      });
    },
    handleAdd() {
      if (!this.saved) {
        this.$message.warning(this.$t("fm.eventscript.message.saveError"));
        return;
      }
      let key = Math.random().toString(36).slice(-8);
      this.list.push({
        key,
        name: "func_" + key,
        func: ""
      });
      this.selectKey = key;
      this.saved = false;
    },
    loadNewFunction(name) {
      let key = Math.random().toString(36).slice(-8);
      this.list.push({
        key,
        name: name + "_" + key,
        func: ""
      });
      this.selectKey = key;
      this.saved = false;
      this.eventType = name;
    },
    loadForm() {
      let currentData = this.list[this.selectIndex];
      this.formData = __spreadValues({}, currentData);
    },
    handleSelect(key) {
      if (key === this.selectKey) {
        return;
      }
      if (!this.saved) {
        this.$message.warning(this.$t("fm.eventscript.message.saveError"));
        return;
      }
      this.selectKey = key;
    },
    loadFunction(key, name) {
      this.selectKey = key;
      if (name) {
        this.eventType = name;
      }
    },
    handleCancal() {
      this.selectKey = "";
      this.list = [...this.historyList];
      this.saved = true;
    },
    handleClone(index2) {
      if (!this.saved) {
        this.$message.warning(this.$t("fm.eventscript.message.saveError"));
        return;
      }
      let currentData = this.list[index2];
      let key = Math.random().toString(36).slice(-8);
      let cloneData = __spreadProps(__spreadValues({}, currentData), {
        key,
        name: currentData.name + "_copy"
      });
      this.list.push(cloneData);
      this.selectKey = key;
      this.saved = false;
    },
    handleRemove(index2) {
      let currentData = this.list[index2];
      this.$confirm(`${this.$t("fm.eventscript.message.confirmRemove")} [${currentData.name}] ?`, "", {
        type: "warning"
      }).then(() => {
        if (currentData.key === this.selectKey) {
          this.selectKey = "";
          this.saved = true;
        }
        this.list.splice(index2, 1);
        if (index2 < this.historyList.length) {
          this.historyList.splice(index2, 1);
        }
        this.$emit("update:modelValue", this.historyList);
      }).catch(() => {
        console.log("catch");
      });
    }
  },
  watch: {
    selectKey(val) {
      if (val) {
        this.selectIndex = this.list.findIndex((item2) => item2.key === val);
        this.loadForm();
      } else {
        this.selectIndex = -1;
      }
    },
    modelValue(val) {
      this.historyList = [...val];
      this.list = [...val];
    }
  }
};
const _hoisted_1$k = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-plus",
  style: { "font-size": "12px", "margin": "5px" }
}, null, -1);
const _hoisted_2$g = /* @__PURE__ */ createElementVNode("span", { class: "event-script-menu-i" }, "Function", -1);
const _hoisted_3$f = { class: "event-script-menu-label" };
const _hoisted_4$f = {
  key: 0,
  class: "event-script-menu-action"
};
const _hoisted_5$e = ["onClick", "title"];
const _hoisted_6$d = ["onClick", "title"];
const _hoisted_7$b = { class: "event-script-action" };
const _hoisted_8$9 = /* @__PURE__ */ createElementVNode("div", { class: "code-line" }, "Function () {", -1);
const _hoisted_9$8 = /* @__PURE__ */ createElementVNode("div", { class: "code-line" }, "}", -1);
function _sfc_render$q(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_button = resolveComponent("el-button");
  const _component_el_header = resolveComponent("el-header");
  const _component_el_menu_item = resolveComponent("el-menu-item");
  const _component_el_menu = resolveComponent("el-menu");
  const _component_el_main = resolveComponent("el-main");
  const _component_el_container = resolveComponent("el-container");
  const _component_el_aside = resolveComponent("el-aside");
  const _component_el_input = resolveComponent("el-input");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_code_editor = resolveComponent("code-editor");
  const _component_el_form = resolveComponent("el-form");
  return openBlock(), createBlock(_component_el_container, { class: "event-script-container" }, {
    default: withCtx(() => [
      createVNode(_component_el_aside, {
        width: "300px",
        class: "event-script-aside"
      }, {
        default: withCtx(() => [
          createVNode(_component_el_container, null, {
            default: withCtx(() => [
              createVNode(_component_el_header, { height: "42px" }, {
                default: withCtx(() => [
                  createVNode(_component_el_button, {
                    type: "text",
                    size: "default",
                    onClick: $options.handleAdd
                  }, {
                    default: withCtx(() => [
                      _hoisted_1$k,
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.eventscript.config.add")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ]),
                _: 1
              }),
              createVNode(_component_el_main, null, {
                default: withCtx(() => [
                  createVNode(_component_el_menu, {
                    class: "event-script-aside-menu",
                    "default-active": $data.selectKey,
                    onSelect: $options.handleSelect
                  }, {
                    default: withCtx(() => [
                      (openBlock(true), createElementBlock(Fragment, null, renderList($data.list, (item2, index2) => {
                        return openBlock(), createBlock(_component_el_menu_item, {
                          index: item2.key,
                          key: item2.key,
                          disabled: !$data.saved,
                          onClick: ($event) => $options.handleSelect(item2.key)
                        }, {
                          title: withCtx(() => [
                            createElementVNode("div", null, [
                              _hoisted_2$g,
                              createElementVNode("div", _hoisted_3$f, toDisplayString$1(item2.name), 1),
                              index2 > 0 ? (openBlock(), createElementBlock("div", _hoisted_4$f, [
                                createElementVNode("i", {
                                  class: "iconfont icon-icon_clone",
                                  onClick: withModifiers(($event) => $options.handleClone(index2), ["stop"]),
                                  title: _ctx.$t("fm.tooltip.clone")
                                }, null, 8, _hoisted_5$e),
                                createElementVNode("i", {
                                  class: "iconfont icon-trash",
                                  onClick: withModifiers(($event) => $options.handleRemove(index2), ["stop"]),
                                  title: _ctx.$t("fm.tooltip.trash")
                                }, null, 8, _hoisted_6$d)
                              ])) : createCommentVNode("", true)
                            ])
                          ]),
                          _: 2
                        }, 1032, ["index", "disabled", "onClick"]);
                      }), 128))
                    ]),
                    _: 1
                  }, 8, ["default-active", "onSelect"])
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      }),
      createVNode(_component_el_main, { class: "event-script-main" }, {
        default: withCtx(() => [
          $data.selectIndex >= 0 ? (openBlock(), createBlock(_component_el_container, { key: 0 }, {
            default: withCtx(() => [
              createVNode(_component_el_header, { height: "42px" }, {
                default: withCtx(() => [
                  createElementVNode("div", _hoisted_7$b, [
                    this.eventType ? (openBlock(), createBlock(_component_el_button, {
                      key: 0,
                      type: "primary",
                      size: "default",
                      onClick: _cache[0] || (_cache[0] = ($event) => $options.handleSave(true))
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString$1(_ctx.$t("fm.eventscript.config.confirm")), 1)
                      ]),
                      _: 1
                    })) : createCommentVNode("", true),
                    createVNode(_component_el_button, {
                      type: "primary",
                      size: "default",
                      onClick: _cache[1] || (_cache[1] = ($event) => $options.handleSave(false))
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString$1(_ctx.$t("fm.eventscript.config.save")), 1)
                      ]),
                      _: 1
                    }),
                    createVNode(_component_el_button, {
                      size: "default",
                      onClick: $options.handleCancal
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString$1(_ctx.$t("fm.eventscript.config.cancel")), 1)
                      ]),
                      _: 1
                    }, 8, ["onClick"])
                  ])
                ]),
                _: 1
              }),
              createVNode(_component_el_main, null, {
                default: withCtx(() => [
                  (openBlock(), createBlock(_component_el_form, {
                    ref: "dataForm",
                    model: $data.formData,
                    rules: $data.formRules,
                    "label-width": "125px",
                    size: "default",
                    "label-position": "left",
                    key: $data.selectKey
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_el_form_item, {
                        label: "Function Name",
                        prop: "name"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_el_input, {
                            modelValue: $data.formData.name,
                            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.formData.name = $event),
                            disabled: $data.formData.key == "mounted"
                          }, null, 8, ["modelValue", "disabled"])
                        ]),
                        _: 1
                      }),
                      createVNode(_component_el_form_item, {
                        "label-width": "0",
                        prop: "func"
                      }, {
                        default: withCtx(() => [
                          _hoisted_8$9,
                          createVNode(_component_code_editor, {
                            modelValue: $data.formData.func,
                            "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.formData.func = $event),
                            mode: "javascript",
                            height: "380px"
                          }, null, 8, ["modelValue"]),
                          _hoisted_9$8
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  }, 8, ["model", "rules"]))
                ]),
                _: 1
              })
            ]),
            _: 1
          })) : createCommentVNode("", true)
        ]),
        _: 1
      })
    ]),
    _: 1
  });
}
var EventScriptIndex = /* @__PURE__ */ _export_sfc(_sfc_main$s, [["render", _sfc_render$q]]);
const _sfc_main$r = {
  components: {
    CusDialog,
    EventScriptIndex
  },
  emits: ["dialog-close", "dialog-confirm"],
  data: () => ({
    visible: false,
    scriptList: []
  }),
  methods: {
    open(list, eventName, eventKey) {
      this.visible = true;
      if (list) {
        this.scriptList = list;
      }
      this.$nextTick(() => {
        if (!eventKey && eventName) {
          this.$refs.eventScriptIndex.loadNewFunction(eventName);
        }
        if (eventKey && eventName) {
          this.$refs.eventScriptIndex.loadFunction(eventKey, eventName);
        }
      });
    },
    handleClose() {
      this.$emit("dialog-close", this.scriptList);
      this.visible = false;
    },
    handleConfirmEvent(eventObj) {
      this.$emit("dialog-close", this.scriptList);
      this.$emit("dialog-confirm", eventObj);
      this.visible = false;
    }
  }
};
function _sfc_render$p(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_event_script_index = resolveComponent("event-script-index");
  const _component_el_container = resolveComponent("el-container");
  const _component_cus_dialog = resolveComponent("cus-dialog");
  return openBlock(), createBlock(_component_cus_dialog, {
    visible: _ctx.visible,
    onOnClose: $options.handleClose,
    ref: "scriptDialog",
    width: "1000px",
    form: "",
    title: _ctx.$t("fm.eventscript.config.title"),
    action: false
  }, {
    default: withCtx(() => [
      createVNode(_component_el_container, { style: { "height": "600px", "border": "1px solid #eee" } }, {
        default: withCtx(() => [
          createVNode(_component_event_script_index, {
            modelValue: _ctx.scriptList,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.scriptList = $event),
            ref: "eventScriptIndex",
            onOnConfirmEvent: $options.handleConfirmEvent
          }, null, 8, ["modelValue", "onOnConfirmEvent"])
        ]),
        _: 1
      })
    ]),
    _: 1
  }, 8, ["visible", "onOnClose", "title"]);
}
var EventScriptDialog = /* @__PURE__ */ _export_sfc(_sfc_main$r, [["render", _sfc_render$p]]);
const _sfc_main$q = {
  components: {
    CodeDialog,
    DatasourceDialog,
    EventScriptDialog
  },
  props: ["data", "sheets"],
  emits: ["on-style-update", "on-datasource-update", "on-eventscript-update", "on-eventscript-confirm", "update:data"],
  data() {
    return {
      customClassArray: this.data && this.data.customClass ? this.data.customClass.split(" ").filter((item2) => item2) : [],
      dataModel: this.data
    };
  },
  methods: {
    handleSetStyleSheets() {
      let sheets = document.styleSheets[0];
      if (sheets.insertRule) {
        this.$refs.styleDialog.open(this.data.styleSheets || "");
      } else {
        this.$message.warning(this.$t("fm.message.notSupport"));
      }
    },
    handlestyleSheetsConfirm(value) {
      this.dataModel.styleSheets = value;
      this.$refs.styleDialog.close();
      var arr = splitStyleSheets(value);
      this.$emit("on-style-update", arr);
    },
    handleSetDatasource() {
      this.dataModel.dataSource = this.data.dataSource || [];
      this.$refs.dataSourceDialog.open(this.data.dataSource);
    },
    handleDataSourceClose(list) {
      this.dataModel.dataSource = list;
      this.$emit("on-datasource-update", list);
    },
    handleSetScript() {
      this.dataModel.eventScript = this.data.eventScript || [];
      this.$refs.eventScriptDialog.open(this.data.eventScript);
    },
    editScript(eventName, eventKey) {
      this.dataModel.eventScript = this.data.eventScript || [];
      this.$refs.eventScriptDialog.open(this.data.eventScript, eventName, eventKey);
    },
    handleEventScriptClose(list) {
      this.dataModel.eventScript = list;
      this.$emit("on-eventscript-update", list);
    },
    handleEventConfirm(eventObj) {
      this.$emit("on-eventscript-confirm", eventObj);
    }
  },
  watch: {
    "data.customClass": function(val) {
      this.customClassArray = this.data && this.data.customClass ? this.data.customClass.split(" ").filter((item2) => item2) : [];
    },
    customClassArray(val) {
      this.dataModel.customClass = val.join(" ");
    },
    data(val) {
      this.dataModel = val;
    },
    dataModel: {
      deep: true,
      handler(val) {
        this.$emit("update:data", val);
      }
    }
  }
};
const _hoisted_1$j = { class: "form-config-container" };
const _hoisted_2$f = /* @__PURE__ */ createTextVNode("Large");
const _hoisted_3$e = /* @__PURE__ */ createTextVNode("Default");
const _hoisted_4$e = /* @__PURE__ */ createTextVNode("Small");
const _hoisted_5$d = /* @__PURE__ */ createTextVNode("\u4FDD\u5B58\u524D\u6267\u884C");
const _hoisted_6$c = /* @__PURE__ */ createTextVNode("\u4FDD\u5B58\u540E\u6267\u884C");
function _sfc_render$o(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_input = resolveComponent("el-input");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_el_radio_button = resolveComponent("el-radio-button");
  const _component_el_radio_group = resolveComponent("el-radio-group");
  const _component_el_input_number = resolveComponent("el-input-number");
  const _component_el_button = resolveComponent("el-button");
  const _component_el_option = resolveComponent("el-option");
  const _component_el_select = resolveComponent("el-select");
  const _component_el_radio = resolveComponent("el-radio");
  const _component_el_form = resolveComponent("el-form");
  const _component_code_dialog = resolveComponent("code-dialog");
  const _component_datasource_dialog = resolveComponent("datasource-dialog");
  const _component_event_script_dialog = resolveComponent("event-script-dialog");
  return openBlock(), createElementBlock("div", _hoisted_1$j, [
    createVNode(_component_el_form, {
      "label-position": "top",
      size: "default"
    }, {
      default: withCtx(() => [
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.config.form.width")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              modelValue: $data.dataModel.width,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.dataModel.width = $event),
              clearable: ""
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"]),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.config.form.labelPosition.title")
        }, {
          default: withCtx(() => [
            (openBlock(), createBlock(_component_el_radio_group, {
              modelValue: $data.dataModel.labelPosition,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.dataModel.labelPosition = $event),
              key: $props.data.labelPosition
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_button, { label: "left" }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.form.labelPosition.left")), 1)
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "right" }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.form.labelPosition.right")), 1)
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "top" }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString$1(_ctx.$t("fm.config.form.labelPosition.top")), 1)
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"]))
          ]),
          _: 1
        }, 8, ["label"]),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.config.form.labelWidth")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input_number, {
              modelValue: $data.dataModel.labelWidth,
              "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.dataModel.labelWidth = $event),
              min: 0,
              max: 200,
              step: 10
            }, null, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"]),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.config.form.size")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_radio_group, {
              modelValue: $data.dataModel.size,
              "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.dataModel.size = $event)
            }, {
              default: withCtx(() => [
                createVNode(_component_el_radio_button, { label: "large" }, {
                  default: withCtx(() => [
                    _hoisted_2$f
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "default" }, {
                  default: withCtx(() => [
                    _hoisted_3$e
                  ]),
                  _: 1
                }),
                createVNode(_component_el_radio_button, { label: "small" }, {
                  default: withCtx(() => [
                    _hoisted_4$e
                  ]),
                  _: 1
                })
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"]),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.config.form.styleSheets")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_button, {
              style: { "width": "100%" },
              onClick: $options.handleSetStyleSheets
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
              ]),
              _: 1
            }, 8, ["onClick"])
          ]),
          _: 1
        }, 8, ["label"]),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.config.form.customClass")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_select, {
              style: { "width": "100%" },
              modelValue: $data.customClassArray,
              "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.customClassArray = $event),
              multiple: "",
              filterable: "",
              "allow-create": "",
              "default-first-option": ""
            }, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($props.sheets, (item2) => {
                  return openBlock(), createBlock(_component_el_option, {
                    key: item2,
                    label: item2,
                    value: item2
                  }, null, 8, ["label", "value"]);
                }), 128))
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"]),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.datasource.name")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_button, {
              style: { "width": "100%" },
              onClick: $options.handleSetDatasource
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
              ]),
              _: 1
            }, 8, ["onClick"])
          ]),
          _: 1
        }, 8, ["label"]),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.eventscript.name")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_button, {
              style: { "width": "100%" },
              onClick: $options.handleSetScript
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(_ctx.$t("fm.config.widget.setting")), 1)
              ]),
              _: 1
            }, 8, ["onClick"])
          ]),
          _: 1
        }, 8, ["label"]),
        createVNode(_component_el_form_item, {
          label: _ctx.$t("fm.config.form.customJs")
        }, {
          default: withCtx(() => [
            createVNode(_component_el_input, {
              type: "textarea",
              modelValue: $props.data.customJs,
              "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $props.data.customJs = $event),
              clearable: ""
            }, null, 8, ["modelValue"]),
            createVNode(_component_el_radio, {
              modelValue: $props.data.eventType,
              "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $props.data.eventType = $event),
              label: "1"
            }, {
              default: withCtx(() => [
                _hoisted_5$d
              ]),
              _: 1
            }, 8, ["modelValue"]),
            createVNode(_component_el_radio, {
              modelValue: $props.data.eventType,
              "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $props.data.eventType = $event),
              label: "2"
            }, {
              default: withCtx(() => [
                _hoisted_6$c
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          _: 1
        }, 8, ["label"])
      ]),
      _: 1
    }),
    createVNode(_component_code_dialog, {
      ref: "styleDialog",
      mode: "css",
      title: _ctx.$t("fm.config.form.styleSheets"),
      help: "https://www.yuque.com/ln7ccx/ntgo8q/bau8eo",
      onOnConfirm: $options.handlestyleSheetsConfirm
    }, null, 8, ["title", "onOnConfirm"]),
    createVNode(_component_datasource_dialog, {
      ref: "dataSourceDialog",
      onDialogClose: $options.handleDataSourceClose
    }, null, 8, ["onDialogClose"]),
    createVNode(_component_event_script_dialog, {
      ref: "eventScriptDialog",
      onDialogClose: $options.handleEventScriptClose,
      onDialogConfirm: $options.handleEventConfirm
    }, null, 8, ["onDialogClose", "onDialogConfirm"])
  ]);
}
var FormConfig = /* @__PURE__ */ _export_sfc(_sfc_main$q, [["render", _sfc_render$o]]);
/*!
 * Viewer.js v1.10.5
 * https://fengyuanchen.github.io/viewerjs
 *
 * Copyright 2015-present Chen Fengyuan
 * Released under the MIT license
 *
 * Date: 2022-04-05T08:21:02.491Z
 */
function ownKeys(object, enumerableOnly) {
  var keys2 = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys2.push.apply(keys2, symbols);
  }
  return keys2;
}
function _objectSpread2(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source2 = arguments[i2] != null ? arguments[i2] : {};
    i2 % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
      _defineProperty(target, key, source2[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
    });
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && typeof Symbol == "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _classCallCheck(instance2, Constructor) {
  if (!(instance2 instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props2) {
  for (var i2 = 0; i2 < props2.length; i2++) {
    var descriptor = props2[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var DEFAULTS = {
  backdrop: true,
  button: true,
  navbar: true,
  title: true,
  toolbar: true,
  className: "",
  container: "body",
  filter: null,
  fullscreen: true,
  inheritedAttributes: ["crossOrigin", "decoding", "isMap", "loading", "referrerPolicy", "sizes", "srcset", "useMap"],
  initialViewIndex: 0,
  inline: false,
  interval: 5e3,
  keyboard: true,
  focus: true,
  loading: true,
  loop: true,
  minWidth: 200,
  minHeight: 100,
  movable: true,
  rotatable: true,
  scalable: true,
  zoomable: true,
  zoomOnTouch: true,
  zoomOnWheel: true,
  slideOnTouch: true,
  toggleOnDblclick: true,
  tooltip: true,
  transition: true,
  zIndex: 2015,
  zIndexInline: 0,
  zoomRatio: 0.1,
  minZoomRatio: 0.01,
  maxZoomRatio: 100,
  url: "src",
  ready: null,
  show: null,
  shown: null,
  hide: null,
  hidden: null,
  view: null,
  viewed: null,
  move: null,
  moved: null,
  rotate: null,
  rotated: null,
  scale: null,
  scaled: null,
  zoom: null,
  zoomed: null,
  play: null,
  stop: null
};
var TEMPLATE = '<div class="viewer-container" tabindex="-1" touch-action="none"><div class="viewer-canvas"></div><div class="viewer-footer"><div class="viewer-title"></div><div class="viewer-toolbar"></div><div class="viewer-navbar"><ul class="viewer-list" role="navigation"></ul></div></div><div class="viewer-tooltip" role="alert" aria-hidden="true"></div><div class="viewer-button" data-viewer-action="mix" role="button"></div><div class="viewer-player"></div></div>';
var IS_BROWSER = typeof window !== "undefined" && typeof window.document !== "undefined";
var WINDOW = IS_BROWSER ? window : {};
var IS_TOUCH_DEVICE = IS_BROWSER && WINDOW.document.documentElement ? "ontouchstart" in WINDOW.document.documentElement : false;
var HAS_POINTER_EVENT = IS_BROWSER ? "PointerEvent" in WINDOW : false;
var NAMESPACE = "viewer";
var ACTION_MOVE = "move";
var ACTION_SWITCH = "switch";
var ACTION_ZOOM = "zoom";
var CLASS_ACTIVE = "".concat(NAMESPACE, "-active");
var CLASS_CLOSE = "".concat(NAMESPACE, "-close");
var CLASS_FADE = "".concat(NAMESPACE, "-fade");
var CLASS_FIXED = "".concat(NAMESPACE, "-fixed");
var CLASS_FULLSCREEN = "".concat(NAMESPACE, "-fullscreen");
var CLASS_FULLSCREEN_EXIT = "".concat(NAMESPACE, "-fullscreen-exit");
var CLASS_HIDE = "".concat(NAMESPACE, "-hide");
var CLASS_HIDE_MD_DOWN = "".concat(NAMESPACE, "-hide-md-down");
var CLASS_HIDE_SM_DOWN = "".concat(NAMESPACE, "-hide-sm-down");
var CLASS_HIDE_XS_DOWN = "".concat(NAMESPACE, "-hide-xs-down");
var CLASS_IN = "".concat(NAMESPACE, "-in");
var CLASS_INVISIBLE = "".concat(NAMESPACE, "-invisible");
var CLASS_LOADING = "".concat(NAMESPACE, "-loading");
var CLASS_MOVE = "".concat(NAMESPACE, "-move");
var CLASS_OPEN = "".concat(NAMESPACE, "-open");
var CLASS_SHOW = "".concat(NAMESPACE, "-show");
var CLASS_TRANSITION = "".concat(NAMESPACE, "-transition");
var EVENT_CLICK = "click";
var EVENT_DBLCLICK = "dblclick";
var EVENT_DRAG_START = "dragstart";
var EVENT_FOCUSIN = "focusin";
var EVENT_KEY_DOWN = "keydown";
var EVENT_LOAD = "load";
var EVENT_ERROR = "error";
var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? "touchend touchcancel" : "mouseup";
var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? "touchmove" : "mousemove";
var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? "touchstart" : "mousedown";
var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? "pointerdown" : EVENT_TOUCH_START;
var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? "pointermove" : EVENT_TOUCH_MOVE;
var EVENT_POINTER_UP = HAS_POINTER_EVENT ? "pointerup pointercancel" : EVENT_TOUCH_END;
var EVENT_RESIZE = "resize";
var EVENT_TRANSITION_END = "transitionend";
var EVENT_WHEEL = "wheel";
var EVENT_READY = "ready";
var EVENT_SHOW = "show";
var EVENT_SHOWN = "shown";
var EVENT_HIDE = "hide";
var EVENT_HIDDEN = "hidden";
var EVENT_VIEW = "view";
var EVENT_VIEWED = "viewed";
var EVENT_MOVE = "move";
var EVENT_MOVED = "moved";
var EVENT_ROTATE = "rotate";
var EVENT_ROTATED = "rotated";
var EVENT_SCALE = "scale";
var EVENT_SCALED = "scaled";
var EVENT_ZOOM = "zoom";
var EVENT_ZOOMED = "zoomed";
var EVENT_PLAY = "play";
var EVENT_STOP = "stop";
var DATA_ACTION = "".concat(NAMESPACE, "Action");
var REGEXP_SPACES = /\s\s*/;
var BUTTONS = ["zoom-in", "zoom-out", "one-to-one", "reset", "prev", "play", "next", "rotate-left", "rotate-right", "flip-horizontal", "flip-vertical"];
function isString$1(value) {
  return typeof value === "string";
}
var isNaN$1 = Number.isNaN || WINDOW.isNaN;
function isNumber$1(value) {
  return typeof value === "number" && !isNaN$1(value);
}
function isUndefined$1(value) {
  return typeof value === "undefined";
}
function isObject$1(value) {
  return _typeof(value) === "object" && value !== null;
}
var hasOwnProperty = Object.prototype.hasOwnProperty;
function isPlainObject(value) {
  if (!isObject$1(value)) {
    return false;
  }
  try {
    var _constructor = value.constructor;
    var prototype = _constructor.prototype;
    return _constructor && prototype && hasOwnProperty.call(prototype, "isPrototypeOf");
  } catch (error) {
    return false;
  }
}
function isFunction$1(value) {
  return typeof value === "function";
}
function forEach(data2, callback) {
  if (data2 && isFunction$1(callback)) {
    if (Array.isArray(data2) || isNumber$1(data2.length)) {
      var length = data2.length;
      var i2;
      for (i2 = 0; i2 < length; i2 += 1) {
        if (callback.call(data2, data2[i2], i2, data2) === false) {
          break;
        }
      }
    } else if (isObject$1(data2)) {
      Object.keys(data2).forEach(function(key) {
        callback.call(data2, data2[key], key, data2);
      });
    }
  }
  return data2;
}
var assign = Object.assign || function assign2(obj) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  if (isObject$1(obj) && args.length > 0) {
    args.forEach(function(arg) {
      if (isObject$1(arg)) {
        Object.keys(arg).forEach(function(key) {
          obj[key] = arg[key];
        });
      }
    });
  }
  return obj;
};
var REGEXP_SUFFIX = /^(?:width|height|left|top|marginLeft|marginTop)$/;
function setStyle(element, styles) {
  var style = element.style;
  forEach(styles, function(value, property) {
    if (REGEXP_SUFFIX.test(property) && isNumber$1(value)) {
      value += "px";
    }
    style[property] = value;
  });
}
function escapeHTMLEntities(value) {
  return isString$1(value) ? value.replace(/&(?!amp;|quot;|#39;|lt;|gt;)/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : value;
}
function hasClass(element, value) {
  if (!element || !value) {
    return false;
  }
  return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;
}
function addClass(element, value) {
  if (!element || !value) {
    return;
  }
  if (isNumber$1(element.length)) {
    forEach(element, function(elem) {
      addClass(elem, value);
    });
    return;
  }
  if (element.classList) {
    element.classList.add(value);
    return;
  }
  var className = element.className.trim();
  if (!className) {
    element.className = value;
  } else if (className.indexOf(value) < 0) {
    element.className = "".concat(className, " ").concat(value);
  }
}
function removeClass(element, value) {
  if (!element || !value) {
    return;
  }
  if (isNumber$1(element.length)) {
    forEach(element, function(elem) {
      removeClass(elem, value);
    });
    return;
  }
  if (element.classList) {
    element.classList.remove(value);
    return;
  }
  if (element.className.indexOf(value) >= 0) {
    element.className = element.className.replace(value, "");
  }
}
function toggleClass(element, value, added) {
  if (!value) {
    return;
  }
  if (isNumber$1(element.length)) {
    forEach(element, function(elem) {
      toggleClass(elem, value, added);
    });
    return;
  }
  if (added) {
    addClass(element, value);
  } else {
    removeClass(element, value);
  }
}
var REGEXP_HYPHENATE = /([a-z\d])([A-Z])/g;
function hyphenate(value) {
  return value.replace(REGEXP_HYPHENATE, "$1-$2").toLowerCase();
}
function getData(element, name) {
  if (isObject$1(element[name])) {
    return element[name];
  }
  if (element.dataset) {
    return element.dataset[name];
  }
  return element.getAttribute("data-".concat(hyphenate(name)));
}
function setData(element, name, data2) {
  if (isObject$1(data2)) {
    element[name] = data2;
  } else if (element.dataset) {
    element.dataset[name] = data2;
  } else {
    element.setAttribute("data-".concat(hyphenate(name)), data2);
  }
}
var onceSupported = function() {
  var supported = false;
  if (IS_BROWSER) {
    var once = false;
    var listener = function listener2() {
    };
    var options = Object.defineProperty({}, "once", {
      get: function get2() {
        supported = true;
        return once;
      },
      set: function set2(value) {
        once = value;
      }
    });
    WINDOW.addEventListener("test", listener, options);
    WINDOW.removeEventListener("test", listener, options);
  }
  return supported;
}();
function removeListener(element, type, listener) {
  var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var handler = listener;
  type.trim().split(REGEXP_SPACES).forEach(function(event) {
    if (!onceSupported) {
      var listeners = element.listeners;
      if (listeners && listeners[event] && listeners[event][listener]) {
        handler = listeners[event][listener];
        delete listeners[event][listener];
        if (Object.keys(listeners[event]).length === 0) {
          delete listeners[event];
        }
        if (Object.keys(listeners).length === 0) {
          delete element.listeners;
        }
      }
    }
    element.removeEventListener(event, handler, options);
  });
}
function addListener(element, type, listener) {
  var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
  var _handler = listener;
  type.trim().split(REGEXP_SPACES).forEach(function(event) {
    if (options.once && !onceSupported) {
      var _element$listeners = element.listeners, listeners = _element$listeners === void 0 ? {} : _element$listeners;
      _handler = function handler() {
        delete listeners[event][listener];
        element.removeEventListener(event, _handler, options);
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        listener.apply(element, args);
      };
      if (!listeners[event]) {
        listeners[event] = {};
      }
      if (listeners[event][listener]) {
        element.removeEventListener(event, listeners[event][listener], options);
      }
      listeners[event][listener] = _handler;
      element.listeners = listeners;
    }
    element.addEventListener(event, _handler, options);
  });
}
function dispatchEvent(element, type, data2, options) {
  var event;
  if (isFunction$1(Event) && isFunction$1(CustomEvent)) {
    event = new CustomEvent(type, _objectSpread2({
      bubbles: true,
      cancelable: true,
      detail: data2
    }, options));
  } else {
    event = document.createEvent("CustomEvent");
    event.initCustomEvent(type, true, true, data2);
  }
  return element.dispatchEvent(event);
}
function getOffset(element) {
  var box = element.getBoundingClientRect();
  return {
    left: box.left + (window.pageXOffset - document.documentElement.clientLeft),
    top: box.top + (window.pageYOffset - document.documentElement.clientTop)
  };
}
function getTransforms(_ref) {
  var rotate2 = _ref.rotate, scaleX2 = _ref.scaleX, scaleY2 = _ref.scaleY, translateX = _ref.translateX, translateY = _ref.translateY;
  var values = [];
  if (isNumber$1(translateX) && translateX !== 0) {
    values.push("translateX(".concat(translateX, "px)"));
  }
  if (isNumber$1(translateY) && translateY !== 0) {
    values.push("translateY(".concat(translateY, "px)"));
  }
  if (isNumber$1(rotate2) && rotate2 !== 0) {
    values.push("rotate(".concat(rotate2, "deg)"));
  }
  if (isNumber$1(scaleX2) && scaleX2 !== 1) {
    values.push("scaleX(".concat(scaleX2, ")"));
  }
  if (isNumber$1(scaleY2) && scaleY2 !== 1) {
    values.push("scaleY(".concat(scaleY2, ")"));
  }
  var transform2 = values.length ? values.join(" ") : "none";
  return {
    WebkitTransform: transform2,
    msTransform: transform2,
    transform: transform2
  };
}
function getImageNameFromURL(url) {
  return isString$1(url) ? decodeURIComponent(url.replace(/^.*\//, "").replace(/[?&#].*$/, "")) : "";
}
var IS_SAFARI = WINDOW.navigator && /(Macintosh|iPhone|iPod|iPad).*AppleWebKit/i.test(WINDOW.navigator.userAgent);
function getImageNaturalSizes(image, options, callback) {
  var newImage = document.createElement("img");
  if (image.naturalWidth && !IS_SAFARI) {
    callback(image.naturalWidth, image.naturalHeight);
    return newImage;
  }
  var body = document.body || document.documentElement;
  newImage.onload = function() {
    callback(newImage.width, newImage.height);
    if (!IS_SAFARI) {
      body.removeChild(newImage);
    }
  };
  forEach(options.inheritedAttributes, function(name) {
    var value = image.getAttribute(name);
    if (value !== null) {
      newImage.setAttribute(name, value);
    }
  });
  newImage.src = image.src;
  if (!IS_SAFARI) {
    newImage.style.cssText = "left:0;max-height:none!important;max-width:none!important;min-height:0!important;min-width:0!important;opacity:0;position:absolute;top:0;z-index:-1;";
    body.appendChild(newImage);
  }
  return newImage;
}
function getResponsiveClass(type) {
  switch (type) {
    case 2:
      return CLASS_HIDE_XS_DOWN;
    case 3:
      return CLASS_HIDE_SM_DOWN;
    case 4:
      return CLASS_HIDE_MD_DOWN;
    default:
      return "";
  }
}
function getMaxZoomRatio(pointers) {
  var pointers2 = _objectSpread2({}, pointers);
  var ratios = [];
  forEach(pointers, function(pointer, pointerId) {
    delete pointers2[pointerId];
    forEach(pointers2, function(pointer2) {
      var x1 = Math.abs(pointer.startX - pointer2.startX);
      var y1 = Math.abs(pointer.startY - pointer2.startY);
      var x2 = Math.abs(pointer.endX - pointer2.endX);
      var y2 = Math.abs(pointer.endY - pointer2.endY);
      var z1 = Math.sqrt(x1 * x1 + y1 * y1);
      var z2 = Math.sqrt(x2 * x2 + y2 * y2);
      var ratio = (z2 - z1) / z1;
      ratios.push(ratio);
    });
  });
  ratios.sort(function(a, b) {
    return Math.abs(a) < Math.abs(b);
  });
  return ratios[0];
}
function getPointer(_ref2, endOnly) {
  var pageX = _ref2.pageX, pageY = _ref2.pageY;
  var end = {
    endX: pageX,
    endY: pageY
  };
  return endOnly ? end : _objectSpread2({
    timeStamp: Date.now(),
    startX: pageX,
    startY: pageY
  }, end);
}
function getPointersCenter(pointers) {
  var pageX = 0;
  var pageY = 0;
  var count = 0;
  forEach(pointers, function(_ref3) {
    var startX = _ref3.startX, startY = _ref3.startY;
    pageX += startX;
    pageY += startY;
    count += 1;
  });
  pageX /= count;
  pageY /= count;
  return {
    pageX,
    pageY
  };
}
var render = {
  render: function render2() {
    this.initContainer();
    this.initViewer();
    this.initList();
    this.renderViewer();
  },
  initBody: function initBody() {
    var ownerDocument = this.element.ownerDocument;
    var body = ownerDocument.body || ownerDocument.documentElement;
    this.body = body;
    this.scrollbarWidth = window.innerWidth - ownerDocument.documentElement.clientWidth;
    this.initialBodyPaddingRight = body.style.paddingRight;
    this.initialBodyComputedPaddingRight = window.getComputedStyle(body).paddingRight;
  },
  initContainer: function initContainer() {
    this.containerData = {
      width: window.innerWidth,
      height: window.innerHeight
    };
  },
  initViewer: function initViewer() {
    var options = this.options, parent = this.parent;
    var viewerData;
    if (options.inline) {
      viewerData = {
        width: Math.max(parent.offsetWidth, options.minWidth),
        height: Math.max(parent.offsetHeight, options.minHeight)
      };
      this.parentData = viewerData;
    }
    if (this.fulled || !viewerData) {
      viewerData = this.containerData;
    }
    this.viewerData = assign({}, viewerData);
  },
  renderViewer: function renderViewer() {
    if (this.options.inline && !this.fulled) {
      setStyle(this.viewer, this.viewerData);
    }
  },
  initList: function initList() {
    var _this = this;
    var element = this.element, options = this.options, list = this.list;
    var items = [];
    list.innerHTML = "";
    forEach(this.images, function(image, index2) {
      var src = image.src;
      var alt = image.alt || getImageNameFromURL(src);
      var url = _this.getImageURL(image);
      if (src || url) {
        var item2 = document.createElement("li");
        var img = document.createElement("img");
        forEach(options.inheritedAttributes, function(name) {
          var value = image.getAttribute(name);
          if (value !== null) {
            img.setAttribute(name, value);
          }
        });
        img.src = src || url;
        img.alt = alt;
        img.setAttribute("data-original-url", url || src);
        item2.setAttribute("data-index", index2);
        item2.setAttribute("data-viewer-action", "view");
        item2.setAttribute("role", "button");
        if (options.keyboard) {
          item2.setAttribute("tabindex", 0);
        }
        item2.appendChild(img);
        list.appendChild(item2);
        items.push(item2);
      }
    });
    this.items = items;
    forEach(items, function(item2) {
      var image = item2.firstElementChild;
      var onLoad;
      var onError;
      setData(image, "filled", true);
      if (options.loading) {
        addClass(item2, CLASS_LOADING);
      }
      addListener(image, EVENT_LOAD, onLoad = function onLoad2(event) {
        removeListener(image, EVENT_ERROR, onError);
        if (options.loading) {
          removeClass(item2, CLASS_LOADING);
        }
        _this.loadImage(event);
      }, {
        once: true
      });
      addListener(image, EVENT_ERROR, onError = function onError2() {
        removeListener(image, EVENT_LOAD, onLoad);
        if (options.loading) {
          removeClass(item2, CLASS_LOADING);
        }
      }, {
        once: true
      });
    });
    if (options.transition) {
      addListener(element, EVENT_VIEWED, function() {
        addClass(list, CLASS_TRANSITION);
      }, {
        once: true
      });
    }
  },
  renderList: function renderList2() {
    var index2 = this.index;
    var item2 = this.items[index2];
    if (!item2) {
      return;
    }
    var next2 = item2.nextElementSibling;
    var gutter = parseInt(window.getComputedStyle(next2 || item2).marginLeft, 10);
    var offsetWidth = item2.offsetWidth;
    var outerWidth = offsetWidth + gutter;
    setStyle(this.list, assign({
      width: outerWidth * this.length - gutter
    }, getTransforms({
      translateX: (this.viewerData.width - offsetWidth) / 2 - outerWidth * index2
    })));
  },
  resetList: function resetList() {
    var list = this.list;
    list.innerHTML = "";
    removeClass(list, CLASS_TRANSITION);
    setStyle(list, getTransforms({
      translateX: 0
    }));
  },
  initImage: function initImage(done) {
    var _this2 = this;
    var options = this.options, image = this.image, viewerData = this.viewerData;
    var footerHeight = this.footer.offsetHeight;
    var viewerWidth = viewerData.width;
    var viewerHeight = Math.max(viewerData.height - footerHeight, footerHeight);
    var oldImageData = this.imageData || {};
    var sizingImage;
    this.imageInitializing = {
      abort: function abort() {
        sizingImage.onload = null;
      }
    };
    sizingImage = getImageNaturalSizes(image, options, function(naturalWidth, naturalHeight) {
      var aspectRatio = naturalWidth / naturalHeight;
      var width = viewerWidth;
      var height = viewerHeight;
      _this2.imageInitializing = false;
      if (viewerHeight * aspectRatio > viewerWidth) {
        height = viewerWidth / aspectRatio;
      } else {
        width = viewerHeight * aspectRatio;
      }
      width = Math.min(width * 0.9, naturalWidth);
      height = Math.min(height * 0.9, naturalHeight);
      var left = (viewerWidth - width) / 2;
      var top = (viewerHeight - height) / 2;
      var imageData = {
        left,
        top,
        x: left,
        y: top,
        width,
        height,
        oldRatio: 1,
        ratio: width / naturalWidth,
        aspectRatio,
        naturalWidth,
        naturalHeight
      };
      var initialImageData = assign({}, imageData);
      if (options.rotatable) {
        imageData.rotate = oldImageData.rotate || 0;
        initialImageData.rotate = 0;
      }
      if (options.scalable) {
        imageData.scaleX = oldImageData.scaleX || 1;
        imageData.scaleY = oldImageData.scaleY || 1;
        initialImageData.scaleX = 1;
        initialImageData.scaleY = 1;
      }
      _this2.imageData = imageData;
      _this2.initialImageData = initialImageData;
      if (done) {
        done();
      }
    });
  },
  renderImage: function renderImage(done) {
    var _this3 = this;
    var image = this.image, imageData = this.imageData;
    setStyle(image, assign({
      width: imageData.width,
      height: imageData.height,
      marginLeft: imageData.x,
      marginTop: imageData.y
    }, getTransforms(imageData)));
    if (done) {
      if ((this.viewing || this.moving || this.rotating || this.scaling || this.zooming) && this.options.transition && hasClass(image, CLASS_TRANSITION)) {
        var onTransitionEnd = function onTransitionEnd2() {
          _this3.imageRendering = false;
          done();
        };
        this.imageRendering = {
          abort: function abort() {
            removeListener(image, EVENT_TRANSITION_END, onTransitionEnd);
          }
        };
        addListener(image, EVENT_TRANSITION_END, onTransitionEnd, {
          once: true
        });
      } else {
        done();
      }
    }
  },
  resetImage: function resetImage() {
    if (this.viewing || this.viewed) {
      var image = this.image;
      if (this.viewing) {
        this.viewing.abort();
      }
      image.parentNode.removeChild(image);
      this.image = null;
    }
  }
};
var events = {
  bind: function bind3() {
    var options = this.options, viewer2 = this.viewer, canvas = this.canvas;
    var document2 = this.element.ownerDocument;
    addListener(viewer2, EVENT_CLICK, this.onClick = this.click.bind(this));
    addListener(viewer2, EVENT_DRAG_START, this.onDragStart = this.dragstart.bind(this));
    addListener(canvas, EVENT_POINTER_DOWN, this.onPointerDown = this.pointerdown.bind(this));
    addListener(document2, EVENT_POINTER_MOVE, this.onPointerMove = this.pointermove.bind(this));
    addListener(document2, EVENT_POINTER_UP, this.onPointerUp = this.pointerup.bind(this));
    addListener(document2, EVENT_KEY_DOWN, this.onKeyDown = this.keydown.bind(this));
    addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));
    if (options.zoomable && options.zoomOnWheel) {
      addListener(viewer2, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {
        passive: false,
        capture: true
      });
    }
    if (options.toggleOnDblclick) {
      addListener(canvas, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));
    }
  },
  unbind: function unbind() {
    var options = this.options, viewer2 = this.viewer, canvas = this.canvas;
    var document2 = this.element.ownerDocument;
    removeListener(viewer2, EVENT_CLICK, this.onClick);
    removeListener(viewer2, EVENT_DRAG_START, this.onDragStart);
    removeListener(canvas, EVENT_POINTER_DOWN, this.onPointerDown);
    removeListener(document2, EVENT_POINTER_MOVE, this.onPointerMove);
    removeListener(document2, EVENT_POINTER_UP, this.onPointerUp);
    removeListener(document2, EVENT_KEY_DOWN, this.onKeyDown);
    removeListener(window, EVENT_RESIZE, this.onResize);
    if (options.zoomable && options.zoomOnWheel) {
      removeListener(viewer2, EVENT_WHEEL, this.onWheel, {
        passive: false,
        capture: true
      });
    }
    if (options.toggleOnDblclick) {
      removeListener(canvas, EVENT_DBLCLICK, this.onDblclick);
    }
  }
};
var handlers = {
  click: function click(event) {
    var options = this.options, imageData = this.imageData;
    var target = event.target;
    var action = getData(target, DATA_ACTION);
    if (!action && target.localName === "img" && target.parentElement.localName === "li") {
      target = target.parentElement;
      action = getData(target, DATA_ACTION);
    }
    if (IS_TOUCH_DEVICE && event.isTrusted && target === this.canvas) {
      clearTimeout(this.clickCanvasTimeout);
    }
    switch (action) {
      case "mix":
        if (this.played) {
          this.stop();
        } else if (options.inline) {
          if (this.fulled) {
            this.exit();
          } else {
            this.full();
          }
        } else {
          this.hide();
        }
        break;
      case "hide":
        this.hide();
        break;
      case "view":
        this.view(getData(target, "index"));
        break;
      case "zoom-in":
        this.zoom(0.1, true);
        break;
      case "zoom-out":
        this.zoom(-0.1, true);
        break;
      case "one-to-one":
        this.toggle();
        break;
      case "reset":
        this.reset();
        break;
      case "prev":
        this.prev(options.loop);
        break;
      case "play":
        this.play(options.fullscreen);
        break;
      case "next":
        this.next(options.loop);
        break;
      case "rotate-left":
        this.rotate(-90);
        break;
      case "rotate-right":
        this.rotate(90);
        break;
      case "flip-horizontal":
        this.scaleX(-imageData.scaleX || -1);
        break;
      case "flip-vertical":
        this.scaleY(-imageData.scaleY || -1);
        break;
      default:
        if (this.played) {
          this.stop();
        }
    }
  },
  dblclick: function dblclick(event) {
    event.preventDefault();
    if (this.viewed && event.target === this.image) {
      if (IS_TOUCH_DEVICE && event.isTrusted) {
        clearTimeout(this.doubleClickImageTimeout);
      }
      this.toggle(event.isTrusted ? event : event.detail && event.detail.originalEvent);
    }
  },
  load: function load() {
    var _this = this;
    if (this.timeout) {
      clearTimeout(this.timeout);
      this.timeout = false;
    }
    var element = this.element, options = this.options, image = this.image, index2 = this.index, viewerData = this.viewerData;
    removeClass(image, CLASS_INVISIBLE);
    if (options.loading) {
      removeClass(this.canvas, CLASS_LOADING);
    }
    image.style.cssText = "height:0;" + "margin-left:".concat(viewerData.width / 2, "px;") + "margin-top:".concat(viewerData.height / 2, "px;") + "max-width:none!important;position:relative;width:0;";
    this.initImage(function() {
      toggleClass(image, CLASS_MOVE, options.movable);
      toggleClass(image, CLASS_TRANSITION, options.transition);
      _this.renderImage(function() {
        _this.viewed = true;
        _this.viewing = false;
        if (isFunction$1(options.viewed)) {
          addListener(element, EVENT_VIEWED, options.viewed, {
            once: true
          });
        }
        dispatchEvent(element, EVENT_VIEWED, {
          originalImage: _this.images[index2],
          index: index2,
          image
        }, {
          cancelable: false
        });
      });
    });
  },
  loadImage: function loadImage(event) {
    var image = event.target;
    var parent = image.parentNode;
    var parentWidth = parent.offsetWidth || 30;
    var parentHeight = parent.offsetHeight || 50;
    var filled = !!getData(image, "filled");
    getImageNaturalSizes(image, this.options, function(naturalWidth, naturalHeight) {
      var aspectRatio = naturalWidth / naturalHeight;
      var width = parentWidth;
      var height = parentHeight;
      if (parentHeight * aspectRatio > parentWidth) {
        if (filled) {
          width = parentHeight * aspectRatio;
        } else {
          height = parentWidth / aspectRatio;
        }
      } else if (filled) {
        height = parentWidth / aspectRatio;
      } else {
        width = parentHeight * aspectRatio;
      }
      setStyle(image, assign({
        width,
        height
      }, getTransforms({
        translateX: (parentWidth - width) / 2,
        translateY: (parentHeight - height) / 2
      })));
    });
  },
  keydown: function keydown(event) {
    var options = this.options;
    if (!options.keyboard) {
      return;
    }
    var keyCode = event.keyCode || event.which || event.charCode;
    switch (keyCode) {
      case 13:
        if (this.viewer.contains(event.target)) {
          this.click(event);
        }
        break;
    }
    if (!this.fulled) {
      return;
    }
    switch (keyCode) {
      case 27:
        if (this.played) {
          this.stop();
        } else if (options.inline) {
          if (this.fulled) {
            this.exit();
          }
        } else {
          this.hide();
        }
        break;
      case 32:
        if (this.played) {
          this.stop();
        }
        break;
      case 37:
        this.prev(options.loop);
        break;
      case 38:
        event.preventDefault();
        this.zoom(options.zoomRatio, true);
        break;
      case 39:
        this.next(options.loop);
        break;
      case 40:
        event.preventDefault();
        this.zoom(-options.zoomRatio, true);
        break;
      case 48:
      case 49:
        if (event.ctrlKey) {
          event.preventDefault();
          this.toggle();
        }
        break;
    }
  },
  dragstart: function dragstart(event) {
    if (event.target.localName === "img") {
      event.preventDefault();
    }
  },
  pointerdown: function pointerdown(event) {
    var options = this.options, pointers = this.pointers;
    var buttons = event.buttons, button = event.button;
    if (!this.viewed || this.showing || this.viewing || this.hiding || (event.type === "mousedown" || event.type === "pointerdown" && event.pointerType === "mouse") && (isNumber$1(buttons) && buttons !== 1 || isNumber$1(button) && button !== 0 || event.ctrlKey)) {
      return;
    }
    event.preventDefault();
    if (event.changedTouches) {
      forEach(event.changedTouches, function(touch) {
        pointers[touch.identifier] = getPointer(touch);
      });
    } else {
      pointers[event.pointerId || 0] = getPointer(event);
    }
    var action = options.movable ? ACTION_MOVE : false;
    if (options.zoomOnTouch && options.zoomable && Object.keys(pointers).length > 1) {
      action = ACTION_ZOOM;
    } else if (options.slideOnTouch && (event.pointerType === "touch" || event.type === "touchstart") && this.isSwitchable()) {
      action = ACTION_SWITCH;
    }
    if (options.transition && (action === ACTION_MOVE || action === ACTION_ZOOM)) {
      removeClass(this.image, CLASS_TRANSITION);
    }
    this.action = action;
  },
  pointermove: function pointermove(event) {
    var pointers = this.pointers, action = this.action;
    if (!this.viewed || !action) {
      return;
    }
    event.preventDefault();
    if (event.changedTouches) {
      forEach(event.changedTouches, function(touch) {
        assign(pointers[touch.identifier] || {}, getPointer(touch, true));
      });
    } else {
      assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));
    }
    this.change(event);
  },
  pointerup: function pointerup(event) {
    var _this2 = this;
    var options = this.options, action = this.action, pointers = this.pointers;
    var pointer;
    if (event.changedTouches) {
      forEach(event.changedTouches, function(touch) {
        pointer = pointers[touch.identifier];
        delete pointers[touch.identifier];
      });
    } else {
      pointer = pointers[event.pointerId || 0];
      delete pointers[event.pointerId || 0];
    }
    if (!action) {
      return;
    }
    event.preventDefault();
    if (options.transition && (action === ACTION_MOVE || action === ACTION_ZOOM)) {
      addClass(this.image, CLASS_TRANSITION);
    }
    this.action = false;
    if (IS_TOUCH_DEVICE && action !== ACTION_ZOOM && pointer && Date.now() - pointer.timeStamp < 500) {
      clearTimeout(this.clickCanvasTimeout);
      clearTimeout(this.doubleClickImageTimeout);
      if (options.toggleOnDblclick && this.viewed && event.target === this.image) {
        if (this.imageClicked) {
          this.imageClicked = false;
          this.doubleClickImageTimeout = setTimeout(function() {
            dispatchEvent(_this2.image, EVENT_DBLCLICK, {
              originalEvent: event
            });
          }, 50);
        } else {
          this.imageClicked = true;
          this.doubleClickImageTimeout = setTimeout(function() {
            _this2.imageClicked = false;
          }, 500);
        }
      } else {
        this.imageClicked = false;
        if (options.backdrop && options.backdrop !== "static" && event.target === this.canvas) {
          this.clickCanvasTimeout = setTimeout(function() {
            dispatchEvent(_this2.canvas, EVENT_CLICK, {
              originalEvent: event
            });
          }, 50);
        }
      }
    }
  },
  resize: function resize() {
    var _this3 = this;
    if (!this.isShown || this.hiding) {
      return;
    }
    if (this.fulled) {
      this.close();
      this.initBody();
      this.open();
    }
    this.initContainer();
    this.initViewer();
    this.renderViewer();
    this.renderList();
    if (this.viewed) {
      this.initImage(function() {
        _this3.renderImage();
      });
    }
    if (this.played) {
      if (this.options.fullscreen && this.fulled && !(document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement)) {
        this.stop();
        return;
      }
      forEach(this.player.getElementsByTagName("img"), function(image) {
        addListener(image, EVENT_LOAD, _this3.loadImage.bind(_this3), {
          once: true
        });
        dispatchEvent(image, EVENT_LOAD);
      });
    }
  },
  wheel: function wheel(event) {
    var _this4 = this;
    if (!this.viewed) {
      return;
    }
    event.preventDefault();
    if (this.wheeling) {
      return;
    }
    this.wheeling = true;
    setTimeout(function() {
      _this4.wheeling = false;
    }, 50);
    var ratio = Number(this.options.zoomRatio) || 0.1;
    var delta = 1;
    if (event.deltaY) {
      delta = event.deltaY > 0 ? 1 : -1;
    } else if (event.wheelDelta) {
      delta = -event.wheelDelta / 120;
    } else if (event.detail) {
      delta = event.detail > 0 ? 1 : -1;
    }
    this.zoom(-delta * ratio, true, event);
  }
};
var methods = {
  show: function show() {
    var immediate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var element = this.element, options = this.options;
    if (options.inline || this.showing || this.isShown || this.showing) {
      return this;
    }
    if (!this.ready) {
      this.build();
      if (this.ready) {
        this.show(immediate);
      }
      return this;
    }
    if (isFunction$1(options.show)) {
      addListener(element, EVENT_SHOW, options.show, {
        once: true
      });
    }
    if (dispatchEvent(element, EVENT_SHOW) === false || !this.ready) {
      return this;
    }
    if (this.hiding) {
      this.transitioning.abort();
    }
    this.showing = true;
    this.open();
    var viewer2 = this.viewer;
    removeClass(viewer2, CLASS_HIDE);
    viewer2.setAttribute("role", "dialog");
    viewer2.setAttribute("aria-labelledby", this.title.id);
    viewer2.setAttribute("aria-modal", true);
    viewer2.removeAttribute("aria-hidden");
    if (options.transition && !immediate) {
      var shown2 = this.shown.bind(this);
      this.transitioning = {
        abort: function abort() {
          removeListener(viewer2, EVENT_TRANSITION_END, shown2);
          removeClass(viewer2, CLASS_IN);
        }
      };
      addClass(viewer2, CLASS_TRANSITION);
      viewer2.initialOffsetWidth = viewer2.offsetWidth;
      addListener(viewer2, EVENT_TRANSITION_END, shown2, {
        once: true
      });
      addClass(viewer2, CLASS_IN);
    } else {
      addClass(viewer2, CLASS_IN);
      this.shown();
    }
    return this;
  },
  hide: function hide() {
    var _this = this;
    var immediate = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var element = this.element, options = this.options;
    if (options.inline || this.hiding || !(this.isShown || this.showing)) {
      return this;
    }
    if (isFunction$1(options.hide)) {
      addListener(element, EVENT_HIDE, options.hide, {
        once: true
      });
    }
    if (dispatchEvent(element, EVENT_HIDE) === false) {
      return this;
    }
    if (this.showing) {
      this.transitioning.abort();
    }
    this.hiding = true;
    if (this.played) {
      this.stop();
    } else if (this.viewing) {
      this.viewing.abort();
    }
    var viewer2 = this.viewer, image = this.image;
    var hideImmediately = function hideImmediately2() {
      removeClass(viewer2, CLASS_IN);
      _this.hidden();
    };
    if (options.transition && !immediate) {
      var onViewerTransitionEnd = function onViewerTransitionEnd2(event) {
        if (event && event.target === viewer2) {
          removeListener(viewer2, EVENT_TRANSITION_END, onViewerTransitionEnd2);
          _this.hidden();
        }
      };
      var onImageTransitionEnd = function onImageTransitionEnd2() {
        if (hasClass(viewer2, CLASS_TRANSITION)) {
          addListener(viewer2, EVENT_TRANSITION_END, onViewerTransitionEnd);
          removeClass(viewer2, CLASS_IN);
        } else {
          hideImmediately();
        }
      };
      this.transitioning = {
        abort: function abort() {
          if (_this.viewed && hasClass(image, CLASS_TRANSITION)) {
            removeListener(image, EVENT_TRANSITION_END, onImageTransitionEnd);
          } else if (hasClass(viewer2, CLASS_TRANSITION)) {
            removeListener(viewer2, EVENT_TRANSITION_END, onViewerTransitionEnd);
          }
        }
      };
      if (this.viewed && hasClass(image, CLASS_TRANSITION)) {
        addListener(image, EVENT_TRANSITION_END, onImageTransitionEnd, {
          once: true
        });
        this.zoomTo(0, false, null, true);
      } else {
        onImageTransitionEnd();
      }
    } else {
      hideImmediately();
    }
    return this;
  },
  view: function view() {
    var _this2 = this;
    var index2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.options.initialViewIndex;
    index2 = Number(index2) || 0;
    if (this.hiding || this.played || index2 < 0 || index2 >= this.length || this.viewed && index2 === this.index) {
      return this;
    }
    if (!this.isShown) {
      this.index = index2;
      return this.show();
    }
    if (this.viewing) {
      this.viewing.abort();
    }
    var element = this.element, options = this.options, title = this.title, canvas = this.canvas;
    var item2 = this.items[index2];
    var img = item2.querySelector("img");
    var url = getData(img, "originalUrl");
    var alt = img.getAttribute("alt");
    var image = document.createElement("img");
    forEach(options.inheritedAttributes, function(name) {
      var value = img.getAttribute(name);
      if (value !== null) {
        image.setAttribute(name, value);
      }
    });
    image.src = url;
    image.alt = alt;
    if (isFunction$1(options.view)) {
      addListener(element, EVENT_VIEW, options.view, {
        once: true
      });
    }
    if (dispatchEvent(element, EVENT_VIEW, {
      originalImage: this.images[index2],
      index: index2,
      image
    }) === false || !this.isShown || this.hiding || this.played) {
      return this;
    }
    var activeItem = this.items[this.index];
    if (activeItem) {
      removeClass(activeItem, CLASS_ACTIVE);
      activeItem.removeAttribute("aria-selected");
    }
    addClass(item2, CLASS_ACTIVE);
    item2.setAttribute("aria-selected", true);
    if (options.focus) {
      item2.focus();
    }
    this.image = image;
    this.viewed = false;
    this.index = index2;
    this.imageData = {};
    addClass(image, CLASS_INVISIBLE);
    if (options.loading) {
      addClass(canvas, CLASS_LOADING);
    }
    canvas.innerHTML = "";
    canvas.appendChild(image);
    this.renderList();
    title.innerHTML = "";
    var onViewed = function onViewed2() {
      var imageData = _this2.imageData;
      var render3 = Array.isArray(options.title) ? options.title[1] : options.title;
      title.innerHTML = escapeHTMLEntities(isFunction$1(render3) ? render3.call(_this2, image, imageData) : "".concat(alt, " (").concat(imageData.naturalWidth, " \xD7 ").concat(imageData.naturalHeight, ")"));
    };
    var onLoad;
    var onError;
    addListener(element, EVENT_VIEWED, onViewed, {
      once: true
    });
    this.viewing = {
      abort: function abort() {
        removeListener(element, EVENT_VIEWED, onViewed);
        if (image.complete) {
          if (_this2.imageRendering) {
            _this2.imageRendering.abort();
          } else if (_this2.imageInitializing) {
            _this2.imageInitializing.abort();
          }
        } else {
          image.src = "";
          removeListener(image, EVENT_LOAD, onLoad);
          if (_this2.timeout) {
            clearTimeout(_this2.timeout);
          }
        }
      }
    };
    if (image.complete) {
      this.load();
    } else {
      addListener(image, EVENT_LOAD, onLoad = function onLoad2() {
        removeListener(image, EVENT_ERROR, onError);
        _this2.load();
      }, {
        once: true
      });
      addListener(image, EVENT_ERROR, onError = function onError2() {
        removeListener(image, EVENT_LOAD, onLoad);
        if (_this2.timeout) {
          clearTimeout(_this2.timeout);
          _this2.timeout = false;
        }
        removeClass(image, CLASS_INVISIBLE);
        if (options.loading) {
          removeClass(_this2.canvas, CLASS_LOADING);
        }
      }, {
        once: true
      });
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
      this.timeout = setTimeout(function() {
        removeClass(image, CLASS_INVISIBLE);
        _this2.timeout = false;
      }, 1e3);
    }
    return this;
  },
  prev: function prev() {
    var loop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var index2 = this.index - 1;
    if (index2 < 0) {
      index2 = loop ? this.length - 1 : 0;
    }
    this.view(index2);
    return this;
  },
  next: function next() {
    var loop = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    var maxIndex = this.length - 1;
    var index2 = this.index + 1;
    if (index2 > maxIndex) {
      index2 = loop ? 0 : maxIndex;
    }
    this.view(index2);
    return this;
  },
  move: function move(x) {
    var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : x;
    var imageData = this.imageData;
    this.moveTo(isUndefined$1(x) ? x : imageData.x + Number(x), isUndefined$1(y) ? y : imageData.y + Number(y));
    return this;
  },
  moveTo: function moveTo(x) {
    var _this3 = this;
    var y = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : x;
    var _originalEvent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var element = this.element, options = this.options, imageData = this.imageData;
    x = Number(x);
    y = Number(y);
    if (this.viewed && !this.played && options.movable) {
      var oldX = imageData.x;
      var oldY = imageData.y;
      var changed = false;
      if (isNumber$1(x)) {
        changed = true;
      } else {
        x = oldX;
      }
      if (isNumber$1(y)) {
        changed = true;
      } else {
        y = oldY;
      }
      if (changed) {
        if (isFunction$1(options.move)) {
          addListener(element, EVENT_MOVE, options.move, {
            once: true
          });
        }
        if (dispatchEvent(element, EVENT_MOVE, {
          x,
          y,
          oldX,
          oldY,
          originalEvent: _originalEvent
        }) === false) {
          return this;
        }
        imageData.x = x;
        imageData.y = y;
        imageData.left = x;
        imageData.top = y;
        this.moving = true;
        this.renderImage(function() {
          _this3.moving = false;
          if (isFunction$1(options.moved)) {
            addListener(element, EVENT_MOVED, options.moved, {
              once: true
            });
          }
          dispatchEvent(element, EVENT_MOVED, {
            x,
            y,
            oldX,
            oldY,
            originalEvent: _originalEvent
          }, {
            cancelable: false
          });
        });
      }
    }
    return this;
  },
  rotate: function rotate(degree) {
    this.rotateTo((this.imageData.rotate || 0) + Number(degree));
    return this;
  },
  rotateTo: function rotateTo(degree) {
    var _this4 = this;
    var element = this.element, options = this.options, imageData = this.imageData;
    degree = Number(degree);
    if (isNumber$1(degree) && this.viewed && !this.played && options.rotatable) {
      var oldDegree = imageData.rotate;
      if (isFunction$1(options.rotate)) {
        addListener(element, EVENT_ROTATE, options.rotate, {
          once: true
        });
      }
      if (dispatchEvent(element, EVENT_ROTATE, {
        degree,
        oldDegree
      }) === false) {
        return this;
      }
      imageData.rotate = degree;
      this.rotating = true;
      this.renderImage(function() {
        _this4.rotating = false;
        if (isFunction$1(options.rotated)) {
          addListener(element, EVENT_ROTATED, options.rotated, {
            once: true
          });
        }
        dispatchEvent(element, EVENT_ROTATED, {
          degree,
          oldDegree
        }, {
          cancelable: false
        });
      });
    }
    return this;
  },
  scaleX: function scaleX(_scaleX) {
    this.scale(_scaleX, this.imageData.scaleY);
    return this;
  },
  scaleY: function scaleY(_scaleY) {
    this.scale(this.imageData.scaleX, _scaleY);
    return this;
  },
  scale: function scale(scaleX2) {
    var _this5 = this;
    var scaleY2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : scaleX2;
    var element = this.element, options = this.options, imageData = this.imageData;
    scaleX2 = Number(scaleX2);
    scaleY2 = Number(scaleY2);
    if (this.viewed && !this.played && options.scalable) {
      var oldScaleX = imageData.scaleX;
      var oldScaleY = imageData.scaleY;
      var changed = false;
      if (isNumber$1(scaleX2)) {
        changed = true;
      } else {
        scaleX2 = oldScaleX;
      }
      if (isNumber$1(scaleY2)) {
        changed = true;
      } else {
        scaleY2 = oldScaleY;
      }
      if (changed) {
        if (isFunction$1(options.scale)) {
          addListener(element, EVENT_SCALE, options.scale, {
            once: true
          });
        }
        if (dispatchEvent(element, EVENT_SCALE, {
          scaleX: scaleX2,
          scaleY: scaleY2,
          oldScaleX,
          oldScaleY
        }) === false) {
          return this;
        }
        imageData.scaleX = scaleX2;
        imageData.scaleY = scaleY2;
        this.scaling = true;
        this.renderImage(function() {
          _this5.scaling = false;
          if (isFunction$1(options.scaled)) {
            addListener(element, EVENT_SCALED, options.scaled, {
              once: true
            });
          }
          dispatchEvent(element, EVENT_SCALED, {
            scaleX: scaleX2,
            scaleY: scaleY2,
            oldScaleX,
            oldScaleY
          }, {
            cancelable: false
          });
        });
      }
    }
    return this;
  },
  zoom: function zoom(ratio) {
    var hasTooltip = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var _originalEvent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var imageData = this.imageData;
    ratio = Number(ratio);
    if (ratio < 0) {
      ratio = 1 / (1 - ratio);
    } else {
      ratio = 1 + ratio;
    }
    this.zoomTo(imageData.width * ratio / imageData.naturalWidth, hasTooltip, _originalEvent);
    return this;
  },
  zoomTo: function zoomTo(ratio) {
    var _this6 = this;
    var hasTooltip = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    var _originalEvent = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
    var _zoomable = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    var element = this.element, options = this.options, pointers = this.pointers, imageData = this.imageData;
    var x = imageData.x, y = imageData.y, width = imageData.width, height = imageData.height, naturalWidth = imageData.naturalWidth, naturalHeight = imageData.naturalHeight;
    ratio = Math.max(0, ratio);
    if (isNumber$1(ratio) && this.viewed && !this.played && (_zoomable || options.zoomable)) {
      if (!_zoomable) {
        var minZoomRatio = Math.max(0.01, options.minZoomRatio);
        var maxZoomRatio = Math.min(100, options.maxZoomRatio);
        ratio = Math.min(Math.max(ratio, minZoomRatio), maxZoomRatio);
      }
      if (_originalEvent) {
        switch (_originalEvent.type) {
          case "wheel":
            if (options.zoomRatio >= 0.055 && ratio > 0.95 && ratio < 1.05) {
              ratio = 1;
            }
            break;
          case "pointermove":
          case "touchmove":
          case "mousemove":
            if (ratio > 0.99 && ratio < 1.01) {
              ratio = 1;
            }
            break;
        }
      }
      var newWidth = naturalWidth * ratio;
      var newHeight = naturalHeight * ratio;
      var offsetWidth = newWidth - width;
      var offsetHeight = newHeight - height;
      var oldRatio = imageData.ratio;
      if (isFunction$1(options.zoom)) {
        addListener(element, EVENT_ZOOM, options.zoom, {
          once: true
        });
      }
      if (dispatchEvent(element, EVENT_ZOOM, {
        ratio,
        oldRatio,
        originalEvent: _originalEvent
      }) === false) {
        return this;
      }
      this.zooming = true;
      if (_originalEvent) {
        var offset2 = getOffset(this.viewer);
        var center = pointers && Object.keys(pointers).length > 0 ? getPointersCenter(pointers) : {
          pageX: _originalEvent.pageX,
          pageY: _originalEvent.pageY
        };
        imageData.x -= offsetWidth * ((center.pageX - offset2.left - x) / width);
        imageData.y -= offsetHeight * ((center.pageY - offset2.top - y) / height);
      } else {
        imageData.x -= offsetWidth / 2;
        imageData.y -= offsetHeight / 2;
      }
      imageData.left = imageData.x;
      imageData.top = imageData.y;
      imageData.width = newWidth;
      imageData.height = newHeight;
      imageData.oldRatio = oldRatio;
      imageData.ratio = ratio;
      this.renderImage(function() {
        _this6.zooming = false;
        if (isFunction$1(options.zoomed)) {
          addListener(element, EVENT_ZOOMED, options.zoomed, {
            once: true
          });
        }
        dispatchEvent(element, EVENT_ZOOMED, {
          ratio,
          oldRatio,
          originalEvent: _originalEvent
        }, {
          cancelable: false
        });
      });
      if (hasTooltip) {
        this.tooltip();
      }
    }
    return this;
  },
  play: function play() {
    var _this7 = this;
    var fullscreen = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
    if (!this.isShown || this.played) {
      return this;
    }
    var element = this.element, options = this.options;
    if (isFunction$1(options.play)) {
      addListener(element, EVENT_PLAY, options.play, {
        once: true
      });
    }
    if (dispatchEvent(element, EVENT_PLAY) === false) {
      return this;
    }
    var player = this.player;
    var onLoad = this.loadImage.bind(this);
    var list = [];
    var total = 0;
    var index2 = 0;
    this.played = true;
    this.onLoadWhenPlay = onLoad;
    if (fullscreen) {
      this.requestFullscreen(fullscreen);
    }
    addClass(player, CLASS_SHOW);
    forEach(this.items, function(item2, i2) {
      var img = item2.querySelector("img");
      var image = document.createElement("img");
      image.src = getData(img, "originalUrl");
      image.alt = img.getAttribute("alt");
      image.referrerPolicy = img.referrerPolicy;
      total += 1;
      addClass(image, CLASS_FADE);
      toggleClass(image, CLASS_TRANSITION, options.transition);
      if (hasClass(item2, CLASS_ACTIVE)) {
        addClass(image, CLASS_IN);
        index2 = i2;
      }
      list.push(image);
      addListener(image, EVENT_LOAD, onLoad, {
        once: true
      });
      player.appendChild(image);
    });
    if (isNumber$1(options.interval) && options.interval > 0) {
      var play2 = function play3() {
        _this7.playing = setTimeout(function() {
          removeClass(list[index2], CLASS_IN);
          index2 += 1;
          index2 = index2 < total ? index2 : 0;
          addClass(list[index2], CLASS_IN);
          play3();
        }, options.interval);
      };
      if (total > 1) {
        play2();
      }
    }
    return this;
  },
  stop: function stop() {
    var _this8 = this;
    if (!this.played) {
      return this;
    }
    var element = this.element, options = this.options;
    if (isFunction$1(options.stop)) {
      addListener(element, EVENT_STOP, options.stop, {
        once: true
      });
    }
    if (dispatchEvent(element, EVENT_STOP) === false) {
      return this;
    }
    var player = this.player;
    this.played = false;
    clearTimeout(this.playing);
    forEach(player.getElementsByTagName("img"), function(image) {
      removeListener(image, EVENT_LOAD, _this8.onLoadWhenPlay);
    });
    removeClass(player, CLASS_SHOW);
    player.innerHTML = "";
    this.exitFullscreen();
    return this;
  },
  full: function full() {
    var _this9 = this;
    var options = this.options, viewer2 = this.viewer, image = this.image, list = this.list;
    if (!this.isShown || this.played || this.fulled || !options.inline) {
      return this;
    }
    this.fulled = true;
    this.open();
    addClass(this.button, CLASS_FULLSCREEN_EXIT);
    if (options.transition) {
      removeClass(list, CLASS_TRANSITION);
      if (this.viewed) {
        removeClass(image, CLASS_TRANSITION);
      }
    }
    addClass(viewer2, CLASS_FIXED);
    viewer2.setAttribute("role", "dialog");
    viewer2.setAttribute("aria-labelledby", this.title.id);
    viewer2.setAttribute("aria-modal", true);
    viewer2.removeAttribute("style");
    setStyle(viewer2, {
      zIndex: options.zIndex
    });
    if (options.focus) {
      this.enforceFocus();
    }
    this.initContainer();
    this.viewerData = assign({}, this.containerData);
    this.renderList();
    if (this.viewed) {
      this.initImage(function() {
        _this9.renderImage(function() {
          if (options.transition) {
            setTimeout(function() {
              addClass(image, CLASS_TRANSITION);
              addClass(list, CLASS_TRANSITION);
            }, 0);
          }
        });
      });
    }
    return this;
  },
  exit: function exit() {
    var _this10 = this;
    var options = this.options, viewer2 = this.viewer, image = this.image, list = this.list;
    if (!this.isShown || this.played || !this.fulled || !options.inline) {
      return this;
    }
    this.fulled = false;
    this.close();
    removeClass(this.button, CLASS_FULLSCREEN_EXIT);
    if (options.transition) {
      removeClass(list, CLASS_TRANSITION);
      if (this.viewed) {
        removeClass(image, CLASS_TRANSITION);
      }
    }
    if (options.focus) {
      this.clearEnforceFocus();
    }
    viewer2.removeAttribute("role");
    viewer2.removeAttribute("aria-labelledby");
    viewer2.removeAttribute("aria-modal");
    removeClass(viewer2, CLASS_FIXED);
    setStyle(viewer2, {
      zIndex: options.zIndexInline
    });
    this.viewerData = assign({}, this.parentData);
    this.renderViewer();
    this.renderList();
    if (this.viewed) {
      this.initImage(function() {
        _this10.renderImage(function() {
          if (options.transition) {
            setTimeout(function() {
              addClass(image, CLASS_TRANSITION);
              addClass(list, CLASS_TRANSITION);
            }, 0);
          }
        });
      });
    }
    return this;
  },
  tooltip: function tooltip() {
    var _this11 = this;
    var options = this.options, tooltipBox = this.tooltipBox, imageData = this.imageData;
    if (!this.viewed || this.played || !options.tooltip) {
      return this;
    }
    tooltipBox.textContent = "".concat(Math.round(imageData.ratio * 100), "%");
    if (!this.tooltipping) {
      if (options.transition) {
        if (this.fading) {
          dispatchEvent(tooltipBox, EVENT_TRANSITION_END);
        }
        addClass(tooltipBox, CLASS_SHOW);
        addClass(tooltipBox, CLASS_FADE);
        addClass(tooltipBox, CLASS_TRANSITION);
        tooltipBox.removeAttribute("aria-hidden");
        tooltipBox.initialOffsetWidth = tooltipBox.offsetWidth;
        addClass(tooltipBox, CLASS_IN);
      } else {
        addClass(tooltipBox, CLASS_SHOW);
        tooltipBox.removeAttribute("aria-hidden");
      }
    } else {
      clearTimeout(this.tooltipping);
    }
    this.tooltipping = setTimeout(function() {
      if (options.transition) {
        addListener(tooltipBox, EVENT_TRANSITION_END, function() {
          removeClass(tooltipBox, CLASS_SHOW);
          removeClass(tooltipBox, CLASS_FADE);
          removeClass(tooltipBox, CLASS_TRANSITION);
          tooltipBox.setAttribute("aria-hidden", true);
          _this11.fading = false;
        }, {
          once: true
        });
        removeClass(tooltipBox, CLASS_IN);
        _this11.fading = true;
      } else {
        removeClass(tooltipBox, CLASS_SHOW);
        tooltipBox.setAttribute("aria-hidden", true);
      }
      _this11.tooltipping = false;
    }, 1e3);
    return this;
  },
  toggle: function toggle() {
    var _originalEvent = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
    if (this.imageData.ratio === 1) {
      this.zoomTo(this.imageData.oldRatio, true, _originalEvent);
    } else {
      this.zoomTo(1, true, _originalEvent);
    }
    return this;
  },
  reset: function reset() {
    if (this.viewed && !this.played) {
      this.imageData = assign({}, this.initialImageData);
      this.renderImage();
    }
    return this;
  },
  update: function update() {
    var _this12 = this;
    var element = this.element, options = this.options, isImg = this.isImg;
    if (isImg && !element.parentNode) {
      return this.destroy();
    }
    var images = [];
    forEach(isImg ? [element] : element.querySelectorAll("img"), function(image) {
      if (isFunction$1(options.filter)) {
        if (options.filter.call(_this12, image)) {
          images.push(image);
        }
      } else if (_this12.getImageURL(image)) {
        images.push(image);
      }
    });
    if (!images.length) {
      return this;
    }
    this.images = images;
    this.length = images.length;
    if (this.ready) {
      var changedIndexes = [];
      forEach(this.items, function(item2, i2) {
        var img = item2.querySelector("img");
        var image = images[i2];
        if (image && img) {
          if (image.src !== img.src || image.alt !== img.alt) {
            changedIndexes.push(i2);
          }
        } else {
          changedIndexes.push(i2);
        }
      });
      setStyle(this.list, {
        width: "auto"
      });
      this.initList();
      if (this.isShown) {
        if (this.length) {
          if (this.viewed) {
            var changedIndex = changedIndexes.indexOf(this.index);
            if (changedIndex >= 0) {
              this.viewed = false;
              this.view(Math.max(Math.min(this.index - changedIndex, this.length - 1), 0));
            } else {
              var activeItem = this.items[this.index];
              addClass(activeItem, CLASS_ACTIVE);
              activeItem.setAttribute("aria-selected", true);
            }
          }
        } else {
          this.image = null;
          this.viewed = false;
          this.index = 0;
          this.imageData = {};
          this.canvas.innerHTML = "";
          this.title.innerHTML = "";
        }
      }
    } else {
      this.build();
    }
    return this;
  },
  destroy: function destroy2() {
    var element = this.element, options = this.options;
    if (!element[NAMESPACE]) {
      return this;
    }
    this.destroyed = true;
    if (this.ready) {
      if (this.played) {
        this.stop();
      }
      if (options.inline) {
        if (this.fulled) {
          this.exit();
        }
        this.unbind();
      } else if (this.isShown) {
        if (this.viewing) {
          if (this.imageRendering) {
            this.imageRendering.abort();
          } else if (this.imageInitializing) {
            this.imageInitializing.abort();
          }
        }
        if (this.hiding) {
          this.transitioning.abort();
        }
        this.hidden();
      } else if (this.showing) {
        this.transitioning.abort();
        this.hidden();
      }
      this.ready = false;
      this.viewer.parentNode.removeChild(this.viewer);
    } else if (options.inline) {
      if (this.delaying) {
        this.delaying.abort();
      } else if (this.initializing) {
        this.initializing.abort();
      }
    }
    if (!options.inline) {
      removeListener(element, EVENT_CLICK, this.onStart);
    }
    element[NAMESPACE] = void 0;
    return this;
  }
};
var others = {
  getImageURL: function getImageURL(image) {
    var url = this.options.url;
    if (isString$1(url)) {
      url = image.getAttribute(url);
    } else if (isFunction$1(url)) {
      url = url.call(this, image);
    } else {
      url = "";
    }
    return url;
  },
  enforceFocus: function enforceFocus() {
    var _this = this;
    this.clearEnforceFocus();
    addListener(document, EVENT_FOCUSIN, this.onFocusin = function(event) {
      var viewer2 = _this.viewer;
      var target = event.target;
      if (target === document || target === viewer2 || viewer2.contains(target)) {
        return;
      }
      while (target) {
        if (target.getAttribute("tabindex") !== null || target.getAttribute("aria-modal") === "true") {
          return;
        }
        target = target.parentElement;
      }
      viewer2.focus();
    });
  },
  clearEnforceFocus: function clearEnforceFocus() {
    if (this.onFocusin) {
      removeListener(document, EVENT_FOCUSIN, this.onFocusin);
      this.onFocusin = null;
    }
  },
  open: function open() {
    var body = this.body;
    addClass(body, CLASS_OPEN);
    body.style.paddingRight = "".concat(this.scrollbarWidth + (parseFloat(this.initialBodyComputedPaddingRight) || 0), "px");
  },
  close: function close() {
    var body = this.body;
    removeClass(body, CLASS_OPEN);
    body.style.paddingRight = this.initialBodyPaddingRight;
  },
  shown: function shown() {
    var element = this.element, options = this.options, viewer2 = this.viewer;
    this.fulled = true;
    this.isShown = true;
    this.render();
    this.bind();
    this.showing = false;
    if (options.focus) {
      viewer2.focus();
      this.enforceFocus();
    }
    if (isFunction$1(options.shown)) {
      addListener(element, EVENT_SHOWN, options.shown, {
        once: true
      });
    }
    if (dispatchEvent(element, EVENT_SHOWN) === false) {
      return;
    }
    if (this.ready && this.isShown && !this.hiding) {
      this.view(this.index);
    }
  },
  hidden: function hidden() {
    var element = this.element, options = this.options, viewer2 = this.viewer;
    if (options.fucus) {
      this.clearEnforceFocus();
    }
    this.fulled = false;
    this.viewed = false;
    this.isShown = false;
    this.close();
    this.unbind();
    addClass(viewer2, CLASS_HIDE);
    viewer2.removeAttribute("role");
    viewer2.removeAttribute("aria-labelledby");
    viewer2.removeAttribute("aria-modal");
    viewer2.setAttribute("aria-hidden", true);
    this.resetList();
    this.resetImage();
    this.hiding = false;
    if (!this.destroyed) {
      if (isFunction$1(options.hidden)) {
        addListener(element, EVENT_HIDDEN, options.hidden, {
          once: true
        });
      }
      dispatchEvent(element, EVENT_HIDDEN, null, {
        cancelable: false
      });
    }
  },
  requestFullscreen: function requestFullscreen(options) {
    var document2 = this.element.ownerDocument;
    if (this.fulled && !(document2.fullscreenElement || document2.webkitFullscreenElement || document2.mozFullScreenElement || document2.msFullscreenElement)) {
      var documentElement = document2.documentElement;
      if (documentElement.requestFullscreen) {
        if (isPlainObject(options)) {
          documentElement.requestFullscreen(options);
        } else {
          documentElement.requestFullscreen();
        }
      } else if (documentElement.webkitRequestFullscreen) {
        documentElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
      } else if (documentElement.mozRequestFullScreen) {
        documentElement.mozRequestFullScreen();
      } else if (documentElement.msRequestFullscreen) {
        documentElement.msRequestFullscreen();
      }
    }
  },
  exitFullscreen: function exitFullscreen() {
    var document2 = this.element.ownerDocument;
    if (this.fulled && (document2.fullscreenElement || document2.webkitFullscreenElement || document2.mozFullScreenElement || document2.msFullscreenElement)) {
      if (document2.exitFullscreen) {
        document2.exitFullscreen();
      } else if (document2.webkitExitFullscreen) {
        document2.webkitExitFullscreen();
      } else if (document2.mozCancelFullScreen) {
        document2.mozCancelFullScreen();
      } else if (document2.msExitFullscreen) {
        document2.msExitFullscreen();
      }
    }
  },
  change: function change(event) {
    var options = this.options, pointers = this.pointers;
    var pointer = pointers[Object.keys(pointers)[0]];
    if (!pointer) {
      return;
    }
    var offsetX = pointer.endX - pointer.startX;
    var offsetY = pointer.endY - pointer.startY;
    switch (this.action) {
      case ACTION_MOVE:
        this.move(offsetX, offsetY, event);
        break;
      case ACTION_ZOOM:
        this.zoom(getMaxZoomRatio(pointers), false, event);
        break;
      case ACTION_SWITCH: {
        this.action = "switched";
        var absoluteOffsetX = Math.abs(offsetX);
        if (absoluteOffsetX > 1 && absoluteOffsetX > Math.abs(offsetY)) {
          this.pointers = {};
          if (offsetX > 1) {
            this.prev(options.loop);
          } else if (offsetX < -1) {
            this.next(options.loop);
          }
        }
        break;
      }
    }
    forEach(pointers, function(p) {
      p.startX = p.endX;
      p.startY = p.endY;
    });
  },
  isSwitchable: function isSwitchable() {
    var imageData = this.imageData, viewerData = this.viewerData;
    return this.length > 1 && imageData.x >= 0 && imageData.y >= 0 && imageData.width <= viewerData.width && imageData.height <= viewerData.height;
  }
};
var AnotherViewer = WINDOW.Viewer;
var getUniqueID = function(id) {
  return function() {
    id += 1;
    return id;
  };
}(-1);
var Viewer$1 = /* @__PURE__ */ function() {
  function Viewer2(element) {
    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    _classCallCheck(this, Viewer2);
    if (!element || element.nodeType !== 1) {
      throw new Error("The first argument is required and must be an element.");
    }
    this.element = element;
    this.options = assign({}, DEFAULTS, isPlainObject(options) && options);
    this.action = false;
    this.fading = false;
    this.fulled = false;
    this.hiding = false;
    this.imageClicked = false;
    this.imageData = {};
    this.index = this.options.initialViewIndex;
    this.isImg = false;
    this.isShown = false;
    this.length = 0;
    this.moving = false;
    this.played = false;
    this.playing = false;
    this.pointers = {};
    this.ready = false;
    this.rotating = false;
    this.scaling = false;
    this.showing = false;
    this.timeout = false;
    this.tooltipping = false;
    this.viewed = false;
    this.viewing = false;
    this.wheeling = false;
    this.zooming = false;
    this.id = getUniqueID();
    this.init();
  }
  _createClass(Viewer2, [{
    key: "init",
    value: function init() {
      var _this = this;
      var element = this.element, options = this.options;
      if (element[NAMESPACE]) {
        return;
      }
      element[NAMESPACE] = this;
      if (options.focus && !options.keyboard) {
        options.focus = false;
      }
      var isImg = element.localName === "img";
      var images = [];
      forEach(isImg ? [element] : element.querySelectorAll("img"), function(image) {
        if (isFunction$1(options.filter)) {
          if (options.filter.call(_this, image)) {
            images.push(image);
          }
        } else if (_this.getImageURL(image)) {
          images.push(image);
        }
      });
      this.isImg = isImg;
      this.length = images.length;
      this.images = images;
      this.initBody();
      if (isUndefined$1(document.createElement(NAMESPACE).style.transition)) {
        options.transition = false;
      }
      if (options.inline) {
        var count = 0;
        var progress = function progress2() {
          count += 1;
          if (count === _this.length) {
            var timeout;
            _this.initializing = false;
            _this.delaying = {
              abort: function abort() {
                clearTimeout(timeout);
              }
            };
            timeout = setTimeout(function() {
              _this.delaying = false;
              _this.build();
            }, 0);
          }
        };
        this.initializing = {
          abort: function abort() {
            forEach(images, function(image) {
              if (!image.complete) {
                removeListener(image, EVENT_LOAD, progress);
                removeListener(image, EVENT_ERROR, progress);
              }
            });
          }
        };
        forEach(images, function(image) {
          if (image.complete) {
            progress();
          } else {
            var onLoad;
            var onError;
            addListener(image, EVENT_LOAD, onLoad = function onLoad2() {
              removeListener(image, EVENT_ERROR, onError);
              progress();
            }, {
              once: true
            });
            addListener(image, EVENT_ERROR, onError = function onError2() {
              removeListener(image, EVENT_LOAD, onLoad);
              progress();
            }, {
              once: true
            });
          }
        });
      } else {
        addListener(element, EVENT_CLICK, this.onStart = function(_ref) {
          var target = _ref.target;
          if (target.localName === "img" && (!isFunction$1(options.filter) || options.filter.call(_this, target))) {
            _this.view(_this.images.indexOf(target));
          }
        });
      }
    }
  }, {
    key: "build",
    value: function build() {
      if (this.ready) {
        return;
      }
      var element = this.element, options = this.options;
      var parent = element.parentNode;
      var template = document.createElement("div");
      template.innerHTML = TEMPLATE;
      var viewer2 = template.querySelector(".".concat(NAMESPACE, "-container"));
      var title = viewer2.querySelector(".".concat(NAMESPACE, "-title"));
      var toolbar = viewer2.querySelector(".".concat(NAMESPACE, "-toolbar"));
      var navbar = viewer2.querySelector(".".concat(NAMESPACE, "-navbar"));
      var button = viewer2.querySelector(".".concat(NAMESPACE, "-button"));
      var canvas = viewer2.querySelector(".".concat(NAMESPACE, "-canvas"));
      this.parent = parent;
      this.viewer = viewer2;
      this.title = title;
      this.toolbar = toolbar;
      this.navbar = navbar;
      this.button = button;
      this.canvas = canvas;
      this.footer = viewer2.querySelector(".".concat(NAMESPACE, "-footer"));
      this.tooltipBox = viewer2.querySelector(".".concat(NAMESPACE, "-tooltip"));
      this.player = viewer2.querySelector(".".concat(NAMESPACE, "-player"));
      this.list = viewer2.querySelector(".".concat(NAMESPACE, "-list"));
      viewer2.id = "".concat(NAMESPACE).concat(this.id);
      title.id = "".concat(NAMESPACE, "Title").concat(this.id);
      addClass(title, !options.title ? CLASS_HIDE : getResponsiveClass(Array.isArray(options.title) ? options.title[0] : options.title));
      addClass(navbar, !options.navbar ? CLASS_HIDE : getResponsiveClass(options.navbar));
      toggleClass(button, CLASS_HIDE, !options.button);
      if (options.keyboard) {
        button.setAttribute("tabindex", 0);
      }
      if (options.backdrop) {
        addClass(viewer2, "".concat(NAMESPACE, "-backdrop"));
        if (!options.inline && options.backdrop !== "static") {
          setData(canvas, DATA_ACTION, "hide");
        }
      }
      if (isString$1(options.className) && options.className) {
        options.className.split(REGEXP_SPACES).forEach(function(className) {
          addClass(viewer2, className);
        });
      }
      if (options.toolbar) {
        var list = document.createElement("ul");
        var custom = isPlainObject(options.toolbar);
        var zoomButtons = BUTTONS.slice(0, 3);
        var rotateButtons = BUTTONS.slice(7, 9);
        var scaleButtons = BUTTONS.slice(9);
        if (!custom) {
          addClass(toolbar, getResponsiveClass(options.toolbar));
        }
        forEach(custom ? options.toolbar : BUTTONS, function(value, index2) {
          var deep = custom && isPlainObject(value);
          var name = custom ? hyphenate(index2) : value;
          var show2 = deep && !isUndefined$1(value.show) ? value.show : value;
          if (!show2 || !options.zoomable && zoomButtons.indexOf(name) !== -1 || !options.rotatable && rotateButtons.indexOf(name) !== -1 || !options.scalable && scaleButtons.indexOf(name) !== -1) {
            return;
          }
          var size = deep && !isUndefined$1(value.size) ? value.size : value;
          var click2 = deep && !isUndefined$1(value.click) ? value.click : value;
          var item2 = document.createElement("li");
          if (options.keyboard) {
            item2.setAttribute("tabindex", 0);
          }
          item2.setAttribute("role", "button");
          addClass(item2, "".concat(NAMESPACE, "-").concat(name));
          if (!isFunction$1(click2)) {
            setData(item2, DATA_ACTION, name);
          }
          if (isNumber$1(show2)) {
            addClass(item2, getResponsiveClass(show2));
          }
          if (["small", "large"].indexOf(size) !== -1) {
            addClass(item2, "".concat(NAMESPACE, "-").concat(size));
          } else if (name === "play") {
            addClass(item2, "".concat(NAMESPACE, "-large"));
          }
          if (isFunction$1(click2)) {
            addListener(item2, EVENT_CLICK, click2);
          }
          list.appendChild(item2);
        });
        toolbar.appendChild(list);
      } else {
        addClass(toolbar, CLASS_HIDE);
      }
      if (!options.rotatable) {
        var rotates = toolbar.querySelectorAll('li[class*="rotate"]');
        addClass(rotates, CLASS_INVISIBLE);
        forEach(rotates, function(rotate2) {
          toolbar.appendChild(rotate2);
        });
      }
      if (options.inline) {
        addClass(button, CLASS_FULLSCREEN);
        setStyle(viewer2, {
          zIndex: options.zIndexInline
        });
        if (window.getComputedStyle(parent).position === "static") {
          setStyle(parent, {
            position: "relative"
          });
        }
        parent.insertBefore(viewer2, element.nextSibling);
      } else {
        addClass(button, CLASS_CLOSE);
        addClass(viewer2, CLASS_FIXED);
        addClass(viewer2, CLASS_FADE);
        addClass(viewer2, CLASS_HIDE);
        setStyle(viewer2, {
          zIndex: options.zIndex
        });
        var container = options.container;
        if (isString$1(container)) {
          container = element.ownerDocument.querySelector(container);
        }
        if (!container) {
          container = this.body;
        }
        container.appendChild(viewer2);
      }
      if (options.inline) {
        this.render();
        this.bind();
        this.isShown = true;
      }
      this.ready = true;
      if (isFunction$1(options.ready)) {
        addListener(element, EVENT_READY, options.ready, {
          once: true
        });
      }
      if (dispatchEvent(element, EVENT_READY) === false) {
        this.ready = false;
        return;
      }
      if (this.ready && options.inline) {
        this.view(this.index);
      }
    }
  }], [{
    key: "noConflict",
    value: function noConflict() {
      window.Viewer = AnotherViewer;
      return Viewer2;
    }
  }, {
    key: "setDefaults",
    value: function setDefaults(options) {
      assign(DEFAULTS, isPlainObject(options) && options);
    }
  }]);
  return Viewer2;
}();
assign(Viewer$1.prototype, render, events, handlers, methods, others);
var __extends$3 = globalThis && globalThis.__extends || function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var QiniuErrorName;
(function(QiniuErrorName2) {
  QiniuErrorName2["InvalidFile"] = "InvalidFile";
  QiniuErrorName2["InvalidToken"] = "InvalidToken";
  QiniuErrorName2["InvalidMetadata"] = "InvalidMetadata";
  QiniuErrorName2["InvalidChunkSize"] = "InvalidChunkSize";
  QiniuErrorName2["InvalidCustomVars"] = "InvalidCustomVars";
  QiniuErrorName2["NotAvailableUploadHost"] = "NotAvailableUploadHost";
  QiniuErrorName2["ReadCacheFailed"] = "ReadCacheFailed";
  QiniuErrorName2["InvalidCacheData"] = "InvalidCacheData";
  QiniuErrorName2["WriteCacheFailed"] = "WriteCacheFailed";
  QiniuErrorName2["RemoveCacheFailed"] = "RemoveCacheFailed";
  QiniuErrorName2["GetCanvasContextFailed"] = "GetCanvasContextFailed";
  QiniuErrorName2["UnsupportedFileType"] = "UnsupportedFileType";
  QiniuErrorName2["FileReaderReadFailed"] = "FileReaderReadFailed";
  QiniuErrorName2["NotAvailableXMLHttpRequest"] = "NotAvailableXMLHttpRequest";
  QiniuErrorName2["InvalidProgressEventTarget"] = "InvalidProgressEventTarget";
  QiniuErrorName2["RequestError"] = "RequestError";
})(QiniuErrorName || (QiniuErrorName = {}));
var QiniuError = function() {
  function QiniuError2(name, message) {
    this.name = name;
    this.message = message;
    this.stack = new Error().stack;
  }
  return QiniuError2;
}();
var QiniuRequestError = function(_super) {
  __extends$3(QiniuRequestError2, _super);
  function QiniuRequestError2(code, reqId, message, data2) {
    var _this = _super.call(this, QiniuErrorName.RequestError, message) || this;
    _this.code = code;
    _this.reqId = reqId;
    _this.isRequestError = true;
    _this.data = data2;
    return _this;
  }
  return QiniuRequestError2;
}(QiniuError);
var QiniuNetworkError = function(_super) {
  __extends$3(QiniuNetworkError2, _super);
  function QiniuNetworkError2(message, reqId) {
    if (reqId === void 0) {
      reqId = "";
    }
    return _super.call(this, 0, reqId, message) || this;
  }
  return QiniuNetworkError2;
}(QiniuRequestError);
var Pool = function() {
  function Pool2(runTask, limit) {
    this.runTask = runTask;
    this.limit = limit;
    this.queue = [];
    this.processing = [];
  }
  Pool2.prototype.enqueue = function(task) {
    var _this = this;
    return new Promise(function(resolve, reject) {
      _this.queue.push({
        task,
        resolve,
        reject
      });
      _this.check();
    });
  };
  Pool2.prototype.run = function(item2) {
    var _this = this;
    this.queue = this.queue.filter(function(v) {
      return v !== item2;
    });
    this.processing.push(item2);
    this.runTask(item2.task).then(function() {
      _this.processing = _this.processing.filter(function(v) {
        return v !== item2;
      });
      item2.resolve();
      _this.check();
    }, function(err) {
      return item2.reject(err);
    });
  };
  Pool2.prototype.check = function() {
    var _this = this;
    var processingNum = this.processing.length;
    var availableNum = this.limit - processingNum;
    this.queue.slice(0, availableNum).forEach(function(item2) {
      _this.run(item2);
    });
  };
  return Pool2;
}();
var __extends$2 = globalThis && globalThis.__extends || function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$6 = globalThis && globalThis.__assign || function() {
  __assign$6 = Object.assign || function(t) {
    for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
      s = arguments[i2];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$6.apply(this, arguments);
};
var Subscription = function() {
  function Subscription2() {
    this.closed = false;
  }
  Subscription2.prototype.unsubscribe = function() {
    if (this.closed) {
      return;
    }
    this.closed = true;
    if (this._unsubscribe) {
      this._unsubscribe();
    }
  };
  Subscription2.prototype.add = function(teardown) {
    this._unsubscribe = teardown;
  };
  return Subscription2;
}();
var Subscriber = function(_super) {
  __extends$2(Subscriber2, _super);
  function Subscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (observerOrNext && typeof observerOrNext === "object") {
      _this.destination = observerOrNext;
    } else {
      _this.destination = __assign$6(__assign$6(__assign$6({}, observerOrNext && { next: observerOrNext }), error && { error }), complete && { complete });
    }
    return _this;
  }
  Subscriber2.prototype.unsubscribe = function() {
    if (this.closed) {
      return;
    }
    this.isStopped = true;
    _super.prototype.unsubscribe.call(this);
  };
  Subscriber2.prototype.next = function(value) {
    if (!this.isStopped && this.destination.next) {
      this.destination.next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (!this.isStopped && this.destination.error) {
      this.isStopped = true;
      this.destination.error(err);
    }
  };
  Subscriber2.prototype.complete = function(result) {
    if (!this.isStopped && this.destination.complete) {
      this.isStopped = true;
      this.destination.complete(result);
    }
  };
  return Subscriber2;
}(Subscription);
var Observable = function() {
  function Observable2(_subscribe) {
    this._subscribe = _subscribe;
  }
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var sink = new Subscriber(observerOrNext, error, complete);
    sink.add(this._subscribe(sink));
    return sink;
  };
  return Observable2;
}();
function utf8Encode(argString) {
  if (argString === null || typeof argString === "undefined") {
    return "";
  }
  var string = argString + "";
  var utftext = "", start, end, stringl = 0;
  start = end = 0;
  stringl = string.length;
  for (var n = 0; n < stringl; n++) {
    var c1 = string.charCodeAt(n);
    var enc = null;
    if (c1 < 128) {
      end++;
    } else if (c1 > 127 && c1 < 2048) {
      enc = String.fromCharCode(c1 >> 6 | 192, c1 & 63 | 128);
    } else if ((c1 & 63488 ^ 55296) > 0) {
      enc = String.fromCharCode(c1 >> 12 | 224, c1 >> 6 & 63 | 128, c1 & 63 | 128);
    } else {
      if ((c1 & 64512 ^ 55296) > 0) {
        throw new RangeError("Unmatched trail surrogate at " + n);
      }
      var c2 = string.charCodeAt(++n);
      if ((c2 & 64512 ^ 56320) > 0) {
        throw new RangeError("Unmatched lead surrogate at " + (n - 1));
      }
      c1 = ((c1 & 1023) << 10) + (c2 & 1023) + 65536;
      enc = String.fromCharCode(c1 >> 18 | 240, c1 >> 12 & 63 | 128, c1 >> 6 & 63 | 128, c1 & 63 | 128);
    }
    if (enc !== null) {
      if (end > start) {
        utftext += string.slice(start, end);
      }
      utftext += enc;
      start = end = n + 1;
    }
  }
  if (end > start) {
    utftext += string.slice(start, stringl);
  }
  return utftext;
}
function utf8Decode(strData) {
  var tmpArr = [];
  var i2 = 0;
  var c1 = 0;
  var seqlen = 0;
  strData += "";
  while (i2 < strData.length) {
    c1 = strData.charCodeAt(i2) & 255;
    seqlen = 0;
    if (c1 <= 191) {
      c1 = c1 & 127;
      seqlen = 1;
    } else if (c1 <= 223) {
      c1 = c1 & 31;
      seqlen = 2;
    } else if (c1 <= 239) {
      c1 = c1 & 15;
      seqlen = 3;
    } else {
      c1 = c1 & 7;
      seqlen = 4;
    }
    for (var ai = 1; ai < seqlen; ++ai) {
      c1 = c1 << 6 | strData.charCodeAt(ai + i2) & 63;
    }
    if (seqlen === 4) {
      c1 -= 65536;
      tmpArr.push(String.fromCharCode(55296 | c1 >> 10 & 1023));
      tmpArr.push(String.fromCharCode(56320 | c1 & 1023));
    } else {
      tmpArr.push(String.fromCharCode(c1));
    }
    i2 += seqlen;
  }
  return tmpArr.join("");
}
function base64Encode(data2) {
  var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  var o1, o2, o3, h1, h2, h3, h4, bits, i2 = 0, ac = 0, enc = "", tmp_arr = [];
  if (!data2) {
    return data2;
  }
  data2 = utf8Encode(data2 + "");
  do {
    o1 = data2.charCodeAt(i2++);
    o2 = data2.charCodeAt(i2++);
    o3 = data2.charCodeAt(i2++);
    bits = o1 << 16 | o2 << 8 | o3;
    h1 = bits >> 18 & 63;
    h2 = bits >> 12 & 63;
    h3 = bits >> 6 & 63;
    h4 = bits & 63;
    tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
  } while (i2 < data2.length);
  enc = tmp_arr.join("");
  switch (data2.length % 3) {
    case 1:
      enc = enc.slice(0, -2) + "==";
      break;
    case 2:
      enc = enc.slice(0, -1) + "=";
      break;
  }
  return enc;
}
function base64Decode(data2) {
  var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  var o1, o2, o3, h1, h2, h3, h4, bits, i2 = 0, ac = 0, dec = "", tmp_arr = [];
  if (!data2) {
    return data2;
  }
  data2 += "";
  do {
    h1 = b64.indexOf(data2.charAt(i2++));
    h2 = b64.indexOf(data2.charAt(i2++));
    h3 = b64.indexOf(data2.charAt(i2++));
    h4 = b64.indexOf(data2.charAt(i2++));
    bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
    o1 = bits >> 16 & 255;
    o2 = bits >> 8 & 255;
    o3 = bits & 255;
    if (h3 === 64) {
      tmp_arr[ac++] = String.fromCharCode(o1);
    } else if (h4 === 64) {
      tmp_arr[ac++] = String.fromCharCode(o1, o2);
    } else {
      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
    }
  } while (i2 < data2.length);
  dec = tmp_arr.join("");
  return utf8Decode(dec);
}
function urlSafeBase64Encode(v) {
  v = base64Encode(v);
  return v.replace(/\//g, "_").replace(/\+/g, "-");
}
function urlSafeBase64Decode(v) {
  v = v.replace(/_/g, "/").replace(/-/g, "+");
  return base64Decode(v);
}
var sparkMd5 = { exports: {} };
(function(module2, exports) {
  (function(factory) {
    {
      module2.exports = factory();
    }
  })(function(undefined$1) {
    var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
    function md5cycle(x, k) {
      var a = x[0], b = x[1], c = x[2], d = x[3];
      a += (b & c | ~b & d) + k[0] - 680876936 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[1] - 389564586 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[2] + 606105819 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[4] - 176418897 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[7] - 45705983 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[10] - 42063 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
      a = (a << 7 | a >>> 25) + b | 0;
      d += (a & b | ~a & c) + k[13] - 40341101 | 0;
      d = (d << 12 | d >>> 20) + a | 0;
      c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
      c = (c << 17 | c >>> 15) + d | 0;
      b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
      b = (b << 22 | b >>> 10) + c | 0;
      a += (b & d | c & ~d) + k[1] - 165796510 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[11] + 643717713 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[0] - 373897302 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[5] - 701558691 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[10] + 38016083 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[15] - 660478335 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[4] - 405537848 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[9] + 568446438 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[3] - 187363961 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
      a = (a << 5 | a >>> 27) + b | 0;
      d += (a & c | b & ~c) + k[2] - 51403784 | 0;
      d = (d << 9 | d >>> 23) + a | 0;
      c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
      c = (c << 14 | c >>> 18) + d | 0;
      b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
      b = (b << 20 | b >>> 12) + c | 0;
      a += (b ^ c ^ d) + k[5] - 378558 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[14] - 35309556 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[7] - 155497632 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[13] + 681279174 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[0] - 358537222 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[3] - 722521979 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[6] + 76029189 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (b ^ c ^ d) + k[9] - 640364487 | 0;
      a = (a << 4 | a >>> 28) + b | 0;
      d += (a ^ b ^ c) + k[12] - 421815835 | 0;
      d = (d << 11 | d >>> 21) + a | 0;
      c += (d ^ a ^ b) + k[15] + 530742520 | 0;
      c = (c << 16 | c >>> 16) + d | 0;
      b += (c ^ d ^ a) + k[2] - 995338651 | 0;
      b = (b << 23 | b >>> 9) + c | 0;
      a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
      a = (a << 6 | a >>> 26) + b | 0;
      d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
      d = (d << 10 | d >>> 22) + a | 0;
      c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
      c = (c << 15 | c >>> 17) + d | 0;
      b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
      b = (b << 21 | b >>> 11) + c | 0;
      x[0] = a + x[0] | 0;
      x[1] = b + x[1] | 0;
      x[2] = c + x[2] | 0;
      x[3] = d + x[3] | 0;
    }
    function md5blk(s) {
      var md5blks = [], i2;
      for (i2 = 0; i2 < 64; i2 += 4) {
        md5blks[i2 >> 2] = s.charCodeAt(i2) + (s.charCodeAt(i2 + 1) << 8) + (s.charCodeAt(i2 + 2) << 16) + (s.charCodeAt(i2 + 3) << 24);
      }
      return md5blks;
    }
    function md5blk_array(a) {
      var md5blks = [], i2;
      for (i2 = 0; i2 < 64; i2 += 4) {
        md5blks[i2 >> 2] = a[i2] + (a[i2 + 1] << 8) + (a[i2 + 2] << 16) + (a[i2 + 3] << 24);
      }
      return md5blks;
    }
    function md51(s) {
      var n = s.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi;
      for (i2 = 64; i2 <= n; i2 += 64) {
        md5cycle(state, md5blk(s.substring(i2 - 64, i2)));
      }
      s = s.substring(i2 - 64);
      length = s.length;
      tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      for (i2 = 0; i2 < length; i2 += 1) {
        tail[i2 >> 2] |= s.charCodeAt(i2) << (i2 % 4 << 3);
      }
      tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
      if (i2 > 55) {
        md5cycle(state, tail);
        for (i2 = 0; i2 < 16; i2 += 1) {
          tail[i2] = 0;
        }
      }
      tmp = n * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(state, tail);
      return state;
    }
    function md51_array(a) {
      var n = a.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi;
      for (i2 = 64; i2 <= n; i2 += 64) {
        md5cycle(state, md5blk_array(a.subarray(i2 - 64, i2)));
      }
      a = i2 - 64 < n ? a.subarray(i2 - 64) : new Uint8Array(0);
      length = a.length;
      tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
      for (i2 = 0; i2 < length; i2 += 1) {
        tail[i2 >> 2] |= a[i2] << (i2 % 4 << 3);
      }
      tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
      if (i2 > 55) {
        md5cycle(state, tail);
        for (i2 = 0; i2 < 16; i2 += 1) {
          tail[i2] = 0;
        }
      }
      tmp = n * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(state, tail);
      return state;
    }
    function rhex(n) {
      var s = "", j;
      for (j = 0; j < 4; j += 1) {
        s += hex_chr[n >> j * 8 + 4 & 15] + hex_chr[n >> j * 8 & 15];
      }
      return s;
    }
    function hex(x) {
      var i2;
      for (i2 = 0; i2 < x.length; i2 += 1) {
        x[i2] = rhex(x[i2]);
      }
      return x.join("");
    }
    if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
      ;
    if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
      (function() {
        function clamp(val, length) {
          val = val | 0 || 0;
          if (val < 0) {
            return Math.max(val + length, 0);
          }
          return Math.min(val, length);
        }
        ArrayBuffer.prototype.slice = function(from2, to2) {
          var length = this.byteLength, begin = clamp(from2, length), end = length, num, target, targetArray, sourceArray;
          if (to2 !== undefined$1) {
            end = clamp(to2, length);
          }
          if (begin > end) {
            return new ArrayBuffer(0);
          }
          num = end - begin;
          target = new ArrayBuffer(num);
          targetArray = new Uint8Array(target);
          sourceArray = new Uint8Array(this, begin, num);
          targetArray.set(sourceArray);
          return target;
        };
      })();
    }
    function toUtf8(str) {
      if (/[\u0080-\uFFFF]/.test(str)) {
        str = unescape(encodeURIComponent(str));
      }
      return str;
    }
    function utf8Str2ArrayBuffer(str, returnUInt8Array) {
      var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i2;
      for (i2 = 0; i2 < length; i2 += 1) {
        arr[i2] = str.charCodeAt(i2);
      }
      return returnUInt8Array ? arr : buff;
    }
    function arrayBuffer2Utf8Str(buff) {
      return String.fromCharCode.apply(null, new Uint8Array(buff));
    }
    function concatenateArrayBuffers(first, second, returnUInt8Array) {
      var result = new Uint8Array(first.byteLength + second.byteLength);
      result.set(new Uint8Array(first));
      result.set(new Uint8Array(second), first.byteLength);
      return returnUInt8Array ? result : result.buffer;
    }
    function hexToBinaryString(hex2) {
      var bytes = [], length = hex2.length, x;
      for (x = 0; x < length - 1; x += 2) {
        bytes.push(parseInt(hex2.substr(x, 2), 16));
      }
      return String.fromCharCode.apply(String, bytes);
    }
    function SparkMD52() {
      this.reset();
    }
    SparkMD52.prototype.append = function(str) {
      this.appendBinary(toUtf8(str));
      return this;
    };
    SparkMD52.prototype.appendBinary = function(contents) {
      this._buff += contents;
      this._length += contents.length;
      var length = this._buff.length, i2;
      for (i2 = 64; i2 <= length; i2 += 64) {
        md5cycle(this._hash, md5blk(this._buff.substring(i2 - 64, i2)));
      }
      this._buff = this._buff.substring(i2 - 64);
      return this;
    };
    SparkMD52.prototype.end = function(raw) {
      var buff = this._buff, length = buff.length, i2, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
      for (i2 = 0; i2 < length; i2 += 1) {
        tail[i2 >> 2] |= buff.charCodeAt(i2) << (i2 % 4 << 3);
      }
      this._finish(tail, length);
      ret = hex(this._hash);
      if (raw) {
        ret = hexToBinaryString(ret);
      }
      this.reset();
      return ret;
    };
    SparkMD52.prototype.reset = function() {
      this._buff = "";
      this._length = 0;
      this._hash = [1732584193, -271733879, -1732584194, 271733878];
      return this;
    };
    SparkMD52.prototype.getState = function() {
      return {
        buff: this._buff,
        length: this._length,
        hash: this._hash.slice()
      };
    };
    SparkMD52.prototype.setState = function(state) {
      this._buff = state.buff;
      this._length = state.length;
      this._hash = state.hash;
      return this;
    };
    SparkMD52.prototype.destroy = function() {
      delete this._hash;
      delete this._buff;
      delete this._length;
    };
    SparkMD52.prototype._finish = function(tail, length) {
      var i2 = length, tmp, lo, hi;
      tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
      if (i2 > 55) {
        md5cycle(this._hash, tail);
        for (i2 = 0; i2 < 16; i2 += 1) {
          tail[i2] = 0;
        }
      }
      tmp = this._length * 8;
      tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
      lo = parseInt(tmp[2], 16);
      hi = parseInt(tmp[1], 16) || 0;
      tail[14] = lo;
      tail[15] = hi;
      md5cycle(this._hash, tail);
    };
    SparkMD52.hash = function(str, raw) {
      return SparkMD52.hashBinary(toUtf8(str), raw);
    };
    SparkMD52.hashBinary = function(content, raw) {
      var hash = md51(content), ret = hex(hash);
      return raw ? hexToBinaryString(ret) : ret;
    };
    SparkMD52.ArrayBuffer = function() {
      this.reset();
    };
    SparkMD52.ArrayBuffer.prototype.append = function(arr) {
      var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i2;
      this._length += arr.byteLength;
      for (i2 = 64; i2 <= length; i2 += 64) {
        md5cycle(this._hash, md5blk_array(buff.subarray(i2 - 64, i2)));
      }
      this._buff = i2 - 64 < length ? new Uint8Array(buff.buffer.slice(i2 - 64)) : new Uint8Array(0);
      return this;
    };
    SparkMD52.ArrayBuffer.prototype.end = function(raw) {
      var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i2, ret;
      for (i2 = 0; i2 < length; i2 += 1) {
        tail[i2 >> 2] |= buff[i2] << (i2 % 4 << 3);
      }
      this._finish(tail, length);
      ret = hex(this._hash);
      if (raw) {
        ret = hexToBinaryString(ret);
      }
      this.reset();
      return ret;
    };
    SparkMD52.ArrayBuffer.prototype.reset = function() {
      this._buff = new Uint8Array(0);
      this._length = 0;
      this._hash = [1732584193, -271733879, -1732584194, 271733878];
      return this;
    };
    SparkMD52.ArrayBuffer.prototype.getState = function() {
      var state = SparkMD52.prototype.getState.call(this);
      state.buff = arrayBuffer2Utf8Str(state.buff);
      return state;
    };
    SparkMD52.ArrayBuffer.prototype.setState = function(state) {
      state.buff = utf8Str2ArrayBuffer(state.buff, true);
      return SparkMD52.prototype.setState.call(this, state);
    };
    SparkMD52.ArrayBuffer.prototype.destroy = SparkMD52.prototype.destroy;
    SparkMD52.ArrayBuffer.prototype._finish = SparkMD52.prototype._finish;
    SparkMD52.ArrayBuffer.hash = function(arr, raw) {
      var hash = md51_array(new Uint8Array(arr)), ret = hex(hash);
      return raw ? hexToBinaryString(ret) : ret;
    };
    return SparkMD52;
  });
})(sparkMd5);
var SparkMD5 = sparkMd5.exports;
var __assign$5 = globalThis && globalThis.__assign || function() {
  __assign$5 = Object.assign || function(t) {
    for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
      s = arguments[i2];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$5.apply(this, arguments);
};
var __awaiter$6 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$6 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var MB = Math.pow(1024, 2);
function getChunks(file, blockSize) {
  var chunkByteSize = blockSize * MB;
  if (chunkByteSize > file.size) {
    chunkByteSize = file.size;
  } else {
    while (file.size > chunkByteSize * 1e4) {
      chunkByteSize *= 2;
    }
  }
  var chunks = [];
  var count = Math.ceil(file.size / chunkByteSize);
  for (var i2 = 0; i2 < count; i2++) {
    var chunk = file.slice(chunkByteSize * i2, i2 === count - 1 ? file.size : chunkByteSize * (i2 + 1));
    chunks.push(chunk);
  }
  return chunks;
}
function isMetaDataValid(params) {
  return Object.keys(params).every(function(key) {
    return key.indexOf("x-qn-meta-") === 0;
  });
}
function isCustomVarsValid(params) {
  return Object.keys(params).every(function(key) {
    return key.indexOf("x:") === 0;
  });
}
function sum(list) {
  return list.reduce(function(data2, loaded) {
    return data2 + loaded;
  }, 0);
}
function setLocalFileInfo(localKey, info, logger) {
  try {
    localStorage.setItem(localKey, JSON.stringify(info));
  } catch (err) {
    logger.warn(new QiniuError(QiniuErrorName.WriteCacheFailed, "setLocalFileInfo failed: " + localKey));
  }
}
function createLocalKey(name, key, size) {
  var localKey = key == null ? "_" : "_key_" + key + "_";
  return "qiniu_js_sdk_upload_file_name_" + name + localKey + "size_" + size;
}
function removeLocalFileInfo(localKey, logger) {
  try {
    localStorage.removeItem(localKey);
  } catch (err) {
    logger.warn(new QiniuError(QiniuErrorName.RemoveCacheFailed, "removeLocalFileInfo failed. key: " + localKey));
  }
}
function getLocalFileInfo(localKey, logger) {
  var localInfoString = null;
  try {
    localInfoString = localStorage.getItem(localKey);
  } catch (_a2) {
    logger.warn(new QiniuError(QiniuErrorName.ReadCacheFailed, "getLocalFileInfo failed. key: " + localKey));
  }
  if (localInfoString == null) {
    return null;
  }
  var localInfo = null;
  try {
    localInfo = JSON.parse(localInfoString);
  } catch (_b) {
    removeLocalFileInfo(localKey, logger);
    logger.warn(new QiniuError(QiniuErrorName.InvalidCacheData, "getLocalFileInfo failed to parse. key: " + localKey));
  }
  return localInfo;
}
function getAuthHeaders(token2) {
  var auth = "UpToken " + token2;
  return { Authorization: auth };
}
function getHeadersForChunkUpload(token2) {
  var header = getAuthHeaders(token2);
  return __assign$5({ "content-type": "application/octet-stream" }, header);
}
function getHeadersForMkFile(token2) {
  var header = getAuthHeaders(token2);
  return __assign$5({ "content-type": "application/json" }, header);
}
function createXHR() {
  if (window.XMLHttpRequest) {
    return new XMLHttpRequest();
  }
  if (window.ActiveXObject) {
    return new window.ActiveXObject("Microsoft.XMLHTTP");
  }
  throw new QiniuError(QiniuErrorName.NotAvailableXMLHttpRequest, "the current environment does not support.");
}
function computeMd5(data2) {
  return __awaiter$6(this, void 0, void 0, function() {
    var buffer, spark;
    return __generator$6(this, function(_a2) {
      switch (_a2.label) {
        case 0:
          return [4, readAsArrayBuffer(data2)];
        case 1:
          buffer = _a2.sent();
          spark = new SparkMD5.ArrayBuffer();
          spark.append(buffer);
          return [2, spark.end()];
      }
    });
  });
}
function readAsArrayBuffer(data2) {
  return new Promise(function(resolve, reject) {
    var reader = new FileReader();
    reader.onload = function(evt) {
      if (evt.target) {
        var body = evt.target.result;
        resolve(body);
      } else {
        reject(new QiniuError(QiniuErrorName.InvalidProgressEventTarget, "progress event target is undefined"));
      }
    };
    reader.onerror = function() {
      reject(new QiniuError(QiniuErrorName.FileReaderReadFailed, "fileReader read failed"));
    };
    reader.readAsArrayBuffer(data2);
  });
}
function request$3(url, options) {
  return new Promise(function(resolve, reject) {
    var xhr2 = createXHR();
    xhr2.open(options.method, url);
    if (options.onCreate) {
      options.onCreate(xhr2);
    }
    if (options.headers) {
      var headers_1 = options.headers;
      Object.keys(headers_1).forEach(function(k) {
        xhr2.setRequestHeader(k, headers_1[k]);
      });
    }
    xhr2.upload.addEventListener("progress", function(evt) {
      if (evt.lengthComputable && options.onProgress) {
        options.onProgress({
          loaded: evt.loaded,
          total: evt.total
        });
      }
    });
    xhr2.onreadystatechange = function() {
      var responseText = xhr2.responseText;
      if (xhr2.readyState !== 4) {
        return;
      }
      var reqId = xhr2.getResponseHeader("x-reqId") || "";
      if (xhr2.status === 0) {
        reject(new QiniuNetworkError("network error.", reqId));
        return;
      }
      if (xhr2.status !== 200) {
        var message = "xhr request failed, code: " + xhr2.status;
        if (responseText) {
          message += " response: " + responseText;
        }
        var data2 = void 0;
        try {
          data2 = JSON.parse(responseText);
        } catch (_a2) {
        }
        reject(new QiniuRequestError(xhr2.status, reqId, message, data2));
        return;
      }
      try {
        resolve({
          data: JSON.parse(responseText),
          reqId
        });
      } catch (err) {
        reject(err);
      }
    };
    xhr2.send(options.body);
  });
}
function getPortFromUrl(url) {
  if (url && url.match) {
    var groups = url.match(/(^https?)/);
    if (!groups) {
      return "";
    }
    var type = groups[1];
    groups = url.match(/^https?:\/\/([^:^/]*):(\d*)/);
    if (groups) {
      return groups[2];
    }
    if (type === "http") {
      return "80";
    }
    return "443";
  }
  return "";
}
function getDomainFromUrl(url) {
  if (url && url.match) {
    var groups = url.match(/^https?:\/\/([^:^/]*)/);
    return groups ? groups[1] : "";
  }
  return "";
}
function getPutPolicy(token2) {
  if (!token2)
    throw new QiniuError(QiniuErrorName.InvalidToken, "invalid token.");
  var segments = token2.split(":");
  if (segments.length === 1)
    throw new QiniuError(QiniuErrorName.InvalidToken, "invalid token segments.");
  var assessKey = segments.length > 3 ? segments[1] : segments[0];
  if (!assessKey)
    throw new QiniuError(QiniuErrorName.InvalidToken, "missing assess key field.");
  var putPolicy = null;
  try {
    putPolicy = JSON.parse(urlSafeBase64Decode(segments[segments.length - 1]));
  } catch (error) {
    throw new QiniuError(QiniuErrorName.InvalidToken, "token parse failed.");
  }
  if (putPolicy == null) {
    throw new QiniuError(QiniuErrorName.InvalidToken, "putPolicy is null.");
  }
  if (putPolicy.scope == null) {
    throw new QiniuError(QiniuErrorName.InvalidToken, "scope field is null.");
  }
  var bucketName = putPolicy.scope.split(":")[0];
  if (!bucketName) {
    throw new QiniuError(QiniuErrorName.InvalidToken, "resolve bucketName failed.");
  }
  return { assessKey, bucketName, scope: putPolicy.scope };
}
var _a;
var region = {
  z0: "z0",
  z1: "z1",
  z2: "z2",
  na0: "na0",
  as0: "as0",
  cnEast2: "cn-east-2"
};
var regionUphostMap = (_a = {}, _a[region.z0] = {
  srcUphost: ["up.qiniup.com"],
  cdnUphost: ["upload.qiniup.com"]
}, _a[region.z1] = {
  srcUphost: ["up-z1.qiniup.com"],
  cdnUphost: ["upload-z1.qiniup.com"]
}, _a[region.z2] = {
  srcUphost: ["up-z2.qiniup.com"],
  cdnUphost: ["upload-z2.qiniup.com"]
}, _a[region.na0] = {
  srcUphost: ["up-na0.qiniup.com"],
  cdnUphost: ["upload-na0.qiniup.com"]
}, _a[region.as0] = {
  srcUphost: ["up-as0.qiniup.com"],
  cdnUphost: ["upload-as0.qiniup.com"]
}, _a[region.cnEast2] = {
  srcUphost: ["up-cn-east-2.qiniup.com"],
  cdnUphost: ["upload-cn-east-2.qiniup.com"]
}, _a);
var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case "string":
      return v;
    case "boolean":
      return v ? "true" : "false";
    case "number":
      return isFinite(v) ? v : "";
    default:
      return "";
  }
};
var encode = function(obj, sep, eq, name) {
  sep = sep || "&";
  eq = eq || "=";
  if (obj === null) {
    obj = void 0;
  }
  if (typeof obj === "object") {
    return Object.keys(obj).map(function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).filter(Boolean).join(sep);
  }
  if (!name)
    return "";
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};
var stringify;
stringify = encode;
var __assign$4 = globalThis && globalThis.__assign || function() {
  __assign$4 = Object.assign || function(t) {
    for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
      s = arguments[i2];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$4.apply(this, arguments);
};
var __awaiter$5 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$5 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
function getUpHosts(accessKey, bucketName, protocol) {
  return __awaiter$5(this, void 0, void 0, function() {
    var params, url;
    return __generator$5(this, function(_a2) {
      params = stringify({ ak: accessKey, bucket: bucketName });
      url = protocol + "://api.qiniu.com/v2/query?" + params;
      return [2, request$3(url, { method: "GET" })];
    });
  });
}
function getBaseUrl(bucket, key, uploadInfo) {
  var url = uploadInfo.url, id = uploadInfo.id;
  return url + "/buckets/" + bucket + "/objects/" + (key != null ? urlSafeBase64Encode(key) : "~") + "/uploads/" + id;
}
function initUploadParts(token2, bucket, key, uploadUrl) {
  var url = uploadUrl + "/buckets/" + bucket + "/objects/" + (key != null ? urlSafeBase64Encode(key) : "~") + "/uploads";
  return request$3(url, {
    method: "POST",
    headers: getAuthHeaders(token2)
  });
}
function uploadChunk(token2, key, index2, uploadInfo, options) {
  var bucket = getPutPolicy(token2).bucketName;
  var url = getBaseUrl(bucket, key, uploadInfo) + ("/" + index2);
  var headers = getHeadersForChunkUpload(token2);
  if (options.md5)
    headers["Content-MD5"] = options.md5;
  return request$3(url, __assign$4(__assign$4({}, options), { method: "PUT", headers }));
}
function uploadComplete(token2, key, uploadInfo, options) {
  var bucket = getPutPolicy(token2).bucketName;
  var url = getBaseUrl(bucket, key, uploadInfo);
  return request$3(url, __assign$4(__assign$4({}, options), { method: "POST", headers: getHeadersForMkFile(token2) }));
}
function direct(url, data2, options) {
  return request$3(url, __assign$4({ method: "POST", body: data2 }, options));
}
var __assign$3 = globalThis && globalThis.__assign || function() {
  __assign$3 = Object.assign || function(t) {
    for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
      s = arguments[i2];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$3.apply(this, arguments);
};
var __awaiter$4 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$4 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read$3 = globalThis && globalThis.__read || function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i2 = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i2.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i2["return"]))
        m.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread$3 = globalThis && globalThis.__spread || function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read$3(arguments[i2]));
  return ar;
};
var DEFAULT_CHUNK_SIZE = 4;
var FREEZE_CODE_LIST = [0, 502, 503, 504, 599];
var RETRY_CODE_LIST = __spread$3(FREEZE_CODE_LIST, [612]);
var GB = Math.pow(1024, 3);
var Base = function() {
  function Base2(options, handlers2, hostPool, logger) {
    this.hostPool = hostPool;
    this.logger = logger;
    this.aborted = false;
    this.retryCount = 0;
    this.xhrList = [];
    this.config = options.config;
    logger.info("config inited.", this.config);
    this.putExtra = __assign$3({ fname: "" }, options.putExtra);
    logger.info("putExtra inited.", this.putExtra);
    this.key = options.key;
    this.file = options.file;
    this.token = options.token;
    this.onData = handlers2.onData;
    this.onError = handlers2.onError;
    this.onComplete = handlers2.onComplete;
    try {
      var putPolicy = getPutPolicy(this.token);
      this.bucketName = putPolicy.bucketName;
      this.assessKey = putPolicy.assessKey;
    } catch (error) {
      logger.error("get putPolicy from token failed.", error);
      this.onError(error);
    }
  }
  Base2.prototype.checkAndUpdateUploadHost = function() {
    return __awaiter$4(this, void 0, void 0, function() {
      var newHost;
      return __generator$4(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            this.logger.info("get available upload host.");
            return [4, this.hostPool.getUp(this.assessKey, this.bucketName, this.config.upprotocol)];
          case 1:
            newHost = _a2.sent();
            if (newHost == null) {
              throw new QiniuError(QiniuErrorName.NotAvailableUploadHost, "no available upload host.");
            }
            if (this.uploadHost != null && this.uploadHost.host !== newHost.host) {
              this.logger.warn("host switches from " + this.uploadHost.host + " to " + newHost.host + ".");
            } else {
              this.logger.info("use host " + newHost.host + ".");
            }
            this.uploadHost = newHost;
            return [2];
        }
      });
    });
  };
  Base2.prototype.checkAndUnfreezeHost = function() {
    this.logger.info("check unfreeze host.");
    if (this.uploadHost != null && this.uploadHost.isFrozen()) {
      this.logger.warn(this.uploadHost.host + " will be unfrozen.");
      this.uploadHost.unfreeze();
    }
  };
  Base2.prototype.checkAndFreezeHost = function(error) {
    this.logger.info("check freeze host.");
    if (error instanceof QiniuRequestError && this.uploadHost != null) {
      if (FREEZE_CODE_LIST.includes(error.code)) {
        this.logger.warn(this.uploadHost.host + " will be temporarily frozen.");
        this.uploadHost.freeze();
      }
    }
  };
  Base2.prototype.handleError = function(error) {
    this.logger.error(error.message);
    this.onError(error);
  };
  Base2.prototype.putFile = function() {
    return __awaiter$4(this, void 0, void 0, function() {
      var result, err_1, reqId, code, notReachRetryCount, needRetry;
      return __generator$4(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            this.aborted = false;
            if (!this.putExtra.fname) {
              this.logger.info("use file.name as fname.");
              this.putExtra.fname = this.file.name;
            }
            if (this.file.size > 1e4 * GB) {
              this.handleError(new QiniuError(QiniuErrorName.InvalidFile, "file size exceed maximum value 10000G"));
              return [2];
            }
            if (this.putExtra.customVars) {
              if (!isCustomVarsValid(this.putExtra.customVars)) {
                this.handleError(new QiniuError(QiniuErrorName.InvalidCustomVars, "customVars key should start width x:"));
                return [2];
              }
            }
            if (this.putExtra.metadata) {
              if (!isMetaDataValid(this.putExtra.metadata)) {
                this.handleError(new QiniuError(QiniuErrorName.InvalidMetadata, "metadata key should start with x-qn-meta-"));
                return [2];
              }
            }
            _a2.label = 1;
          case 1:
            _a2.trys.push([1, 4, , 5]);
            this.uploadAt = new Date().getTime();
            return [4, this.checkAndUpdateUploadHost()];
          case 2:
            _a2.sent();
            return [4, this.run()];
          case 3:
            result = _a2.sent();
            this.onComplete(result.data);
            this.checkAndUnfreezeHost();
            this.sendLog(result.reqId, 200);
            return [2];
          case 4:
            err_1 = _a2.sent();
            this.logger.error(err_1);
            this.clear();
            if (err_1 instanceof QiniuRequestError) {
              reqId = this.aborted ? "" : err_1.reqId;
              code = this.aborted ? -2 : err_1.code;
              this.sendLog(reqId, code);
              this.checkAndFreezeHost(err_1);
              notReachRetryCount = ++this.retryCount <= this.config.retryCount;
              needRetry = !this.aborted && RETRY_CODE_LIST.includes(err_1.code);
              if (needRetry && notReachRetryCount) {
                this.logger.warn("error auto retry: " + this.retryCount + "/" + this.config.retryCount + ".");
                this.putFile();
                return [2];
              }
            }
            this.onError(err_1);
            return [3, 5];
          case 5:
            return [2];
        }
      });
    });
  };
  Base2.prototype.clear = function() {
    this.logger.info("start cleaning all xhr.");
    this.xhrList.forEach(function(xhr2) {
      xhr2.onreadystatechange = null;
      xhr2.abort();
    });
    this.logger.info("cleanup completed.");
    this.xhrList = [];
  };
  Base2.prototype.stop = function() {
    this.logger.info("stop.");
    this.clear();
    this.aborted = true;
  };
  Base2.prototype.addXhr = function(xhr2) {
    this.xhrList.push(xhr2);
  };
  Base2.prototype.sendLog = function(reqId, code) {
    var _a2, _b;
    this.logger.report({
      code,
      reqId,
      remoteIp: "",
      upType: "jssdk-h5",
      size: this.file.size,
      time: Math.floor(this.uploadAt / 1e3),
      port: getPortFromUrl((_a2 = this.uploadHost) === null || _a2 === void 0 ? void 0 : _a2.getUrl()),
      host: getDomainFromUrl((_b = this.uploadHost) === null || _b === void 0 ? void 0 : _b.getUrl()),
      bytesSent: this.progress ? this.progress.total.loaded : 0,
      duration: Math.floor((new Date().getTime() - this.uploadAt) / 1e3)
    });
  };
  Base2.prototype.getProgressInfoItem = function(loaded, size, fromCache) {
    return __assign$3({
      size,
      loaded,
      percent: loaded / size * 100
    }, fromCache == null ? {} : { fromCache });
  };
  return Base2;
}();
var __extends$1 = globalThis && globalThis.__extends || function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __assign$2 = globalThis && globalThis.__assign || function() {
  __assign$2 = Object.assign || function(t) {
    for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
      s = arguments[i2];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$2.apply(this, arguments);
};
var __awaiter$3 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$3 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
function isPositiveInteger(n) {
  var re = /^[1-9]\d*$/;
  return re.test(String(n));
}
var Resume = function(_super) {
  __extends$1(Resume2, _super);
  function Resume2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Resume2.prototype.run = function() {
    return __awaiter$3(this, void 0, void 0, function() {
      var pool, mkFileResponse, localKey, uploadChunks, error_1;
      var _this = this;
      return __generator$3(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            this.logger.info("start run Resume.");
            if (!this.config.chunkSize || !isPositiveInteger(this.config.chunkSize)) {
              throw new QiniuError(QiniuErrorName.InvalidChunkSize, "chunkSize must be a positive integer");
            }
            if (this.config.chunkSize > 1024) {
              throw new QiniuError(QiniuErrorName.InvalidChunkSize, "chunkSize maximum value is 1024");
            }
            return [4, this.initBeforeUploadChunks()];
          case 1:
            _a2.sent();
            pool = new Pool(function(chunkInfo) {
              return _this.uploadChunk(chunkInfo);
            }, this.config.concurrentRequestLimit);
            mkFileResponse = null;
            localKey = this.getLocalKey();
            uploadChunks = this.chunks.map(function(chunk, index2) {
              return pool.enqueue({ chunk, index: index2 });
            });
            _a2.label = 2;
          case 2:
            _a2.trys.push([2, 5, , 6]);
            return [4, Promise.all(uploadChunks)];
          case 3:
            _a2.sent();
            return [4, this.mkFileReq()];
          case 4:
            mkFileResponse = _a2.sent();
            return [3, 6];
          case 5:
            error_1 = _a2.sent();
            if (error_1 instanceof QiniuRequestError && (error_1.code === 612 || error_1.code === 400)) {
              removeLocalFileInfo(localKey, this.logger);
            }
            throw error_1;
          case 6:
            removeLocalFileInfo(localKey, this.logger);
            return [2, mkFileResponse];
        }
      });
    });
  };
  Resume2.prototype.uploadChunk = function(chunkInfo) {
    return __awaiter$3(this, void 0, void 0, function() {
      var index2, chunk, cachedInfo, shouldCheckMD5, reuseSaved, md5, onProgress, requestOptions, response;
      var _this = this;
      return __generator$3(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            index2 = chunkInfo.index, chunk = chunkInfo.chunk;
            cachedInfo = this.cachedUploadedList[index2];
            this.logger.info("upload part " + index2 + ", cache:", cachedInfo);
            shouldCheckMD5 = this.config.checkByMD5;
            reuseSaved = function() {
              _this.usedCacheList[index2] = true;
              _this.updateChunkProgress(chunk.size, index2);
              _this.uploadedList[index2] = cachedInfo;
              _this.updateLocalCache();
            };
            if (cachedInfo && !shouldCheckMD5) {
              reuseSaved();
              return [2];
            }
            return [4, computeMd5(chunk)];
          case 1:
            md5 = _a2.sent();
            this.logger.info("computed part md5.", md5);
            if (cachedInfo && md5 === cachedInfo.md5) {
              reuseSaved();
              return [2];
            }
            this.usedCacheList[index2] = false;
            onProgress = function(data2) {
              _this.updateChunkProgress(data2.loaded, index2);
            };
            requestOptions = {
              body: chunk,
              md5: this.config.checkByServer ? md5 : void 0,
              onProgress,
              onCreate: function(xhr2) {
                return _this.addXhr(xhr2);
              }
            };
            this.logger.info("part " + index2 + " start uploading.");
            return [4, uploadChunk(this.token, this.key, chunkInfo.index + 1, this.getUploadInfo(), requestOptions)];
          case 2:
            response = _a2.sent();
            this.logger.info("part " + index2 + " upload completed.");
            onProgress({
              loaded: chunk.size,
              total: chunk.size
            });
            this.uploadedList[index2] = {
              etag: response.data.etag,
              md5: response.data.md5,
              size: chunk.size
            };
            this.updateLocalCache();
            return [2];
        }
      });
    });
  };
  Resume2.prototype.mkFileReq = function() {
    return __awaiter$3(this, void 0, void 0, function() {
      var data2, result;
      var _this = this;
      return __generator$3(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            data2 = __assign$2(__assign$2(__assign$2({ parts: this.uploadedList.map(function(value, index2) {
              return {
                etag: value.etag,
                partNumber: index2 + 1
              };
            }), fname: this.putExtra.fname }, this.putExtra.mimeType && { mimeType: this.putExtra.mimeType }), this.putExtra.customVars && { customVars: this.putExtra.customVars }), this.putExtra.metadata && { metadata: this.putExtra.metadata });
            this.logger.info("parts upload completed, make file.", data2);
            return [4, uploadComplete(this.token, this.key, this.getUploadInfo(), {
              onCreate: function(xhr2) {
                return _this.addXhr(xhr2);
              },
              body: JSON.stringify(data2)
            })];
          case 1:
            result = _a2.sent();
            this.logger.info("finish Resume Progress.");
            this.updateMkFileProgress(1);
            return [2, result];
        }
      });
    });
  };
  Resume2.prototype.initBeforeUploadChunks = function() {
    return __awaiter$3(this, void 0, void 0, function() {
      var cachedInfo, res, infoMessage;
      return __generator$3(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            this.uploadedList = [];
            this.usedCacheList = [];
            cachedInfo = getLocalFileInfo(this.getLocalKey(), this.logger);
            if (!!cachedInfo)
              return [3, 2];
            this.logger.info("init upload parts from api.");
            return [4, initUploadParts(this.token, this.bucketName, this.key, this.uploadHost.getUrl())];
          case 1:
            res = _a2.sent();
            this.logger.info("initd upload parts of id: " + res.data.uploadId + ".");
            this.uploadId = res.data.uploadId;
            this.cachedUploadedList = [];
            return [3, 3];
          case 2:
            infoMessage = [
              "resume upload parts from local cache,",
              "total " + cachedInfo.data.length + " part,",
              "id is " + cachedInfo.id + "."
            ];
            this.logger.info(infoMessage.join(" "));
            this.cachedUploadedList = cachedInfo.data;
            this.uploadId = cachedInfo.id;
            _a2.label = 3;
          case 3:
            this.chunks = getChunks(this.file, this.config.chunkSize);
            this.loaded = {
              mkFileProgress: 0,
              chunks: this.chunks.map(function(_2) {
                return 0;
              })
            };
            this.notifyResumeProgress();
            return [2];
        }
      });
    });
  };
  Resume2.prototype.getUploadInfo = function() {
    return {
      id: this.uploadId,
      url: this.uploadHost.getUrl()
    };
  };
  Resume2.prototype.getLocalKey = function() {
    return createLocalKey(this.file.name, this.key, this.file.size);
  };
  Resume2.prototype.updateLocalCache = function() {
    setLocalFileInfo(this.getLocalKey(), {
      id: this.uploadId,
      data: this.uploadedList
    }, this.logger);
  };
  Resume2.prototype.updateChunkProgress = function(loaded, index2) {
    this.loaded.chunks[index2] = loaded;
    this.notifyResumeProgress();
  };
  Resume2.prototype.updateMkFileProgress = function(progress) {
    this.loaded.mkFileProgress = progress;
    this.notifyResumeProgress();
  };
  Resume2.prototype.notifyResumeProgress = function() {
    var _this = this;
    this.progress = {
      total: this.getProgressInfoItem(sum(this.loaded.chunks) + this.loaded.mkFileProgress, this.file.size + 1),
      chunks: this.chunks.map(function(chunk, index2) {
        var fromCache = _this.usedCacheList[index2];
        return _this.getProgressInfoItem(_this.loaded.chunks[index2], chunk.size, fromCache);
      }),
      uploadInfo: {
        id: this.uploadId,
        url: this.uploadHost.getUrl()
      }
    };
    this.onData(this.progress);
  };
  return Resume2;
}(Base);
var __awaiter$2 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$2 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var CRC32 = function() {
  function CRC322() {
    this.crc = -1;
    this.table = this.makeTable();
  }
  CRC322.prototype.makeTable = function() {
    var table = new Array();
    for (var i2 = 0; i2 < 256; i2++) {
      var t = i2;
      for (var j = 0; j < 8; j++) {
        if (t & 1) {
          t = t >>> 1 ^ 3988292384;
        } else {
          t >>>= 1;
        }
      }
      table[i2] = t;
    }
    return table;
  };
  CRC322.prototype.append = function(data2) {
    var crc = this.crc;
    for (var offset2 = 0; offset2 < data2.byteLength; offset2++) {
      crc = crc >>> 8 ^ this.table[(crc ^ data2[offset2]) & 255];
    }
    this.crc = crc;
  };
  CRC322.prototype.compute = function() {
    return (this.crc ^ -1) >>> 0;
  };
  CRC322.prototype.readAsUint8Array = function(file) {
    return __awaiter$2(this, void 0, void 0, function() {
      var _a2;
      return __generator$2(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!(typeof file.arrayBuffer === "function"))
              return [3, 2];
            _a2 = Uint8Array.bind;
            return [4, file.arrayBuffer()];
          case 1:
            return [2, new (_a2.apply(Uint8Array, [void 0, _b.sent()]))()];
          case 2:
            return [2, new Promise(function(resolve, reject) {
              var reader = new FileReader();
              reader.onload = function() {
                if (reader.result == null) {
                  reject();
                  return;
                }
                if (typeof reader.result === "string") {
                  reject();
                  return;
                }
                resolve(new Uint8Array(reader.result));
              };
              reader.readAsArrayBuffer(file);
            })];
        }
      });
    });
  };
  CRC322.prototype.file = function(file) {
    return __awaiter$2(this, void 0, void 0, function() {
      var _a2, count, index2, start, end, chuck;
      return __generator$2(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!(file.size <= MB))
              return [3, 2];
            _a2 = this.append;
            return [4, this.readAsUint8Array(file)];
          case 1:
            _a2.apply(this, [_b.sent()]);
            return [2, this.compute()];
          case 2:
            count = Math.ceil(file.size / MB);
            index2 = 0;
            _b.label = 3;
          case 3:
            if (!(index2 < count))
              return [3, 6];
            start = index2 * MB;
            end = index2 === count - 1 ? file.size : start + MB;
            return [4, this.readAsUint8Array(file.slice(start, end))];
          case 4:
            chuck = _b.sent();
            this.append(new Uint8Array(chuck));
            _b.label = 5;
          case 5:
            index2++;
            return [3, 3];
          case 6:
            return [2, this.compute()];
        }
      });
    });
  };
  CRC322.file = function(file) {
    var crc = new CRC322();
    return crc.file(file);
  };
  return CRC322;
}();
var __extends = globalThis && globalThis.__extends || function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (b2.hasOwnProperty(p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var __awaiter$1 = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator$1 = globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var Direct = function(_super) {
  __extends(Direct2, _super);
  function Direct2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Direct2.prototype.run = function() {
    return __awaiter$1(this, void 0, void 0, function() {
      var formData, crcSign, customVars_1, result;
      var _this = this;
      return __generator$1(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            this.logger.info("start run Direct.");
            formData = new FormData();
            formData.append("file", this.file);
            formData.append("token", this.token);
            if (this.key != null) {
              formData.append("key", this.key);
            }
            formData.append("fname", this.putExtra.fname);
            if (!this.config.checkByServer)
              return [3, 2];
            return [4, CRC32.file(this.file)];
          case 1:
            crcSign = _a2.sent();
            formData.append("crc32", crcSign.toString());
            _a2.label = 2;
          case 2:
            if (this.putExtra.customVars) {
              this.logger.info("init customVars.");
              customVars_1 = this.putExtra.customVars;
              Object.keys(customVars_1).forEach(function(key) {
                return formData.append(key, customVars_1[key].toString());
              });
              this.logger.info("customVars inited.");
            }
            this.logger.info("formData inited.");
            return [4, direct(this.uploadHost.getUrl(), formData, {
              onProgress: function(data2) {
                _this.updateDirectProgress(data2.loaded, data2.total);
              },
              onCreate: function(xhr2) {
                return _this.addXhr(xhr2);
              }
            })];
          case 3:
            result = _a2.sent();
            this.logger.info("Direct progress finish.");
            this.finishDirectProgress();
            return [2, result];
        }
      });
    });
  };
  Direct2.prototype.updateDirectProgress = function(loaded, total) {
    this.progress = { total: this.getProgressInfoItem(loaded, total + 1) };
    this.onData(this.progress);
  };
  Direct2.prototype.finishDirectProgress = function() {
    if (!this.progress) {
      this.logger.warn("progress is null.");
      this.progress = { total: this.getProgressInfoItem(this.file.size, this.file.size) };
      this.onData(this.progress);
      return;
    }
    var total = this.progress.total;
    this.progress = { total: this.getProgressInfoItem(total.loaded + 1, total.size) };
    this.onData(this.progress);
  };
  return Direct2;
}(Base);
function reportV3(token2, data2, retry) {
  if (retry === void 0) {
    retry = 3;
  }
  var xhr2 = createXHR();
  xhr2.open("POST", "https://uplog.qbox.me/log/3");
  xhr2.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
  xhr2.setRequestHeader("Authorization", getAuthHeaders(token2).Authorization);
  xhr2.onreadystatechange = function() {
    if (xhr2.readyState === 4 && xhr2.status !== 200 && retry > 0) {
      reportV3(token2, data2, retry - 1);
    }
  };
  var stringifyData = [
    data2.code || "",
    data2.reqId || "",
    data2.host || "",
    data2.remoteIp || "",
    data2.port || "",
    data2.duration || "",
    data2.time || "",
    data2.bytesSent || "",
    data2.upType || "",
    data2.size || ""
  ].join(",");
  xhr2.send(stringifyData);
}
var __read$2 = globalThis && globalThis.__read || function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i2 = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i2.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i2["return"]))
        m.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread$2 = globalThis && globalThis.__spread || function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read$2(arguments[i2]));
  return ar;
};
var Logger = function() {
  function Logger2(token2, disableReport, level, prefix) {
    if (disableReport === void 0) {
      disableReport = true;
    }
    if (level === void 0) {
      level = "OFF";
    }
    if (prefix === void 0) {
      prefix = "UPLOAD";
    }
    this.token = token2;
    this.disableReport = disableReport;
    this.level = level;
    this.prefix = prefix;
    this.id = ++Logger2.id;
  }
  Logger2.prototype.getPrintPrefix = function(level) {
    return "Qiniu-JS-SDK [" + level + "][" + this.prefix + "#" + this.id + "]:";
  };
  Logger2.prototype.report = function(data2, retry) {
    if (this.disableReport)
      return;
    try {
      reportV3(this.token, data2, retry);
    } catch (error) {
      this.warn(error);
    }
  };
  Logger2.prototype.info = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var allowLevel = ["INFO"];
    if (allowLevel.includes(this.level)) {
      console.log.apply(console, __spread$2([this.getPrintPrefix("INFO")], args));
    }
  };
  Logger2.prototype.warn = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var allowLevel = ["INFO", "WARN"];
    if (allowLevel.includes(this.level)) {
      console.warn.apply(console, __spread$2([this.getPrintPrefix("WARN")], args));
    }
  };
  Logger2.prototype.error = function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var allowLevel = ["INFO", "WARN", "ERROR"];
    if (allowLevel.includes(this.level)) {
      console.error.apply(console, __spread$2([this.getPrintPrefix("ERROR")], args));
    }
  };
  Logger2.id = 0;
  return Logger2;
}();
var __awaiter = globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var __read$1 = globalThis && globalThis.__read || function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i2 = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i2.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i2["return"]))
        m.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread$1 = globalThis && globalThis.__spread || function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read$1(arguments[i2]));
  return ar;
};
var unfreezeTimeMap = /* @__PURE__ */ new Map();
var Host = function() {
  function Host2(host, protocol) {
    this.host = host;
    this.protocol = protocol;
  }
  Host2.prototype.isFrozen = function() {
    var currentTime = new Date().getTime();
    var unfreezeTime = unfreezeTimeMap.get(this.host);
    return unfreezeTime != null && unfreezeTime >= currentTime;
  };
  Host2.prototype.freeze = function(time) {
    if (time === void 0) {
      time = 20;
    }
    var unfreezeTime = new Date().getTime() + time * 1e3;
    unfreezeTimeMap.set(this.host, unfreezeTime);
  };
  Host2.prototype.unfreeze = function() {
    unfreezeTimeMap["delete"](this.host);
  };
  Host2.prototype.getUrl = function() {
    return this.protocol + "://" + this.host;
  };
  Host2.prototype.getUnfreezeTime = function() {
    return unfreezeTimeMap.get(this.host);
  };
  return Host2;
}();
var HostPool = function() {
  function HostPool2(initHosts) {
    if (initHosts === void 0) {
      initHosts = [];
    }
    this.initHosts = initHosts;
    this.cachedHostsMap = /* @__PURE__ */ new Map();
  }
  HostPool2.prototype.register = function(accessKey, bucketName, hosts, protocol) {
    this.cachedHostsMap.set(accessKey + "@" + bucketName, hosts.map(function(host) {
      return new Host(host, protocol);
    }));
  };
  HostPool2.prototype.refresh = function(accessKey, bucketName, protocol) {
    var _a2, _b, _c, _d;
    return __awaiter(this, void 0, void 0, function() {
      var cachedHostList, response, stashHosts;
      return __generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            cachedHostList = this.cachedHostsMap.get(accessKey + "@" + bucketName) || [];
            if (cachedHostList.length > 0)
              return [2];
            if (this.initHosts.length > 0) {
              this.register(accessKey, bucketName, this.initHosts, protocol);
              return [2];
            }
            return [4, getUpHosts(accessKey, bucketName, protocol)];
          case 1:
            response = _e.sent();
            if ((response === null || response === void 0 ? void 0 : response.data) != null) {
              stashHosts = __spread$1(((_b = (_a2 = response.data.up) === null || _a2 === void 0 ? void 0 : _a2.acc) === null || _b === void 0 ? void 0 : _b.main) || [], ((_d = (_c = response.data.up) === null || _c === void 0 ? void 0 : _c.acc) === null || _d === void 0 ? void 0 : _d.backup) || []);
              this.register(accessKey, bucketName, stashHosts, protocol);
            }
            return [2];
        }
      });
    });
  };
  HostPool2.prototype.getUp = function(accessKey, bucketName, protocol) {
    return __awaiter(this, void 0, void 0, function() {
      var cachedHostList, availableHostList, priorityQueue;
      return __generator(this, function(_a2) {
        switch (_a2.label) {
          case 0:
            return [4, this.refresh(accessKey, bucketName, protocol)];
          case 1:
            _a2.sent();
            cachedHostList = this.cachedHostsMap.get(accessKey + "@" + bucketName) || [];
            if (cachedHostList.length === 0)
              return [2, null];
            availableHostList = cachedHostList.filter(function(host) {
              return !host.isFrozen();
            });
            if (availableHostList.length > 0)
              return [
                2,
                availableHostList[0]
              ];
            priorityQueue = cachedHostList.slice().sort(function(hostA, hostB) {
              return (hostA.getUnfreezeTime() || 0) - (hostB.getUnfreezeTime() || 0);
            });
            return [2, priorityQueue[0]];
        }
      });
    });
  };
  return HostPool2;
}();
function createUploadManager(options, handlers2, hostPool, logger) {
  if (options.config && options.config.forceDirect) {
    logger.info("ues forceDirect mode.");
    return new Direct(options, handlers2, hostPool, logger);
  }
  if (options.file.size > 4 * MB) {
    logger.info("file size over 4M, use Resume.");
    return new Resume(options, handlers2, hostPool, logger);
  }
  logger.info("file size less or equal than 4M, use Direct.");
  return new Direct(options, handlers2, hostPool, logger);
}
function upload(file, key, token2, putExtra, config) {
  var logger = new Logger(token2, config === null || config === void 0 ? void 0 : config.disableStatisticsReport, config === null || config === void 0 ? void 0 : config.debugLogLevel, file.name);
  var options = {
    file,
    key,
    token: token2,
    putExtra,
    config: normalizeUploadConfig(config, logger)
  };
  var hostPool = new HostPool(options.config.uphost);
  return new Observable(function(observer) {
    var manager = createUploadManager(options, {
      onData: function(data2) {
        return observer.next(data2);
      },
      onError: function(err) {
        return observer.error(err);
      },
      onComplete: function(res) {
        return observer.complete(res);
      }
    }, hostPool, logger);
    manager.putFile();
    return manager.stop.bind(manager);
  });
}
var __assign$1 = globalThis && globalThis.__assign || function() {
  __assign$1 = Object.assign || function(t) {
    for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
      s = arguments[i2];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$1.apply(this, arguments);
};
var __rest = globalThis && globalThis.__rest || function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p = Object.getOwnPropertySymbols(s); i2 < p.length; i2++) {
      if (e.indexOf(p[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i2]))
        t[p[i2]] = s[p[i2]];
    }
  return t;
};
var __read = globalThis && globalThis.__read || function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i2 = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i2.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i2["return"]))
        m.call(i2);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread = globalThis && globalThis.__spread || function() {
  for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
    ar = ar.concat(__read(arguments[i2]));
  return ar;
};
function normalizeUploadConfig(config, logger) {
  var _a2 = __assign$1({}, config), upprotocol = _a2.upprotocol, uphost = _a2.uphost, otherConfig = __rest(_a2, ["upprotocol", "uphost"]);
  var normalizeConfig = __assign$1({ uphost: [], retryCount: 3, checkByMD5: false, forceDirect: false, useCdnDomain: true, checkByServer: false, concurrentRequestLimit: 3, chunkSize: DEFAULT_CHUNK_SIZE, upprotocol: "https", debugLogLevel: "OFF", disableStatisticsReport: false }, otherConfig);
  if (upprotocol) {
    normalizeConfig.upprotocol = upprotocol.replace(/:$/, "");
  }
  var hostList = [];
  if (logger && (config === null || config === void 0 ? void 0 : config.uphost) != null && (config === null || config === void 0 ? void 0 : config.region) != null) {
    logger.warn("do not use both the uphost and region config.");
  }
  if (uphost) {
    if (Array.isArray(uphost)) {
      hostList.push.apply(hostList, __spread(uphost));
    } else {
      hostList.push(uphost);
    }
  } else if (normalizeConfig === null || normalizeConfig === void 0 ? void 0 : normalizeConfig.region) {
    var hostMap = regionUphostMap[normalizeConfig === null || normalizeConfig === void 0 ? void 0 : normalizeConfig.region];
    if (normalizeConfig.useCdnDomain) {
      hostList.push.apply(hostList, __spread(hostMap.cdnUphost));
    } else {
      hostList.push.apply(hostList, __spread(hostMap.srcUphost));
    }
  }
  return __assign$1(__assign$1({}, normalizeConfig), { uphost: hostList.filter(Boolean) });
}
var __assign = globalThis && globalThis.__assign || function() {
  __assign = Object.assign || function(t) {
    for (var s, i2 = 1, n = arguments.length; i2 < n; i2++) {
      s = arguments[i2];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
globalThis && globalThis.__awaiter || function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
globalThis && globalThis.__generator || function(thisArg, body) {
  var _2 = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_2)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _2.label++;
            return { value: op[1], done: false };
          case 5:
            _2.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _2.ops.pop();
            _2.trys.pop();
            continue;
          default:
            if (!(t = _2.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _2 = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _2.label = op[1];
              break;
            }
            if (op[0] === 6 && _2.label < t[1]) {
              _2.label = t[1];
              t = op;
              break;
            }
            if (t && _2.label < t[2]) {
              _2.label = t[2];
              _2.ops.push(op);
              break;
            }
            if (t[2])
              _2.ops.pop();
            _2.trys.pop();
            continue;
        }
        op = body.call(thisArg, _2);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
};
var mimeTypes = {
  PNG: "image/png",
  JPEG: "image/jpeg",
  WEBP: "image/webp",
  BMP: "image/bmp"
};
Object.keys(mimeTypes).map(function(type) {
  return mimeTypes[type];
});
mimeTypes.JPEG;
var viewer = "";
var index_vue_vue_type_style_index_0_lang$2 = "";
const _sfc_main$p = {
  components: {
    Draggable: draggableComponent
  },
  props: {
    modelValue: {
      type: Array,
      default: () => []
    },
    width: {
      type: Number,
      default: 100
    },
    height: {
      type: Number,
      default: 100
    },
    token: {
      type: String,
      default: ""
    },
    domain: {
      type: String,
      default: ""
    },
    multiple: {
      type: Boolean,
      default: false
    },
    limit: {
      type: Number,
      default: 9
    },
    isQiniu: {
      type: Boolean,
      default: false
    },
    isDelete: {
      type: Boolean,
      default: false
    },
    min: {
      type: Number,
      default: 0
    },
    meitu: {
      type: Boolean,
      default: false
    },
    isEdit: {
      type: Boolean,
      default: false
    },
    action: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    readonly: {
      type: Boolean,
      default: false
    },
    headers: {
      type: Array,
      default: () => []
    },
    ui: {
      type: String,
      default: "element"
    },
    containerKey: {
      type: String,
      default: ""
    },
    withCredentials: {
      type: Boolean,
      default: false
    },
    printRead: {
      type: Boolean,
      default: false
    },
    onSelect: {
      type: Function,
      default: void 0
    }
  },
  emits: ["update:modelValue", "on-upload-success", "on-upload-error", "on-upload-progress", "on-upload-remove", "on-meitu"],
  data() {
    return {
      fileList: this.modelValue.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          key: item2.key ? item2.key : new Date().getTime() + "_" + Math.ceil(Math.random() * 99999)
        });
      }),
      viewer: null,
      uploadId: "upload_" + new Date().getTime(),
      editIndex: -1,
      meituIndex: -1
    };
  },
  computed: {
    miniWidth() {
      if (this.width > this.height) {
        return this.height;
      } else {
        return this.width;
      }
    }
  },
  methods: {
    handleChange() {
      const files = this.$refs.uploadInput.files;
      for (let i2 = 0; i2 < files.length; i2++) {
        let file = files[i2];
        let rFile = this.onSelect(file);
        if (rFile === false) {
          return false;
        }
        if (rFile instanceof File) {
          file = rFile;
        }
        const reader = new FileReader();
        const key = new Date().getTime() + "_" + Math.ceil(Math.random() * 99999);
        reader.readAsDataURL(file);
        reader.onload = () => {
          if (this.editIndex >= 0) {
            this.fileList[this.editIndex] = {
              key,
              url: reader.result,
              percent: 0,
              status: "uploading"
            };
            this.editIndex = -1;
          } else {
            this.fileList.push({
              key,
              url: reader.result,
              percent: 0,
              status: "uploading"
            });
          }
          this.$nextTick(() => {
            if (this.isQiniu) {
              this.uploadAction2(reader.result, file, key);
            } else {
              this.uploadAction(reader.result, file, key);
            }
          });
        };
      }
      this.$refs.uploadInput.value = [];
    },
    uploadAction(res, file, key) {
      this.fileList.findIndex((item2) => item2.key === key);
      const xhr2 = new XMLHttpRequest();
      const url = this.action;
      xhr2.open("POST", url, true);
      this.headers.map((item2) => {
        item2.key && xhr2.setRequestHeader(item2.key, item2.value);
      });
      let formData = new FormData();
      formData.append("file", file);
      formData.append("fname", file.name);
      formData.append("key", key);
      xhr2.withCredentials = this.withCredentials;
      xhr2.send(formData);
      xhr2.onreadystatechange = () => {
        if (xhr2.readyState === 4) {
          let resData = xhr2.response;
          if (resData) {
            this.fileList[this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
              url: resData,
              percent: 100
            });
            setTimeout(() => {
              this.fileList[this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
                status: "success"
              });
              this.$emit("on-upload-success", __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
                status: "success"
              }));
              this.$emit("update:modelValue", this.fileList);
            }, 200);
          } else {
            this.fileList[this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
              status: "error"
            });
            this.$emit("on-upload-error", __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
              status: "error"
            }));
            this.fileList.splice(this.fileList.findIndex((item2) => item2.key === key), 1);
          }
        }
      };
      xhr2.onprogress = (res2) => {
        if (res2.total && res2.loaded) {
          this.fileList[this.fileList.findIndex((item2) => item2.key === key)].percent = res2.loaded / res2.total * 100;
          this.$emit("on-upload-progress", __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
            status: "uploading",
            percent: res2.loaded / res2.total * 100
          }));
        }
      };
    },
    uploadAction2(res, file, key) {
      const _this = this;
      const observable = upload(file, key, this.token, {
        fname: key,
        mimeType: []
      }, {
        useCdnDomain: true
      });
      observable.subscribe({
        next(res2) {
          _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)].percent = parseInt(res2.total.percent);
          _this.$emit("on-upload-progress", __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
            status: "uploading",
            percent: parseInt(res2.total.percent)
          }));
        },
        error(err) {
          _this.$message.error(err.message);
          _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
            status: "error"
          });
          _this.$emit("on-upload-error", __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
            status: "error"
          }));
          _this.fileList.splice(_this.fileList.findIndex((item2) => item2.key === key), 1);
        },
        complete(res2) {
          _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)] = __spreadValues(__spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
            url: _this.domain + res2.key,
            percent: 100
          }), res2);
          setTimeout(() => {
            _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
              status: "success"
            });
            _this.$emit("on-upload-success", __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
              status: "success"
            }));
            _this.$emit("update:modelValue", _this.fileList);
          }, 200);
        }
      });
    },
    handleRemove(key) {
      this.$emit("on-upload-remove", this.fileList[this.fileList.findIndex((item2) => item2.key === key)]);
      this.fileList.splice(this.fileList.findIndex((item2) => item2.key === key), 1);
      this.$nextTick(() => {
        this.$emit("update:modelValue", this.fileList);
      });
    },
    handleEdit(key) {
      this.editIndex = this.fileList.findIndex((item2) => item2.key === key);
      this.$refs.uploadInput.click();
    },
    handleMeitu(key) {
      this.$emit("on-meitu", this.fileList.findIndex((item2) => item2.key === key));
    },
    handleAdd() {
      if (!this.disabled) {
        this.editIndex = -1;
        this.$refs.uploadInput.click();
      }
    },
    handlePreviewFile(key) {
      this.viewer && this.viewer.destroy();
      this.uploadId = "upload_" + new Date().getTime();
      this.$nextTick(() => {
        this.viewer = new Viewer$1(document.getElementById(this.uploadId));
        this.viewer.view(this.fileList.findIndex((item2) => item2.key === key));
      });
    }
  },
  watch: {
    modelValue(val) {
      this.fileList = this.modelValue.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          key: item2.key ? item2.key : new Date().getTime() + "_" + Math.ceil(Math.random() * 99999)
        });
      });
    }
  }
};
const _hoisted_1$i = ["id"];
const _hoisted_2$e = ["id"];
const _hoisted_3$d = ["src"];
const _hoisted_4$d = {
  key: 2,
  class: "item-status"
};
const _hoisted_5$c = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-check1",
  style: { "color": "#fff", "transform": "rotate(-45deg)", "line-height": "12px", "display": "block" }
}, null, -1);
const _hoisted_6$b = [
  _hoisted_5$c
];
const _hoisted_7$a = ["title", "onClick"];
const _hoisted_8$8 = ["title", "onClick"];
const _hoisted_9$7 = ["title", "onClick"];
function _sfc_render$n(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_progress = resolveComponent("el-progress");
  const _component_a_progress = resolveComponent("a-progress");
  const _component_draggable = resolveComponent("draggable");
  return openBlock(), createElementBlock("div", {
    class: "fm-uplaod-container",
    id: $data.uploadId
  }, [
    createVNode(_component_draggable, mergeProps({
      class: "drag-img-list",
      modelValue: $data.fileList,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.fileList = $event)
    }, { group: $data.uploadId, ghostClass: "ghost", animation: 200 }, {
      "no-transition-on-drag": true,
      "item-key": "key"
    }), {
      item: withCtx(({ element: item2 }) => [
        (openBlock(), createElementBlock("div", {
          id: item2.key,
          style: normalizeStyle({ width: $props.width + "px", height: $props.height + "px" }),
          class: normalizeClass([{ uploading: item2.status == "uploading", "is-success": item2.status == "success", "is-disabled": $props.disabled }, "upload-file"]),
          key: item2.key
        }, [
          createElementVNode("img", {
            src: item2.url
          }, null, 8, _hoisted_3$d),
          item2.status == "uploading" && $props.ui == "element" ? (openBlock(), createBlock(_component_el_progress, {
            key: 0,
            width: $options.miniWidth * 0.9,
            class: "upload-progress",
            type: "circle",
            percentage: item2.percent
          }, null, 8, ["width", "percentage"])) : createCommentVNode("", true),
          item2.status == "uploading" && $props.ui == "antd" ? (openBlock(), createBlock(_component_a_progress, {
            key: 1,
            width: $options.miniWidth * 0.9,
            class: "upload-progress",
            type: "circle",
            percent: item2.percent
          }, null, 8, ["width", "percent"])) : createCommentVNode("", true),
          item2.status == "success" ? (openBlock(), createElementBlock("label", _hoisted_4$d, _hoisted_6$b)) : createCommentVNode("", true),
          createElementVNode("div", {
            class: "uplaod-action",
            style: normalizeStyle({ height: $options.miniWidth / 4 + "px" })
          }, [
            createElementVNode("i", {
              class: "iconfont icon-tupianyulan",
              title: _ctx.$t("fm.upload.preview"),
              onClick: ($event) => $options.handlePreviewFile(item2.key),
              style: normalizeStyle({ "font-size": $options.miniWidth / 8 + "px" })
            }, null, 12, _hoisted_7$a),
            $props.isEdit && !$props.disabled && !$props.printRead ? (openBlock(), createElementBlock("i", {
              key: 0,
              class: "iconfont icon-sync1",
              title: _ctx.$t("fm.upload.edit"),
              onClick: ($event) => $options.handleEdit(item2.key),
              style: normalizeStyle({ "font-size": $options.miniWidth / 8 + "px" })
            }, null, 12, _hoisted_8$8)) : createCommentVNode("", true),
            $props.isDelete && $data.fileList.length > $props.min && !$props.disabled && !$props.printRead ? (openBlock(), createElementBlock("i", {
              key: 1,
              class: "iconfont icon-delete",
              title: _ctx.$t("fm.upload.delete"),
              onClick: ($event) => $options.handleRemove(item2.key),
              style: normalizeStyle({ "font-size": $options.miniWidth / 8 + "px" })
            }, null, 12, _hoisted_9$7)) : createCommentVNode("", true)
          ], 4)
        ], 14, _hoisted_2$e))
      ]),
      _: 1
    }, 16, ["modelValue"]),
    !$props.readonly ? withDirectives((openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass({ "is-disabled": $props.disabled, "el-upload": $props.ui == "element", "el-upload--picture-card": $props.ui == "element", "ant-upload": $props.ui == "antd", "ant-upload-select": $props.ui == "antd", "ant-upload-select-picture-card": $props.ui == "antd" }),
      style: normalizeStyle({ width: $props.width + "px", height: $props.height + "px" }),
      onClick: _cache[4] || (_cache[4] = withModifiers((...args) => $options.handleAdd && $options.handleAdd(...args), ["self"]))
    }, [
      createElementVNode("i", {
        onClick: _cache[1] || (_cache[1] = withModifiers((...args) => $options.handleAdd && $options.handleAdd(...args), ["self"])),
        class: "iconfont icon-plus",
        style: normalizeStyle({ fontSize: $options.miniWidth / 4 + "px", lineHeight: $options.miniWidth / 4 + "px", marginTop: -$options.miniWidth / 8 + "px", marginLeft: -$options.miniWidth / 8 + "px", position: "absolute", top: $props.height / 2 + "px", left: $props.width / 2 + "px" })
      }, null, 4),
      $props.multiple ? (openBlock(), createElementBlock("input", {
        key: 0,
        accept: "image/*",
        multiple: "",
        ref: "uploadInput",
        onChange: _cache[2] || (_cache[2] = (...args) => $options.handleChange && $options.handleChange(...args)),
        type: "file",
        style: { width: 0, height: 0 },
        name: "file",
        class: "upload-input"
      }, null, 544)) : (openBlock(), createElementBlock("input", {
        key: 1,
        accept: "image/*",
        ref: "uploadInput",
        onChange: _cache[3] || (_cache[3] = (...args) => $options.handleChange && $options.handleChange(...args)),
        type: "file",
        style: { width: 0, height: 0 },
        name: "file",
        class: "upload-input"
      }, null, 544))
    ], 6)), [
      [vShow, (!$props.isQiniu || $props.isQiniu && $props.token) && $data.fileList.length < $props.limit]
    ]) : createCommentVNode("", true)
  ], 8, _hoisted_1$i);
}
var FmUpload = /* @__PURE__ */ _export_sfc(_sfc_main$p, [["render", _sfc_render$n]]);
let request$2;
var userService = {
  build: function($http) {
    request$2 = $http;
    return this;
  },
  save: function(inputForm) {
    return request$2({
      url: SYS_PATH + `/sys/user/save`,
      method: "post",
      headers: { arrayFormat: "repeat" },
      data: inputForm
    });
  },
  saveInfo: function(inputForm) {
    return request$2({
      url: SYS_PATH + `/sys/user/saveInfo`,
      method: "post",
      headers: { arrayFormat: "repeat" },
      data: inputForm
    });
  },
  savePwd: function(inputForm) {
    return request$2({
      url: SYS_PATH + `/sys/user/savePwd`,
      method: "put",
      params: inputForm
    });
  },
  delete: function(ids) {
    return request$2({
      url: SYS_PATH + "/sys/user/delete",
      method: "delete",
      params: { ids }
    });
  },
  queryById: function(id) {
    return request$2({
      url: SYS_PATH + `/sys/user/queryById`,
      method: "get",
      params: { id }
    });
  },
  getMenus: function() {
    return request$2({
      url: SYS_PATH + `/sys/user/getMenus`,
      method: "get"
    });
  },
  info: function() {
    return request$2({
      url: SYS_PATH + `/sys/user/info`,
      method: "get"
    });
  },
  list: function(params) {
    return request$2({
      url: SYS_PATH + "/sys/user/list",
      method: "get",
      params
    });
  },
  exportTemplate: function() {
    return request$2({
      url: SYS_PATH + "/sys/user/import/template",
      method: "get",
      responseType: "blob"
    });
  },
  exportExcel: function(params) {
    return request$2({
      url: SYS_PATH + "/sys/user/export",
      method: "get",
      params,
      responseType: "blob"
    });
  },
  importExcel: function(data2) {
    return request$2({
      url: SYS_PATH + "/sys/user/import",
      method: "post",
      data: data2
    });
  }
};
let request$1;
var officeService = {
  build: function($http) {
    request$1 = $http;
    return this;
  },
  save: function(inputForm) {
    return request$1({
      url: SYS_PATH + `/sys/office/save`,
      method: "post",
      data: inputForm
    });
  },
  drag: function(inputForm) {
    return request$1({
      url: SYS_PATH + `/sys/office/drag`,
      method: "post",
      data: inputForm
    });
  },
  delete: function(ids) {
    return request$1({
      url: SYS_PATH + "/sys/office/delete",
      method: "delete",
      params: { ids }
    });
  },
  queryById: function(id) {
    return request$1({
      url: SYS_PATH + `/sys/office/queryById`,
      method: "get",
      params: { id }
    });
  },
  treeData: function(params) {
    return request$1({
      url: SYS_PATH + "/sys/office/treeData",
      method: "get",
      params
    });
  }
};
var UserSelectDialog_vue_vue_type_style_index_0_scoped_true_lang = "";
const _sfc_main$o = {
  props: {
    tenantId: { type: String, default: null },
    limit: {
      type: Number,
      default: 999999
    }
  },
  data() {
    return {
      searchForm: {
        loginName: "",
        companyDTO: {
          id: ""
        },
        officeDTO: {
          id: ""
        },
        name: ""
      },
      dialogVisible: false,
      showGrouploading: false,
      showUserloading: false,
      groupId: "",
      pageSize: 10,
      total: 0,
      currentPage: 1,
      group: [],
      user: [],
      role: [],
      type: 1,
      selected: [],
      value: []
    };
  },
  computed: {
    selectedIds() {
      return this.selected.map((t) => t.id);
    }
  },
  methods: {
    open(data2) {
      this.value = data2 || [];
      this.selected = JSON.parse(JSON.stringify(data2 || []));
      this.dialogVisible = true;
      this.getGroup();
      this.getUser();
    },
    async getGroup() {
      this.showGrouploading = true;
      var res = await officeService.build(this.$http).treeData({ tenantId: this.tenantId });
      this.showGrouploading = false;
      var allNode = { id: "", type: "1", name: "\u6240\u6709" };
      res.unshift(allNode);
      this.group = res;
    },
    async getUser() {
      this.showUserloading = true;
      userService.build(this.$http).list(__spreadProps(__spreadValues({
        "current": this.currentPage,
        "size": this.pageSize
      }, this.searchForm), {
        "tenantDTO.id": this.tenantId
      })).then((data2) => {
        this.user = data2.records;
        this.total = data2.total;
        this.showUserloading = false;
        this.$refs.userScrollbar.setScrollTop(0);
      });
    },
    groupClick(data2) {
      if (data2.type === "1") {
        this.searchForm.companyDTO.id = data2.id;
        this.searchForm.officeDTO.id = "";
      } else {
        this.searchForm.companyDTO.id = "";
        this.searchForm.officeDTO.id = data2.id;
      }
      this.currentPage = 1;
      this.groupId = data2.id;
      this.getUser();
    },
    userClick(data2, checked) {
      var _a2, _b;
      if (checked) {
        if (this.limit === 1) {
          this.selected = [{
            id: data2.id,
            name: data2.name,
            tenantId: (_a2 = data2.tenantDTO) == null ? void 0 : _a2.id
          }];
        } else {
          this.selected.push({
            id: data2.id,
            name: data2.name,
            tenantId: (_b = data2.tenantDTO) == null ? void 0 : _b.id
          });
        }
      } else {
        this.selected = this.selected.filter((item2) => item2.id != data2.id);
      }
    },
    paginationChange() {
      this.getUser();
    },
    search() {
      this.currentPage = 1;
      this.getUser();
    },
    deleteSelected(index2) {
      this.selected.splice(index2, 1);
      console.log(this.selected);
      if (this.type == 1) {
        this.$refs.userTree.setCheckedKeys(this.selectedIds);
      } else if (this.type == 2) {
        this.$refs.groupTree.setCheckedKeys(this.selectedIds);
      }
    },
    save() {
      this.value.splice(0, this.value.length);
      this.selected.map((item2) => {
        this.value.push(item2);
      });
      if (this.limit < this.value.length) {
        this.$message.error(`\u4F60\u6700\u591A\u53EA\u80FD\u9009\u62E9${this.limit}\u4E2A\u7528\u6237`);
        return;
      }
      this.$emit("doSubmit", this.value);
      this.dialogVisible = false;
    }
  }
};
const _hoisted_1$h = {
  key: 0,
  class: "user-select"
};
const _hoisted_2$d = { class: "user-select__left" };
const _hoisted_3$c = { class: "user-select__search" };
const _hoisted_4$c = { class: "user-select__select" };
const _hoisted_5$b = { class: "user-select__tree" };
const _hoisted_6$a = { class: "custom-tree-node el-tree-node__label" };
const _hoisted_7$9 = { class: "label" };
const _hoisted_8$7 = { class: "user-select__user" };
const _hoisted_9$6 = { class: "user-select__user__list" };
const _hoisted_10$5 = { class: "user-select__toicon" };
const _hoisted_11$4 = { class: "user-select__selected" };
const _hoisted_12$4 = { class: "name" };
const _hoisted_13$2 = { class: "delete" };
const _hoisted_14$1 = /* @__PURE__ */ createTextVNode("\u53D6 \u6D88");
const _hoisted_15$1 = /* @__PURE__ */ createTextVNode("\u786E \u8BA4");
function _sfc_render$m(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_button = resolveComponent("el-button");
  const _component_el_input = resolveComponent("el-input");
  const _component_qiye = resolveComponent("qiye");
  const _component_bumen = resolveComponent("bumen");
  const _component_el_icon = resolveComponent("el-icon");
  const _component_el_tree = resolveComponent("el-tree");
  const _component_el_scrollbar = resolveComponent("el-scrollbar");
  const _component_el_pagination = resolveComponent("el-pagination");
  const _component_arrow_right = resolveComponent("arrow-right");
  const _component_el_avatar = resolveComponent("el-avatar");
  const _component_el_dialog = resolveComponent("el-dialog");
  const _directive_loading = resolveDirective("loading");
  return openBlock(), createBlock(_component_el_dialog, {
    modelValue: $data.dialogVisible,
    "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.dialogVisible = $event),
    title: "\u4EBA\u5458\u9009\u62E9",
    width: $data.type == 1 ? 680 : 460,
    "destroy-on-close": "",
    "append-to-body": "",
    onClosed: _cache[4] || (_cache[4] = ($event) => _ctx.$emit("closed")),
    draggable: ""
  }, {
    footer: withCtx(() => [
      createVNode(_component_el_button, {
        onClick: _cache[2] || (_cache[2] = ($event) => $data.dialogVisible = false)
      }, {
        default: withCtx(() => [
          _hoisted_14$1
        ]),
        _: 1
      }),
      createVNode(_component_el_button, {
        type: "primary",
        onClick: $options.save
      }, {
        default: withCtx(() => [
          _hoisted_15$1
        ]),
        _: 1
      }, 8, ["onClick"])
    ]),
    default: withCtx(() => [
      $data.type == 1 ? (openBlock(), createElementBlock("div", _hoisted_1$h, [
        createElementVNode("div", _hoisted_2$d, [
          createElementVNode("div", _hoisted_3$c, [
            createVNode(_component_el_input, {
              modelValue: $data.searchForm.name,
              "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.searchForm.name = $event),
              "prefix-icon": "search",
              placeholder: "\u641C\u7D22\u6210\u5458"
            }, {
              append: withCtx(() => [
                createVNode(_component_el_button, {
                  icon: "search",
                  onClick: $options.search
                }, null, 8, ["onClick"])
              ]),
              _: 1
            }, 8, ["modelValue"])
          ]),
          createElementVNode("div", _hoisted_4$c, [
            withDirectives((openBlock(), createElementBlock("div", _hoisted_5$b, [
              createVNode(_component_el_scrollbar, null, {
                default: withCtx(() => [
                  createVNode(_component_el_tree, {
                    class: "menu",
                    ref: "groupTree",
                    data: $data.group,
                    "node-key": "id",
                    props: {
                      label: "name",
                      children: "children"
                    },
                    "highlight-current": "",
                    "expand-on-click-node": false,
                    "current-node-key": $data.groupId,
                    onNodeClick: $options.groupClick
                  }, {
                    default: withCtx(({ node, data: data2 }) => [
                      createElementVNode("span", _hoisted_6$a, [
                        createElementVNode("span", _hoisted_7$9, [
                          createVNode(_component_el_icon, {
                            size: 16,
                            class: "m-r-5"
                          }, {
                            default: withCtx(() => [
                              data2.type === "1" ? (openBlock(), createBlock(_component_qiye, {
                                key: 0,
                                style: normalizeStyle({ color: _ctx.$TOOL.data.get("IS_PRIMARY_TENANT") && data2.tenantDTO && _ctx.$utils.getTenantColorById(data2.tenantDTO.id) })
                              }, null, 8, ["style"])) : (openBlock(), createBlock(_component_bumen, {
                                key: 1,
                                style: normalizeStyle({ color: _ctx.$TOOL.data.get("IS_PRIMARY_TENANT") && data2.tenantDTO && _ctx.$utils.getTenantColorById(data2.tenantDTO.id) })
                              }, null, 8, ["style"]))
                            ]),
                            _: 2
                          }, 1024),
                          createTextVNode(" " + toDisplayString$1(node.label), 1)
                        ])
                      ])
                    ]),
                    _: 1
                  }, 8, ["data", "current-node-key", "onNodeClick"])
                ]),
                _: 1
              })
            ])), [
              [_directive_loading, $data.showGrouploading]
            ]),
            withDirectives((openBlock(), createElementBlock("div", _hoisted_8$7, [
              createElementVNode("div", _hoisted_9$6, [
                createVNode(_component_el_scrollbar, { ref: "userScrollbar" }, {
                  default: withCtx(() => [
                    createVNode(_component_el_tree, {
                      class: "menu",
                      ref: "userTree",
                      data: $data.user,
                      "node-key": "id",
                      "highlight-current": "",
                      props: {
                        key: "id",
                        label: "name",
                        children: "children"
                      },
                      "default-checked-keys": $options.selectedIds,
                      "show-checkbox": $props.limit > 1,
                      "check-on-click-node": "",
                      onCheckChange: $options.userClick
                    }, null, 8, ["data", "default-checked-keys", "show-checkbox", "onCheckChange"])
                  ]),
                  _: 1
                }, 512)
              ]),
              createElementVNode("footer", null, [
                createVNode(_component_el_pagination, {
                  background: "",
                  layout: "prev,next",
                  small: "",
                  total: $data.total,
                  "page-size": $data.pageSize,
                  currentPage: $data.currentPage,
                  "onUpdate:currentPage": _cache[1] || (_cache[1] = ($event) => $data.currentPage = $event),
                  onCurrentChange: $options.paginationChange
                }, null, 8, ["total", "page-size", "currentPage", "onCurrentChange"])
              ])
            ])), [
              [_directive_loading, $data.showUserloading]
            ])
          ])
        ]),
        createElementVNode("div", _hoisted_10$5, [
          createVNode(_component_el_icon, null, {
            default: withCtx(() => [
              createVNode(_component_arrow_right)
            ]),
            _: 1
          })
        ]),
        createElementVNode("div", _hoisted_11$4, [
          createElementVNode("header", null, "\u5DF2\u9009 (" + toDisplayString$1($data.selected.length) + ")", 1),
          createElementVNode("ul", null, [
            createVNode(_component_el_scrollbar, null, {
              default: withCtx(() => [
                (openBlock(true), createElementBlock(Fragment, null, renderList($data.selected, (item2, index2) => {
                  return openBlock(), createElementBlock("li", {
                    key: item2.id
                  }, [
                    createElementVNode("span", _hoisted_12$4, [
                      _ctx.$TOOL.data.get("IS_PRIMARY_TENANT") ? (openBlock(), createBlock(_component_el_avatar, {
                        key: 0,
                        size: 30,
                        style: normalizeStyle({ background: _ctx.$utils.getTenantColorById(item2.tenantId) + "!important" })
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString$1(item2.name.substring(0, 1)), 1)
                        ]),
                        _: 2
                      }, 1032, ["style"])) : (openBlock(), createBlock(_component_el_avatar, { key: 1 }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString$1(item2.name.substring(0, 1)), 1)
                        ]),
                        _: 2
                      }, 1024)),
                      createElementVNode("label", null, toDisplayString$1(item2.name), 1)
                    ]),
                    createElementVNode("span", _hoisted_13$2, [
                      createVNode(_component_el_button, {
                        text: "",
                        type: "primary",
                        icon: "delete",
                        circle: "",
                        size: "small",
                        onClick: ($event) => $options.deleteSelected(index2)
                      }, null, 8, ["onClick"])
                    ])
                  ]);
                }), 128))
              ]),
              _: 1
            })
          ])
        ])
      ])) : createCommentVNode("", true)
    ]),
    _: 1
  }, 8, ["modelValue", "width"]);
}
var userSelect = /* @__PURE__ */ _export_sfc(_sfc_main$o, [["render", _sfc_render$m], ["__scopeId", "data-v-d7e9e0e8"]]);
var index_vue_vue_type_style_index_0_lang$1 = "";
const _sfc_main$n = {
  data() {
    return {
      name: "",
      selectData: []
    };
  },
  props: {
    limit: Number,
    modelValue: { type: String, default: "" },
    tenantId: { type: String, default: null },
    printRead: {
      type: Boolean,
      default: () => {
        return false;
      }
    },
    clearable: {
      type: Boolean,
      default: () => {
        return true;
      }
    },
    readonly: {
      type: Boolean,
      default: () => {
        return false;
      }
    },
    disabled: {
      type: Boolean,
      default: () => {
        return false;
      }
    }
  },
  components: {
    userSelect
  },
  watch: {
    modelValue: {
      handler(newVal) {
        this.selectData = [];
        if (newVal) {
          newVal.split(",").forEach((id) => {
            userService.build(this.$http).queryById(id).then((data2) => {
              if (data2 && data2.id !== "") {
                this.selectData.push(data2);
                this.name = this.selectData.map((user) => {
                  return user.name;
                }).join(",");
              }
            });
          });
        } else {
          this.name = "";
        }
      },
      immediate: true,
      deep: false
    }
  },
  methods: {
    selectUsersToInput(users) {
      let selectIds = users.map((user) => {
        return user.id;
      }).join(",");
      this.$emit("update:modelValue", selectIds);
    },
    showUserSelect() {
      this.$refs.userSelect.open(this.selectData);
    }
  }
};
const _hoisted_1$g = { key: 0 };
function _sfc_render$l(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_button = resolveComponent("el-button");
  const _component_el_input = resolveComponent("el-input");
  const _component_user_select = resolveComponent("user-select");
  return $props.printRead ? (openBlock(), createElementBlock("label", _hoisted_1$g, toDisplayString$1($data.name), 1)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
    createVNode(_component_el_input, {
      placeholder: "\u8BF7\u9009\u62E9",
      readonly: "",
      clearable: $props.clearable,
      disabled: $props.disabled,
      style: { "line-hight": "40px" },
      modelValue: $data.name,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.name = $event)
    }, {
      append: withCtx(() => [
        createVNode(_component_el_button, {
          disabled: $props.disabled,
          readonly: $props.readonly,
          onClick: $options.showUserSelect,
          icon: "search"
        }, null, 8, ["disabled", "readonly", "onClick"])
      ]),
      _: 1
    }, 8, ["clearable", "disabled", "modelValue"]),
    createVNode(_component_user_select, {
      ref: "userSelect",
      onDoSubmit: $options.selectUsersToInput,
      tenantId: $props.tenantId,
      limit: $props.limit
    }, null, 8, ["onDoSubmit", "tenantId", "limit"])
  ], 64));
}
var UserSelect = /* @__PURE__ */ _export_sfc(_sfc_main$n, [["render", _sfc_render$l]]);
let request;
var areaService = {
  build: function($http) {
    request = $http;
    return this;
  },
  save: function(inputForm) {
    return request({
      url: SYS_PATH + `/sys/area/save`,
      method: "post",
      data: inputForm
    });
  },
  drag: function(inputForm) {
    return request({
      url: SYS_PATH + `/sys/area/drag`,
      method: "post",
      data: inputForm
    });
  },
  delete: function(ids) {
    return request({
      url: SYS_PATH + "/sys/area/delete",
      method: "delete",
      params: { ids }
    });
  },
  queryById: function(id) {
    return request({
      url: SYS_PATH + `/sys/area/queryById`,
      method: "get",
      params: { id }
    });
  },
  treeData: function(extId) {
    return request({
      url: SYS_PATH + "/sys/area/treeData",
      method: "get",
      params: { extId }
    });
  }
};
const _sfc_main$m = {
  props: {
    modelValue: { type: String, default: "" },
    clearable: {
      type: Boolean,
      default: () => {
        return true;
      }
    },
    printRead: {
      type: Boolean,
      default: () => {
        return false;
      }
    },
    readonly: {
      type: Boolean,
      default: () => {
        return false;
      }
    },
    disabled: {
      type: Boolean,
      default: () => {
        return false;
      }
    }
  },
  data() {
    return {
      defaultValue: [],
      dialogVisible: false,
      areaTreeData: []
    };
  },
  watch: {
    modelValue: {
      handler(val) {
        if (val) {
          this.defaultValue = val.split("/");
        } else {
          this.defaultValue = "";
        }
      },
      immediate: true,
      deep: false
    },
    defaultValue(val) {
      if (val) {
        this.$emit("update:modelValue", val.join("/"));
      } else {
        this.$emit("update:modelValue", "");
      }
    }
  },
  mounted() {
    areaService.build(this.$http).treeData().then((data2) => {
      this.areaTreeData = data2;
    });
  }
};
function _sfc_render$k(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_cascader = resolveComponent("el-cascader");
  return $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
    createTextVNode(toDisplayString$1($data.defaultValue.join("/")), 1)
  ], 64)) : (openBlock(), createBlock(_component_el_cascader, {
    key: 1,
    style: { "width": "100%" },
    readonly: $props.readonly,
    clearable: $props.clearable,
    disabled: $props.disabled,
    modelValue: $data.defaultValue,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.defaultValue = $event),
    props: {
      checkStrictly: true,
      value: "name",
      label: "name",
      children: "children"
    },
    options: $data.areaTreeData
  }, null, 8, ["readonly", "clearable", "disabled", "modelValue", "options"]));
}
var Area = /* @__PURE__ */ _export_sfc(_sfc_main$m, [["render", _sfc_render$k]]);
const _sfc_main$l = {
  props: {
    modelValue: { type: String, default: "" },
    printRead: {
      type: Boolean,
      default: () => {
        return false;
      }
    },
    clearable: {
      type: Boolean,
      default: () => {
        return true;
      }
    },
    type: { type: String, default: "2" },
    readonly: {
      type: Boolean,
      default: () => {
        return false;
      }
    },
    disabled: {
      type: Boolean,
      default: () => {
        return false;
      }
    }
  },
  data() {
    return {
      defaultValue: "",
      dialogVisible: false,
      officeTreeData: []
    };
  },
  watch: {
    modelValue(val) {
      this.defaultValue = val;
    },
    defaultValue(val) {
      this.$emit("update:modelValue", val);
    }
  },
  mounted() {
    officeService.build(this.$http).treeData({ type: this.type }).then((data2) => {
      this.officeTreeData = data2;
    });
  },
  methods: {
    getTreeText(value, options) {
      for (let i2 = 0; i2 < options.length; i2++) {
        let currentOpt = options[i2];
        if (currentOpt.id == value) {
          return currentOpt.name;
        }
        if (currentOpt.children && currentOpt.children.length > 0) {
          let res = this.getTreeText(value, currentOpt.children);
          if (res == "-") {
            continue;
          } else {
            return res;
          }
        }
      }
      return "-";
    }
  }
};
const _hoisted_1$f = { class: "custom-tree-node el-tree-node__label" };
const _hoisted_2$c = { class: "label" };
function _sfc_render$j(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_tree_select = resolveComponent("el-tree-select");
  return $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
    createTextVNode(toDisplayString$1($options.getTreeText($data.defaultValue, $data.officeTreeData)), 1)
  ], 64)) : (openBlock(), createBlock(_component_el_tree_select, {
    key: 1,
    "value-key": "id",
    props: {
      label: "name",
      children: "children"
    },
    "check-strictly": "",
    data: $data.officeTreeData,
    style: { "width": "100%" },
    readonly: $props.readonly,
    clearable: $props.clearable,
    disabled: $props.disabled,
    modelValue: $data.defaultValue,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.defaultValue = $event)
  }, {
    default: withCtx(({ node, data: data2 }) => [
      createElementVNode("span", _hoisted_1$f, [
        createElementVNode("span", _hoisted_2$c, [
          createElementVNode("span", null, [
            data2.type === "1" ? (openBlock(), createElementBlock("i", {
              key: 0,
              style: normalizeStyle({ color: _ctx.$TOOL.data.get("IS_PRIMARY_TENANT") && data2.tenantDTO && _ctx.$utils.getTenantColorById(data2.tenantDTO.id) }),
              class: "iconfont icon-qiye"
            }, null, 4)) : (openBlock(), createElementBlock("i", {
              key: 1,
              style: normalizeStyle({ color: _ctx.$TOOL.data.get("IS_PRIMARY_TENANT") && data2.tenantDTO && _ctx.$utils.getTenantColorById(data2.tenantDTO.id) }),
              class: "iconfont icon-bumen"
            }, null, 4)),
            createTextVNode(" " + toDisplayString$1(node.label), 1)
          ])
        ])
      ])
    ]),
    _: 1
  }, 8, ["data", "readonly", "clearable", "disabled", "modelValue"]));
}
var OfficeSelect = /* @__PURE__ */ _export_sfc(_sfc_main$l, [["render", _sfc_render$j]]);
const _sfc_main$k = {
  components: {
    FmUpload,
    Editor: _sfc_main$y,
    Area,
    UserSelect,
    OfficeSelect
  },
  props: ["element", "isTable"],
  data() {
    return {
      key: Math.random().toString(36).slice(-8),
      elementKey: Math.random().toString(36).slice(-8)
    };
  },
  created() {
    if (this.element.type == "component") {
      this.$options.components[`component-${this.element.key}`] = {
        template: `${this.element.options.template}`,
        props: ["modelValue"],
        data: () => ({
          dataModel: this.modelValue
        })
      };
    }
  },
  watch: {
    "element.options.template": function(val) {
      this.$options.components[`component-${this.element.key}`] = {
        template: `${val}`,
        props: ["modelValue"],
        data: () => ({
          dataModel: this.modelValue
        })
      };
      this.key = Math.random().toString(36).slice(-8);
    },
    "element.options.defaultValue": function(val) {
      this.elementKey = Math.random().toString(36).slice(-8);
    }
  }
};
const _hoisted_1$e = {
  key: 16,
  style: { "height": "50px", "color": "#999", "background": "#eee", "line-height": "50px", "text-align": "center", "width": "100%" }
};
const _hoisted_2$b = { key: 19 };
const _hoisted_3$b = ["innerHTML"];
const _hoisted_4$b = {
  key: 0,
  class: "el-upload__tip"
};
function _sfc_render$i(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_input = resolveComponent("el-input");
  const _component_el_input_number = resolveComponent("el-input-number");
  const _component_el_radio = resolveComponent("el-radio");
  const _component_el_radio_group = resolveComponent("el-radio-group");
  const _component_el_checkbox = resolveComponent("el-checkbox");
  const _component_el_checkbox_group = resolveComponent("el-checkbox-group");
  const _component_el_time_picker = resolveComponent("el-time-picker");
  const _component_el_date_picker = resolveComponent("el-date-picker");
  const _component_el_rate = resolveComponent("el-rate");
  const _component_el_color_picker = resolveComponent("el-color-picker");
  const _component_el_option = resolveComponent("el-option");
  const _component_el_select = resolveComponent("el-select");
  const _component_el_switch = resolveComponent("el-switch");
  const _component_el_slider = resolveComponent("el-slider");
  const _component_fm_upload = resolveComponent("fm-upload");
  const _component_el_cascader = resolveComponent("el-cascader");
  const _component_el_tree_select = resolveComponent("el-tree-select");
  const _component_Editor = resolveComponent("Editor");
  const _component_el_button = resolveComponent("el-button");
  const _component_el_upload = resolveComponent("el-upload");
  const _component_el_link = resolveComponent("el-link");
  const _component_el_step = resolveComponent("el-step");
  const _component_el_steps = resolveComponent("el-steps");
  const _component_el_transfer = resolveComponent("el-transfer");
  const _component_user_select = resolveComponent("user-select");
  const _component_OfficeSelect = resolveComponent("OfficeSelect");
  const _component_Area = resolveComponent("Area");
  return openBlock(), createElementBlock(Fragment, null, [
    $props.element.type == "input" ? (openBlock(), createBlock(_component_el_input, {
      key: 0,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $props.element.options.defaultValue = $event),
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      placeholder: $props.element.options.placeholder,
      disabled: $props.element.options.disabled,
      "show-password": $props.element.options.showPassword
    }, null, 8, ["modelValue", "style", "placeholder", "disabled", "show-password"])) : createCommentVNode("", true),
    $props.element.type == "textarea" ? (openBlock(), createBlock(_component_el_input, {
      key: 1,
      type: "textarea",
      rows: 5,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $props.element.options.defaultValue = $event),
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      disabled: $props.element.options.disabled,
      placeholder: $props.element.options.placeholder
    }, null, 8, ["modelValue", "style", "disabled", "placeholder"])) : createCommentVNode("", true),
    $props.element.type == "number" ? (openBlock(), createBlock(_component_el_input_number, {
      key: 2,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $props.element.options.defaultValue = $event),
      disabled: $props.element.options.disabled,
      "controls-position": $props.element.options.controlsPosition,
      precision: $props.element.options.precision,
      controls: $props.element.options.controls,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width })
    }, null, 8, ["modelValue", "disabled", "controls-position", "precision", "controls", "style"])) : createCommentVNode("", true),
    $props.element.type == "radio" ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
      $props.element.options.remote === 3 ? (openBlock(), createBlock(_component_el_radio_group, {
        key: 0,
        modelValue: $props.element.options.defaultValue,
        "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $props.element.options.defaultValue = $event),
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width, display: "block" }),
        disabled: $props.element.options.disabled
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$dictUtils.getDictList($props.element.options.dictType), (item2, index2) => {
            return openBlock(), createBlock(_component_el_radio, {
              style: normalizeStyle({ display: $props.element.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: item2.value + index2
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(item2.label), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "style", "disabled"])) : (openBlock(), createBlock(_component_el_radio_group, {
        key: 1,
        modelValue: $props.element.options.defaultValue,
        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $props.element.options.defaultValue = $event),
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width, display: "block" }),
        disabled: $props.element.options.disabled
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.options.options, (item2, index2) => {
            return openBlock(), createBlock(_component_el_radio, {
              style: normalizeStyle({ display: $props.element.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: item2.value + index2
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1($props.element.options.showLabel ? item2.label : item2.value), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "style", "disabled"]))
    ], 64)) : createCommentVNode("", true),
    $props.element.type == "checkbox" ? (openBlock(), createElementBlock(Fragment, { key: 4 }, [
      $props.element.options.remote === 3 ? (openBlock(), createBlock(_component_el_checkbox_group, {
        key: 0,
        modelValue: $props.element.options.defaultValue,
        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $props.element.options.defaultValue = $event),
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
        disabled: $props.element.options.disabled
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$dictUtils.getDictList($props.element.options.dictType), (item2, index2) => {
            return openBlock(), createBlock(_component_el_checkbox, {
              style: normalizeStyle({ display: $props.element.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: item2.value + index2
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(item2.label), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "style", "disabled"])) : (openBlock(), createBlock(_component_el_checkbox_group, {
        key: 1,
        modelValue: $props.element.options.defaultValue,
        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $props.element.options.defaultValue = $event),
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
        disabled: $props.element.options.disabled
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.options.options, (item2, index2) => {
            return openBlock(), createBlock(_component_el_checkbox, {
              style: normalizeStyle({ display: $props.element.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: item2.value + index2
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1($props.element.options.showLabel ? item2.label : item2.value), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "style", "disabled"]))
    ], 64)) : createCommentVNode("", true),
    $props.element.type == "time" ? (openBlock(), createBlock(_component_el_time_picker, {
      key: $data.elementKey,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $props.element.options.defaultValue = $event),
      "is-range": $props.element.options.isRange,
      placeholder: $props.element.options.placeholder,
      "start-placeholder": $props.element.options.startPlaceholder,
      "end-placeholder": $props.element.options.endPlaceholder,
      readonly: $props.element.options.readonly,
      disabled: $props.element.options.disabled,
      editable: $props.element.options.editable,
      clearable: $props.element.options.clearable,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      "value-format": $props.element.options.format
    }, null, 8, ["modelValue", "is-range", "placeholder", "start-placeholder", "end-placeholder", "readonly", "disabled", "editable", "clearable", "style", "value-format"])) : createCommentVNode("", true),
    $props.element.type == "date" ? (openBlock(), createBlock(_component_el_date_picker, {
      key: $data.elementKey,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $props.element.options.defaultValue = $event),
      type: $props.element.options.type,
      "is-range": $props.element.options.isRange,
      placeholder: $props.element.options.placeholder,
      "start-placeholder": $props.element.options.startPlaceholder,
      "end-placeholder": $props.element.options.endPlaceholder,
      readonly: $props.element.options.readonly,
      disabled: $props.element.options.disabled,
      editable: $props.element.options.editable,
      clearable: $props.element.options.clearable,
      "value-format": $props.element.options.timestamp ? "timestamp" : $props.element.options.format,
      format: $props.element.options.format,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width })
    }, null, 8, ["modelValue", "type", "is-range", "placeholder", "start-placeholder", "end-placeholder", "readonly", "disabled", "editable", "clearable", "value-format", "format", "style"])) : createCommentVNode("", true),
    $props.element.type == "rate" ? (openBlock(), createBlock(_component_el_rate, {
      key: 7,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $props.element.options.defaultValue = $event),
      max: $props.element.options.max,
      disabled: $props.element.options.disabled,
      "allow-half": $props.element.options.allowHalf,
      "show-score": $props.element.options.showScore
    }, null, 8, ["modelValue", "max", "disabled", "allow-half", "show-score"])) : createCommentVNode("", true),
    $props.element.type == "color" ? (openBlock(), createBlock(_component_el_color_picker, {
      key: 8,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $props.element.options.defaultValue = $event),
      disabled: $props.element.options.disabled,
      "show-alpha": $props.element.options.showAlpha
    }, null, 8, ["modelValue", "disabled", "show-alpha"])) : createCommentVNode("", true),
    $props.element.type == "select" ? (openBlock(), createElementBlock(Fragment, { key: 9 }, [
      $props.element.options.remote === 3 ? (openBlock(), createBlock(_component_el_select, {
        key: 0,
        modelValue: $props.element.options.defaultValue,
        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $props.element.options.defaultValue = $event),
        disabled: $props.element.options.disabled,
        multiple: $props.element.options.multiple,
        clearable: $props.element.options.clearable,
        placeholder: $props.element.options.placeholder,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width })
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$dictUtils.getDictList($props.element.options.dictType), (item2) => {
            return openBlock(), createBlock(_component_el_option, {
              key: item2.value,
              label: item2.label,
              value: item2.value
            }, null, 8, ["label", "value"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "disabled", "multiple", "clearable", "placeholder", "style"])) : (openBlock(), createBlock(_component_el_select, {
        key: 1,
        modelValue: $props.element.options.defaultValue,
        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $props.element.options.defaultValue = $event),
        disabled: $props.element.options.disabled,
        multiple: $props.element.options.multiple,
        clearable: $props.element.options.clearable,
        placeholder: $props.element.options.placeholder,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width })
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.options.options, (item2) => {
            return openBlock(), createBlock(_component_el_option, {
              key: item2.value,
              value: item2.value,
              label: $props.element.options.showLabel ? item2.label : item2.value
            }, null, 8, ["value", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "disabled", "multiple", "clearable", "placeholder", "style"]))
    ], 64)) : createCommentVNode("", true),
    $props.element.type == "switch" ? (openBlock(), createBlock(_component_el_switch, {
      key: 10,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $props.element.options.defaultValue = $event),
      disabled: $props.element.options.disabled,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width })
    }, null, 8, ["modelValue", "disabled", "style"])) : createCommentVNode("", true),
    $props.element.type == "slider" ? (openBlock(), createBlock(_component_el_slider, {
      key: 11,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $props.element.options.defaultValue = $event),
      min: $props.element.options.min,
      max: $props.element.options.max,
      disabled: $props.element.options.disabled,
      step: $props.element.options.step,
      "show-input": $props.element.options.showInput,
      range: $props.element.options.range,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width })
    }, null, 8, ["modelValue", "min", "max", "disabled", "step", "show-input", "range", "style"])) : createCommentVNode("", true),
    $props.element.type == "imgupload" ? (openBlock(), createBlock(_component_fm_upload, {
      key: 12,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $props.element.options.defaultValue = $event),
      disabled: $props.element.options.disabled,
      style: normalizeStyle({ "width": $props.isTable ? "100%" : $props.element.options.width }),
      width: $props.element.options.size.width,
      height: $props.element.options.size.height,
      token: "xxx",
      domain: "xxx"
    }, null, 8, ["modelValue", "disabled", "style", "width", "height"])) : createCommentVNode("", true),
    $props.element.type == "cascader" ? (openBlock(), createBlock(_component_el_cascader, {
      key: 13,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => $props.element.options.defaultValue = $event),
      disabled: $props.element.options.disabled,
      clearable: $props.element.options.clearable,
      placeholder: $props.element.options.placeholder,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      options: $props.element.options.remote ? [] : $props.element.options.options,
      props: { multiple: $props.element.options.multiple, checkStrictly: $props.element.options.checkStrictly }
    }, null, 8, ["modelValue", "disabled", "clearable", "placeholder", "style", "options", "props"])) : createCommentVNode("", true),
    $props.element.type == "treeselect" ? (openBlock(), createBlock(_component_el_tree_select, {
      key: 14,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => $props.element.options.defaultValue = $event),
      disabled: $props.element.options.disabled,
      clearable: $props.element.options.clearable,
      placeholder: $props.element.options.placeholder,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      data: $props.element.options.remote ? [] : $props.element.options.options,
      multiple: $props.element.options.multiple
    }, null, 8, ["modelValue", "disabled", "clearable", "placeholder", "style", "data", "multiple"])) : createCommentVNode("", true),
    $props.element.type == "editor" ? (openBlock(), createBlock(_component_Editor, {
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => $props.element.options.defaultValue = $event),
      "custom-style": { width: $props.isTable ? "100%" : $props.element.options.width, cursor: $props.element.options.disabled ? "no-drop" : "", backgroundColor: $props.element.options.disabled ? "#F5F7FA" : "" },
      toolbar: $props.element.options.customToolbar,
      class: "fm-editor",
      disabled: $props.element.options.disabled,
      key: $data.elementKey
    }, null, 8, ["modelValue", "custom-style", "toolbar", "disabled"])) : createCommentVNode("", true),
    $props.element.type == "blank" ? (openBlock(), createElementBlock("div", _hoisted_1$e, toDisplayString$1($props.element.model), 1)) : createCommentVNode("", true),
    $props.element.type == "component" ? (openBlock(), createBlock(resolveDynamicComponent(`component-${$props.element.key}`), {
      key: $data.key,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => $props.element.options.defaultValue = $event)
    }, null, 8, ["modelValue"])) : createCommentVNode("", true),
    $props.element.type == "custom" ? (openBlock(), createBlock(resolveDynamicComponent($props.element.el), mergeProps({
      key: 18,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => $props.element.options.defaultValue = $event),
      width: $props.element.options.width,
      height: $props.element.options.height,
      placeholder: $props.element.options.placeholder,
      readonly: $props.element.options.readonly,
      disabled: $props.element.options.disabled,
      editable: $props.element.options.editable,
      clearable: $props.element.options.clearable
    }, $props.element.options.extendProps), null, 16, ["modelValue", "width", "height", "placeholder", "readonly", "disabled", "editable", "clearable"])) : createCommentVNode("", true),
    $props.element.type == "text" ? (openBlock(), createElementBlock("span", _hoisted_2$b, toDisplayString$1($props.element.options.defaultValue), 1)) : createCommentVNode("", true),
    $props.element.type == "html" ? (openBlock(), createElementBlock("span", {
      key: 20,
      innerHTML: $props.element.options.defaultValue
    }, null, 8, _hoisted_3$b)) : createCommentVNode("", true),
    $props.element.type == "fileupload" ? (openBlock(), createBlock(_component_el_upload, {
      key: 21,
      action: "https://jsonplaceholder.typicode.com/posts/",
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      disabled: $props.element.options.disabled,
      limit: $props.element.options.limit
    }, {
      tip: withCtx(() => [
        $props.element.options.tip ? (openBlock(), createElementBlock("div", _hoisted_4$b, toDisplayString$1($props.element.options.tip), 1)) : createCommentVNode("", true)
      ]),
      default: withCtx(() => [
        createVNode(_component_el_button, {
          size: "default",
          type: "primary"
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.upload")), 1)
          ]),
          _: 1
        })
      ]),
      _: 1
    }, 8, ["style", "disabled", "limit"])) : createCommentVNode("", true),
    $props.element.type == "button" ? (openBlock(), createBlock(_component_el_button, {
      key: 22,
      disabled: $props.element.options.disabled,
      size: $props.element.options.buttonSize,
      type: $props.element.options.buttonType,
      plain: $props.element.options.buttonPlain,
      round: $props.element.options.buttonRound,
      circle: $props.element.options.buttonCircle,
      style: normalizeStyle({ width: $props.element.options.width })
    }, {
      default: withCtx(() => [
        createTextVNode(toDisplayString$1($props.element.options.buttonName), 1)
      ]),
      _: 1
    }, 8, ["disabled", "size", "type", "plain", "round", "circle", "style"])) : createCommentVNode("", true),
    $props.element.type == "link" ? (openBlock(), createBlock(_component_el_link, {
      key: 23,
      disabled: $props.element.options.disabled,
      type: $props.element.options.linkType,
      underline: $props.element.options.underline
    }, {
      default: withCtx(() => [
        createTextVNode(toDisplayString$1($props.element.options.linkName), 1)
      ]),
      _: 1
    }, 8, ["disabled", "type", "underline"])) : createCommentVNode("", true),
    $props.element.type == "steps" ? (openBlock(), createBlock(_component_el_steps, {
      key: 24,
      active: $props.element.options.defaultValue,
      space: $props.element.options.space,
      direction: $props.element.options.direction,
      "process-status": $props.element.options.processStatus,
      "finish-status": $props.element.options.finishStatus,
      "align-center": $props.element.options.alignCenter,
      simple: $props.element.options.simple,
      style: { "line-height": "normal" }
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.options.steps, (item2, index2) => {
          return openBlock(), createBlock(_component_el_step, {
            title: item2.title,
            description: item2.description,
            key: index2
          }, null, 8, ["title", "description"]);
        }), 128))
      ]),
      _: 1
    }, 8, ["active", "space", "direction", "process-status", "finish-status", "align-center", "simple"])) : createCommentVNode("", true),
    $props.element.type == "transfer" ? (openBlock(), createBlock(_component_el_transfer, {
      key: 25,
      "model-value": $props.element.options.defaultValue,
      data: $props.element.options.data,
      filterable: $props.element.options.filterable,
      titles: $props.element.options.titles,
      style: normalizeStyle({ "width": $props.isTable ? "100%" : $props.element.options.width })
    }, null, 8, ["model-value", "data", "filterable", "titles", "style"])) : createCommentVNode("", true),
    $props.element.type == "user" ? (openBlock(), createBlock(_component_user_select, {
      key: 26,
      disabled: $props.element.options.disabled,
      placeholder: $props.element.options.placeholder,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width })
    }, null, 8, ["disabled", "placeholder", "style"])) : createCommentVNode("", true),
    $props.element.type == "office" ? (openBlock(), createBlock(_component_OfficeSelect, {
      key: 27,
      disabled: $props.element.options.disabled,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      placeholder: $props.element.options.placeholder,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => $props.element.options.defaultValue = $event),
      clearable: true
    }, null, 8, ["disabled", "style", "placeholder", "modelValue"])) : createCommentVNode("", true),
    $props.element.type == "area" ? (openBlock(), createBlock(_component_Area, {
      key: 28,
      disabled: $props.element.options.disabled,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      placeholder: $props.element.options.placeholder,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => $props.element.options.defaultValue = $event),
      clearable: true
    }, null, 8, ["disabled", "style", "placeholder", "modelValue"])) : createCommentVNode("", true),
    $props.element.type == "dict" ? (openBlock(), createBlock(_component_el_select, {
      key: 29,
      modelValue: $props.element.options.defaultValue,
      "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => $props.element.options.defaultValue = $event),
      disabled: $props.element.options.disabled,
      multiple: $props.element.options.multiple,
      clearable: $props.element.options.clearable,
      placeholder: $props.element.options.placeholder,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.element.options.width }),
      filterable: $props.element.options.filterable
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$dictUtils.getDictList($props.element.options.dictType), (item2) => {
          return openBlock(), createBlock(_component_el_option, {
            key: item2.value,
            label: item2.label,
            value: item2.value
          }, null, 8, ["label", "value"]);
        }), 128))
      ]),
      _: 1
    }, 8, ["modelValue", "disabled", "multiple", "clearable", "placeholder", "style", "filterable"])) : createCommentVNode("", true)
  ], 64);
}
var WidgetElementItem = /* @__PURE__ */ _export_sfc(_sfc_main$k, [["render", _sfc_render$i]]);
var lodash = { exports: {} };
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
(function(module2, exports) {
  (function() {
    var undefined$1;
    var VERSION2 = "4.17.21";
    var LARGE_ARRAY_SIZE = 200;
    var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var MAX_MEMOIZE_SIZE = 500;
    var PLACEHOLDER = "__lodash_placeholder__";
    var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
    var HOT_COUNT = 800, HOT_SPAN = 16;
    var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
    var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    var wrapFlags = [
      ["ary", WRAP_ARY_FLAG],
      ["bind", WRAP_BIND_FLAG],
      ["bindKey", WRAP_BIND_KEY_FLAG],
      ["curry", WRAP_CURRY_FLAG],
      ["curryRight", WRAP_CURRY_RIGHT_FLAG],
      ["flip", WRAP_FLIP_FLAG],
      ["partial", WRAP_PARTIAL_FLAG],
      ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
      ["rearg", WRAP_REARG_FLAG]
    ];
    var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
    var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    var reTrimStart = /^\s+/;
    var reWhitespace = /\s/;
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    var reEscapeChar = /\\(\\)?/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reApos = RegExp(rsApos, "g");
    var reComboMark = RegExp(rsCombo, "g");
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    var contextProps = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ];
    var templateCounter = -1;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    var deburredLetters = {
      "\xC0": "A",
      "\xC1": "A",
      "\xC2": "A",
      "\xC3": "A",
      "\xC4": "A",
      "\xC5": "A",
      "\xE0": "a",
      "\xE1": "a",
      "\xE2": "a",
      "\xE3": "a",
      "\xE4": "a",
      "\xE5": "a",
      "\xC7": "C",
      "\xE7": "c",
      "\xD0": "D",
      "\xF0": "d",
      "\xC8": "E",
      "\xC9": "E",
      "\xCA": "E",
      "\xCB": "E",
      "\xE8": "e",
      "\xE9": "e",
      "\xEA": "e",
      "\xEB": "e",
      "\xCC": "I",
      "\xCD": "I",
      "\xCE": "I",
      "\xCF": "I",
      "\xEC": "i",
      "\xED": "i",
      "\xEE": "i",
      "\xEF": "i",
      "\xD1": "N",
      "\xF1": "n",
      "\xD2": "O",
      "\xD3": "O",
      "\xD4": "O",
      "\xD5": "O",
      "\xD6": "O",
      "\xD8": "O",
      "\xF2": "o",
      "\xF3": "o",
      "\xF4": "o",
      "\xF5": "o",
      "\xF6": "o",
      "\xF8": "o",
      "\xD9": "U",
      "\xDA": "U",
      "\xDB": "U",
      "\xDC": "U",
      "\xF9": "u",
      "\xFA": "u",
      "\xFB": "u",
      "\xFC": "u",
      "\xDD": "Y",
      "\xFD": "y",
      "\xFF": "y",
      "\xC6": "Ae",
      "\xE6": "ae",
      "\xDE": "Th",
      "\xFE": "th",
      "\xDF": "ss",
      "\u0100": "A",
      "\u0102": "A",
      "\u0104": "A",
      "\u0101": "a",
      "\u0103": "a",
      "\u0105": "a",
      "\u0106": "C",
      "\u0108": "C",
      "\u010A": "C",
      "\u010C": "C",
      "\u0107": "c",
      "\u0109": "c",
      "\u010B": "c",
      "\u010D": "c",
      "\u010E": "D",
      "\u0110": "D",
      "\u010F": "d",
      "\u0111": "d",
      "\u0112": "E",
      "\u0114": "E",
      "\u0116": "E",
      "\u0118": "E",
      "\u011A": "E",
      "\u0113": "e",
      "\u0115": "e",
      "\u0117": "e",
      "\u0119": "e",
      "\u011B": "e",
      "\u011C": "G",
      "\u011E": "G",
      "\u0120": "G",
      "\u0122": "G",
      "\u011D": "g",
      "\u011F": "g",
      "\u0121": "g",
      "\u0123": "g",
      "\u0124": "H",
      "\u0126": "H",
      "\u0125": "h",
      "\u0127": "h",
      "\u0128": "I",
      "\u012A": "I",
      "\u012C": "I",
      "\u012E": "I",
      "\u0130": "I",
      "\u0129": "i",
      "\u012B": "i",
      "\u012D": "i",
      "\u012F": "i",
      "\u0131": "i",
      "\u0134": "J",
      "\u0135": "j",
      "\u0136": "K",
      "\u0137": "k",
      "\u0138": "k",
      "\u0139": "L",
      "\u013B": "L",
      "\u013D": "L",
      "\u013F": "L",
      "\u0141": "L",
      "\u013A": "l",
      "\u013C": "l",
      "\u013E": "l",
      "\u0140": "l",
      "\u0142": "l",
      "\u0143": "N",
      "\u0145": "N",
      "\u0147": "N",
      "\u014A": "N",
      "\u0144": "n",
      "\u0146": "n",
      "\u0148": "n",
      "\u014B": "n",
      "\u014C": "O",
      "\u014E": "O",
      "\u0150": "O",
      "\u014D": "o",
      "\u014F": "o",
      "\u0151": "o",
      "\u0154": "R",
      "\u0156": "R",
      "\u0158": "R",
      "\u0155": "r",
      "\u0157": "r",
      "\u0159": "r",
      "\u015A": "S",
      "\u015C": "S",
      "\u015E": "S",
      "\u0160": "S",
      "\u015B": "s",
      "\u015D": "s",
      "\u015F": "s",
      "\u0161": "s",
      "\u0162": "T",
      "\u0164": "T",
      "\u0166": "T",
      "\u0163": "t",
      "\u0165": "t",
      "\u0167": "t",
      "\u0168": "U",
      "\u016A": "U",
      "\u016C": "U",
      "\u016E": "U",
      "\u0170": "U",
      "\u0172": "U",
      "\u0169": "u",
      "\u016B": "u",
      "\u016D": "u",
      "\u016F": "u",
      "\u0171": "u",
      "\u0173": "u",
      "\u0174": "W",
      "\u0175": "w",
      "\u0176": "Y",
      "\u0177": "y",
      "\u0178": "Y",
      "\u0179": "Z",
      "\u017B": "Z",
      "\u017D": "Z",
      "\u017A": "z",
      "\u017C": "z",
      "\u017E": "z",
      "\u0132": "IJ",
      "\u0133": "ij",
      "\u0152": "Oe",
      "\u0153": "oe",
      "\u0149": "'n",
      "\u017F": "s"
    };
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var htmlUnescapes = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    };
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var freeParseFloat = parseFloat, freeParseInt = parseInt;
    var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = exports && !exports.nodeType && exports;
    var freeModule = freeExports && true && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply2(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index2 = -1, length = array == null ? 0 : array.length;
      while (++index2 < length) {
        var value = array[index2];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }
    function arrayEach(array, iteratee) {
      var index2 = -1, length = array == null ? 0 : array.length;
      while (++index2 < length) {
        if (iteratee(array[index2], index2, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;
      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }
    function arrayEvery(array, predicate) {
      var index2 = -1, length = array == null ? 0 : array.length;
      while (++index2 < length) {
        if (!predicate(array[index2], index2, array)) {
          return false;
        }
      }
      return true;
    }
    function arrayFilter(array, predicate) {
      var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array[index2];
        if (predicate(value, index2, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index2 = -1, length = array == null ? 0 : array.length;
      while (++index2 < length) {
        if (comparator(value, array[index2])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap(array, iteratee) {
      var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array[index2], index2, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index2 = -1, length = values.length, offset2 = array.length;
      while (++index2 < length) {
        array[offset2 + index2] = values[index2];
      }
      return array;
    }
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index2 = -1, length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[++index2];
      }
      while (++index2 < length) {
        accumulator = iteratee(accumulator, array[index2], index2, array);
      }
      return accumulator;
    }
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }
    function arraySome(array, predicate) {
      var index2 = -1, length = array == null ? 0 : array.length;
      while (++index2 < length) {
        if (predicate(array[index2], index2, array)) {
          return true;
        }
      }
      return false;
    }
    var asciiSize = baseProperty("length");
    function asciiToArray(string) {
      return string.split("");
    }
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection2) {
        if (predicate(value, key, collection2)) {
          result = key;
          return false;
        }
      });
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length) {
        if (predicate(array[index2], index2, array)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index2 = fromIndex - 1, length = array.length;
      while (++index2 < length) {
        if (comparator(array[index2], value)) {
          return index2;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? baseSum(array, iteratee) / length : NAN;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined$1 : object[key];
      };
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined$1 : object[key];
      };
    }
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index2, collection2) {
        accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index2, collection2);
      });
      return accumulator;
    }
    function baseSortBy(array, comparer) {
      var length = array.length;
      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }
    function baseSum(array, iteratee) {
      var result, index2 = -1, length = array.length;
      while (++index2 < length) {
        var current = iteratee(array[index2]);
        if (current !== undefined$1) {
          result = result === undefined$1 ? current : result + current;
        }
      }
      return result;
    }
    function baseTimes(n, iteratee) {
      var index2 = -1, result = Array(n);
      while (++index2 < n) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    function baseToPairs(object, props2) {
      return arrayMap(props2, function(key) {
        return [key, object[key]];
      });
    }
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function baseValues(object, props2) {
      return arrayMap(props2, function(key) {
        return object[key];
      });
    }
    function cacheHas(cache2, key) {
      return cache2.has(key);
    }
    function charsStartIndex(strSymbols, chrSymbols) {
      var index2 = -1, length = strSymbols.length;
      while (++index2 < length && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
      }
      return index2;
    }
    function charsEndIndex(strSymbols, chrSymbols) {
      var index2 = strSymbols.length;
      while (index2-- && baseIndexOf(chrSymbols, strSymbols[index2], 0) > -1) {
      }
      return index2;
    }
    function countHolders(array, placeholder) {
      var length = array.length, result = 0;
      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }
    var deburrLetter = basePropertyOf(deburredLetters);
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    function getValue(object, key) {
      return object == null ? undefined$1 : object[key];
    }
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }
    function iteratorToArray(iterator) {
      var data2, result = [];
      while (!(data2 = iterator.next()).done) {
        result.push(data2.value);
      }
      return result;
    }
    function mapToArray(map2) {
      var index2 = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index2] = [key, value];
      });
      return result;
    }
    function overArg(func, transform2) {
      return function(arg) {
        return func(transform2(arg));
      };
    }
    function replaceHolders(array, placeholder) {
      var index2 = -1, length = array.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array[index2];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index2] = PLACEHOLDER;
          result[resIndex++] = index2;
        }
      }
      return result;
    }
    function setToArray(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = value;
      });
      return result;
    }
    function setToPairs(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = [value, value];
      });
      return result;
    }
    function strictIndexOf(array, value, fromIndex) {
      var index2 = fromIndex - 1, length = array.length;
      while (++index2 < length) {
        if (array[index2] === value) {
          return index2;
        }
      }
      return -1;
    }
    function strictLastIndexOf(array, value, fromIndex) {
      var index2 = fromIndex + 1;
      while (index2--) {
        if (array[index2] === value) {
          return index2;
        }
      }
      return index2;
    }
    function stringSize(string) {
      return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    function stringToArray(string) {
      return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    function trimmedEndIndex(string) {
      var index2 = string.length;
      while (index2-- && reWhitespace.test(string.charAt(index2))) {
      }
      return index2;
    }
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }
    var runInContext = function runInContext2(context) {
      context = context == null ? root : _2.defaults(root.Object(), context, _2.pick(root, contextProps));
      var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
      var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
      var coreJsData = context["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var idCounter = 0;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var objectCtorString = funcToString.call(Object2);
      var oldDash = root._;
      var reIsNative = RegExp2("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
      var Buffer2 = moduleExports ? context.Buffer : undefined$1, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined$1, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined$1, symIterator = Symbol2 ? Symbol2.iterator : undefined$1, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined$1;
      var defineProperty = function() {
        try {
          var func = getNative(Object2, "defineProperty");
          func({}, "", {});
          return func;
        } catch (e) {
        }
      }();
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
      var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined$1, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
      var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
      var metaMap = WeakMap && new WeakMap();
      var realNames = {};
      var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap);
      var symbolProto = Symbol2 ? Symbol2.prototype : undefined$1, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined$1, symbolToString = symbolProto ? symbolProto.toString : undefined$1;
      function lodash2(value) {
        if (isObjectLike(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty2.call(value, "__wrapped__")) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }
      var baseCreate = function() {
        function object() {
        }
        return function(proto2) {
          if (!isObject2(proto2)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto2);
          }
          object.prototype = proto2;
          var result2 = new object();
          object.prototype = undefined$1;
          return result2;
        };
      }();
      function baseLodash() {
      }
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined$1;
      }
      lodash2.templateSettings = {
        "escape": reEscape,
        "evaluate": reEvaluate,
        "interpolate": reInterpolate,
        "variable": "",
        "imports": {
          "_": lodash2
        }
      };
      lodash2.prototype = baseLodash.prototype;
      lodash2.prototype.constructor = lodash2;
      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }
      function lazyClone() {
        var result2 = new LazyWrapper(this.__wrapped__);
        result2.__actions__ = copyArray(this.__actions__);
        result2.__dir__ = this.__dir__;
        result2.__filtered__ = this.__filtered__;
        result2.__iteratees__ = copyArray(this.__iteratees__);
        result2.__takeCount__ = this.__takeCount__;
        result2.__views__ = copyArray(this.__views__);
        return result2;
      }
      function lazyReverse() {
        if (this.__filtered__) {
          var result2 = new LazyWrapper(this);
          result2.__dir__ = -1;
          result2.__filtered__ = true;
        } else {
          result2 = this.clone();
          result2.__dir__ *= -1;
        }
        return result2;
      }
      function lazyValue() {
        var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view2 = getView(0, arrLength, this.__views__), start = view2.start, end = view2.end, length = end - start, index2 = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
        if (!isArr || !isRight && arrLength == length && takeCount == length) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result2 = [];
        outer:
          while (length-- && resIndex < takeCount) {
            index2 += dir;
            var iterIndex = -1, value = array[index2];
            while (++iterIndex < iterLength) {
              var data2 = iteratees[iterIndex], iteratee2 = data2.iteratee, type = data2.type, computed2 = iteratee2(value);
              if (type == LAZY_MAP_FLAG) {
                value = computed2;
              } else if (!computed2) {
                if (type == LAZY_FILTER_FLAG) {
                  continue outer;
                } else {
                  break outer;
                }
              }
            }
            result2[resIndex++] = value;
          }
        return result2;
      }
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;
      function Hash(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result2 = this.has(key) && delete this.__data__[key];
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function hashGet(key) {
        var data2 = this.__data__;
        if (nativeCreate) {
          var result2 = data2[key];
          return result2 === HASH_UNDEFINED ? undefined$1 : result2;
        }
        return hasOwnProperty2.call(data2, key) ? data2[key] : undefined$1;
      }
      function hashHas(key) {
        var data2 = this.__data__;
        return nativeCreate ? data2[key] !== undefined$1 : hasOwnProperty2.call(data2, key);
      }
      function hashSet(key, value) {
        var data2 = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data2[key] = nativeCreate && value === undefined$1 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data2 = this.__data__, index2 = assocIndexOf(data2, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data2.length - 1;
        if (index2 == lastIndex) {
          data2.pop();
        } else {
          splice.call(data2, index2, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data2 = this.__data__, index2 = assocIndexOf(data2, key);
        return index2 < 0 ? undefined$1 : data2[index2][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data2 = this.__data__, index2 = assocIndexOf(data2, key);
        if (index2 < 0) {
          ++this.size;
          data2.push([key, value]);
        } else {
          data2[index2][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result2 = getMapData(this, key)["delete"](key);
        this.size -= result2 ? 1 : 0;
        return result2;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data2 = getMapData(this, key), size2 = data2.size;
        data2.set(key, value);
        this.size += data2.size == size2 ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values2) {
        var index2 = -1, length = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values2[index2]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack(entries) {
        var data2 = this.__data__ = new ListCache(entries);
        this.size = data2.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data2 = this.__data__, result2 = data2["delete"](key);
        this.size = data2.size;
        return result2;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data2 = this.__data__;
        if (data2 instanceof ListCache) {
          var pairs = data2.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data2.size;
            return this;
          }
          data2 = this.__data__ = new MapCache(pairs);
        }
        data2.set(key, value);
        this.size = data2.size;
        return this;
      }
      Stack.prototype.clear = stackClear;
      Stack.prototype["delete"] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined$1;
      }
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }
      function assignMergeValue(object, key, value) {
        if (value !== undefined$1 && !eq(object[key], value) || value === undefined$1 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === undefined$1 && !(key in object)) {
          baseAssignValue(object, key, value);
        }
      }
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseAggregator(collection, setter, iteratee2, accumulator) {
        baseEach(collection, function(value, key, collection2) {
          setter(accumulator, value, iteratee2(value), collection2);
        });
        return accumulator;
      }
      function baseAssign(object, source2) {
        return object && copyObject(source2, keys2(source2), object);
      }
      function baseAssignIn(object, source2) {
        return object && copyObject(source2, keysIn(source2), object);
      }
      function baseAssignValue(object, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object[key] = value;
        }
      }
      function baseAt(object, paths) {
        var index2 = -1, length = paths.length, result2 = Array2(length), skip = object == null;
        while (++index2 < length) {
          result2[index2] = skip ? undefined$1 : get2(object, paths[index2]);
        }
        return result2;
      }
      function baseClamp(number2, lower, upper) {
        if (number2 === number2) {
          if (upper !== undefined$1) {
            number2 = number2 <= upper ? number2 : upper;
          }
          if (lower !== undefined$1) {
            number2 = number2 >= lower ? number2 : lower;
          }
        }
        return number2;
      }
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
        if (customizer) {
          result2 = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result2 !== undefined$1) {
          return result2;
        }
        if (!isObject2(value)) {
          return value;
        }
        var isArr = isArray2(value);
        if (isArr) {
          result2 = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result2);
          }
        } else {
          var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
          if (isBuffer2(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || isFunc && !object) {
            result2 = isFlat || isFunc ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result2 = initCloneByTag(value, tag, isDeep);
          }
        }
        stack || (stack = new Stack());
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result2);
        if (isSet(value)) {
          value.forEach(function(subValue) {
            result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });
        } else if (isMap(value)) {
          value.forEach(function(subValue, key2) {
            result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
          });
        }
        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys2;
        var props2 = isArr ? undefined$1 : keysFunc(value);
        arrayEach(props2 || value, function(subValue, key2) {
          if (props2) {
            key2 = subValue;
            subValue = value[key2];
          }
          assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
        });
        return result2;
      }
      function baseConforms(source2) {
        var props2 = keys2(source2);
        return function(object) {
          return baseConformsTo(object, source2, props2);
        };
      }
      function baseConformsTo(object, source2, props2) {
        var length = props2.length;
        if (object == null) {
          return !length;
        }
        object = Object2(object);
        while (length--) {
          var key = props2[length], predicate = source2[key], value = object[key];
          if (value === undefined$1 && !(key in object) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }
      function baseDelay(func, wait, args) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        return setTimeout2(function() {
          func.apply(undefined$1, args);
        }, wait);
      }
      function baseDifference(array, values2, iteratee2, comparator) {
        var index2 = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
        if (!length) {
          return result2;
        }
        if (iteratee2) {
          values2 = arrayMap(values2, baseUnary(iteratee2));
        }
        if (comparator) {
          includes2 = arrayIncludesWith;
          isCommon = false;
        } else if (values2.length >= LARGE_ARRAY_SIZE) {
          includes2 = cacheHas;
          isCommon = false;
          values2 = new SetCache(values2);
        }
        outer:
          while (++index2 < length) {
            var value = array[index2], computed2 = iteratee2 == null ? value : iteratee2(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed2 === computed2) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed2) {
                  continue outer;
                }
              }
              result2.push(value);
            } else if (!includes2(values2, computed2, comparator)) {
              result2.push(value);
            }
          }
        return result2;
      }
      var baseEach = createBaseEach(baseForOwn);
      var baseEachRight = createBaseEach(baseForOwnRight, true);
      function baseEvery(collection, predicate) {
        var result2 = true;
        baseEach(collection, function(value, index2, collection2) {
          result2 = !!predicate(value, index2, collection2);
          return result2;
        });
        return result2;
      }
      function baseExtremum(array, iteratee2, comparator) {
        var index2 = -1, length = array.length;
        while (++index2 < length) {
          var value = array[index2], current = iteratee2(value);
          if (current != null && (computed2 === undefined$1 ? current === current && !isSymbol(current) : comparator(current, computed2))) {
            var computed2 = current, result2 = value;
          }
        }
        return result2;
      }
      function baseFill(array, value, start, end) {
        var length = array.length;
        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end === undefined$1 || end > length ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }
      function baseFilter(collection, predicate) {
        var result2 = [];
        baseEach(collection, function(value, index2, collection2) {
          if (predicate(value, index2, collection2)) {
            result2.push(value);
          }
        });
        return result2;
      }
      function baseFlatten(array, depth, predicate, isStrict, result2) {
        var index2 = -1, length = array.length;
        predicate || (predicate = isFlattenable);
        result2 || (result2 = []);
        while (++index2 < length) {
          var value = array[index2];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result2);
            } else {
              arrayPush(result2, value);
            }
          } else if (!isStrict) {
            result2[result2.length] = value;
          }
        }
        return result2;
      }
      var baseFor = createBaseFor();
      var baseForRight = createBaseFor(true);
      function baseForOwn(object, iteratee2) {
        return object && baseFor(object, iteratee2, keys2);
      }
      function baseForOwnRight(object, iteratee2) {
        return object && baseForRight(object, iteratee2, keys2);
      }
      function baseFunctions(object, props2) {
        return arrayFilter(props2, function(key) {
          return isFunction2(object[key]);
        });
      }
      function baseGet(object, path) {
        path = castPath(path, object);
        var index2 = 0, length = path.length;
        while (object != null && index2 < length) {
          object = object[toKey(path[index2++])];
        }
        return index2 && index2 == length ? object : undefined$1;
      }
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result2 = keysFunc(object);
        return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
      }
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined$1 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString2(value);
      }
      function baseGt(value, other) {
        return value > other;
      }
      function baseHas(object, key) {
        return object != null && hasOwnProperty2.call(object, key);
      }
      function baseHasIn(object, key) {
        return object != null && key in Object2(object);
      }
      function baseInRange(number2, start, end) {
        return number2 >= nativeMin(start, end) && number2 < nativeMax(start, end);
      }
      function baseIntersection(arrays, iteratee2, comparator) {
        var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee2) {
            array = arrayMap(array, baseUnary(iteratee2));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined$1;
        }
        array = arrays[0];
        var index2 = -1, seen = caches[0];
        outer:
          while (++index2 < length && result2.length < maxLength) {
            var value = array[index2], computed2 = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (!(seen ? cacheHas(seen, computed2) : includes2(result2, computed2, comparator))) {
              othIndex = othLength;
              while (--othIndex) {
                var cache2 = caches[othIndex];
                if (!(cache2 ? cacheHas(cache2, computed2) : includes2(arrays[othIndex], computed2, comparator))) {
                  continue outer;
                }
              }
              if (seen) {
                seen.push(computed2);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseInverter(object, setter, iteratee2, accumulator) {
        baseForOwn(object, function(value, key, object2) {
          setter(accumulator, iteratee2(value), key, object2);
        });
        return accumulator;
      }
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined$1 : apply2(func, object, args);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack());
          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack());
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }
      function baseIsMatch(object, source2, matchData, customizer) {
        var index2 = matchData.length, length = index2, noCustomizer = !customizer;
        if (object == null) {
          return !length;
        }
        object = Object2(object);
        while (index2--) {
          var data2 = matchData[index2];
          if (noCustomizer && data2[2] ? data2[1] !== object[data2[0]] : !(data2[0] in object)) {
            return false;
          }
        }
        while (++index2 < length) {
          data2 = matchData[index2];
          var key = data2[0], objValue = object[key], srcValue = data2[1];
          if (noCustomizer && data2[2]) {
            if (objValue === undefined$1 && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack();
            if (customizer) {
              var result2 = customizer(objValue, srcValue, key, object, source2, stack);
            }
            if (!(result2 === undefined$1 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
              return false;
            }
          }
        }
        return true;
      }
      function baseIsNative(value) {
        if (!isObject2(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result2 = [];
        for (var key in Object2(object)) {
          if (hasOwnProperty2.call(object, key) && key != "constructor") {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseKeysIn(object) {
        if (!isObject2(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object), result2 = [];
        for (var key in object) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
            result2.push(key);
          }
        }
        return result2;
      }
      function baseLt(value, other) {
        return value < other;
      }
      function baseMap(collection, iteratee2) {
        var index2 = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value, key, collection2) {
          result2[++index2] = iteratee2(value, key, collection2);
        });
        return result2;
      }
      function baseMatches(source2) {
        var matchData = getMatchData(source2);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source2 || baseIsMatch(object, source2, matchData);
        };
      }
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get2(object, path);
          return objValue === undefined$1 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      function baseMerge(object, source2, srcIndex, customizer, stack) {
        if (object === source2) {
          return;
        }
        baseFor(source2, function(srcValue, key) {
          stack || (stack = new Stack());
          if (isObject2(srcValue)) {
            baseMergeDeep(object, source2, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source2, stack) : undefined$1;
            if (newValue === undefined$1) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }
      function baseMergeDeep(object, source2, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key), srcValue = safeGet(source2, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source2, stack) : undefined$1;
        var isCommon = newValue === undefined$1;
        if (isCommon) {
          var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray2(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject2(objValue) || isFunction2(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined$1;
      }
      function baseOrderBy(collection, iteratees, orders) {
        if (iteratees.length) {
          iteratees = arrayMap(iteratees, function(iteratee2) {
            if (isArray2(iteratee2)) {
              return function(value) {
                return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
              };
            }
            return iteratee2;
          });
        } else {
          iteratees = [identity];
        }
        var index2 = -1;
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        var result2 = baseMap(collection, function(value, key, collection2) {
          var criteria = arrayMap(iteratees, function(iteratee2) {
            return iteratee2(value);
          });
          return { "criteria": criteria, "index": ++index2, "value": value };
        });
        return baseSortBy(result2, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }
      function basePickBy(object, paths, predicate) {
        var index2 = -1, length = paths.length, result2 = {};
        while (++index2 < length) {
          var path = paths[index2], value = baseGet(object, path);
          if (predicate(value, path)) {
            baseSet(result2, castPath(path, object), value);
          }
        }
        return result2;
      }
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }
      function basePullAll(array, values2, iteratee2, comparator) {
        var indexOf3 = comparator ? baseIndexOfWith : baseIndexOf, index2 = -1, length = values2.length, seen = array;
        if (array === values2) {
          values2 = copyArray(values2);
        }
        if (iteratee2) {
          seen = arrayMap(array, baseUnary(iteratee2));
        }
        while (++index2 < length) {
          var fromIndex = 0, value = values2[index2], computed2 = iteratee2 ? iteratee2(value) : value;
          while ((fromIndex = indexOf3(seen, computed2, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0, lastIndex = length - 1;
        while (length--) {
          var index2 = indexes[length];
          if (length == lastIndex || index2 !== previous) {
            var previous = index2;
            if (isIndex(index2)) {
              splice.call(array, index2, 1);
            } else {
              baseUnset(array, index2);
            }
          }
        }
        return array;
      }
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }
      function baseRange(start, end, step, fromRight) {
        var index2 = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
        while (length--) {
          result2[fromRight ? length : ++index2] = start;
          start += step;
        }
        return result2;
      }
      function baseRepeat(string, n) {
        var result2 = "";
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result2;
        }
        do {
          if (n % 2) {
            result2 += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);
        return result2;
      }
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + "");
      }
      function baseSample(collection) {
        return arraySample(values(collection));
      }
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }
      function baseSet(object, path, value, customizer) {
        if (!isObject2(object)) {
          return object;
        }
        path = castPath(path, object);
        var index2 = -1, length = path.length, lastIndex = length - 1, nested = object;
        while (nested != null && ++index2 < length) {
          var key = toKey(path[index2]), newValue = value;
          if (key === "__proto__" || key === "constructor" || key === "prototype") {
            return object;
          }
          if (index2 != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined$1;
            if (newValue === undefined$1) {
              newValue = isObject2(objValue) ? objValue : isIndex(path[index2 + 1]) ? [] : {};
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }
      var baseSetData = !metaMap ? identity : function(func, data2) {
        metaMap.set(func, data2);
        return func;
      };
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string),
          "writable": true
        });
      };
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }
      function baseSlice(array, start, end) {
        var index2 = -1, length = array.length;
        if (start < 0) {
          start = -start > length ? 0 : length + start;
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : end - start >>> 0;
        start >>>= 0;
        var result2 = Array2(length);
        while (++index2 < length) {
          result2[index2] = array[index2 + start];
        }
        return result2;
      }
      function baseSome(collection, predicate) {
        var result2;
        baseEach(collection, function(value, index2, collection2) {
          result2 = predicate(value, index2, collection2);
          return !result2;
        });
        return !!result2;
      }
      function baseSortedIndex(array, value, retHighest) {
        var low = 0, high = array == null ? low : array.length;
        if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = low + high >>> 1, computed2 = array[mid];
            if (computed2 !== null && !isSymbol(computed2) && (retHighest ? computed2 <= value : computed2 < value)) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }
      function baseSortedIndexBy(array, value, iteratee2, retHighest) {
        var low = 0, high = array == null ? 0 : array.length;
        if (high === 0) {
          return 0;
        }
        value = iteratee2(value);
        var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined$1;
        while (low < high) {
          var mid = nativeFloor((low + high) / 2), computed2 = iteratee2(array[mid]), othIsDefined = computed2 !== undefined$1, othIsNull = computed2 === null, othIsReflexive = computed2 === computed2, othIsSymbol = isSymbol(computed2);
          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? computed2 <= value : computed2 < value;
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }
      function baseSortedUniq(array, iteratee2) {
        var index2 = -1, length = array.length, resIndex = 0, result2 = [];
        while (++index2 < length) {
          var value = array[index2], computed2 = iteratee2 ? iteratee2(value) : value;
          if (!index2 || !eq(computed2, seen)) {
            var seen = computed2;
            result2[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result2;
      }
      function baseToNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray2(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      function baseUniq(array, iteratee2, comparator) {
        var index2 = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
        if (comparator) {
          isCommon = false;
          includes2 = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set3 = iteratee2 ? null : createSet(array);
          if (set3) {
            return setToArray(set3);
          }
          isCommon = false;
          includes2 = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee2 ? [] : result2;
        }
        outer:
          while (++index2 < length) {
            var value = array[index2], computed2 = iteratee2 ? iteratee2(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed2 === computed2) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed2) {
                  continue outer;
                }
              }
              if (iteratee2) {
                seen.push(computed2);
              }
              result2.push(value);
            } else if (!includes2(seen, computed2, comparator)) {
              if (seen !== result2) {
                seen.push(computed2);
              }
              result2.push(value);
            }
          }
        return result2;
      }
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length, index2 = fromRight ? length : -1;
        while ((fromRight ? index2-- : ++index2 < length) && predicate(array[index2], index2, array)) {
        }
        return isDrop ? baseSlice(array, fromRight ? 0 : index2, fromRight ? index2 + 1 : length) : baseSlice(array, fromRight ? index2 + 1 : 0, fromRight ? length : index2);
      }
      function baseWrapperValue(value, actions) {
        var result2 = value;
        if (result2 instanceof LazyWrapper) {
          result2 = result2.value();
        }
        return arrayReduce(actions, function(result3, action) {
          return action.func.apply(action.thisArg, arrayPush([result3], action.args));
        }, result2);
      }
      function baseXor(arrays, iteratee2, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index2 = -1, result2 = Array2(length);
        while (++index2 < length) {
          var array = arrays[index2], othIndex = -1;
          while (++othIndex < length) {
            if (othIndex != index2) {
              result2[index2] = baseDifference(result2[index2] || array, arrays[othIndex], iteratee2, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
      }
      function baseZipObject(props2, values2, assignFunc) {
        var index2 = -1, length = props2.length, valsLength = values2.length, result2 = {};
        while (++index2 < length) {
          var value = index2 < valsLength ? values2[index2] : undefined$1;
          assignFunc(result2, props2[index2], value);
        }
        return result2;
      }
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }
      function castFunction(value) {
        return typeof value == "function" ? value : identity;
      }
      function castPath(value, object) {
        if (isArray2(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString3(value));
      }
      var castRest = baseRest;
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined$1 ? length : end;
        return !start && end >= length ? array : baseSlice(array, start, end);
      }
      var clearTimeout2 = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
        buffer.copy(result2);
        return result2;
      }
      function cloneArrayBuffer(arrayBuffer) {
        var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
        return result2;
      }
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }
      function cloneRegExp(regexp) {
        var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result2.lastIndex = regexp.lastIndex;
        return result2;
      }
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
      }
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined$1, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
          var othIsDefined = other !== undefined$1, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
          if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
            return 1;
          }
          if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }
      function compareMultiple(object, other, orders) {
        var index2 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
        while (++index2 < length) {
          var result2 = compareAscending(objCriteria[index2], othCriteria[index2]);
          if (result2) {
            if (index2 >= ordersLength) {
              return result2;
            }
            var order = orders[index2];
            return result2 * (order == "desc" ? -1 : 1);
          }
        }
        return object.index - other.index;
      }
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
        while (++leftIndex < leftLength) {
          result2[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result2[leftIndex++] = args[argsIndex++];
        }
        return result2;
      }
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
        while (++argsIndex < rangeLength) {
          result2[argsIndex] = args[argsIndex];
        }
        var offset2 = argsIndex;
        while (++rightIndex < rightLength) {
          result2[offset2 + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result2[offset2 + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result2;
      }
      function copyArray(source2, array) {
        var index2 = -1, length = source2.length;
        array || (array = Array2(length));
        while (++index2 < length) {
          array[index2] = source2[index2];
        }
        return array;
      }
      function copyObject(source2, props2, object, customizer) {
        var isNew = !object;
        object || (object = {});
        var index2 = -1, length = props2.length;
        while (++index2 < length) {
          var key = props2[index2];
          var newValue = customizer ? customizer(object[key], source2[key], key, object, source2) : undefined$1;
          if (newValue === undefined$1) {
            newValue = source2[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }
      function copySymbols(source2, object) {
        return copyObject(source2, getSymbols(source2), object);
      }
      function copySymbolsIn(source2, object) {
        return copyObject(source2, getSymbolsIn(source2), object);
      }
      function createAggregator(setter, initializer) {
        return function(collection, iteratee2) {
          var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
          return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
        };
      }
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined$1, guard = length > 2 ? sources[2] : undefined$1;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined$1;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined$1 : customizer;
            length = 1;
          }
          object = Object2(object);
          while (++index2 < length) {
            var source2 = sources[index2];
            if (source2) {
              assigner(object, source2, index2, customizer);
            }
          }
          return object;
        });
      }
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee2) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee2);
          }
          var length = collection.length, index2 = fromRight ? length : -1, iterable = Object2(collection);
          while (fromRight ? index2-- : ++index2 < length) {
            if (iteratee2(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      function createBaseFor(fromRight) {
        return function(object, iteratee2, keysFunc) {
          var index2 = -1, iterable = Object2(object), props2 = keysFunc(object), length = props2.length;
          while (length--) {
            var key = props2[fromRight ? length : ++index2];
            if (iteratee2(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString3(string);
          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined$1;
          var chr = strSymbols ? strSymbols[0] : string.charAt(0);
          var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
          return chr[methodName]() + trailing;
        };
      }
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
        };
      }
      function createCtor(Ctor) {
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return new Ctor();
            case 1:
              return new Ctor(args[0]);
            case 2:
              return new Ctor(args[0], args[1]);
            case 3:
              return new Ctor(args[0], args[1], args[2]);
            case 4:
              return new Ctor(args[0], args[1], args[2], args[3]);
            case 5:
              return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7:
              return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
          return isObject2(result2) ? result2 : thisBinding;
        };
      }
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index2 = length, placeholder = getHolder(wrapper);
          while (index2--) {
            args[index2] = arguments[index2];
          }
          var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
          length -= holders.length;
          if (length < arity) {
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined$1, args, holders, undefined$1, undefined$1, arity - length);
          }
          var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          return apply2(fn, this, args);
        }
        return wrapper;
      }
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object2(collection);
          if (!isArrayLike(collection)) {
            var iteratee2 = getIteratee(predicate, 3);
            collection = keys2(collection);
            predicate = function(key) {
              return iteratee2(iterable[key], key, iterable);
            };
          }
          var index2 = findIndexFunc(collection, predicate, fromIndex);
          return index2 > -1 ? iterable[iteratee2 ? collection[index2] : index2] : undefined$1;
        };
      }
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length, index2 = length, prereq = LodashWrapper.prototype.thru;
          if (fromRight) {
            funcs.reverse();
          }
          while (index2--) {
            var func = funcs[index2];
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == "wrapper") {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index2 = wrapper ? index2 : length;
          while (++index2 < length) {
            func = funcs[index2];
            var funcName = getFuncName(func), data2 = funcName == "wrapper" ? getData2(func) : undefined$1;
            if (data2 && isLaziable(data2[0]) && data2[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data2[4].length && data2[9] == 1) {
              wrapper = wrapper[getFuncName(data2[0])].apply(wrapper, data2[3]);
            } else {
              wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments, value = args[0];
            if (wrapper && args.length == 1 && isArray2(value)) {
              return wrapper.plant(value).value();
            }
            var index3 = 0, result2 = length ? funcs[index3].apply(this, args) : value;
            while (++index3 < length) {
              result2 = funcs[index3].call(this, result2);
            }
            return result2;
          };
        });
      }
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined$1 : createCtor(func);
        function wrapper() {
          var length = arguments.length, args = Array2(length), index2 = length;
          while (index2--) {
            args[index2] = arguments[index2];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary2, arity - length);
          }
          var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary2 < length) {
            args.length = ary2;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }
      function createInverter(setter, toIteratee) {
        return function(object, iteratee2) {
          return baseInverter(object, setter, toIteratee(iteratee2), {});
        };
      }
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result2;
          if (value === undefined$1 && other === undefined$1) {
            return defaultValue;
          }
          if (value !== undefined$1) {
            result2 = value;
          }
          if (other !== undefined$1) {
            if (result2 === undefined$1) {
              return other;
            }
            if (typeof value == "string" || typeof other == "string") {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result2 = operator(value, other);
          }
          return result2;
        };
      }
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee2) {
              return apply2(iteratee2, thisArg, args);
            });
          });
        });
      }
      function createPadding(length, chars) {
        chars = chars === undefined$1 ? " " : baseToString(chars);
        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
      }
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
        function wrapper() {
          var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply2(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
            end = step = undefined$1;
          }
          start = toFinite(start);
          if (end === undefined$1) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined$1 ? start < end ? 1 : -1 : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == "string" && typeof other == "string")) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined$1, newHoldersRight = isCurry ? undefined$1 : holders, newPartials = isCurry ? partials : undefined$1, newPartialsRight = isCurry ? undefined$1 : partials;
        bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func,
          bitmask,
          thisArg,
          newPartials,
          newHolders,
          newPartialsRight,
          newHoldersRight,
          argPos,
          ary2,
          arity
        ];
        var result2 = wrapFunc.apply(undefined$1, newData);
        if (isLaziable(func)) {
          setData2(result2, newData);
        }
        result2.placeholder = placeholder;
        return setWrapToString(result2, func, bitmask);
      }
      function createRound(methodName) {
        var func = Math2[methodName];
        return function(number2, precision) {
          number2 = toNumber(number2);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision && nativeIsFinite(number2)) {
            var pair = (toString3(number2) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
            pair = (toString3(value) + "e").split("e");
            return +(pair[0] + "e" + (+pair[1] - precision));
          }
          return func(number2);
        };
      }
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
        return new Set2(values2);
      };
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined$1;
        }
        ary2 = ary2 === undefined$1 ? ary2 : nativeMax(toInteger(ary2), 0);
        arity = arity === undefined$1 ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;
        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials, holdersRight = holders;
          partials = holders = undefined$1;
        }
        var data2 = isBindKey ? undefined$1 : getData2(func);
        var newData = [
          func,
          bitmask,
          thisArg,
          partials,
          holders,
          partialsRight,
          holdersRight,
          argPos,
          ary2,
          arity
        ];
        if (data2) {
          mergeData(newData, data2);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined$1 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result2 = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result2 = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result2 = createPartial(func, bitmask, thisArg, partials);
        } else {
          result2 = createHybrid.apply(undefined$1, newData);
        }
        var setter = data2 ? baseSetData : setData2;
        return setWrapToString(setter(result2, newData), func, bitmask);
      }
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined$1 || eq(objValue, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
          return srcValue;
        }
        return objValue;
      }
      function customDefaultsMerge(objValue, srcValue, key, object, source2, stack) {
        if (isObject2(objValue) && isObject2(srcValue)) {
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined$1, customDefaultsMerge, stack);
          stack["delete"](srcValue);
        }
        return objValue;
      }
      function customOmitClone(value) {
        return isPlainObject2(value) ? undefined$1 : value;
      }
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array;
        }
        var index2 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined$1;
        stack.set(array, other);
        stack.set(other, array);
        while (++index2 < arrLength) {
          var arrValue = array[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array, stack) : customizer(arrValue, othValue, index2, array, other, stack);
          }
          if (compared !== undefined$1) {
            if (compared) {
              continue;
            }
            result2 = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result2 = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result2 = false;
            break;
          }
        }
        stack["delete"](array);
        stack["delete"](other);
        return result2;
      }
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object, +other);
          case errorTag:
            return object.name == other.name && object.message == other.message;
          case regexpTag:
          case stringTag:
            return object == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object, other);
            var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object);
            return result2;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object;
        }
        var result2 = true;
        stack.set(object, other);
        stack.set(other, object);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
          }
          if (!(compared === undefined$1 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result2 = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result2 && !skipCtor) {
          var objCtor = object.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result2 = false;
          }
        }
        stack["delete"](object);
        stack["delete"](other);
        return result2;
      }
      function flatRest(func) {
        return setToString(overRest(func, undefined$1, flatten), func + "");
      }
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys2, getSymbols);
      }
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }
      var getData2 = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };
      function getFuncName(func) {
        var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty2.call(realNames, result2) ? array.length : 0;
        while (length--) {
          var data2 = array[length], otherFunc = data2.func;
          if (otherFunc == null || otherFunc == func) {
            return data2.name;
          }
        }
        return result2;
      }
      function getHolder(func) {
        var object = hasOwnProperty2.call(lodash2, "placeholder") ? lodash2 : func;
        return object.placeholder;
      }
      function getIteratee() {
        var result2 = lodash2.iteratee || iteratee;
        result2 = result2 === iteratee ? baseIteratee : result2;
        return arguments.length ? result2(arguments[0], arguments[1]) : result2;
      }
      function getMapData(map3, key) {
        var data2 = map3.__data__;
        return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
      }
      function getMatchData(object) {
        var result2 = keys2(object), length = result2.length;
        while (length--) {
          var key = result2[length], value = object[key];
          result2[length] = [key, value, isStrictComparable(value)];
        }
        return result2;
      }
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined$1;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = undefined$1;
          var unmasked = true;
        } catch (e) {
        }
        var result2 = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result2;
      }
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object2(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result2 = [];
        while (object) {
          arrayPush(result2, getSymbols(object));
          object = getPrototype(object);
        }
        return result2;
      };
      var getTag = baseGetTag;
      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function(value) {
          var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined$1, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result2;
        };
      }
      function getView(start, end, transforms) {
        var index2 = -1, length = transforms.length;
        while (++index2 < length) {
          var data2 = transforms[index2], size2 = data2.size;
          switch (data2.type) {
            case "drop":
              start += size2;
              break;
            case "dropRight":
              end -= size2;
              break;
            case "take":
              end = nativeMin(end, start + size2);
              break;
            case "takeRight":
              start = nativeMax(start, end - size2);
              break;
          }
        }
        return { "start": start, "end": end };
      }
      function getWrapDetails(source2) {
        var match = source2.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);
        var index2 = -1, length = path.length, result2 = false;
        while (++index2 < length) {
          var key = toKey(path[index2]);
          if (!(result2 = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result2 || ++index2 != length) {
          return result2;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) && (isArray2(object) || isArguments(object));
      }
      function initCloneArray(array) {
        var length = array.length, result2 = new array.constructor(length);
        if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
          result2.index = array.index;
          result2.input = array.input;
        }
        return result2;
      }
      function initCloneObject(object) {
        return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
      }
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);
          case boolTag:
          case dateTag:
            return new Ctor(+object);
          case dataViewTag:
            return cloneDataView(object, isDeep);
          case float32Tag:
          case float64Tag:
          case int8Tag:
          case int16Tag:
          case int32Tag:
          case uint8Tag:
          case uint8ClampedTag:
          case uint16Tag:
          case uint32Tag:
            return cloneTypedArray(object, isDeep);
          case mapTag:
            return new Ctor();
          case numberTag:
          case stringTag:
            return new Ctor(object);
          case regexpTag:
            return cloneRegExp(object);
          case setTag:
            return new Ctor();
          case symbolTag:
            return cloneSymbol(object);
        }
      }
      function insertWrapDetails(source2, details) {
        var length = details.length;
        if (!length) {
          return source2;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
        details = details.join(length > 2 ? ", " : " ");
        return source2.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
      }
      function isFlattenable(value) {
        return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isIterateeCall(value, index2, object) {
        if (!isObject2(object)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
          return eq(object[index2], value);
        }
        return false;
      }
      function isKey(value, object) {
        if (isArray2(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isLaziable(func) {
        var funcName = getFuncName(func), other = lodash2[funcName];
        if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data2 = getData2(other);
        return !!data2 && func === data2[0];
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      var isMaskable = coreJsData ? isFunction2 : stubFalse;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto2;
      }
      function isStrictComparable(value) {
        return value === value && !isObject2(value);
      }
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue && (srcValue !== undefined$1 || key in Object2(object));
        };
      }
      function memoizeCapped(func) {
        var result2 = memoize(func, function(key) {
          if (cache2.size === MAX_MEMOIZE_SIZE) {
            cache2.clear();
          }
          return key;
        });
        var cache2 = result2.cache;
        return result2;
      }
      function mergeData(data2, source2) {
        var bitmask = data2[1], srcBitmask = source2[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
        var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data2[7].length <= source2[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source2[7].length <= source2[8] && bitmask == WRAP_CURRY_FLAG;
        if (!(isCommon || isCombo)) {
          return data2;
        }
        if (srcBitmask & WRAP_BIND_FLAG) {
          data2[2] = source2[2];
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        var value = source2[3];
        if (value) {
          var partials = data2[3];
          data2[3] = partials ? composeArgs(partials, value, source2[4]) : value;
          data2[4] = partials ? replaceHolders(data2[3], PLACEHOLDER) : source2[4];
        }
        value = source2[5];
        if (value) {
          partials = data2[5];
          data2[5] = partials ? composeArgsRight(partials, value, source2[6]) : value;
          data2[6] = partials ? replaceHolders(data2[5], PLACEHOLDER) : source2[6];
        }
        value = source2[7];
        if (value) {
          data2[7] = value;
        }
        if (srcBitmask & WRAP_ARY_FLAG) {
          data2[8] = data2[8] == null ? source2[8] : nativeMin(data2[8], source2[8]);
        }
        if (data2[9] == null) {
          data2[9] = source2[9];
        }
        data2[0] = source2[0];
        data2[1] = newBitmask;
        return data2;
      }
      function nativeKeysIn(object) {
        var result2 = [];
        if (object != null) {
          for (var key in Object2(object)) {
            result2.push(key);
          }
        }
        return result2;
      }
      function objectToString2(value) {
        return nativeObjectToString.call(value);
      }
      function overRest(func, start, transform3) {
        start = nativeMax(start === undefined$1 ? func.length - 1 : start, 0);
        return function() {
          var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
          while (++index2 < length) {
            array[index2] = args[start + index2];
          }
          index2 = -1;
          var otherArgs = Array2(start + 1);
          while (++index2 < start) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start] = transform3(array);
          return apply2(func, this, otherArgs);
        };
      }
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }
      function reorder(array, indexes) {
        var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
        while (length--) {
          var index2 = indexes[length];
          array[length] = isIndex(index2, arrLength) ? oldArray[index2] : undefined$1;
        }
        return array;
      }
      function safeGet(object, key) {
        if (key === "constructor" && typeof object[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object[key];
      }
      var setData2 = shortOut(baseSetData);
      var setTimeout2 = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };
      var setToString = shortOut(baseSetToString);
      function setWrapToString(wrapper, reference, bitmask) {
        var source2 = reference + "";
        return setToString(wrapper, insertWrapDetails(source2, updateWrapDetails(getWrapDetails(source2), bitmask)));
      }
      function shortOut(func) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined$1, arguments);
        };
      }
      function shuffleSelf(array, size2) {
        var index2 = -1, length = array.length, lastIndex = length - 1;
        size2 = size2 === undefined$1 ? length : size2;
        while (++index2 < size2) {
          var rand = baseRandom(index2, lastIndex), value = array[rand];
          array[rand] = array[index2];
          array[index2] = value;
        }
        array.length = size2;
        return array;
      }
      var stringToPath = memoizeCapped(function(string) {
        var result2 = [];
        if (string.charCodeAt(0) === 46) {
          result2.push("");
        }
        string.replace(rePropName, function(match, number2, quote, subString) {
          result2.push(quote ? subString.replace(reEscapeChar, "$1") : number2 || match);
        });
        return result2;
      });
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result2 = value + "";
        return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {
          }
          try {
            return func + "";
          } catch (e) {
          }
        }
        return "";
      }
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = "_." + pair[0];
          if (bitmask & pair[1] && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result2.__actions__ = copyArray(wrapper.__actions__);
        result2.__index__ = wrapper.__index__;
        result2.__values__ = wrapper.__values__;
        return result2;
      }
      function chunk(array, size2, guard) {
        if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined$1) {
          size2 = 1;
        } else {
          size2 = nativeMax(toInteger(size2), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size2 < 1) {
          return [];
        }
        var index2 = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
        while (index2 < length) {
          result2[resIndex++] = baseSlice(array, index2, index2 += size2);
        }
        return result2;
      }
      function compact(array) {
        var index2 = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
        while (++index2 < length) {
          var value = array[index2];
          if (value) {
            result2[resIndex++] = value;
          }
        }
        return result2;
      }
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array2(length - 1), array = arguments[0], index2 = length;
        while (index2--) {
          args[index2 - 1] = arguments[index2];
        }
        return arrayPush(isArray2(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }
      var difference = baseRest(function(array, values2) {
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
      });
      var differenceBy = baseRest(function(array, values2) {
        var iteratee2 = last(values2);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
      });
      var differenceWith = baseRest(function(array, values2) {
        var comparator = last(values2);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined$1;
        }
        return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined$1, comparator) : [];
      });
      function drop3(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function dropRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
      }
      function dropWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
      }
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax(length + index2, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index2);
      }
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index2 = length - 1;
        if (fromIndex !== undefined$1) {
          index2 = toInteger(fromIndex);
          index2 = fromIndex < 0 ? nativeMax(length + index2, 0) : nativeMin(index2, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index2, true);
      }
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }
      function fromPairs(pairs) {
        var index2 = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
        while (++index2 < length) {
          var pair = pairs[index2];
          result2[pair[0]] = pair[1];
        }
        return result2;
      }
      function head(array) {
        return array && array.length ? array[0] : undefined$1;
      }
      function indexOf2(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax(length + index2, 0);
        }
        return baseIndexOf(array, value, index2);
      }
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
      });
      var intersectionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
        if (iteratee2 === last(mapped)) {
          iteratee2 = undefined$1;
        } else {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
      });
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        if (comparator) {
          mapped.pop();
        }
        return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined$1, comparator) : [];
      });
      function join(array, separator) {
        return array == null ? "" : nativeJoin.call(array, separator);
      }
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined$1;
      }
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index2 = length;
        if (fromIndex !== undefined$1) {
          index2 = toInteger(fromIndex);
          index2 = index2 < 0 ? nativeMax(length + index2, 0) : nativeMin(index2, length - 1);
        }
        return value === value ? strictLastIndexOf(array, value, index2) : baseFindIndex(array, baseIsNaN, index2, true);
      }
      function nth(array, n) {
        return array && array.length ? baseNth(array, toInteger(n)) : undefined$1;
      }
      var pull = baseRest(pullAll);
      function pullAll(array, values2) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
      }
      function pullAllBy(array, values2, iteratee2) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
      }
      function pullAllWith(array, values2, comparator) {
        return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined$1, comparator) : array;
      }
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
        basePullAt(array, arrayMap(indexes, function(index2) {
          return isIndex(index2, length) ? +index2 : index2;
        }).sort(compareAscending));
        return result2;
      });
      function remove(array, predicate) {
        var result2 = [];
        if (!(array && array.length)) {
          return result2;
        }
        var index2 = -1, indexes = [], length = array.length;
        predicate = getIteratee(predicate, 3);
        while (++index2 < length) {
          var value = array[index2];
          if (predicate(value, index2, array)) {
            result2.push(value);
            indexes.push(index2);
          }
        }
        basePullAt(array, indexes);
        return result2;
      }
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        } else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined$1 ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }
      function sortedIndexBy(array, value, iteratee2) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
      }
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index2 = baseSortedIndex(array, value);
          if (index2 < length && eq(array[index2], value)) {
            return index2;
          }
        }
        return -1;
      }
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }
      function sortedLastIndexBy(array, value, iteratee2) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
      }
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index2 = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index2], value)) {
            return index2;
          }
        }
        return -1;
      }
      function sortedUniq(array) {
        return array && array.length ? baseSortedUniq(array) : [];
      }
      function sortedUniqBy(array, iteratee2) {
        return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
      }
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = guard || n === undefined$1 ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }
      function takeRightWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
      }
      function takeWhile(array, predicate) {
        return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
      }
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      var unionBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
      });
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined$1, comparator);
      });
      function uniq(array) {
        return array && array.length ? baseUniq(array) : [];
      }
      function uniqBy(array, iteratee2) {
        return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
      }
      function uniqWith(array, comparator) {
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return array && array.length ? baseUniq(array, undefined$1, comparator) : [];
      }
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index2) {
          return arrayMap(array, baseProperty(index2));
        });
      }
      function unzipWith(array, iteratee2) {
        if (!(array && array.length)) {
          return [];
        }
        var result2 = unzip(array);
        if (iteratee2 == null) {
          return result2;
        }
        return arrayMap(result2, function(group) {
          return apply2(iteratee2, undefined$1, group);
        });
      }
      var without = baseRest(function(array, values2) {
        return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
      });
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });
      var xorBy = baseRest(function(arrays) {
        var iteratee2 = last(arrays);
        if (isArrayLikeObject(iteratee2)) {
          iteratee2 = undefined$1;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
      });
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == "function" ? comparator : undefined$1;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined$1, comparator);
      });
      var zip = baseRest(unzip);
      function zipObject(props2, values2) {
        return baseZipObject(props2 || [], values2 || [], assignValue);
      }
      function zipObjectDeep(props2, values2) {
        return baseZipObject(props2 || [], values2 || [], baseSet);
      }
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined$1;
        iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined$1;
        return unzipWith(arrays, iteratee2);
      });
      function chain(value) {
        var result2 = lodash2(value);
        result2.__chain__ = true;
        return result2;
      }
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }
      function thru(value, interceptor) {
        return interceptor(value);
      }
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
          return baseAt(object, paths);
        };
        if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          "func": thru,
          "args": [interceptor],
          "thisArg": undefined$1
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined$1);
          }
          return array;
        });
      });
      function wrapperChain() {
        return chain(this);
      }
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }
      function wrapperNext() {
        if (this.__values__ === undefined$1) {
          this.__values__ = toArray3(this.value());
        }
        var done = this.__index__ >= this.__values__.length, value = done ? undefined$1 : this.__values__[this.__index__++];
        return { "done": done, "value": value };
      }
      function wrapperToIterator() {
        return this;
      }
      function wrapperPlant(value) {
        var result2, parent2 = this;
        while (parent2 instanceof baseLodash) {
          var clone3 = wrapperClone(parent2);
          clone3.__index__ = 0;
          clone3.__values__ = undefined$1;
          if (result2) {
            previous.__wrapped__ = clone3;
          } else {
            result2 = clone3;
          }
          var previous = clone3;
          parent2 = parent2.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result2;
      }
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            "func": thru,
            "args": [reverse],
            "thisArg": undefined$1
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }
      var countBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty2.call(result2, key)) {
          ++result2[key];
        } else {
          baseAssignValue(result2, key, 1);
        }
      });
      function every(collection, predicate, guard) {
        var func = isArray2(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      function filter(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }
      var find2 = createFind(findIndex);
      var findLast = createFind(findLastIndex);
      function flatMap(collection, iteratee2) {
        return baseFlatten(map2(collection, iteratee2), 1);
      }
      function flatMapDeep(collection, iteratee2) {
        return baseFlatten(map2(collection, iteratee2), INFINITY);
      }
      function flatMapDepth(collection, iteratee2, depth) {
        depth = depth === undefined$1 ? 1 : toInteger(depth);
        return baseFlatten(map2(collection, iteratee2), depth);
      }
      function forEach3(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function forEachRight(collection, iteratee2) {
        var func = isArray2(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee2, 3));
      }
      var groupBy = createAggregator(function(result2, value, key) {
        if (hasOwnProperty2.call(result2, key)) {
          result2[key].push(value);
        } else {
          baseAssignValue(result2, key, [value]);
        }
      });
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString2(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
      }
      var invokeMap = baseRest(function(collection, path, args) {
        var index2 = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
        baseEach(collection, function(value) {
          result2[++index2] = isFunc ? apply2(path, value, args) : baseInvoke(value, path, args);
        });
        return result2;
      });
      var keyBy = createAggregator(function(result2, value, key) {
        baseAssignValue(result2, key, value);
      });
      function map2(collection, iteratee2) {
        var func = isArray2(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee2, 3));
      }
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray2(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined$1 : orders;
        if (!isArray2(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }
      var partition = createAggregator(function(result2, value, key) {
        result2[key ? 0 : 1].push(value);
      }, function() {
        return [[], []];
      });
      function reduce(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
      }
      function reduceRight(collection, iteratee2, accumulator) {
        var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
        return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
      }
      function reject(collection, predicate) {
        var func = isArray2(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }
      function sample(collection) {
        var func = isArray2(collection) ? arraySample : baseSample;
        return func(collection);
      }
      function sampleSize(collection, n, guard) {
        if (guard ? isIterateeCall(collection, n, guard) : n === undefined$1) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }
      function shuffle(collection) {
        var func = isArray2(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString2(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }
      function some2(collection, predicate, guard) {
        var func = isArray2(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined$1;
        }
        return func(collection, getIteratee(predicate, 3));
      }
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });
      var now2 = ctxNow || function() {
        return root.Date.now();
      };
      function after(n, func) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }
      function ary(func, n, guard) {
        n = guard ? undefined$1 : n;
        n = func && n == null ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, n);
      }
      function before(n, func) {
        var result2;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result2 = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined$1;
          }
          return result2;
        };
      }
      var bind4 = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind4));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });
      function curry(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result2.placeholder = curry.placeholder;
        return result2;
      }
      function curryRight(func, arity, guard) {
        arity = guard ? undefined$1 : arity;
        var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined$1, undefined$1, undefined$1, undefined$1, undefined$1, arity);
        result2.placeholder = curryRight.placeholder;
        return result2;
      }
      function debounce(func, wait, options) {
        var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject2(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = undefined$1;
          lastInvokeTime = time;
          result2 = func.apply(thisArg, args);
          return result2;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout2(timerExpired, wait);
          return leading ? invokeFunc(time) : result2;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === undefined$1 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now2();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout2(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = undefined$1;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined$1;
          return result2;
        }
        function cancel() {
          if (timerId !== undefined$1) {
            clearTimeout2(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined$1;
        }
        function flush() {
          return timerId === undefined$1 ? result2 : trailingEdge(now2());
        }
        function debounced() {
          var time = now2(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === undefined$1) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout2(timerId);
              timerId = setTimeout2(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined$1) {
            timerId = setTimeout2(timerExpired, wait);
          }
          return result2;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }
      function memoize(func, resolver) {
        if (typeof func != "function" || resolver != null && typeof resolver != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache2 = memoized.cache;
          if (cache2.has(key)) {
            return cache2.get(key);
          }
          var result2 = func.apply(this, args);
          memoized.cache = cache2.set(key, result2) || cache2;
          return result2;
        };
        memoized.cache = new (memoize.Cache || MapCache)();
        return memoized;
      }
      memoize.Cache = MapCache;
      function negate(predicate) {
        if (typeof predicate != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0:
              return !predicate.call(this);
            case 1:
              return !predicate.call(this, args[0]);
            case 2:
              return !predicate.call(this, args[0], args[1]);
            case 3:
              return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }
      function once(func) {
        return before(2, func);
      }
      var overArgs = castRest(function(func, transforms) {
        transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index2 = -1, length = nativeMin(args.length, funcsLength);
          while (++index2 < length) {
            args[index2] = transforms[index2].call(this, args[index2]);
          }
          return apply2(func, this, args);
        });
      });
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined$1, partials, holders);
      });
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined$1, partials, holders);
      });
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined$1, undefined$1, undefined$1, indexes);
      });
      function rest(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        start = start === undefined$1 ? start : toInteger(start);
        return baseRest(func, start);
      }
      function spread3(func, start) {
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start], otherArgs = castSlice(args, 0, start);
          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply2(func, this, otherArgs);
        });
      }
      function throttle2(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError2(FUNC_ERROR_TEXT);
        }
        if (isObject2(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function unary(func) {
        return ary(func, 1);
      }
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray2(value) ? value : [value];
      }
      function clone2(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }
      function cloneWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }
      function conformsTo(object, source2) {
        return source2 == null || baseConformsTo(object, source2, keys2(source2));
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var gt = createRelationalOperation(baseGt);
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray2 = Array2.isArray;
      var isArrayBuffer2 = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction2(value);
      }
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      function isBoolean2(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }
      var isBuffer2 = nativeIsBuffer || stubFalse;
      var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
      }
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty2.call(value, key)) {
            return false;
          }
        }
        return true;
      }
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        var result2 = customizer ? customizer(value, other) : undefined$1;
        return result2 === undefined$1 ? baseIsEqual(value, other, undefined$1, customizer) : !!result2;
      }
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
      }
      function isFinite2(value) {
        return typeof value == "number" && nativeIsFinite(value);
      }
      function isFunction2(value) {
        if (!isObject2(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isInteger(value) {
        return typeof value == "number" && value == toInteger(value);
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject2(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
      function isMatch(object, source2) {
        return object === source2 || baseIsMatch(object, source2, getMatchData(source2));
      }
      function isMatchWith(object, source2, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return baseIsMatch(object, source2, getMatchData(source2), customizer);
      }
      function isNaN2(value) {
        return isNumber2(value) && value != +value;
      }
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error2(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }
      function isNull(value) {
        return value === null;
      }
      function isNil(value) {
        return value == null;
      }
      function isNumber2(value) {
        return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
      }
      function isPlainObject2(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto2 = getPrototype(value);
        if (proto2 === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto2, "constructor") && proto2.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      var isRegExp2 = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
      function isString2(value) {
        return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function isUndefined2(value) {
        return value === undefined$1;
      }
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }
      var lt = createRelationalOperation(baseLt);
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });
      function toArray3(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString2(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
        return func(value);
      }
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign2 = value < 0 ? -1 : 1;
          return sign2 * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      function toInteger(value) {
        var result2 = toFinite(value), remainder = result2 % 1;
        return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
      }
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject2(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject2(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      function toSafeInteger(value) {
        return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
      }
      function toString3(value) {
        return value == null ? "" : baseToString(value);
      }
      var assign3 = createAssigner(function(object, source2) {
        if (isPrototype(source2) || isArrayLike(source2)) {
          copyObject(source2, keys2(source2), object);
          return;
        }
        for (var key in source2) {
          if (hasOwnProperty2.call(source2, key)) {
            assignValue(object, key, source2[key]);
          }
        }
      });
      var assignIn = createAssigner(function(object, source2) {
        copyObject(source2, keysIn(source2), object);
      });
      var assignInWith = createAssigner(function(object, source2, srcIndex, customizer) {
        copyObject(source2, keysIn(source2), object, customizer);
      });
      var assignWith = createAssigner(function(object, source2, srcIndex, customizer) {
        copyObject(source2, keys2(source2), object, customizer);
      });
      var at = flatRest(baseAt);
      function create(prototype, properties) {
        var result2 = baseCreate(prototype);
        return properties == null ? result2 : baseAssign(result2, properties);
      }
      var defaults2 = baseRest(function(object, sources) {
        object = Object2(object);
        var index2 = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined$1;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }
        while (++index2 < length) {
          var source2 = sources[index2];
          var props2 = keysIn(source2);
          var propsIndex = -1;
          var propsLength = props2.length;
          while (++propsIndex < propsLength) {
            var key = props2[propsIndex];
            var value = object[key];
            if (value === undefined$1 || eq(value, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
              object[key] = source2[key];
            }
          }
        }
        return object;
      });
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined$1, customDefaultsMerge);
        return apply2(mergeWith, undefined$1, args);
      });
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }
      function forIn(object, iteratee2) {
        return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forInRight(object, iteratee2) {
        return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
      }
      function forOwn(object, iteratee2) {
        return object && baseForOwn(object, getIteratee(iteratee2, 3));
      }
      function forOwnRight(object, iteratee2) {
        return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
      }
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys2(object));
      }
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }
      function get2(object, path, defaultValue) {
        var result2 = object == null ? undefined$1 : baseGet(object, path);
        return result2 === undefined$1 ? defaultValue : result2;
      }
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }
      var invert = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString.call(value);
        }
        result2[value] = key;
      }, constant(identity));
      var invertBy = createInverter(function(result2, value, key) {
        if (value != null && typeof value.toString != "function") {
          value = nativeObjectToString.call(value);
        }
        if (hasOwnProperty2.call(result2, value)) {
          result2[value].push(key);
        } else {
          result2[value] = [key];
        }
      }, getIteratee);
      var invoke = baseRest(baseInvoke);
      function keys2(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }
      function mapKeys(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result2, iteratee2(value, key, object2), value);
        });
        return result2;
      }
      function mapValues(object, iteratee2) {
        var result2 = {};
        iteratee2 = getIteratee(iteratee2, 3);
        baseForOwn(object, function(value, key, object2) {
          baseAssignValue(result2, key, iteratee2(value, key, object2));
        });
        return result2;
      }
      var merge2 = createAssigner(function(object, source2, srcIndex) {
        baseMerge(object, source2, srcIndex);
      });
      var mergeWith = createAssigner(function(object, source2, srcIndex, customizer) {
        baseMerge(object, source2, srcIndex, customizer);
      });
      var omit = flatRest(function(object, paths) {
        var result2 = {};
        if (object == null) {
          return result2;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result2);
        if (isDeep) {
          result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result2, paths[length]);
        }
        return result2;
      });
      function omitBy(object, predicate) {
        return pickBy2(object, negate(getIteratee(predicate)));
      }
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });
      function pickBy2(object, predicate) {
        if (object == null) {
          return {};
        }
        var props2 = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props2, function(value, path) {
          return predicate(value, path[0]);
        });
      }
      function result(object, path, defaultValue) {
        path = castPath(path, object);
        var index2 = -1, length = path.length;
        if (!length) {
          length = 1;
          object = undefined$1;
        }
        while (++index2 < length) {
          var value = object == null ? undefined$1 : object[toKey(path[index2])];
          if (value === undefined$1) {
            index2 = length;
            value = defaultValue;
          }
          object = isFunction2(value) ? value.call(object) : value;
        }
        return object;
      }
      function set2(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return object == null ? object : baseSet(object, path, value, customizer);
      }
      var toPairs = createToPairs(keys2);
      var toPairsIn = createToPairs(keysIn);
      function transform2(object, iteratee2, accumulator) {
        var isArr = isArray2(object), isArrLike = isArr || isBuffer2(object) || isTypedArray(object);
        iteratee2 = getIteratee(iteratee2, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor() : [];
          } else if (isObject2(object)) {
            accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
          } else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index2, object2) {
          return iteratee2(accumulator, value, index2, object2);
        });
        return accumulator;
      }
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }
      function update2(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == "function" ? customizer : undefined$1;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }
      function values(object) {
        return object == null ? [] : baseValues(object, keys2(object));
      }
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }
      function clamp(number2, lower, upper) {
        if (upper === undefined$1) {
          upper = lower;
          lower = undefined$1;
        }
        if (upper !== undefined$1) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined$1) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number2), lower, upper);
      }
      function inRange(number2, start, end) {
        start = toFinite(start);
        if (end === undefined$1) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number2 = toNumber(number2);
        return baseInRange(number2, start, end);
      }
      function random(lower, upper, floating) {
        if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined$1;
        }
        if (floating === undefined$1) {
          if (typeof upper == "boolean") {
            floating = upper;
            upper = undefined$1;
          } else if (typeof lower == "boolean") {
            floating = lower;
            lower = undefined$1;
          }
        }
        if (lower === undefined$1 && upper === undefined$1) {
          lower = 0;
          upper = 1;
        } else {
          lower = toFinite(lower);
          if (upper === undefined$1) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
        }
        return baseRandom(lower, upper);
      }
      var camelCase = createCompounder(function(result2, word, index2) {
        word = word.toLowerCase();
        return result2 + (index2 ? capitalize(word) : word);
      });
      function capitalize(string) {
        return upperFirst(toString3(string).toLowerCase());
      }
      function deburr(string) {
        string = toString3(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
      }
      function endsWith(string, target, position) {
        string = toString3(string);
        target = baseToString(target);
        var length = string.length;
        position = position === undefined$1 ? length : baseClamp(toInteger(position), 0, length);
        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }
      function escape(string) {
        string = toString3(string);
        return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
      }
      function escapeRegExp(string) {
        string = toString3(string);
        return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
      }
      var kebabCase = createCompounder(function(result2, word, index2) {
        return result2 + (index2 ? "-" : "") + word.toLowerCase();
      });
      var lowerCase = createCompounder(function(result2, word, index2) {
        return result2 + (index2 ? " " : "") + word.toLowerCase();
      });
      var lowerFirst = createCaseFirst("toLowerCase");
      function pad(string, length, chars) {
        string = toString3(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
      }
      function padEnd(string, length, chars) {
        string = toString3(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
      }
      function padStart(string, length, chars) {
        string = toString3(string);
        length = toInteger(length);
        var strLength = length ? stringSize(string) : 0;
        return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
      }
      function parseInt2(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString3(string).replace(reTrimStart, ""), radix || 0);
      }
      function repeat(string, n, guard) {
        if (guard ? isIterateeCall(string, n, guard) : n === undefined$1) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString3(string), n);
      }
      function replace() {
        var args = arguments, string = toString3(args[0]);
        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }
      var snakeCase = createCompounder(function(result2, word, index2) {
        return result2 + (index2 ? "_" : "") + word.toLowerCase();
      });
      function split(string, separator, limit) {
        if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined$1;
        }
        limit = limit === undefined$1 ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString3(string);
        if (string && (typeof separator == "string" || separator != null && !isRegExp2(separator))) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }
      var startCase = createCompounder(function(result2, word, index2) {
        return result2 + (index2 ? " " : "") + upperFirst(word);
      });
      function startsWith(string, target, position) {
        string = toString3(string);
        position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }
      function template(string, options, guard) {
        var settings = lodash2.templateSettings;
        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined$1;
        }
        string = toString3(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);
        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys2(imports), importsValues = baseValues(imports, importsKeys);
        var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source2 = "__p += '";
        var reDelimiters = RegExp2((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
        var sourceURL = "//# sourceURL=" + (hasOwnProperty2.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
          interpolateValue || (interpolateValue = esTemplateValue);
          source2 += string.slice(index2, offset2).replace(reUnescapedString, escapeStringChar);
          if (escapeValue) {
            isEscaping = true;
            source2 += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source2 += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source2 += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index2 = offset2 + match.length;
          return match;
        });
        source2 += "';\n";
        var variable = hasOwnProperty2.call(options, "variable") && options.variable;
        if (!variable) {
          source2 = "with (obj) {\n" + source2 + "\n}\n";
        } else if (reForbiddenIdentifierChars.test(variable)) {
          throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
        }
        source2 = (isEvaluating ? source2.replace(reEmptyStringLeading, "") : source2).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
        source2 = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source2 + "return __p\n}";
        var result2 = attempt(function() {
          return Function2(importsKeys, sourceURL + "return " + source2).apply(undefined$1, importsValues);
        });
        result2.source = source2;
        if (isError(result2)) {
          throw result2;
        }
        return result2;
      }
      function toLower(value) {
        return toString3(value).toLowerCase();
      }
      function toUpper(value) {
        return toString3(value).toUpperCase();
      }
      function trim2(string, chars, guard) {
        string = toString3(string);
        if (string && (guard || chars === undefined$1)) {
          return baseTrim(string);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
        return castSlice(strSymbols, start, end).join("");
      }
      function trimEnd(string, chars, guard) {
        string = toString3(string);
        if (string && (guard || chars === undefined$1)) {
          return string.slice(0, trimmedEndIndex(string) + 1);
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
        return castSlice(strSymbols, 0, end).join("");
      }
      function trimStart(string, chars, guard) {
        string = toString3(string);
        if (string && (guard || chars === undefined$1)) {
          return string.replace(reTrimStart, "");
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
        return castSlice(strSymbols, start).join("");
      }
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
        if (isObject2(options)) {
          var separator = "separator" in options ? options.separator : separator;
          length = "length" in options ? toInteger(options.length) : length;
          omission = "omission" in options ? baseToString(options.omission) : omission;
        }
        string = toString3(string);
        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
        if (separator === undefined$1) {
          return result2 + omission;
        }
        if (strSymbols) {
          end += result2.length - end;
        }
        if (isRegExp2(separator)) {
          if (string.slice(end).search(separator)) {
            var match, substring = result2;
            if (!separator.global) {
              separator = RegExp2(separator.source, toString3(reFlags.exec(separator)) + "g");
            }
            separator.lastIndex = 0;
            while (match = separator.exec(substring)) {
              var newEnd = match.index;
            }
            result2 = result2.slice(0, newEnd === undefined$1 ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index2 = result2.lastIndexOf(separator);
          if (index2 > -1) {
            result2 = result2.slice(0, index2);
          }
        }
        return result2 + omission;
      }
      function unescape2(string) {
        string = toString3(string);
        return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
      }
      var upperCase = createCompounder(function(result2, word, index2) {
        return result2 + (index2 ? " " : "") + word.toUpperCase();
      });
      var upperFirst = createCaseFirst("toUpperCase");
      function words(string, pattern, guard) {
        string = toString3(string);
        pattern = guard ? undefined$1 : pattern;
        if (pattern === undefined$1) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }
      var attempt = baseRest(function(func, args) {
        try {
          return apply2(func, undefined$1, args);
        } catch (e) {
          return isError(e) ? e : new Error2(e);
        }
      });
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind4(object[key], object));
        });
        return object;
      });
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != "function") {
            throw new TypeError2(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });
        return baseRest(function(args) {
          var index2 = -1;
          while (++index2 < length) {
            var pair = pairs[index2];
            if (apply2(pair[0], this, args)) {
              return apply2(pair[1], this, args);
            }
          }
        });
      }
      function conforms(source2) {
        return baseConforms(baseClone(source2, CLONE_DEEP_FLAG));
      }
      function constant(value) {
        return function() {
          return value;
        };
      }
      function defaultTo(value, defaultValue) {
        return value == null || value !== value ? defaultValue : value;
      }
      var flow = createFlow();
      var flowRight = createFlow(true);
      function identity(value) {
        return value;
      }
      function iteratee(func) {
        return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
      }
      function matches2(source2) {
        return baseMatches(baseClone(source2, CLONE_DEEP_FLAG));
      }
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });
      function mixin(object, source2, options) {
        var props2 = keys2(source2), methodNames = baseFunctions(source2, props2);
        if (options == null && !(isObject2(source2) && (methodNames.length || !props2.length))) {
          options = source2;
          source2 = object;
          object = this;
          methodNames = baseFunctions(source2, keys2(source2));
        }
        var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
        arrayEach(methodNames, function(methodName) {
          var func = source2[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain2 || chainAll) {
                var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                actions.push({ "func": func, "args": arguments, "thisArg": object });
                result2.__chain__ = chainAll;
                return result2;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });
        return object;
      }
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }
      function noop() {
      }
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }
      var over = createOver(arrayMap);
      var overEvery = createOver(arrayEvery);
      var overSome = createOver(arraySome);
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined$1 : baseGet(object, path);
        };
      }
      var range = createRange();
      var rangeRight = createRange(true);
      function stubArray() {
        return [];
      }
      function stubFalse() {
        return false;
      }
      function stubObject() {
        return {};
      }
      function stubString() {
        return "";
      }
      function stubTrue() {
        return true;
      }
      function times(n, iteratee2) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index2 = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
        iteratee2 = getIteratee(iteratee2);
        n -= MAX_ARRAY_LENGTH;
        var result2 = baseTimes(length, iteratee2);
        while (++index2 < n) {
          iteratee2(index2);
        }
        return result2;
      }
      function toPath(value) {
        if (isArray2(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString3(value)));
      }
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString3(prefix) + id;
      }
      var add2 = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);
      var ceil = createRound("ceil");
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);
      var floor = createRound("floor");
      function max2(array) {
        return array && array.length ? baseExtremum(array, identity, baseGt) : undefined$1;
      }
      function maxBy(array, iteratee2) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined$1;
      }
      function mean(array) {
        return baseMean(array, identity);
      }
      function meanBy(array, iteratee2) {
        return baseMean(array, getIteratee(iteratee2, 2));
      }
      function min2(array) {
        return array && array.length ? baseExtremum(array, identity, baseLt) : undefined$1;
      }
      function minBy(array, iteratee2) {
        return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined$1;
      }
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);
      var round2 = createRound("round");
      var subtract2 = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);
      function sum2(array) {
        return array && array.length ? baseSum(array, identity) : 0;
      }
      function sumBy(array, iteratee2) {
        return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
      }
      lodash2.after = after;
      lodash2.ary = ary;
      lodash2.assign = assign3;
      lodash2.assignIn = assignIn;
      lodash2.assignInWith = assignInWith;
      lodash2.assignWith = assignWith;
      lodash2.at = at;
      lodash2.before = before;
      lodash2.bind = bind4;
      lodash2.bindAll = bindAll;
      lodash2.bindKey = bindKey;
      lodash2.castArray = castArray;
      lodash2.chain = chain;
      lodash2.chunk = chunk;
      lodash2.compact = compact;
      lodash2.concat = concat;
      lodash2.cond = cond;
      lodash2.conforms = conforms;
      lodash2.constant = constant;
      lodash2.countBy = countBy;
      lodash2.create = create;
      lodash2.curry = curry;
      lodash2.curryRight = curryRight;
      lodash2.debounce = debounce;
      lodash2.defaults = defaults2;
      lodash2.defaultsDeep = defaultsDeep;
      lodash2.defer = defer;
      lodash2.delay = delay;
      lodash2.difference = difference;
      lodash2.differenceBy = differenceBy;
      lodash2.differenceWith = differenceWith;
      lodash2.drop = drop3;
      lodash2.dropRight = dropRight;
      lodash2.dropRightWhile = dropRightWhile;
      lodash2.dropWhile = dropWhile;
      lodash2.fill = fill;
      lodash2.filter = filter;
      lodash2.flatMap = flatMap;
      lodash2.flatMapDeep = flatMapDeep;
      lodash2.flatMapDepth = flatMapDepth;
      lodash2.flatten = flatten;
      lodash2.flattenDeep = flattenDeep;
      lodash2.flattenDepth = flattenDepth;
      lodash2.flip = flip;
      lodash2.flow = flow;
      lodash2.flowRight = flowRight;
      lodash2.fromPairs = fromPairs;
      lodash2.functions = functions;
      lodash2.functionsIn = functionsIn;
      lodash2.groupBy = groupBy;
      lodash2.initial = initial;
      lodash2.intersection = intersection;
      lodash2.intersectionBy = intersectionBy;
      lodash2.intersectionWith = intersectionWith;
      lodash2.invert = invert;
      lodash2.invertBy = invertBy;
      lodash2.invokeMap = invokeMap;
      lodash2.iteratee = iteratee;
      lodash2.keyBy = keyBy;
      lodash2.keys = keys2;
      lodash2.keysIn = keysIn;
      lodash2.map = map2;
      lodash2.mapKeys = mapKeys;
      lodash2.mapValues = mapValues;
      lodash2.matches = matches2;
      lodash2.matchesProperty = matchesProperty;
      lodash2.memoize = memoize;
      lodash2.merge = merge2;
      lodash2.mergeWith = mergeWith;
      lodash2.method = method;
      lodash2.methodOf = methodOf;
      lodash2.mixin = mixin;
      lodash2.negate = negate;
      lodash2.nthArg = nthArg;
      lodash2.omit = omit;
      lodash2.omitBy = omitBy;
      lodash2.once = once;
      lodash2.orderBy = orderBy;
      lodash2.over = over;
      lodash2.overArgs = overArgs;
      lodash2.overEvery = overEvery;
      lodash2.overSome = overSome;
      lodash2.partial = partial;
      lodash2.partialRight = partialRight;
      lodash2.partition = partition;
      lodash2.pick = pick;
      lodash2.pickBy = pickBy2;
      lodash2.property = property;
      lodash2.propertyOf = propertyOf;
      lodash2.pull = pull;
      lodash2.pullAll = pullAll;
      lodash2.pullAllBy = pullAllBy;
      lodash2.pullAllWith = pullAllWith;
      lodash2.pullAt = pullAt;
      lodash2.range = range;
      lodash2.rangeRight = rangeRight;
      lodash2.rearg = rearg;
      lodash2.reject = reject;
      lodash2.remove = remove;
      lodash2.rest = rest;
      lodash2.reverse = reverse;
      lodash2.sampleSize = sampleSize;
      lodash2.set = set2;
      lodash2.setWith = setWith;
      lodash2.shuffle = shuffle;
      lodash2.slice = slice;
      lodash2.sortBy = sortBy;
      lodash2.sortedUniq = sortedUniq;
      lodash2.sortedUniqBy = sortedUniqBy;
      lodash2.split = split;
      lodash2.spread = spread3;
      lodash2.tail = tail;
      lodash2.take = take;
      lodash2.takeRight = takeRight;
      lodash2.takeRightWhile = takeRightWhile;
      lodash2.takeWhile = takeWhile;
      lodash2.tap = tap;
      lodash2.throttle = throttle2;
      lodash2.thru = thru;
      lodash2.toArray = toArray3;
      lodash2.toPairs = toPairs;
      lodash2.toPairsIn = toPairsIn;
      lodash2.toPath = toPath;
      lodash2.toPlainObject = toPlainObject;
      lodash2.transform = transform2;
      lodash2.unary = unary;
      lodash2.union = union;
      lodash2.unionBy = unionBy;
      lodash2.unionWith = unionWith;
      lodash2.uniq = uniq;
      lodash2.uniqBy = uniqBy;
      lodash2.uniqWith = uniqWith;
      lodash2.unset = unset;
      lodash2.unzip = unzip;
      lodash2.unzipWith = unzipWith;
      lodash2.update = update2;
      lodash2.updateWith = updateWith;
      lodash2.values = values;
      lodash2.valuesIn = valuesIn;
      lodash2.without = without;
      lodash2.words = words;
      lodash2.wrap = wrap;
      lodash2.xor = xor;
      lodash2.xorBy = xorBy;
      lodash2.xorWith = xorWith;
      lodash2.zip = zip;
      lodash2.zipObject = zipObject;
      lodash2.zipObjectDeep = zipObjectDeep;
      lodash2.zipWith = zipWith;
      lodash2.entries = toPairs;
      lodash2.entriesIn = toPairsIn;
      lodash2.extend = assignIn;
      lodash2.extendWith = assignInWith;
      mixin(lodash2, lodash2);
      lodash2.add = add2;
      lodash2.attempt = attempt;
      lodash2.camelCase = camelCase;
      lodash2.capitalize = capitalize;
      lodash2.ceil = ceil;
      lodash2.clamp = clamp;
      lodash2.clone = clone2;
      lodash2.cloneDeep = cloneDeep;
      lodash2.cloneDeepWith = cloneDeepWith;
      lodash2.cloneWith = cloneWith;
      lodash2.conformsTo = conformsTo;
      lodash2.deburr = deburr;
      lodash2.defaultTo = defaultTo;
      lodash2.divide = divide;
      lodash2.endsWith = endsWith;
      lodash2.eq = eq;
      lodash2.escape = escape;
      lodash2.escapeRegExp = escapeRegExp;
      lodash2.every = every;
      lodash2.find = find2;
      lodash2.findIndex = findIndex;
      lodash2.findKey = findKey;
      lodash2.findLast = findLast;
      lodash2.findLastIndex = findLastIndex;
      lodash2.findLastKey = findLastKey;
      lodash2.floor = floor;
      lodash2.forEach = forEach3;
      lodash2.forEachRight = forEachRight;
      lodash2.forIn = forIn;
      lodash2.forInRight = forInRight;
      lodash2.forOwn = forOwn;
      lodash2.forOwnRight = forOwnRight;
      lodash2.get = get2;
      lodash2.gt = gt;
      lodash2.gte = gte;
      lodash2.has = has;
      lodash2.hasIn = hasIn;
      lodash2.head = head;
      lodash2.identity = identity;
      lodash2.includes = includes;
      lodash2.indexOf = indexOf2;
      lodash2.inRange = inRange;
      lodash2.invoke = invoke;
      lodash2.isArguments = isArguments;
      lodash2.isArray = isArray2;
      lodash2.isArrayBuffer = isArrayBuffer2;
      lodash2.isArrayLike = isArrayLike;
      lodash2.isArrayLikeObject = isArrayLikeObject;
      lodash2.isBoolean = isBoolean2;
      lodash2.isBuffer = isBuffer2;
      lodash2.isDate = isDate2;
      lodash2.isElement = isElement;
      lodash2.isEmpty = isEmpty;
      lodash2.isEqual = isEqual;
      lodash2.isEqualWith = isEqualWith;
      lodash2.isError = isError;
      lodash2.isFinite = isFinite2;
      lodash2.isFunction = isFunction2;
      lodash2.isInteger = isInteger;
      lodash2.isLength = isLength;
      lodash2.isMap = isMap;
      lodash2.isMatch = isMatch;
      lodash2.isMatchWith = isMatchWith;
      lodash2.isNaN = isNaN2;
      lodash2.isNative = isNative;
      lodash2.isNil = isNil;
      lodash2.isNull = isNull;
      lodash2.isNumber = isNumber2;
      lodash2.isObject = isObject2;
      lodash2.isObjectLike = isObjectLike;
      lodash2.isPlainObject = isPlainObject2;
      lodash2.isRegExp = isRegExp2;
      lodash2.isSafeInteger = isSafeInteger;
      lodash2.isSet = isSet;
      lodash2.isString = isString2;
      lodash2.isSymbol = isSymbol;
      lodash2.isTypedArray = isTypedArray;
      lodash2.isUndefined = isUndefined2;
      lodash2.isWeakMap = isWeakMap;
      lodash2.isWeakSet = isWeakSet;
      lodash2.join = join;
      lodash2.kebabCase = kebabCase;
      lodash2.last = last;
      lodash2.lastIndexOf = lastIndexOf;
      lodash2.lowerCase = lowerCase;
      lodash2.lowerFirst = lowerFirst;
      lodash2.lt = lt;
      lodash2.lte = lte;
      lodash2.max = max2;
      lodash2.maxBy = maxBy;
      lodash2.mean = mean;
      lodash2.meanBy = meanBy;
      lodash2.min = min2;
      lodash2.minBy = minBy;
      lodash2.stubArray = stubArray;
      lodash2.stubFalse = stubFalse;
      lodash2.stubObject = stubObject;
      lodash2.stubString = stubString;
      lodash2.stubTrue = stubTrue;
      lodash2.multiply = multiply;
      lodash2.nth = nth;
      lodash2.noConflict = noConflict;
      lodash2.noop = noop;
      lodash2.now = now2;
      lodash2.pad = pad;
      lodash2.padEnd = padEnd;
      lodash2.padStart = padStart;
      lodash2.parseInt = parseInt2;
      lodash2.random = random;
      lodash2.reduce = reduce;
      lodash2.reduceRight = reduceRight;
      lodash2.repeat = repeat;
      lodash2.replace = replace;
      lodash2.result = result;
      lodash2.round = round2;
      lodash2.runInContext = runInContext2;
      lodash2.sample = sample;
      lodash2.size = size;
      lodash2.snakeCase = snakeCase;
      lodash2.some = some2;
      lodash2.sortedIndex = sortedIndex;
      lodash2.sortedIndexBy = sortedIndexBy;
      lodash2.sortedIndexOf = sortedIndexOf;
      lodash2.sortedLastIndex = sortedLastIndex;
      lodash2.sortedLastIndexBy = sortedLastIndexBy;
      lodash2.sortedLastIndexOf = sortedLastIndexOf;
      lodash2.startCase = startCase;
      lodash2.startsWith = startsWith;
      lodash2.subtract = subtract2;
      lodash2.sum = sum2;
      lodash2.sumBy = sumBy;
      lodash2.template = template;
      lodash2.times = times;
      lodash2.toFinite = toFinite;
      lodash2.toInteger = toInteger;
      lodash2.toLength = toLength;
      lodash2.toLower = toLower;
      lodash2.toNumber = toNumber;
      lodash2.toSafeInteger = toSafeInteger;
      lodash2.toString = toString3;
      lodash2.toUpper = toUpper;
      lodash2.trim = trim2;
      lodash2.trimEnd = trimEnd;
      lodash2.trimStart = trimStart;
      lodash2.truncate = truncate;
      lodash2.unescape = unescape2;
      lodash2.uniqueId = uniqueId;
      lodash2.upperCase = upperCase;
      lodash2.upperFirst = upperFirst;
      lodash2.each = forEach3;
      lodash2.eachRight = forEachRight;
      lodash2.first = head;
      mixin(lodash2, function() {
        var source2 = {};
        baseForOwn(lodash2, function(func, methodName) {
          if (!hasOwnProperty2.call(lodash2.prototype, methodName)) {
            source2[methodName] = func;
          }
        });
        return source2;
      }(), { "chain": false });
      lodash2.VERSION = VERSION2;
      arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
        lodash2[methodName].placeholder = lodash2;
      });
      arrayEach(["drop", "take"], function(methodName, index2) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined$1 ? 1 : nativeMax(toInteger(n), 0);
          var result2 = this.__filtered__ && !index2 ? new LazyWrapper(this) : this.clone();
          if (result2.__filtered__) {
            result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
          } else {
            result2.__views__.push({
              "size": nativeMin(n, MAX_ARRAY_LENGTH),
              "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
            });
          }
          return result2;
        };
        LazyWrapper.prototype[methodName + "Right"] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });
      arrayEach(["filter", "map", "takeWhile"], function(methodName, index2) {
        var type = index2 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
        LazyWrapper.prototype[methodName] = function(iteratee2) {
          var result2 = this.clone();
          result2.__iteratees__.push({
            "iteratee": getIteratee(iteratee2, 3),
            "type": type
          });
          result2.__filtered__ = result2.__filtered__ || isFilter;
          return result2;
        };
      });
      arrayEach(["head", "last"], function(methodName, index2) {
        var takeName = "take" + (index2 ? "Right" : "");
        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });
      arrayEach(["initial", "tail"], function(methodName, index2) {
        var dropName = "drop" + (index2 ? "" : "Right");
        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });
      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };
      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };
      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };
      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == "function") {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });
      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };
      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);
        var result2 = this;
        if (result2.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result2);
        }
        if (start < 0) {
          result2 = result2.takeRight(-start);
        } else if (start) {
          result2 = result2.drop(start);
        }
        if (end !== undefined$1) {
          end = toInteger(end);
          result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
        }
        return result2;
      };
      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };
      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash2[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
        if (!lodashFunc) {
          return;
        }
        lodash2.prototype[methodName] = function() {
          var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
          var interceptor = function(value2) {
            var result3 = lodashFunc.apply(lodash2, arrayPush([value2], args));
            return isTaker && chainAll ? result3[0] : result3;
          };
          if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result2 = func.apply(value, args);
            result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined$1 });
            return new LodashWrapper(result2, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result2 = this.thru(interceptor);
          return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
        };
      });
      arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
        var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
        lodash2.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray2(value) ? value : [], args);
          }
          return this[chainName](function(value2) {
            return func.apply(isArray2(value2) ? value2 : [], args);
          });
        };
      });
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash2[methodName];
        if (lodashFunc) {
          var key = lodashFunc.name + "";
          if (!hasOwnProperty2.call(realNames, key)) {
            realNames[key] = [];
          }
          realNames[key].push({ "name": methodName, "func": lodashFunc });
        }
      });
      realNames[createHybrid(undefined$1, WRAP_BIND_KEY_FLAG).name] = [{
        "name": "wrapper",
        "func": undefined$1
      }];
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;
      lodash2.prototype.at = wrapperAt;
      lodash2.prototype.chain = wrapperChain;
      lodash2.prototype.commit = wrapperCommit;
      lodash2.prototype.next = wrapperNext;
      lodash2.prototype.plant = wrapperPlant;
      lodash2.prototype.reverse = wrapperReverse;
      lodash2.prototype.toJSON = lodash2.prototype.valueOf = lodash2.prototype.value = wrapperValue;
      lodash2.prototype.first = lodash2.prototype.head;
      if (symIterator) {
        lodash2.prototype[symIterator] = wrapperToIterator;
      }
      return lodash2;
    };
    var _2 = runInContext();
    if (freeModule) {
      (freeModule.exports = _2)._ = _2;
      freeExports._ = _2;
    } else {
      root._ = _2;
    }
  }).call(commonjsGlobal);
})(lodash, lodash.exports);
var _ = lodash.exports;
const _sfc_main$j = {
  props: ["element", "select", "index", "data", "formKey"],
  components: {
    WidgetElementItem
  },
  emits: ["select-change", "update:data", "update:select"],
  data() {
    return {};
  },
  mounted() {
  },
  methods: {
    handleSelectWidget(index2) {
      this.$emit("update:select", this.data.list[index2]);
    },
    handleWidgetDelete(index2) {
      if (this.data.list.length == 1) {
        this.$emit("select-change", -1);
      } else {
        if (this.data.list.length - 1 == index2) {
          this.$emit("select-change", index2 - 1);
        } else {
          this.$emit("select-change", index2);
        }
      }
      this.$nextTick(() => {
        this.data.list.splice(index2, 1);
        setTimeout(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        }, 20);
      });
    },
    handleWidgetClone(index2) {
      const key = Math.random().toString(36).slice(-8);
      let cloneData = __spreadProps(__spreadValues({}, _.cloneDeep(this.data.list[index2])), {
        key,
        model: this.data.list[index2].type + "_" + key
      });
      this.data.list.splice(index2 + 1, 0, cloneData);
      this.$nextTick(() => {
        this.$emit("update:select", this.data.list[index2 + 1]);
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    }
  },
  watch: {}
};
const _hoisted_1$d = {
  key: 0,
  class: "widget-view-action"
};
const _hoisted_2$a = ["title"];
const _hoisted_3$a = ["title"];
const _hoisted_4$a = {
  key: 1,
  class: "widget-view-drag"
};
const _hoisted_5$a = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-drag drag-widget" }, null, -1);
const _hoisted_6$9 = [
  _hoisted_5$a
];
const _hoisted_7$8 = {
  key: 0,
  class: "widget-view-action"
};
const _hoisted_8$6 = ["title"];
const _hoisted_9$5 = ["title"];
const _hoisted_10$4 = {
  key: 1,
  class: "widget-view-drag"
};
const _hoisted_11$3 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-drag drag-widget" }, null, -1);
const _hoisted_12$3 = [
  _hoisted_11$3
];
function _sfc_render$h(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_widget_element_item = resolveComponent("widget-element-item");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_el_divider = resolveComponent("el-divider");
  const _component_el_alert = resolveComponent("el-alert");
  return openBlock(), createElementBlock("div", null, [
    $props.element && $props.element.key && $props.element.type != "divider" && $props.element.type != "alert" ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: normalizeClass(["widget-view", {
        active: $props.select.key == $props.element.key,
        "is_req": $props.element.options.required,
        "is_hidden": $props.element.options.hidden
      }]),
      onClick: _cache[2] || (_cache[2] = withModifiers(($event) => $options.handleSelectWidget($props.index), ["stop"]))
    }, [
      createVNode(_component_el_form_item, {
        class: normalizeClass({
          [$props.element.options && $props.element.options.customClass]: $props.element.options.customClass ? true : false
        }),
        label: $props.element.options.hideLabel ? "" : $props.element.name,
        "label-width": $props.element.options.hideLabel ? "0px" : $props.element.options.isLabelWidth ? $props.element.options.labelWidth + "px" : ""
      }, {
        default: withCtx(() => [
          (openBlock(), createBlock(_component_widget_element_item, {
            element: $props.element,
            "is-table": false,
            key: $props.element.key
          }, null, 8, ["element"]))
        ]),
        _: 1
      }, 8, ["class", "label", "label-width"]),
      $props.select.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_1$d, [
        createElementVNode("i", {
          class: "iconfont icon-icon_clone",
          onClick: _cache[0] || (_cache[0] = withModifiers(($event) => $options.handleWidgetClone($props.index), ["stop"])),
          title: _ctx.$t("fm.tooltip.clone")
        }, null, 8, _hoisted_2$a),
        createElementVNode("i", {
          class: "iconfont icon-trash",
          onClick: _cache[1] || (_cache[1] = withModifiers(($event) => $options.handleWidgetDelete($props.index), ["stop"])),
          title: _ctx.$t("fm.tooltip.trash")
        }, null, 8, _hoisted_3$a)
      ])) : createCommentVNode("", true),
      $props.select.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_4$a, _hoisted_6$9)) : createCommentVNode("", true),
      createElementVNode("div", {
        class: "widget-view-model",
        style: normalizeStyle({ "color": $props.element.options.dataBind ? "" : "#666" })
      }, [
        createElementVNode("span", null, toDisplayString$1($props.element.model), 1)
      ], 4)
    ], 2)) : createCommentVNode("", true),
    $props.element && $props.element.key && ($props.element.type == "divider" || $props.element.type == "alert") ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: normalizeClass(["widget-view no-put", { active: $props.select.key == $props.element.key, "is_hidden": $props.element.options.hidden }]),
      onClick: _cache[5] || (_cache[5] = withModifiers(($event) => $options.handleSelectWidget($props.index), ["stop"])),
      style: { "padding-bottom": "0" }
    }, [
      createVNode(_component_el_form_item, { "label-width": "0" }, {
        default: withCtx(() => [
          $props.element.type == "divider" ? (openBlock(), createBlock(_component_el_divider, {
            key: 0,
            "content-position": $props.element.options.contentPosition
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString$1($props.element.name), 1)
            ]),
            _: 1
          }, 8, ["content-position"])) : createCommentVNode("", true),
          $props.element.type == "alert" ? (openBlock(), createBlock(_component_el_alert, {
            key: 1,
            title: $props.element.options.title,
            type: $props.element.options.type,
            description: $props.element.options.description,
            closable: $props.element.options.closable,
            center: $props.element.options.center,
            "show-icon": $props.element.options.showIcon,
            effect: $props.element.options.effect,
            style: normalizeStyle({ width: $props.element.options.width })
          }, null, 8, ["title", "type", "description", "closable", "center", "show-icon", "effect", "style"])) : createCommentVNode("", true)
        ]),
        _: 1
      }),
      $props.select.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_7$8, [
        createElementVNode("i", {
          class: "iconfont icon-icon_clone",
          onClick: _cache[3] || (_cache[3] = withModifiers(($event) => $options.handleWidgetClone($props.index), ["stop"])),
          title: _ctx.$t("fm.tooltip.clone")
        }, null, 8, _hoisted_8$6),
        createElementVNode("i", {
          class: "iconfont icon-trash",
          onClick: _cache[4] || (_cache[4] = withModifiers(($event) => $options.handleWidgetDelete($props.index), ["stop"])),
          title: _ctx.$t("fm.tooltip.trash")
        }, null, 8, _hoisted_9$5)
      ])) : createCommentVNode("", true),
      $props.select.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_10$4, _hoisted_12$3)) : createCommentVNode("", true),
      createElementVNode("div", {
        class: "widget-view-model",
        style: normalizeStyle({ "color": $props.element.options.dataBind ? "" : "#666" })
      }, [
        createElementVNode("span", null, toDisplayString$1($props.element.model), 1)
      ], 4)
    ], 2)) : createCommentVNode("", true)
  ]);
}
var WidgetFormItem = /* @__PURE__ */ _export_sfc(_sfc_main$j, [["render", _sfc_render$h]]);
const _sfc_main$i = {
  components: {
    WidgetElementItem
  },
  props: ["element", "select", "index", "data", "platform", "formKey"],
  emits: ["select-change", "update:select"],
  data() {
    return {
      selectWidget: this.select || {}
    };
  },
  methods: {
    handleSelectWidget(index2) {
      this.$emit("update:select", this.data[index2]);
    },
    handleWidgetDelete(index2) {
      if (this.data.length == 1) {
        this.$emit("select-change", -1);
      } else {
        if (this.data.length - 1 == index2) {
          this.$emit("select-change", index2 - 1);
        } else {
          this.$emit("select-change", index2);
        }
      }
      this.$nextTick(() => {
        this.data.splice(index2, 1);
        setTimeout(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        }, 20);
      });
    },
    handleWidgetClone(index2) {
      const key = Math.random().toString(36).slice(-8);
      let cloneData = __spreadProps(__spreadValues({}, _.cloneDeep(this.data[index2])), {
        key,
        model: this.data[index2].type + "_" + key
      });
      this.data.splice(index2 + 1, 0, cloneData);
      this.$nextTick(() => {
        this.$emit("update:select", this.data[index2 + 1]);
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    }
  },
  watch: {
    select(val) {
      this.selectWidget = val;
    },
    selectWidget(val) {
      this.$emit("update:select", val);
    }
  }
};
const _hoisted_1$c = {
  key: 2,
  class: "widget-view-action"
};
const _hoisted_2$9 = ["title"];
const _hoisted_3$9 = ["title"];
const _hoisted_4$9 = {
  key: 3,
  class: "widget-view-drag"
};
const _hoisted_5$9 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-drag drag-widget" }, null, -1);
const _hoisted_6$8 = [
  _hoisted_5$9
];
const _hoisted_7$7 = {
  key: 4,
  class: "widget-view-model"
};
function _sfc_render$g(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_widget_element_item = resolveComponent("widget-element-item");
  const _component_el_table_column = resolveComponent("el-table-column");
  const _component_el_table = resolveComponent("el-table");
  const _component_el_form_item = resolveComponent("el-form-item");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["widget-table-view", {
      active: $data.selectWidget.key == $props.element.key,
      "is_req": $props.element.options.required,
      "is_hidden": $props.element.options.hidden,
      "mobile": $props.platform == "mobile"
    }]),
    onClick: _cache[2] || (_cache[2] = withModifiers(($event) => $options.handleSelectWidget($props.index), ["stop"])),
    style: normalizeStyle({ width: $props.platform != "mobile" ? !$props.element.options.width || $props.element.options.width == "100%" ? "200px" : $props.element.options.width : "" })
  }, [
    $props.platform != "mobile" ? (openBlock(), createBlock(_component_el_table, {
      key: 0,
      "row-class-name": "widget-table-row",
      data: [{}]
    }, {
      default: withCtx(() => [
        createVNode(_component_el_table_column, {
          label: $props.element.options.hideLabel ? "" : $props.element.name,
          "label-class-name": $props.element.options.required ? "required" : ""
        }, {
          default: withCtx(() => [
            createVNode(_component_widget_element_item, {
              element: $props.element,
              "is-table": true
            }, null, 8, ["element"])
          ]),
          _: 1
        }, 8, ["label", "label-class-name"])
      ]),
      _: 1
    })) : createCommentVNode("", true),
    $props.platform == "mobile" ? (openBlock(), createBlock(_component_el_form_item, {
      key: 1,
      label: $props.element.options.hideLabel ? "" : $props.element.name,
      "label-width": $props.element.options.hideLabel ? "0px" : $props.element.options.isLabelWidth ? $props.element.options.labelWidth + "px" : ""
    }, {
      default: withCtx(() => [
        createVNode(_component_widget_element_item, {
          element: $props.element,
          "is-table": true
        }, null, 8, ["element"])
      ]),
      _: 1
    }, 8, ["label", "label-width"])) : createCommentVNode("", true),
    $data.selectWidget.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_1$c, [
      createElementVNode("i", {
        class: "iconfont icon-icon_clone",
        onClick: _cache[0] || (_cache[0] = withModifiers(($event) => $options.handleWidgetClone($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.clone")
      }, null, 8, _hoisted_2$9),
      createElementVNode("i", {
        class: "iconfont icon-trash",
        onClick: _cache[1] || (_cache[1] = withModifiers(($event) => $options.handleWidgetDelete($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.trash")
      }, null, 8, _hoisted_3$9)
    ])) : createCommentVNode("", true),
    $data.selectWidget.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_4$9, _hoisted_6$8)) : createCommentVNode("", true),
    $props.element.options.dataBind ? (openBlock(), createElementBlock("div", _hoisted_7$7, [
      createElementVNode("span", null, toDisplayString$1($props.element.model), 1)
    ])) : createCommentVNode("", true)
  ], 6);
}
var WidgetTableItem = /* @__PURE__ */ _export_sfc(_sfc_main$i, [["render", _sfc_render$g]]);
const CloneLayout = (data2) => {
  if (data2.type === "grid") {
    let key = Math.random().toString(36).slice(-8);
    return __spreadProps(__spreadValues({}, data2), {
      key,
      model: data2.type + "_" + key,
      columns: data2.columns.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          list: item2.list.map((colItem) => {
            return CloneLayout(colItem);
          }),
          key: Math.random().toString(36).slice(-8)
        });
      })
    });
  } else if (data2.type === "col") {
    let key = Math.random().toString(36).slice(-8);
    return __spreadProps(__spreadValues({}, data2), {
      key,
      list: data2.list.map((item2) => {
        return CloneLayout(item2);
      })
    });
  } else if (data2.type === "tabs") {
    let key = Math.random().toString(36).slice(-8);
    return __spreadProps(__spreadValues({}, data2), {
      key,
      model: data2.type + "_" + key,
      tabs: data2.tabs.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          list: item2.list.map((tabItem) => {
            return CloneLayout(tabItem);
          })
        });
      })
    });
  } else if (data2.type === "table") {
    let key = Math.random().toString(36).slice(-8);
    return __spreadProps(__spreadValues({}, data2), {
      key,
      model: data2.type + "_" + key,
      tableColumns: data2.tableColumns.map((item2) => {
        return CloneLayout(item2);
      })
    });
  } else if (data2.type === "report") {
    let key = Math.random().toString(36).slice(-8);
    return __spreadProps(__spreadValues({}, data2), {
      key,
      model: data2.type + "_" + key,
      rows: data2.rows.map((r) => {
        return __spreadProps(__spreadValues({}, r), {
          columns: r.columns.map((c) => {
            return __spreadProps(__spreadValues({}, c), {
              list: c.list.map((cItem) => {
                return CloneLayout(cItem);
              }),
              key: Math.random().toString(36).slice(-8)
            });
          })
        });
      })
    });
  } else if (data2.type === "inline") {
    let key = Math.random().toString(36).slice(-8);
    return __spreadProps(__spreadValues({}, data2), {
      key,
      model: data2.type + "_" + key,
      list: data2.list.map((item2) => {
        return CloneLayout(item2);
      })
    });
  } else {
    let key = Math.random().toString(36).slice(-8);
    return __spreadProps(__spreadValues({}, data2), {
      key,
      model: data2.type + "_" + key
    });
  }
};
const _sfc_main$h = {
  components: {
    Draggable: draggableComponent,
    WidgetTableItem
  },
  props: ["element", "select", "index", "data", "ds", "bindDataTable", "tableName", "platform", "formKey"],
  emits: ["select-change", "update:select"],
  data() {
    return {
      selectWidget: this.select || {},
      columnsWidthStyle: "200px"
    };
  },
  mounted() {
    this.calcTableColumnsWidth();
  },
  methods: {
    handleSelectWidget(index2) {
      this.$emit("update:select", this.data.list[index2]);
    },
    handleWidgetDelete(index2) {
      if (this.data.list.length == 1) {
        this.$emit("select-change", -1);
      } else {
        if (this.data.list.length - 1 == index2) {
          this.$emit("select-change", index2 - 1);
        } else {
          this.$emit("select-change", index2);
        }
      }
      this.data.list.splice(index2, 1);
      setTimeout(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      }, 20);
    },
    handleTableClone(index2) {
      let cloneData = _.cloneDeep(this.data.list[index2]);
      this.data.list.splice(index2 + 1, 0, CloneLayout(cloneData));
      this.$nextTick(() => {
        this.$emit("update:select", this.data.list[index2 + 1]);
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    },
    handleWidgetTableUpdate(evt) {
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    calcTableColumnsWidth() {
      this.columnsWidthStyle = "calc(200px)";
      let widthArray = [];
      for (let i2 = 0; i2 < this.element.tableColumns.length; i2++) {
        if (!this.element.tableColumns[i2].options.width || this.element.tableColumns[i2].options.width == "100%") {
          widthArray.push("200px");
        } else {
          widthArray.push(this.element.tableColumns[i2].options.width);
        }
      }
      widthArray.length && (this.columnsWidthStyle = `calc(200px + ${widthArray.join(" + ")})`);
    },
    handlePut(a, b, c) {
      if (c.className.indexOf("widget-col") >= 0 || c.className.indexOf("widget-table") >= 0 || c.className.indexOf("widget-tab") >= 0 || c.className.indexOf("widget-report") >= 0 || c.className.indexOf("widget-inline") >= 0 || c.className.indexOf("no-put") >= 0 || c.children[0].className.indexOf("no-put") >= 0) {
        return false;
      }
      return true;
    },
    handleWidgetTableAdd($event, table) {
      var _a2, _b, _c, _d, _e;
      const newIndex2 = $event.newIndex;
      const key = Math.random().toString(36).slice(-8);
      table.tableColumns[newIndex2] = _.cloneDeep(table.tableColumns[newIndex2]);
      if (this.bindDataTable) {
        table.tableColumns[newIndex2] = __spreadProps(__spreadValues({}, table.tableColumns[newIndex2]), {
          options: __spreadProps(__spreadValues({}, table.tableColumns[newIndex2].options), {
            remoteFunc: table.tableColumns[newIndex2].options.remoteFunc || "func_" + key,
            remoteOption: table.tableColumns[newIndex2].options.remoteOption || "option_" + key,
            width: "200px",
            tableColumn: true
          }),
          novalid: __spreadValues({}, table.tableColumns[newIndex2].novalid),
          key: table.tableColumns[newIndex2].key ? table.tableColumns[newIndex2].key : key,
          dsId: (_b = (_a2 = this == null ? void 0 : this.ds) == null ? void 0 : _a2.id) != null ? _b : "master",
          enName: (_d = (_c = this == null ? void 0 : this.ds) == null ? void 0 : _c.enName) != null ? _d : "master",
          tableName: (_e = this == null ? void 0 : this.tableName) != null ? _e : "",
          model: "",
          rules: table.tableColumns[newIndex2].rules ? [...table.tableColumns[newIndex2].rules] : []
        });
      } else {
        table.tableColumns[newIndex2] = __spreadProps(__spreadValues({}, table.tableColumns[newIndex2]), {
          options: __spreadProps(__spreadValues({}, table.tableColumns[newIndex2].options), {
            remoteFunc: table.tableColumns[newIndex2].options.remoteFunc || "func_" + key,
            remoteOption: table.tableColumns[newIndex2].options.remoteOption || "option_" + key,
            tableColumn: true
          }),
          novalid: __spreadValues({}, table.tableColumns[newIndex2].novalid),
          key: table.tableColumns[newIndex2].key ? table.tableColumns[newIndex2].key : key,
          model: table.tableColumns[newIndex2].model ? table.tableColumns[newIndex2].model : table.tableColumns[newIndex2].type + "_" + key,
          rules: table.tableColumns[newIndex2].rules ? [...table.tableColumns[newIndex2].rules] : []
        });
      }
      this.$emit("update:select", table.tableColumns[newIndex2]);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSelectChange(index2, item2) {
      setTimeout(() => {
        index2 >= 0 ? this.$emit("update:select", this.element.tableColumns[index2]) : this.$emit("update:select", this.data.list[this.index]);
      });
    }
  },
  watch: {
    select(val) {
      this.selectWidget = val;
    },
    selectWidget(val) {
      this.$emit("update:select", val);
    },
    element: {
      deep: true,
      handler(val) {
        this.calcTableColumnsWidth();
      }
    }
  }
};
const _hoisted_1$b = {
  key: 0,
  class: "widget-table-left"
};
const _hoisted_2$8 = /* @__PURE__ */ createElementVNode("div", { class: "widget-table-left__top" }, "#", -1);
const _hoisted_3$8 = /* @__PURE__ */ createElementVNode("div", { class: "widget-table-left__body" }, "1", -1);
const _hoisted_4$8 = [
  _hoisted_2$8,
  _hoisted_3$8
];
const _hoisted_5$8 = {
  key: 1,
  class: "widget-table-top"
};
const _hoisted_6$7 = {
  key: 0,
  class: "table-empty"
};
const _hoisted_7$6 = {
  key: 0,
  class: "widget-view-action widget-col-action"
};
const _hoisted_8$5 = ["title"];
const _hoisted_9$4 = ["title"];
const _hoisted_10$3 = {
  key: 1,
  class: "widget-view-drag widget-col-drag"
};
const _hoisted_11$2 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-drag drag-widget" }, null, -1);
const _hoisted_12$2 = [
  _hoisted_11$2
];
const _hoisted_13$1 = {
  key: 2,
  class: "widget-view-model"
};
function _sfc_render$f(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_widget_table_item = resolveComponent("widget-table-item");
  const _component_draggable = resolveComponent("draggable");
  const _component_el_form_item = resolveComponent("el-form-item");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["widget-table widget-view", {
      active: $data.selectWidget.key && $data.selectWidget.key == $props.element.key,
      "is_hidden": $props.element.options.hidden,
      "mobile": $props.platform == "mobile"
    }]),
    onClick: _cache[5] || (_cache[5] = withModifiers(($event) => $options.handleSelectWidget($props.index), ["stop"]))
  }, [
    createVNode(_component_el_form_item, {
      label: $props.element.options.hideLabel ? "" : $props.element.name,
      "label-width": $props.element.options.hideLabel ? "0px" : $props.element.options.isLabelWidth ? $props.element.options.labelWidth + "px" : "",
      class: normalizeClass({
        [$props.element.options && $props.element.options.customClass]: $props.element.options.customClass ? true : false
      })
    }, {
      default: withCtx(() => [
        createElementVNode("div", {
          class: normalizeClass(["widget-table-wrapper", { "mobile": $props.platform == "mobile" }])
        }, [
          $props.platform != "mobile" ? (openBlock(), createElementBlock("div", _hoisted_1$b, _hoisted_4$8)) : createCommentVNode("", true),
          $props.platform == "mobile" ? (openBlock(), createElementBlock("div", _hoisted_5$8, " # 1 ")) : createCommentVNode("", true),
          createElementVNode("div", {
            class: normalizeClass(["widget-table-content", { "mobile": $props.platform == "mobile" }])
          }, [
            $props.element.tableColumns.length == 0 ? (openBlock(), createElementBlock("div", _hoisted_6$7, toDisplayString$1(_ctx.$t("fm.description.tableEmpty")), 1)) : createCommentVNode("", true),
            createElementVNode("div", {
              style: normalizeStyle({ width: $props.platform != "mobile" ? $data.columnsWidthStyle : "100%" })
            }, [
              createVNode(_component_draggable, {
                modelValue: $props.element.tableColumns,
                "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $props.element.tableColumns = $event),
                group: { name: "people", put: $options.handlePut },
                "ghost-class": "ghost",
                animation: 200,
                handle: ".drag-widget",
                "no-transition-on-drag": true,
                onAdd: _cache[2] || (_cache[2] = ($event) => $options.handleWidgetTableAdd($event, $props.element)),
                onUpdate: $options.handleWidgetTableUpdate,
                class: "widget-table-col",
                "item-key": "key"
              }, {
                item: withCtx(({ element: item2, index: index2 }) => [
                  (openBlock(), createBlock(_component_widget_table_item, {
                    key: item2.key,
                    element: item2,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[0] || (_cache[0] = ($event) => $data.selectWidget = $event),
                    index: index2,
                    data: $props.element.tableColumns,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "select", "index", "data", "onSelectChange", "platform", "form-key"]))
                ]),
                _: 1
              }, 8, ["modelValue", "group", "onUpdate"])
            ], 4)
          ], 2)
        ], 2)
      ]),
      _: 1
    }, 8, ["label", "label-width", "class"]),
    $data.selectWidget.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_7$6, [
      createElementVNode("i", {
        class: "iconfont icon-icon_clone",
        onClick: _cache[3] || (_cache[3] = withModifiers(($event) => $options.handleTableClone($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.clone")
      }, null, 8, _hoisted_8$5),
      createElementVNode("i", {
        class: "iconfont icon-trash",
        onClick: _cache[4] || (_cache[4] = withModifiers(($event) => $options.handleWidgetDelete($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.trash")
      }, null, 8, _hoisted_9$4)
    ])) : createCommentVNode("", true),
    $data.selectWidget.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_10$3, _hoisted_12$2)) : createCommentVNode("", true),
    $props.element.options.dataBind ? (openBlock(), createElementBlock("div", _hoisted_13$1, [
      createElementVNode("span", null, toDisplayString$1($props.element.model), 1)
    ])) : createCommentVNode("", true)
  ], 2);
}
var WidgetTable = /* @__PURE__ */ _export_sfc(_sfc_main$h, [["render", _sfc_render$f]]);
const _sfc_main$g = {
  name: "widget-inline",
  components: {
    Draggable: draggableComponent,
    WidgetFormItem
  },
  props: ["element", "select", "index", "data", "platform", "formKey"],
  emits: ["select-change", "update:select"],
  data() {
    return {
      selectWidget: this.select || {}
    };
  },
  methods: {
    handleSelectWidget(index2) {
      this.selectWidget = this.data.list[index2];
    },
    handlePut(a, b, c) {
      if (c.className.indexOf("widget-col") >= 0 || c.className.indexOf("widget-table") >= 0 || c.className.indexOf("widget-tab") >= 0 || c.className.indexOf("widget-inline") >= 0 || c.className.indexOf("widget-report") >= 0 || c.className.indexOf("no-put") >= 0 || c.children[0].className.indexOf("no-put") >= 0) {
        return false;
      }
      return true;
    },
    handleWidgetInlineAdd($event, table) {
      const newIndex2 = $event.newIndex;
      const key = Math.random().toString(36).slice(-8);
      table.list[newIndex2] = _.cloneDeep(table.list[newIndex2]);
      table.list[newIndex2] = __spreadProps(__spreadValues({}, table.list[newIndex2]), {
        options: __spreadProps(__spreadValues({}, table.list[newIndex2].options), {
          remoteFunc: table.list[newIndex2].options.remoteFunc || "func_" + key,
          remoteOption: table.list[newIndex2].options.remoteOption || "option_" + key
        }),
        key: table.list[newIndex2].key ? table.list[newIndex2].key : key,
        model: table.list[newIndex2].model ? table.list[newIndex2].model : table.list[newIndex2].type + "_" + key,
        rules: table.list[newIndex2].rules ? [...table.list[newIndex2].rules] : []
      });
      this.selectWidget = table.list[newIndex2];
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleInlineClone(index2) {
      let cloneData = _.cloneDeep(this.data.list[index2]);
      this.data.list.splice(index2 + 1, 0, CloneLayout(cloneData));
      this.$nextTick(() => {
        this.selectWidget = this.data.list[index2 + 1];
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    },
    handleWidgetDelete(index2) {
      if (this.data.list.length == 1) {
        this.$emit("select-change", -1);
      } else {
        if (this.data.list.length - 1 == index2) {
          this.$emit("select-change", index2 - 1);
        } else {
          this.$emit("select-change", index2);
        }
      }
      this.data.list.splice(index2, 1);
      setTimeout(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      }, 20);
    },
    handleWidgetInlineUpdate() {
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSelectChange(index2, item2) {
      setTimeout(() => {
        index2 >= 0 ? this.selectWidget = item2.list[index2] : this.selectWidget = this.data.list[this.index];
      });
    }
  },
  watch: {
    select(val) {
      this.selectWidget = val;
    },
    selectWidget: {
      deep: true,
      handler(val) {
        this.$emit("update:select", val);
      }
    }
  }
};
const _hoisted_1$a = ["size"];
const _hoisted_2$7 = { class: "widget-inline-content" };
const _hoisted_3$7 = {
  key: 0,
  class: "widget-view-action widget-inline-action"
};
const _hoisted_4$7 = ["title"];
const _hoisted_5$7 = ["title"];
const _hoisted_6$6 = {
  key: 1,
  class: "widget-view-drag widget-inline-drag"
};
const _hoisted_7$5 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-drag drag-widget" }, null, -1);
const _hoisted_8$4 = [
  _hoisted_7$5
];
function _sfc_render$e(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_widget_form_item = resolveComponent("widget-form-item");
  const _component_draggable = resolveComponent("draggable");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["widget-inline widget-view", {
      active: $data.selectWidget.key && $data.selectWidget.key == $props.element.key,
      "is_hidden": $props.element.options.hidden
    }]),
    onClick: _cache[6] || (_cache[6] = withModifiers(($event) => $options.handleSelectWidget($props.index), ["stop"])),
    size: $props.element.options.size
  }, [
    createElementVNode("div", _hoisted_2$7, [
      createVNode(_component_draggable, mergeProps({
        modelValue: $props.element.list,
        "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $props.element.list = $event)
      }, { group: { name: "people", put: $options.handlePut }, ghostClass: "ghost", animation: 200, handle: ".drag-widget" }, {
        "no-transition-on-drag": true,
        onAdd: _cache[3] || (_cache[3] = ($event) => $options.handleWidgetInlineAdd($event, $props.element)),
        onUpdate: $options.handleWidgetInlineUpdate,
        class: ["widget-inline-list", {
          [$props.element.options && $props.element.options.customClass]: $props.element.options.customClass ? true : false
        }],
        "item-key": "key"
      }), {
        item: withCtx(({ element: item2, index: index2 }) => [
          item2 && item2.key ? (openBlock(), createBlock(_component_widget_form_item, {
            key: item2.key,
            element: item2,
            select: $data.selectWidget,
            "onUpdate:select": _cache[0] || (_cache[0] = ($event) => $data.selectWidget = $event),
            index: index2,
            data: $props.element,
            onSelectChange: _cache[1] || (_cache[1] = ($event) => $options.handleSelectChange($event, $props.element)),
            "form-key": $props.formKey,
            style: normalizeStyle({ "margin-right": $props.element.options.spaceSize + "px" })
          }, null, 8, ["element", "select", "index", "data", "form-key", "style"])) : createCommentVNode("", true)
        ]),
        _: 1
      }, 16, ["modelValue", "onUpdate", "class"])
    ]),
    $data.selectWidget.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_3$7, [
      createElementVNode("i", {
        class: "iconfont icon-icon_clone",
        onClick: _cache[4] || (_cache[4] = withModifiers(($event) => $options.handleInlineClone($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.clone")
      }, null, 8, _hoisted_4$7),
      createElementVNode("i", {
        class: "iconfont icon-trash",
        onClick: _cache[5] || (_cache[5] = withModifiers(($event) => $options.handleWidgetDelete($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.trash")
      }, null, 8, _hoisted_5$7)
    ])) : createCommentVNode("", true),
    $data.selectWidget.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_6$6, _hoisted_8$4)) : createCommentVNode("", true),
    createElementVNode("div", {
      class: "widget-view-model",
      style: normalizeStyle({ "color": $props.element.options.dataBind ? "" : "#666" })
    }, [
      createElementVNode("span", null, toDisplayString$1($props.element.model), 1)
    ], 4)
  ], 10, _hoisted_1$a);
}
var WidgetInline = /* @__PURE__ */ _export_sfc(_sfc_main$g, [["render", _sfc_render$e]]);
const _sfc_main$f = {
  name: "widget-tab-item",
  components: {
    WidgetFormItem,
    WidgetTable,
    WidgetInline,
    Draggable: draggableComponent,
    WidgetColItem: defineAsyncComponent(() => Promise.resolve().then(function() {
      return WidgetColItem$1;
    })),
    WidgetReport: defineAsyncComponent(() => Promise.resolve().then(function() {
      return WidgetReport$1;
    }))
  },
  props: ["element", "select", "index", "data", "ds", "bindDataTable", "tableName", "platform", "formKey"],
  emits: ["select-change", "update:select"],
  data() {
    return {
      tabActive: this.element.tabs[0].name,
      selectWidget: this.select || {}
    };
  },
  methods: {
    handleSelectWidget(index2) {
      this.selectWidget = this.data.list[index2];
    },
    handleWidgetDelete(index2) {
      if (this.data.list.length == 1) {
        this.$emit("select-change", -1);
      } else {
        if (this.data.list.length - 1 == index2) {
          this.$emit("select-change", index2 - 1);
        } else {
          this.$emit("select-change", index2);
        }
      }
      this.data.list.splice(index2, 1);
      setTimeout(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      }, 20);
    },
    handleTabClone(index2) {
      let cloneData = _.cloneDeep(this.data.list[index2]);
      this.data.list.splice(index2 + 1, 0, CloneLayout(cloneData));
      this.$nextTick(() => {
        this.selectWidget = this.data.list[index2 + 1];
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    },
    handleWidgetTabUpdate(evt) {
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleWidgetTabAdd($event, element, tabIndex) {
      var _a2, _b, _c, _d, _e;
      const newIndex2 = $event.newIndex;
      const key = Math.random().toString(36).slice(-8);
      fixDraggbleList(element.tabs[tabIndex].list, newIndex2);
      element.tabs[tabIndex].list[newIndex2] = _.cloneDeep(element.tabs[tabIndex].list[newIndex2]);
      if (this.bindDataTable) {
        element.tabs[tabIndex].list[newIndex2] = __spreadProps(__spreadValues({}, element.tabs[tabIndex].list[newIndex2]), {
          options: __spreadProps(__spreadValues({}, element.tabs[tabIndex].list[newIndex2].options), {
            remoteFunc: element.tabs[tabIndex].list[newIndex2].options.remoteFunc || "func_" + key,
            remoteOption: element.tabs[tabIndex].list[newIndex2].options.remoteOption || "option_" + key
          }),
          key: element.tabs[tabIndex].list[newIndex2].key ? element.tabs[tabIndex].list[newIndex2].key : key,
          dsId: (_b = (_a2 = this == null ? void 0 : this.ds) == null ? void 0 : _a2.id) != null ? _b : "master",
          enName: (_d = (_c = this == null ? void 0 : this.ds) == null ? void 0 : _c.enName) != null ? _d : "master",
          tableName: (_e = this == null ? void 0 : this.tableName) != null ? _e : "",
          model: "",
          tableColumn: false,
          rules: element.tabs[tabIndex].list[newIndex2].rules ? [...element.tabs[tabIndex].list[newIndex2].rules] : []
        });
      } else {
        element.tabs[tabIndex].list[newIndex2] = __spreadProps(__spreadValues({}, element.tabs[tabIndex].list[newIndex2]), {
          options: __spreadProps(__spreadValues({}, element.tabs[tabIndex].list[newIndex2].options), {
            remoteFunc: element.tabs[tabIndex].list[newIndex2].options.remoteFunc || "func_" + key,
            remoteOption: element.tabs[tabIndex].list[newIndex2].options.remoteOption || "option_" + key,
            tableColumn: false
          }),
          key: element.tabs[tabIndex].list[newIndex2].key ? element.tabs[tabIndex].list[newIndex2].key : key,
          model: element.tabs[tabIndex].list[newIndex2].model ? element.tabs[tabIndex].list[newIndex2].model : element.tabs[tabIndex].list[newIndex2].type + "_" + key,
          rules: element.tabs[tabIndex].list[newIndex2].rules ? [...element.tabs[tabIndex].list[newIndex2].rules] : []
        });
      }
      if (element.tabs[tabIndex].list[newIndex2].type == "report") {
        element.tabs[tabIndex].list[newIndex2].rows = generateKeyToTD(element.tabs[tabIndex].list[newIndex2].rows);
      }
      if (element.tabs[tabIndex].list[newIndex2].type == "grid") {
        element.tabs[tabIndex].list[newIndex2].columns = generateKeyToCol(element.tabs[tabIndex].list[newIndex2].columns);
      }
      this.selectWidget = element.tabs[tabIndex].list[newIndex2];
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSelectChange(index2, item2) {
      setTimeout(() => {
        index2 >= 0 ? this.selectWidget = item2.list[index2] : this.selectWidget = {};
      });
    }
  },
  watch: {
    select(val) {
      this.selectWidget = val;
    },
    selectWidget: {
      deep: true,
      handler(val) {
        this.$emit("update:select", val);
      }
    }
  }
};
const _hoisted_1$9 = {
  key: 0,
  class: "widget-view-action widget-col-action"
};
const _hoisted_2$6 = ["title"];
const _hoisted_3$6 = ["title"];
const _hoisted_4$6 = {
  key: 1,
  class: "widget-view-drag widget-col-drag"
};
const _hoisted_5$6 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-drag drag-widget" }, null, -1);
const _hoisted_6$5 = [
  _hoisted_5$6
];
function _sfc_render$d(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_widget_tab_item = resolveComponent("widget-tab-item", true);
  const _component_widget_table = resolveComponent("widget-table");
  const _component_widget_inline = resolveComponent("widget-inline");
  const _component_widget_report = resolveComponent("widget-report");
  const _component_widget_form_item = resolveComponent("widget-form-item");
  const _component_widget_col_item = resolveComponent("widget-col-item");
  const _component_draggable = resolveComponent("draggable");
  const _component_el_tab_pane = resolveComponent("el-tab-pane");
  const _component_el_tabs = resolveComponent("el-tabs");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["widget-tab widget-view", {
      active: $data.selectWidget.key && $data.selectWidget.key == $props.element.key,
      "is_hidden": $props.element.options.hidden
    }]),
    onClick: _cache[9] || (_cache[9] = withModifiers(($event) => $options.handleSelectWidget($props.index), ["stop"]))
  }, [
    createVNode(_component_el_tabs, {
      modelValue: $data.tabActive,
      "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.tabActive = $event),
      type: $props.element.options.type,
      "tab-position": $props.element.options.tabPosition,
      class: normalizeClass({
        [$props.element.options && $props.element.options.customClass]: $props.element.options.customClass ? true : false
      })
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.tabs, (item2, index2) => {
          return openBlock(), createBlock(_component_el_tab_pane, {
            key: item2.name,
            label: item2.label,
            name: item2.name
          }, {
            default: withCtx(() => [
              createVNode(_component_draggable, mergeProps({
                modelValue: item2.list,
                "onUpdate:modelValue": ($event) => item2.list = $event
              }, { group: "people", ghostClass: "ghost", animation: 200, handle: ".drag-widget" }, {
                "no-transition-on-drag": true,
                onAdd: ($event) => $options.handleWidgetTabAdd($event, $props.element, index2),
                onUpdate: $options.handleWidgetTabUpdate,
                class: "widget-col-list",
                "item-key": "key"
              }), {
                item: withCtx(({ element: tab, index: tabindex }) => [
                  tab.type === "tabs" ? (openBlock(), createBlock(_component_widget_tab_item, {
                    key: tab.key,
                    element: tab,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[0] || (_cache[0] = ($event) => $data.selectWidget = $event),
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    index: tabindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "select", "bindDataTable", "ds", "tableName", "index", "data", "onSelectChange", "platform", "form-key"])) : tab.type === "table" ? (openBlock(), createBlock(_component_widget_table, {
                    key: tab.key,
                    element: tab,
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[1] || (_cache[1] = ($event) => $data.selectWidget = $event),
                    index: tabindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "bindDataTable", "ds", "tableName", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : tab.type === "inline" ? (openBlock(), createBlock(_component_widget_inline, {
                    key: tab.key,
                    element: tab,
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[2] || (_cache[2] = ($event) => $data.selectWidget = $event),
                    index: tabindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "bindDataTable", "ds", "tableName", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : tab.type === "report" ? (openBlock(), createBlock(_component_widget_report, {
                    key: tab.key,
                    element: tab,
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[3] || (_cache[3] = ($event) => $data.selectWidget = $event),
                    index: tabindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "bindDataTable", "ds", "tableName", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : tab.type !== "grid" ? (openBlock(), createBlock(_component_widget_form_item, {
                    key: tab.key,
                    element: tab,
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[4] || (_cache[4] = ($event) => $data.selectWidget = $event),
                    index: tabindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    "form-key": $props.formKey
                  }, null, 8, ["element", "bindDataTable", "ds", "tableName", "select", "index", "data", "onSelectChange", "form-key"])) : (openBlock(), createBlock(_component_widget_col_item, {
                    key: tab.key,
                    element: tab,
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[5] || (_cache[5] = ($event) => $data.selectWidget = $event),
                    index: tabindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "bindDataTable", "ds", "tableName", "select", "index", "data", "onSelectChange", "platform", "form-key"]))
                ]),
                _: 2
              }, 1040, ["modelValue", "onUpdate:modelValue", "onAdd", "onUpdate"])
            ]),
            _: 2
          }, 1032, ["label", "name"]);
        }), 128))
      ]),
      _: 1
    }, 8, ["modelValue", "type", "tab-position", "class"]),
    $data.selectWidget.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_1$9, [
      createElementVNode("i", {
        class: "iconfont icon-icon_clone",
        onClick: _cache[7] || (_cache[7] = withModifiers(($event) => $options.handleTabClone($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.clone")
      }, null, 8, _hoisted_2$6),
      createElementVNode("i", {
        class: "iconfont icon-trash",
        onClick: _cache[8] || (_cache[8] = withModifiers(($event) => $options.handleWidgetDelete($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.trash")
      }, null, 8, _hoisted_3$6)
    ])) : createCommentVNode("", true),
    $data.selectWidget.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_4$6, _hoisted_6$5)) : createCommentVNode("", true),
    createElementVNode("div", {
      class: "widget-view-model",
      style: normalizeStyle({ "color": $props.element.options.dataBind ? "" : "#666" })
    }, [
      createElementVNode("span", null, toDisplayString$1($props.element.model), 1)
    ], 4)
  ], 2);
}
var WidgetTabItem = /* @__PURE__ */ _export_sfc(_sfc_main$f, [["render", _sfc_render$d]]);
var WidgetTabItem$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": WidgetTabItem
}, Symbol.toStringTag, { value: "Module" }));
const _sfc_main$e = {
  name: "widget-col-item",
  components: {
    Draggable: draggableComponent,
    WidgetFormItem,
    WidgetTable,
    WidgetTabItem,
    WidgetInline,
    WidgetReport: defineAsyncComponent(() => Promise.resolve().then(function() {
      return WidgetReport$1;
    }))
  },
  props: ["element", "select", "index", "data", "platform", "formKey", "ds", "bindDataTable", "tableName"],
  emits: ["select-change", "update:select"],
  data() {
    return {
      selectWidget: this.select || {},
      selectIndex: -1
    };
  },
  methods: {
    getColSpan(options) {
      if (this.platform == "pc") {
        return options && options.md;
      }
      if (this.platform == "pad") {
        return options && options.sm;
      }
      if (this.platform == "mobile") {
        return options && options.xs;
      }
    },
    handleSelectWidget(index2) {
      this.$emit("update:select", this.data.list[index2]);
    },
    handleSelectItemWidget(i2) {
      this.$emit("update:select", this.data.list[this.index].columns[i2]);
      this.selectIndex = i2;
    },
    handleWidgetDelete(index2) {
      if (this.data.list.length == 1) {
        this.$emit("select-change", -1);
      } else {
        if (this.data.list.length - 1 == index2) {
          this.$emit("select-change", index2 - 1);
        } else {
          this.$emit("select-change", index2);
        }
      }
      this.data.list.splice(index2, 1);
      setTimeout(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      }, 20);
    },
    handleColItemDelete(index2, i2) {
      this.data.list[index2].columns.splice(i2, 1);
      if (i2 == 0) {
        this.$emit("update:select", this.data.list[index2].columns[0]);
      } else {
        this.$emit("update:select", this.data.list[index2].columns[i2 - 1]);
      }
      setTimeout(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      }, 20);
    },
    handleAddCol(index2) {
      this.data.list[index2].columns.push({
        type: "col",
        options: {
          span: 12,
          offset: 0,
          push: 0,
          pull: 0,
          xs: 24,
          sm: 12,
          md: 12,
          lg: 12,
          xl: 12,
          customClass: ""
        },
        list: [],
        key: Math.random().toString(36).slice(-8)
      });
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleColClone(index2) {
      let cloneData = _.cloneDeep(this.data.list[index2]);
      this.data.list.splice(index2 + 1, 0, CloneLayout(cloneData));
      this.$nextTick(() => {
        this.data.list[index2 + 1];
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    },
    handleColItemClone(index2, i2) {
      let cloneData = _.cloneDeep(this.data.list[index2].columns[i2]);
      this.data.list[index2].columns.splice(i2 + 1, 0, CloneLayout(cloneData));
      this.$nextTick(() => {
        this.$emit("update:select", this.data.list[index2].columns[i2 + 1]);
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    },
    handleWidgetColUpdate(evt) {
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleWidgetColAdd($event, row, colIndex) {
      var _a2, _b, _c, _d, _e;
      const newIndex2 = $event.newIndex;
      fixDraggbleList(row.columns[colIndex].list, newIndex2);
      row.columns[colIndex].list[newIndex2] = _.cloneDeep(row.columns[colIndex].list[newIndex2]);
      const key = Math.random().toString(36).slice(-8);
      if (this.bindDataTable) {
        row.columns[colIndex].list[newIndex2] = __spreadProps(__spreadValues({}, row.columns[colIndex].list[newIndex2]), {
          options: __spreadProps(__spreadValues({}, row.columns[colIndex].list[newIndex2].options), {
            remoteFunc: row.columns[colIndex].list[newIndex2].options.remoteFunc || "func_" + key,
            remoteOption: row.columns[colIndex].list[newIndex2].options.remoteOption || "option_" + key,
            tableColumn: false
          }),
          novalid: __spreadValues({}, row.columns[colIndex].list[newIndex2].novalid),
          key: row.columns[colIndex].list[newIndex2].key ? row.columns[colIndex].list[newIndex2].key : key,
          dsId: (_b = (_a2 = this == null ? void 0 : this.ds) == null ? void 0 : _a2.id) != null ? _b : "master",
          enName: (_d = (_c = this == null ? void 0 : this.ds) == null ? void 0 : _c.enName) != null ? _d : "master",
          tableName: (_e = this == null ? void 0 : this.tableName) != null ? _e : "",
          model: "",
          rules: row.columns[colIndex].list[newIndex2].rules ? [...row.columns[colIndex].list[newIndex2].rules] : []
        });
      } else {
        row.columns[colIndex].list[newIndex2] = __spreadProps(__spreadValues({}, row.columns[colIndex].list[newIndex2]), {
          options: __spreadProps(__spreadValues({}, row.columns[colIndex].list[newIndex2].options), {
            remoteFunc: row.columns[colIndex].list[newIndex2].options.remoteFunc || "func_" + key,
            remoteOption: row.columns[colIndex].list[newIndex2].options.remoteOption || "option_" + key,
            tableColumn: false
          }),
          novalid: __spreadValues({}, row.columns[colIndex].list[newIndex2].novalid),
          key: row.columns[colIndex].list[newIndex2].key ? row.columns[colIndex].list[newIndex2].key : key,
          model: row.columns[colIndex].list[newIndex2].model ? row.columns[colIndex].list[newIndex2].model : row.columns[colIndex].list[newIndex2].type + "_" + key,
          rules: row.columns[colIndex].list[newIndex2].rules ? [...row.columns[colIndex].list[newIndex2].rules] : []
        });
      }
      if (row.columns[colIndex].list[newIndex2].type == "report") {
        row.columns[colIndex].list[newIndex2].rows = generateKeyToTD(row.columns[colIndex].list[newIndex2].rows);
      }
      if (row.columns[colIndex].list[newIndex2].type == "grid") {
        row.columns[colIndex].list[newIndex2].columns = generateKeyToCol(row.columns[colIndex].list[newIndex2].columns);
      }
      this.$emit("update:select", row.columns[colIndex].list[newIndex2]);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSelectChange(index2, item2) {
      setTimeout(() => {
        index2 >= 0 ? this.$emit("update:select", item2.list[index2]) : this.$emit("update:select", {});
      });
    }
  },
  watch: {
    select(val) {
      this.selectWidget = val;
    },
    selectWidget(val) {
      this.$emit("update:select", val);
    }
  }
};
const _hoisted_1$8 = {
  key: 0,
  class: "widget-view-action widget-col-action"
};
const _hoisted_2$5 = ["onClick", "title"];
const _hoisted_3$5 = ["onClick", "title"];
const _hoisted_4$5 = {
  key: 0,
  class: "widget-view-action widget-col-action"
};
const _hoisted_5$5 = ["title"];
const _hoisted_6$4 = ["title"];
const _hoisted_7$4 = ["title"];
const _hoisted_8$3 = {
  key: 1,
  class: "widget-view-drag widget-col-drag"
};
const _hoisted_9$3 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-drag drag-widget" }, null, -1);
const _hoisted_10$2 = [
  _hoisted_9$3
];
function _sfc_render$c(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_widget_col_item = resolveComponent("widget-col-item", true);
  const _component_widget_tab_item = resolveComponent("widget-tab-item");
  const _component_widget_report = resolveComponent("widget-report");
  const _component_widget_table = resolveComponent("widget-table");
  const _component_widget_inline = resolveComponent("widget-inline");
  const _component_widget_form_item = resolveComponent("widget-form-item");
  const _component_draggable = resolveComponent("draggable");
  const _component_el_col = resolveComponent("el-col");
  const _component_el_row = resolveComponent("el-row");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["widget-col widget-view", {
      active: $props.select.key && $props.select.key == $props.element.key,
      "is_hidden": $props.element.options.hidden
    }]),
    onClick: _cache[9] || (_cache[9] = withModifiers(($event) => $options.handleSelectWidget($props.index), ["stop"]))
  }, [
    createVNode(_component_el_row, {
      type: $props.element.options.flex ? "flex" : "",
      gutter: $props.element.options.gutter || 0,
      justify: $props.element.options.justify,
      align: $props.element.options.align,
      class: normalizeClass({
        [$props.element.options && $props.element.options.customClass]: $props.element.options && $props.element.options.customClass ? true : false
      })
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.columns, (item2, i2) => {
          return openBlock(), createBlock(_component_el_col, {
            class: normalizeClass(["widget-col-item", {
              active: $props.select.key && $props.select.key == item2.key,
              [item2.options && item2.options.customClass]: item2.options && item2.options.customClass ? true : false
            }]),
            key: item2.key,
            onClick: withModifiers(($event) => $options.handleSelectItemWidget(i2), ["stop"]),
            span: $options.getColSpan(item2.options),
            offset: item2.options ? item2.options.offset : 0,
            push: item2.options ? item2.options.push : 0,
            pull: item2.options ? item2.options.pull : 0
          }, {
            default: withCtx(() => [
              createVNode(_component_draggable, mergeProps({
                list: $props.element.columns[i2].list
              }, { group: "people", ghostClass: "ghost", animation: 200, handle: ".drag-widget" }, {
                "no-transition-on-drag": true,
                onAdd: ($event) => $options.handleWidgetColAdd($event, $props.element, i2),
                onUpdate: $options.handleWidgetColUpdate,
                class: "widget-col-list",
                "item-key": "key"
              }), {
                item: withCtx(({ element: col, index: colindex }) => [
                  col.type === "grid" ? (openBlock(), createBlock(_component_widget_col_item, {
                    key: col.key,
                    element: col,
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[0] || (_cache[0] = ($event) => $data.selectWidget = $event),
                    index: colindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "bindDataTable", "ds", "tableName", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : col.type === "tabs" ? (openBlock(), createBlock(_component_widget_tab_item, {
                    key: col.key,
                    element: col,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[1] || (_cache[1] = ($event) => $data.selectWidget = $event),
                    index: colindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "select", "index", "data", "onSelectChange", "bindDataTable", "ds", "tableName", "platform", "form-key"])) : col.type === "report" ? (openBlock(), createBlock(_component_widget_report, {
                    key: col.key,
                    element: col,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[2] || (_cache[2] = ($event) => $data.selectWidget = $event),
                    index: colindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "select", "index", "data", "onSelectChange", "bindDataTable", "ds", "tableName", "platform", "form-key"])) : col.type === "table" ? (openBlock(), createBlock(_component_widget_table, {
                    key: col.key,
                    element: col,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[3] || (_cache[3] = ($event) => $data.selectWidget = $event),
                    index: colindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    bindDataTable: $props.bindDataTable,
                    ds: $props.ds,
                    tableName: $props.tableName,
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "select", "index", "data", "onSelectChange", "bindDataTable", "ds", "tableName", "platform", "form-key"])) : col.type === "inline" ? (openBlock(), createBlock(_component_widget_inline, {
                    key: col.key,
                    element: col,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[4] || (_cache[4] = ($event) => $data.selectWidget = $event),
                    index: colindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    platform: $props.platform,
                    "form-key": $props.formKey
                  }, null, 8, ["element", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : (openBlock(), createBlock(_component_widget_form_item, {
                    key: col.key,
                    element: col,
                    select: $data.selectWidget,
                    "onUpdate:select": _cache[5] || (_cache[5] = ($event) => $data.selectWidget = $event),
                    index: colindex,
                    data: item2,
                    onSelectChange: ($event) => $options.handleSelectChange($event, item2),
                    "form-key": $props.formKey
                  }, null, 8, ["element", "select", "index", "data", "onSelectChange", "form-key"]))
                ]),
                _: 2
              }, 1040, ["list", "onAdd", "onUpdate"]),
              $props.select.key == item2.key ? (openBlock(), createElementBlock("div", _hoisted_1$8, [
                createElementVNode("i", {
                  class: "iconfont icon-icon_clone",
                  onClick: withModifiers(($event) => $options.handleColItemClone($props.index, i2), ["stop"]),
                  title: _ctx.$t("fm.tooltip.clone")
                }, null, 8, _hoisted_2$5),
                $props.element.columns.length > 1 ? (openBlock(), createElementBlock("i", {
                  key: 0,
                  class: "iconfont icon-trash",
                  onClick: withModifiers(($event) => $options.handleColItemDelete($props.index, i2), ["stop"]),
                  title: _ctx.$t("fm.tooltip.trash")
                }, null, 8, _hoisted_3$5)) : createCommentVNode("", true)
              ])) : createCommentVNode("", true)
            ]),
            _: 2
          }, 1032, ["class", "onClick", "span", "offset", "push", "pull"]);
        }), 128))
      ]),
      _: 1
    }, 8, ["type", "gutter", "justify", "align", "class"]),
    $props.select.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_4$5, [
      createElementVNode("i", {
        class: "iconfont icon-tianjiazengjiajia",
        onClick: _cache[6] || (_cache[6] = withModifiers(($event) => $options.handleAddCol($props.index), ["stop"])),
        title: _ctx.$t("fm.actions.addColumn")
      }, null, 8, _hoisted_5$5),
      createElementVNode("i", {
        class: "iconfont icon-icon_clone",
        onClick: _cache[7] || (_cache[7] = withModifiers(($event) => $options.handleColClone($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.clone")
      }, null, 8, _hoisted_6$4),
      createElementVNode("i", {
        class: "iconfont icon-trash",
        onClick: _cache[8] || (_cache[8] = withModifiers(($event) => $options.handleWidgetDelete($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.trash")
      }, null, 8, _hoisted_7$4)
    ])) : createCommentVNode("", true),
    $props.select.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_8$3, _hoisted_10$2)) : createCommentVNode("", true),
    createElementVNode("div", {
      class: "widget-view-model",
      style: normalizeStyle({ "color": $props.element.options.dataBind ? "" : "#666" })
    }, [
      createElementVNode("span", null, toDisplayString$1($props.element.model), 1)
    ], 4)
  ], 2);
}
var WidgetColItem = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render$c]]);
var WidgetColItem$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": WidgetColItem
}, Symbol.toStringTag, { value: "Module" }));
const _sfc_main$d = {
  name: "widget-report",
  components: {
    Draggable: draggableComponent,
    WidgetFormItem,
    WidgetTable,
    WidgetInline,
    WidgetColItem: defineAsyncComponent(() => Promise.resolve().then(function() {
      return WidgetColItem$1;
    })),
    WidgetTabItem: defineAsyncComponent(() => Promise.resolve().then(function() {
      return WidgetTabItem$1;
    }))
  },
  props: ["element", "select", "index", "data", "platform", "formKey"],
  emits: ["select-change", "update:select"],
  data() {
    return {
      selectWidget: this.select || {},
      selectR: -1,
      selectC: -1
    };
  },
  computed: {
    showRight() {
      if (this.selectR >= 0 && this.selectC >= 0) {
        const currentRowspan = this.element.rows[this.selectR].columns[this.selectC].options.rowspan;
        const currentColspan = this.element.rows[this.selectR].columns[this.selectC].options.colspan;
        if (this.selectC + currentColspan < this.element.rows[this.selectR].columns.length) {
          const nextColumn = this.element.rows[this.selectR].columns[currentColspan + this.selectC];
          if (!nextColumn.options.invisible && currentRowspan == nextColumn.options.rowspan) {
            return true;
          }
        }
      }
      return false;
    },
    showBottom() {
      if (this.selectR >= 0 && this.selectC >= 0) {
        const currentRowspan = this.element.rows[this.selectR].columns[this.selectC].options.rowspan;
        const currentColspan = this.element.rows[this.selectR].columns[this.selectC].options.colspan;
        if (currentRowspan + this.selectR < this.element.rows.length) {
          const nextColumn = this.element.rows[currentRowspan + this.selectR].columns[this.selectC];
          if (!nextColumn.options.invisible && currentColspan == nextColumn.options.colspan) {
            return true;
          }
        }
      }
      return false;
    },
    showRemoveRow() {
      if (this.element.rows.length > 1 && this.selectR >= 0 && this.selectC >= 0) {
        const currentRowspan = this.element.rows[this.selectR].columns[this.selectC].options.rowspan;
        if (currentRowspan == 1) {
          return true;
        } else {
          let i2 = 0;
          for (; i2 < this.element.rows[this.selectR].columns.length; i2++) {
            if (currentRowspan != this.element.rows[this.selectR].columns[i2].options.rowspan || this.element.rows[this.selectR].columns[i2].options.invisible) {
              return false;
            }
          }
          if (this.element.rows[this.selectR].columns.length == i2) {
            return true;
          }
        }
      }
      return false;
    },
    showRemoveColumn() {
      if (this.selectR >= 0 && this.selectC >= 0 && this.element.rows[this.selectR].columns.length > 1) {
        const currentColspan = this.element.rows[this.selectR].columns[this.selectC].options.colspan;
        if (currentColspan == 1) {
          return true;
        } else {
          let i2 = 0;
          for (; i2 < this.element.rows.length; i2++) {
            if (currentColspan != this.element.rows[i2].columns[this.selectC].options.colspan || this.element.rows[i2].columns[this.selectC].options.invisible) {
              return false;
            }
          }
          if (this.element.rows.length == i2) {
            return true;
          }
        }
      }
      return false;
    },
    showSplitColumn() {
      if (this.selectR >= 0 && this.selectC >= 0) {
        return this.element.rows[this.selectR].columns[this.selectC].options.colspan > 1;
      }
      return false;
    },
    showSplitRow() {
      if (this.selectR >= 0 && this.selectC >= 0) {
        return this.element.rows[this.selectR].columns[this.selectC].options.rowspan > 1;
      }
      return false;
    }
  },
  methods: {
    handlePut(a, b, c) {
      if (c.className.indexOf("widget-col") >= 0 || c.className.indexOf("widget-table") >= 0 || c.className.indexOf("widget-tab") >= 0 || c.className.indexOf("no-put") >= 0 || c.children[0].className.indexOf("no-put") >= 0) {
        return false;
      }
      return true;
    },
    handleSelectWidget(index2) {
      this.$emit("update:select", this.data.list[index2]);
    },
    handleSelectItemWidget(rowIndex, colIndex) {
      this.$emit("update:select", this.data.list[this.index].rows[rowIndex].columns[colIndex]);
      this.selectR = rowIndex;
      this.selectC = colIndex;
    },
    handleWidgetDelete(index2) {
      if (this.data.list.length == 1) {
        this.$emit("select-change", -1);
      } else {
        if (this.data.list.length - 1 == index2) {
          this.$emit("select-change", index2 - 1);
        } else {
          this.$emit("select-change", index2);
        }
      }
      this.data.list.splice(index2, 1);
      setTimeout(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      }, 20);
    },
    handleWidgetItemAdd($event, element, rowIndex, colIndex) {
      const newIndex2 = $event.newIndex;
      fixDraggbleList(element.rows[rowIndex].columns[colIndex].list, newIndex2);
      const key = Math.random().toString(36).slice(-8);
      element.rows[rowIndex].columns[colIndex].list[newIndex2] = _.cloneDeep(element.rows[rowIndex].columns[colIndex].list[newIndex2]);
      element.rows[rowIndex].columns[colIndex].list[newIndex2] = __spreadProps(__spreadValues({}, element.rows[rowIndex].columns[colIndex].list[newIndex2]), {
        options: __spreadProps(__spreadValues({}, element.rows[rowIndex].columns[colIndex].list[newIndex2].options), {
          remoteFunc: element.rows[rowIndex].columns[colIndex].list[newIndex2].options.remoteFunc || "func_" + key,
          remoteOption: element.rows[rowIndex].columns[colIndex].list[newIndex2].options.remoteOption || "option_" + key,
          tableColumn: false,
          hideLabel: true
        }),
        key: element.rows[rowIndex].columns[colIndex].list[newIndex2].key ? element.rows[rowIndex].columns[colIndex].list[newIndex2].key : key,
        model: element.rows[rowIndex].columns[colIndex].list[newIndex2].model ? element.rows[rowIndex].columns[colIndex].list[newIndex2].model : element.rows[rowIndex].columns[colIndex].list[newIndex2].type + "_" + key,
        rules: element.rows[rowIndex].columns[colIndex].list[newIndex2].rules ? [...element.rows[rowIndex].columns[colIndex].list[newIndex2].rules] : []
      });
      if (element.rows[rowIndex].columns[colIndex].list[newIndex2].type == "report") {
        element.rows[rowIndex].columns[colIndex].list[newIndex2].rows = generateKeyToTD(element.rows[rowIndex].columns[colIndex].list[newIndex2].rows);
      }
      if (element.rows[rowIndex].columns[colIndex].list[newIndex2].type == "grid") {
        element.rows[rowIndex].columns[colIndex].list[newIndex2].columns = generateKeyToCol(element.rows[rowIndex].columns[colIndex].list[newIndex2].columns);
      }
      this.$emit("update:select", element.rows[rowIndex].columns[colIndex].list[newIndex2]);
      EventBus.$emit("on-history-add-" + this.formKey);
    },
    handleWidgetItemUpdate() {
      EventBus.$emit("on-history-add-" + this.formKey);
    },
    handleReportClone(index2) {
      let cloneData = _.cloneDeep(this.data.list[index2]);
      this.data.list.splice(index2 + 1, 0, CloneLayout(cloneData));
      this.$nextTick(() => {
        this.$emit("update:select", this.data.list[index2 + 1]);
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    },
    handleAddRow(index2) {
      const columns = this.data.list[index2].rows[this.data.list[index2].rows.length - 1].columns.length;
      this.data.list[index2].rows.push({
        columns: Array.from({ length: columns }, (_2) => {
          return {
            type: "td",
            list: [],
            options: {
              customClass: "",
              colspan: 1,
              rowspan: 1,
              align: "left",
              valign: "top",
              width: "",
              height: ""
            },
            key: Math.random().toString(36).slice(-8)
          };
        })
      });
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleAddColumns(index2) {
      this.data.list[index2].rows.forEach((item2) => {
        item2.columns.push({
          type: "td",
          list: [],
          options: {
            customClass: "",
            colspan: 1,
            rowspan: 1,
            align: "left",
            valign: "top",
            width: "",
            height: ""
          },
          key: Math.random().toString(36).slice(-8)
        });
      });
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    insertColumns(insertIndex) {
      for (let i2 = 0; i2 < this.element.rows.length; i2++) {
        const prevIndex = this.findPrevColIndex(i2, insertIndex);
        if (prevIndex != insertIndex && this.element.rows[i2].columns[insertIndex].options.invisible) {
          this.element.rows[i2].columns.splice(insertIndex, 0, {
            type: "td",
            list: [],
            options: {
              customClass: "",
              colspan: 1,
              rowspan: 1,
              align: "left",
              valign: "top",
              width: "",
              height: "",
              invisible: true
            },
            key: Math.random().toString(36).slice(-8)
          });
          const beforeColspan = this.element.rows[i2].columns[prevIndex].options.colspan;
          this.element.rows[i2].columns[prevIndex].options.colspan = beforeColspan + 1;
          for (let j = 0; j < beforeColspan + 1; j++) {
            this.element.rows[i2].columns[prevIndex + j].options.markCol = j;
          }
        } else {
          this.element.rows[i2].columns.splice(insertIndex, 0, {
            type: "td",
            list: [],
            options: {
              customClass: "",
              colspan: 1,
              rowspan: 1,
              align: "left",
              valign: "top",
              width: "",
              height: ""
            },
            key: Math.random().toString(36).slice(-8)
          });
        }
      }
    },
    insertRow(insertIndex) {
      const rowArray = [];
      for (let i2 = 0; i2 < this.element.rows[0].columns.length; i2++) {
        const prevIndex = this.findPrevRowIndex(insertIndex, i2);
        if (prevIndex != insertIndex && this.element.rows[insertIndex].columns[i2].options.invisible) {
          rowArray.push({
            type: "td",
            list: [],
            options: {
              customClass: "",
              colspan: 1,
              rowspan: 1,
              align: "left",
              valign: "top",
              width: "",
              height: "",
              invisible: true
            },
            key: Math.random().toString(36).slice(-8)
          });
          this.element.rows[prevIndex].columns[i2].options.rowspan = this.element.rows[prevIndex].columns[i2].options.rowspan + 1;
        } else {
          rowArray.push({
            type: "td",
            list: [],
            options: {
              customClass: "",
              colspan: 1,
              rowspan: 1,
              align: "left",
              valign: "top",
              width: "",
              height: ""
            },
            key: Math.random().toString(36).slice(-8)
          });
        }
      }
      this.element.rows.splice(insertIndex, 0, {
        columns: rowArray
      });
      this.$nextTick(() => {
        for (let i2 = 0; i2 < this.element.rows[insertIndex].columns.length; i2++) {
          if (this.element.rows[insertIndex].columns[i2].options.invisible) {
            const prevIndex = this.findPrevRowIndex(insertIndex - 1, i2);
            if (!this.element.rows[prevIndex].columns[i2].options.invisible) {
              this.markTableItem(prevIndex, i2);
            }
          }
        }
      });
    },
    handleInsertLeft() {
      const insertIndex = this.selectC;
      this.insertColumns(insertIndex);
      this.selectC = this.selectC++;
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleInsertRight() {
      const insertColIndex = this.element.rows[this.selectR].columns[this.selectC].options.colspan > 1 ? this.findNextColIndex(this.selectR, this.selectC + 1) : this.selectC + 1;
      this.insertColumns(insertColIndex);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleInserBefore() {
      const insertIndex = this.selectR;
      this.insertRow(insertIndex);
      this.selectR = this.selectR++;
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleInserAfter() {
      const insertRowIndex = this.element.rows[this.selectR].columns[this.selectC].options.rowspan > 1 ? this.findNextRowIndex(this.selectR + 1, this.selectC) : this.selectR + 1;
      this.insertRow(insertRowIndex);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    markTableItem(R, C) {
      const colspan = this.element.rows[R].columns[C].options.colspan;
      const rowspan = this.element.rows[R].columns[C].options.rowspan;
      for (let i2 = 0; i2 < rowspan; i2++) {
        for (let j = 0; j < colspan; j++) {
          this.element.rows[R + i2].columns[C + j].options.markCol = j;
          this.element.rows[R + i2].columns[C + j].options.markRow = i2;
        }
      }
    },
    handleRight(column) {
      if (!this.showRight)
        return;
      const currentColspan = column.options.colspan;
      const nextC = this.selectC + currentColspan;
      const nextColspan = this.element.rows[this.selectR].columns[nextC].options.colspan;
      column.options.colspan = currentColspan + nextColspan;
      this.element.rows[this.selectR].columns[nextC].options.invisible = true;
      const tempList = [...this.element.rows[this.selectR].columns[nextC].list];
      this.element.rows[this.selectR].columns[nextC].list = [];
      column.list = column.list.concat(tempList);
      this.markTableItem(this.selectR, this.selectC);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleBottom(column) {
      if (!this.showBottom)
        return;
      const currentRowspan = column.options.rowspan;
      const nextR = this.selectR + currentRowspan;
      const nextRowspan = this.element.rows[nextR].columns[this.selectC].options.rowspan;
      column.options.rowspan = currentRowspan + nextRowspan;
      this.element.rows[nextR].columns[this.selectC].options.invisible = true;
      const tempList = [...this.element.rows[nextR].columns[this.selectC].list];
      this.element.rows[nextR].columns[this.selectC].list = [];
      column.list = column.list.concat(tempList);
      this.markTableItem(this.selectR, this.selectC);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSplitColumn() {
      if (!this.showSplitColumn)
        return;
      const currentColspan = this.element.rows[this.selectR].columns[this.selectC].options.colspan;
      const currentRowspan = this.element.rows[this.selectR].columns[this.selectC].options.rowspan;
      for (let i2 = 0; i2 < currentColspan; i2++) {
        this.element.rows[this.selectR].columns[this.selectC + i2].options.invisible = false;
        this.element.rows[this.selectR].columns[this.selectC + i2].options.colspan = 1;
        this.element.rows[this.selectR].columns[this.selectC + i2].options.rowspan = currentRowspan;
        this.markTableItem(this.selectR, this.selectC + i2);
      }
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSplitRow() {
      if (!this.showSplitRow)
        return;
      const currentColspan = this.element.rows[this.selectR].columns[this.selectC].options.colspan;
      const currentRowspan = this.element.rows[this.selectR].columns[this.selectC].options.rowspan;
      for (let i2 = 0; i2 < currentRowspan; i2++) {
        this.element.rows[this.selectR + i2].columns[this.selectC].options.invisible = false;
        this.element.rows[this.selectR + i2].columns[this.selectC].options.rowspan = 1;
        this.element.rows[this.selectR + i2].columns[this.selectC].options.colspan = currentColspan;
        this.markTableItem(this.selectR, this.selectC + i2);
      }
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    findPrevRowIndex(rowIndex, colIndex) {
      if (rowIndex >= this.element.rows.length || !this.element.rows[rowIndex].columns[colIndex].options.markRow) {
        return rowIndex;
      } else {
        return this.findPrevRowIndex(rowIndex - 1, colIndex);
      }
    },
    findPrevColIndex(rowIndex, colIndex) {
      if (colIndex >= this.element.rows[rowIndex].columns.length || !this.element.rows[rowIndex].columns[colIndex].options.markCol) {
        return colIndex;
      } else {
        return this.findPrevColIndex(rowIndex, colIndex - 1);
      }
    },
    findNextColIndex(rowIndex, colIndex) {
      if (colIndex >= this.element.rows[rowIndex].columns.length || !this.element.rows[rowIndex].columns[colIndex].options.markCol) {
        return colIndex;
      } else {
        return this.findNextColIndex(rowIndex, colIndex + 1);
      }
    },
    findNextRowIndex(rowIndex, colIndex) {
      if (rowIndex >= this.element.rows.length || !this.element.rows[rowIndex].columns[colIndex].options.markRow) {
        return rowIndex;
      } else {
        return this.findNextRowIndex(rowIndex + 1, colIndex);
      }
    },
    handleRemoveRow() {
      if (!this.showRemoveRow)
        return;
      for (let j = 0; j < this.element.rows[this.selectR].columns.length; j++) {
        const currentRowspan = this.element.rows[this.selectR].columns[j].options.rowspan;
        const currentcolspan = this.element.rows[this.selectR].columns[j].options.colspan;
        const invisible = this.element.rows[this.selectR].columns[j].options.invisible;
        if (invisible) {
          const prevIndex = this.findPrevRowIndex(this.selectR, j);
          if (prevIndex != this.selectR && this.element.rows[prevIndex].columns[j].options.rowspan > 1) {
            this.element.rows[prevIndex].columns[j].options.rowspan = this.element.rows[prevIndex].columns[j].options.rowspan - 1;
          }
        } else if (currentRowspan > 1) {
          this.element.rows[this.selectR + 1].columns[j].list = [...this.element.rows[this.selectR].columns[j].list];
          this.element.rows[this.selectR + 1].columns[j].options.invisible = false;
          this.element.rows[this.selectR + 1].columns[j].options.rowspan = currentRowspan - 1;
          this.element.rows[this.selectR + 1].columns[j].options.colspan = currentcolspan;
          this.markTableItem(this.selectR + 1, j);
        } else
          ;
      }
      this.element.rows.splice(this.selectR, 1);
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleRemoveColumn() {
      if (!this.showRemoveColumn)
        return;
      for (let i2 = 0; i2 < this.element.rows.length; i2++) {
        const currentColspan = this.element.rows[i2].columns[this.selectC].options.colspan;
        const currentRowspan = this.element.rows[i2].columns[this.selectC].options.rowspan;
        const invisible = this.element.rows[i2].columns[this.selectC].options.invisible;
        if (invisible) {
          const prevIndex = this.findPrevColIndex(i2, this.selectC);
          if (prevIndex != this.selectC && this.element.rows[i2].columns[prevIndex].options.colspan > 1) {
            this.element.rows[i2].columns[prevIndex].options.colspan = this.element.rows[i2].columns[prevIndex].options.colspan - 1;
          }
        } else if (currentColspan > 1) {
          this.element.rows[i2].columns[this.selectC + 1].list = [...this.element.rows[i2].columns[this.selectC].list];
          this.element.rows[i2].columns[this.selectC + 1].options.invisible = false;
          this.element.rows[i2].columns[this.selectC + 1].options.colspan = currentColspan - 1;
          this.element.rows[i2].columns[this.selectC + 1].options.rowspan = currentRowspan;
          this.markTableItem(i2, this.selectC + 1);
        } else
          ;
        this.element.rows[i2].columns.splice(this.selectC, 1);
      }
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleSelectChange(index2, item2) {
      setTimeout(() => {
        index2 >= 0 ? this.$emit("update:select", item2.list[index2]) : this.$emit("update:select", this.data.list[this.index]);
      });
    }
  },
  watch: {
    select(val) {
      this.selectWidget = val;
    },
    selectWidget(val) {
      this.$emit("update:select", val);
    }
  }
};
const _hoisted_1$7 = ["colspan", "rowspan", "onClick"];
const _hoisted_2$4 = {
  key: 0,
  class: "widget-view-action widget-col-action"
};
const _hoisted_3$4 = { class: "el-dropdown-link" };
const _hoisted_4$4 = ["title"];
const _hoisted_5$4 = {
  key: 0,
  class: "widget-view-action widget-col-action"
};
const _hoisted_6$3 = ["title"];
const _hoisted_7$3 = ["title"];
const _hoisted_8$2 = ["title"];
const _hoisted_9$2 = ["title"];
const _hoisted_10$1 = {
  key: 1,
  class: "widget-view-drag widget-col-drag"
};
const _hoisted_11$1 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-drag drag-widget" }, null, -1);
const _hoisted_12$1 = [
  _hoisted_11$1
];
function _sfc_render$b(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_widget_tab_item = resolveComponent("widget-tab-item");
  const _component_widget_table = resolveComponent("widget-table");
  const _component_widget_inline = resolveComponent("widget-inline");
  const _component_widget_report = resolveComponent("widget-report", true);
  const _component_widget_form_item = resolveComponent("widget-form-item");
  const _component_widget_col_item = resolveComponent("widget-col-item");
  const _component_draggable = resolveComponent("draggable");
  const _component_el_dropdown_item = resolveComponent("el-dropdown-item");
  const _component_el_dropdown_menu = resolveComponent("el-dropdown-menu");
  const _component_el_dropdown = resolveComponent("el-dropdown");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["widget-report widget-view fm-report-table", {
      active: $props.select.key && $props.select.key == $props.element.key,
      "is_hidden": $props.element.options.hidden
    }]),
    onClick: _cache[10] || (_cache[10] = withModifiers(($event) => $options.handleSelectWidget($props.index), ["stop"]))
  }, [
    createElementVNode("div", null, [
      createElementVNode("table", {
        class: normalizeClass(["fm-report-table__table", {
          [$props.element.options && $props.element.options.customClass]: $props.element.options.customClass ? true : false
        }]),
        style: normalizeStyle({
          "border-top-width": $props.element.options.borderWidth + "px",
          "border-top-color": $props.element.options.borderColor,
          "border-left-width": $props.element.options.borderWidth + "px",
          "border-left-color": $props.element.options.borderColor,
          "width": $props.element.options.width || "100%"
        })
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.rows, (row, rowIndex) => {
          return openBlock(), createElementBlock("tr", { key: rowIndex }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(row.columns, (column, i2) => {
              return openBlock(), createElementBlock(Fragment, {
                key: rowIndex + "-" + i2
              }, [
                !column.options.invisible ? (openBlock(), createElementBlock("td", {
                  key: 0,
                  style: normalizeStyle({
                    "border-right-width": $props.element.options.borderWidth + "px",
                    "border-right-color": $props.element.options.borderColor,
                    "border-bottom-width": $props.element.options.borderWidth + "px",
                    "border-bottom-color": $props.element.options.borderColor,
                    "width": column.options.width,
                    "height": column.options.height
                  }),
                  colspan: column.options.colspan,
                  rowspan: column.options.rowspan,
                  class: normalizeClass(["widget-report-item fm-report-table__td", {
                    active: $props.select.key && $props.select.key == column.key,
                    [column.options.customClass]: column.options.customClass ? true : false
                  }]),
                  onClick: withModifiers(($event) => $options.handleSelectItemWidget(rowIndex, i2), ["stop"]),
                  valign: "top"
                }, [
                  createVNode(_component_draggable, mergeProps({
                    modelValue: column.list,
                    "onUpdate:modelValue": ($event) => column.list = $event
                  }, { group: "people", ghostClass: "ghost", animation: 200, handle: ".drag-widget" }, {
                    "no-transition-on-drag": true,
                    onAdd: ($event) => $options.handleWidgetItemAdd($event, $props.element, rowIndex, i2),
                    onUpdate: $options.handleWidgetItemUpdate,
                    class: "widget-col-list",
                    "item-key": "key"
                  }), {
                    item: withCtx(({ element: c, index: cindex }) => [
                      c.type === "tabs" ? (openBlock(), createBlock(_component_widget_tab_item, {
                        key: c.key,
                        element: c,
                        select: $data.selectWidget,
                        "onUpdate:select": _cache[0] || (_cache[0] = ($event) => $data.selectWidget = $event),
                        index: cindex,
                        data: column,
                        onSelectChange: ($event) => $options.handleSelectChange($event, column),
                        platform: $props.platform,
                        "form-key": $props.formKey
                      }, null, 8, ["element", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : c.type === "table" ? (openBlock(), createBlock(_component_widget_table, {
                        key: c.key,
                        element: c,
                        select: $data.selectWidget,
                        "onUpdate:select": _cache[1] || (_cache[1] = ($event) => $data.selectWidget = $event),
                        index: cindex,
                        data: column,
                        onSelectChange: ($event) => $options.handleSelectChange($event, column),
                        platform: $props.platform,
                        "form-key": $props.formKey
                      }, null, 8, ["element", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : c.type === "inline" ? (openBlock(), createBlock(_component_widget_inline, {
                        key: c.key,
                        element: c,
                        select: $data.selectWidget,
                        "onUpdate:select": _cache[2] || (_cache[2] = ($event) => $data.selectWidget = $event),
                        index: cindex,
                        data: column,
                        onSelectChange: ($event) => $options.handleSelectChange($event, column),
                        platform: $props.platform,
                        "form-key": $props.formKey
                      }, null, 8, ["element", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : c.type === "report" ? (openBlock(), createBlock(_component_widget_report, {
                        key: c.key,
                        element: c,
                        select: $data.selectWidget,
                        "onUpdate:select": _cache[3] || (_cache[3] = ($event) => $data.selectWidget = $event),
                        index: cindex,
                        data: column,
                        onSelectChange: ($event) => $options.handleSelectChange($event, column),
                        platform: $props.platform,
                        "form-key": $props.formKey
                      }, null, 8, ["element", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : c.type !== "grid" ? (openBlock(), createBlock(_component_widget_form_item, {
                        key: c.key,
                        element: c,
                        select: $data.selectWidget,
                        "onUpdate:select": _cache[4] || (_cache[4] = ($event) => $data.selectWidget = $event),
                        index: cindex,
                        data: column,
                        onSelectChange: ($event) => $options.handleSelectChange($event, column),
                        "form-key": $props.formKey
                      }, null, 8, ["element", "select", "index", "data", "onSelectChange", "form-key"])) : (openBlock(), createBlock(_component_widget_col_item, {
                        key: c.key,
                        element: c,
                        select: $data.selectWidget,
                        "onUpdate:select": _cache[5] || (_cache[5] = ($event) => $data.selectWidget = $event),
                        index: cindex,
                        data: column,
                        onSelectChange: ($event) => $options.handleSelectChange($event, column),
                        platform: $props.platform,
                        "form-key": $props.formKey
                      }, null, 8, ["element", "select", "index", "data", "onSelectChange", "platform", "form-key"]))
                    ]),
                    _: 2
                  }, 1040, ["modelValue", "onUpdate:modelValue", "onAdd", "onUpdate"]),
                  $props.select.key == column.key ? (openBlock(), createElementBlock("div", _hoisted_2$4, [
                    createVNode(_component_el_dropdown, {
                      size: "default",
                      trigger: "click"
                    }, {
                      dropdown: withCtx(() => [
                        createVNode(_component_el_dropdown_menu, null, {
                          default: withCtx(() => [
                            createVNode(_component_el_dropdown_item, {
                              command: "insertleft",
                              onClick: withModifiers($options.handleInsertLeft, ["stop"])
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.insertcolumnleft")), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "insertright",
                              onClick: withModifiers($options.handleInsertRight, ["stop"])
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.insertcolumnright")), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "insertbefore",
                              onClick: withModifiers($options.handleInserBefore, ["stop"])
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.insertrowbefore")), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "insertafter",
                              onClick: withModifiers($options.handleInserAfter, ["stop"])
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.insertrowafter")), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "right",
                              onClick: withModifiers(($event) => $options.handleRight(column), ["stop"]),
                              disabled: !$options.showRight,
                              divided: ""
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.mergeright")), 1)
                              ]),
                              _: 2
                            }, 1032, ["onClick", "disabled"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "bottom",
                              onClick: withModifiers(($event) => $options.handleBottom(column), ["stop"]),
                              disabled: !$options.showBottom
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.mergedown")), 1)
                              ]),
                              _: 2
                            }, 1032, ["onClick", "disabled"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "splitcolumns",
                              onClick: withModifiers($options.handleSplitColumn, ["stop"]),
                              divided: "",
                              disabled: !$options.showSplitColumn
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.splitcolumns")), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick", "disabled"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "splitrows",
                              onClick: withModifiers($options.handleSplitRow, ["stop"]),
                              disabled: !$options.showSplitRow
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.splitrows")), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick", "disabled"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "removecolumn",
                              onClick: withModifiers($options.handleRemoveColumn, ["stop"]),
                              disabled: !$options.showRemoveColumn,
                              divided: ""
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.deletecolumn")), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick", "disabled"]),
                            createVNode(_component_el_dropdown_item, {
                              command: "removerow",
                              onClick: withModifiers($options.handleRemoveRow, ["stop"]),
                              disabled: !$options.showRemoveRow
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString$1(_ctx.$t("fm.tooltip.deleterow")), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick", "disabled"])
                          ]),
                          _: 2
                        }, 1024)
                      ]),
                      default: withCtx(() => [
                        createElementVNode("span", _hoisted_3$4, [
                          createElementVNode("i", {
                            class: "iconfont icon-biaogeshezhi",
                            title: _ctx.$t("fm.tooltip.cellsetting")
                          }, null, 8, _hoisted_4$4)
                        ])
                      ]),
                      _: 2
                    }, 1024)
                  ])) : createCommentVNode("", true)
                ], 14, _hoisted_1$7)) : createCommentVNode("", true)
              ], 64);
            }), 128))
          ]);
        }), 128))
      ], 6)
    ]),
    $props.select.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_5$4, [
      createElementVNode("i", {
        class: "iconfont icon--charuhang",
        onClick: _cache[6] || (_cache[6] = withModifiers(($event) => $options.handleAddRow($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.addrow")
      }, null, 8, _hoisted_6$3),
      createElementVNode("i", {
        class: "iconfont icon--charulie",
        onClick: _cache[7] || (_cache[7] = withModifiers(($event) => $options.handleAddColumns($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.addcolumn")
      }, null, 8, _hoisted_7$3),
      createElementVNode("i", {
        class: "iconfont icon-icon_clone",
        onClick: _cache[8] || (_cache[8] = withModifiers(($event) => $options.handleReportClone($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.clone")
      }, null, 8, _hoisted_8$2),
      createElementVNode("i", {
        class: "iconfont icon-trash",
        onClick: _cache[9] || (_cache[9] = withModifiers(($event) => $options.handleWidgetDelete($props.index), ["stop"])),
        title: _ctx.$t("fm.tooltip.trash")
      }, null, 8, _hoisted_9$2)
    ])) : createCommentVNode("", true),
    $props.select.key == $props.element.key ? (openBlock(), createElementBlock("div", _hoisted_10$1, _hoisted_12$1)) : createCommentVNode("", true),
    createElementVNode("div", {
      class: "widget-view-model",
      style: normalizeStyle({ "color": $props.element.options.dataBind ? "" : "#666" })
    }, [
      createElementVNode("span", null, toDisplayString$1($props.element.model), 1)
    ], 4)
  ], 2);
}
var WidgetReport = /* @__PURE__ */ _export_sfc(_sfc_main$d, [["render", _sfc_render$b]]);
var WidgetReport$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": WidgetReport
}, Symbol.toStringTag, { value: "Module" }));
var WidgetForm_vue_vue_type_style_index_0_lang = "";
const _sfc_main$c = {
  components: {
    Draggable: draggableComponent,
    WidgetFormItem,
    WidgetColItem,
    WidgetTable,
    WidgetTabItem,
    WidgetReport,
    WidgetInline
  },
  props: {
    select: {
      type: Object,
      default: () => {
      }
    },
    ds: {
      type: Object,
      default: () => {
      }
    },
    tableName: {
      type: String,
      default: ""
    },
    platform: {
      type: String,
      default: ""
    },
    formKey: {
      type: String,
      default: ""
    },
    data: {
      type: Object,
      default: () => {
      }
    },
    bindDataTable: {
      type: Boolean,
      default: false
    }
  },
  emits: ["update:select"],
  inject: ["changeConfigTab"],
  data() {
    return {
      selectWidget: this.select || {}
    };
  },
  mounted() {
    document.body.ondrop = function(event) {
      let isFirefox = navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
      if (isFirefox) {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    EventBus.$on("on-field-add-" + this.formKey, (item2) => {
      var _a2, _b, _c, _d, _e;
      const key = Math.random().toString(36).slice(-8);
      let widgetItem = {};
      if (this.bindDataTable) {
        widgetItem = _.cloneDeep(__spreadProps(__spreadValues({}, item2), {
          options: __spreadProps(__spreadValues({}, item2.options), {
            remoteFunc: "func_" + key,
            remoteOption: "option_" + key
          }),
          key,
          model: "",
          dsId: (_b = (_a2 = this == null ? void 0 : this.ds) == null ? void 0 : _a2.id) != null ? _b : "master",
          enName: (_d = (_c = this == null ? void 0 : this.ds) == null ? void 0 : _c.enName) != null ? _d : "master",
          tableName: (_e = this == null ? void 0 : this.tableName) != null ? _e : "",
          rules: []
        }));
      } else {
        widgetItem = _.cloneDeep(__spreadProps(__spreadValues({}, item2), {
          options: __spreadProps(__spreadValues({}, item2.options), {
            remoteFunc: "func_" + key,
            remoteOption: "option_" + key
          }),
          key,
          model: item2.type + "_" + key,
          rules: []
        }));
      }
      if (widgetItem.type == "report") {
        widgetItem.rows = generateKeyToTD(widgetItem.rows);
      }
      if (widgetItem.type == "grid") {
        widgetItem.columns = generateKeyToCol(widgetItem.columns);
      }
      this._addWidget(this.data.list, widgetItem);
    });
  },
  beforeUnmount() {
    EventBus.$off("on-field-add-" + this.formKey);
  },
  methods: {
    _addWidget(list, widget, isTable = false) {
      if (isTable && (widget.type == "grid" || widget.type == "table" || widget.type == "tabs" || widget.type == "divider" || widget.type == "report" || widget.type == "inline")) {
        this.$message.warning(this.$t("fm.message.noPut"));
        return "table";
      }
      if (this.selectWidget && this.selectWidget.key) {
        const index2 = list.findIndex((item2) => item2.key == this.selectWidget.key);
        if (index2 >= 0) {
          list.splice(index2 + 1, 0, widget);
          this.selectWidget = list[index2 + 1];
          this.$nextTick(() => {
            EventBus.$emit("on-history-add-" + this.formKey);
          });
        } else {
          for (let l = 0; l < list.length; l++) {
            let item2 = list[l];
            if (item2.type === "grid") {
              item2.columns.forEach((column) => {
                this._addWidget(column.list, widget);
              });
            }
            if (item2.type === "table") {
              if (this._addWidget(item2.tableColumns, widget, true) == "table") {
                return "table";
              }
            }
            if (item2.type === "tabs") {
              item2.tabs.forEach((tab) => {
                this._addWidget(tab.list, widget);
              });
            }
            if (item2.type === "report") {
              for (let i2 = 0; i2 < item2.rows.length; i2++) {
                for (let j = 0; j < item2.rows[i2].columns.length; j++) {
                  widget.options.hideLabel = true;
                  if (this._addWidget(item2.rows[i2].columns[j].list, widget, false) == "table") {
                    return "table";
                  }
                }
              }
            }
            if (item2.type === "inline") {
              if (this._addWidget(item2.list, widget, true) == "table") {
                return "table";
              }
            }
          }
        }
      } else {
        list.push(widget);
        this.selectWidget = list[list.length - 1];
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      }
    },
    handleWidgetUpdate(evt) {
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleWidgetAdd(evt) {
      const newIndex2 = evt.newIndex;
      evt.to;
      this.data.list[newIndex2] = _.cloneDeep(this.data.list[newIndex2]);
      const key = Math.random().toString(36).slice(-8);
      if (this.bindDataTable) {
        this.data.list[newIndex2] = __spreadProps(__spreadValues({}, this.data.list[newIndex2]), {
          options: __spreadProps(__spreadValues({}, this.data.list[newIndex2].options), {
            remoteFunc: this.data.list[newIndex2].options.remoteFunc || "func_" + key,
            remoteOption: this.data.list[newIndex2].options.remoteOption || "option_" + key,
            tableColumn: false
          }),
          key: this.data.list[newIndex2].key ? this.data.list[newIndex2].key : key,
          model: "",
          dsId: this.ds.id,
          enName: this.ds.enName,
          tableName: this.tableName,
          rules: this.data.list[newIndex2].rules ? [...this.data.list[newIndex2].rules] : []
        });
      } else {
        this.data.list[newIndex2] = __spreadProps(__spreadValues({}, this.data.list[newIndex2]), {
          options: __spreadProps(__spreadValues({}, this.data.list[newIndex2].options), {
            remoteFunc: this.data.list[newIndex2].options.remoteFunc || "func_" + key,
            remoteOption: this.data.list[newIndex2].options.remoteOption || "option_" + key,
            tableColumn: false
          }),
          key: this.data.list[newIndex2].key ? this.data.list[newIndex2].key : key,
          model: this.data.list[newIndex2].model ? this.data.list[newIndex2].model : this.data.list[newIndex2].type + "_" + key,
          rules: this.data.list[newIndex2].rules ? [...this.data.list[newIndex2].rules] : []
        });
      }
      if (this.data.list[newIndex2].type == "report") {
        this.data.list[newIndex2].rows = generateKeyToTD(this.data.list[newIndex2].rows);
      }
      if (this.data.list[newIndex2].type == "grid") {
        this.data.list[newIndex2].columns = generateKeyToCol(this.data.list[newIndex2].columns);
      }
      this.selectWidget = this.data.list[newIndex2];
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleWidgetDelete(index2) {
      if (this.data.list.length - 1 === index2) {
        if (index2 === 0) {
          this.selectWidget = {};
        } else {
          this.selectWidget = this.data.list[index2 - 1];
        }
      } else {
        this.selectWidget = this.data.list[index2 + 1];
      }
      this.$nextTick(() => {
        this.data.list.splice(index2, 1);
        this.$nextTick(() => {
          EventBus.$emit("on-history-add-" + this.formKey);
        });
      });
    },
    handleSelectChange(index2) {
      setTimeout(() => {
        index2 >= 0 ? this.selectWidget = this.data.list[index2] : this.selectWidget = {};
      });
    }
  },
  watch: {
    select(val) {
      this.selectWidget = val;
      this.changeConfigTab("widget");
    },
    selectWidget: {
      handler(val) {
        this.$emit("update:select", val);
      },
      deep: true
    }
  }
};
const _hoisted_1$6 = {
  key: 0,
  class: "form-empty"
};
function _sfc_render$a(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_widget_table = resolveComponent("widget-table");
  const _component_widget_tab_item = resolveComponent("widget-tab-item");
  const _component_widget_report = resolveComponent("widget-report");
  const _component_widget_inline = resolveComponent("widget-inline");
  const _component_widget_form_item = resolveComponent("widget-form-item");
  const _component_widget_col_item = resolveComponent("widget-col-item");
  const _component_draggable = resolveComponent("draggable");
  const _component_el_form = resolveComponent("el-form");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["widget-form-container", `${$props.platform}`])
  }, [
    createVNode(_component_el_form, {
      size: $props.data.config.size,
      "label-position": $props.data.config.labelPosition,
      "label-width": $props.data.config.labelWidth + "px",
      class: normalizeClass({
        [$props.data.config && $props.data.config.customClass]: $props.data.config && $props.data.config.customClass ? true : false
      }),
      style: normalizeStyle({ width: $props.data.config.width, margin: "auto" })
    }, {
      default: withCtx(() => [
        $props.data.list.length == 0 ? (openBlock(), createElementBlock("div", _hoisted_1$6, toDisplayString$1(_ctx.$t("fm.description.containerEmpty")), 1)) : createCommentVNode("", true),
        createElementVNode("div", null, [
          createVNode(_component_draggable, mergeProps({
            list: $props.data.list
          }, { group: "people", ghostClass: "ghost", animation: 200, handle: ".drag-widget" }, {
            onAdd: $options.handleWidgetAdd,
            onUpdate: $options.handleWidgetUpdate,
            "no-transition-on-drag": true,
            "item-key": "key",
            class: "widget-form-list"
          }), {
            item: withCtx(({ element, index: index2 }) => [
              element.type === "table" ? (openBlock(), createBlock(_component_widget_table, {
                key: element.key,
                element,
                bindDataTable: $props.bindDataTable,
                ds: $props.ds,
                tableName: $props.tableName,
                select: $data.selectWidget,
                "onUpdate:select": _cache[0] || (_cache[0] = ($event) => $data.selectWidget = $event),
                index: index2,
                data: $props.data,
                onSelectChange: $options.handleSelectChange,
                platform: $props.platform,
                "form-key": $props.formKey
              }, null, 8, ["element", "bindDataTable", "ds", "tableName", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : element.type === "tabs" ? (openBlock(), createBlock(_component_widget_tab_item, {
                key: element.key,
                element,
                bindDataTable: $props.bindDataTable,
                ds: $props.ds,
                tableName: $props.tableName,
                select: $data.selectWidget,
                "onUpdate:select": _cache[1] || (_cache[1] = ($event) => $data.selectWidget = $event),
                index: index2,
                data: $props.data,
                onSelectChange: $options.handleSelectChange,
                platform: $props.platform,
                "form-key": $props.formKey
              }, null, 8, ["element", "bindDataTable", "ds", "tableName", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : element.type === "report" ? (openBlock(), createBlock(_component_widget_report, {
                key: element.key,
                bindDataTable: $props.bindDataTable,
                ds: $props.ds,
                tableName: $props.tableName,
                element,
                select: $data.selectWidget,
                "onUpdate:select": _cache[2] || (_cache[2] = ($event) => $data.selectWidget = $event),
                index: index2,
                data: $props.data,
                onSelectChange: $options.handleSelectChange,
                platform: $props.platform,
                "form-key": $props.formKey
              }, null, 8, ["bindDataTable", "ds", "tableName", "element", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : element.type === "inline" ? (openBlock(), createBlock(_component_widget_inline, {
                key: element.key,
                bindDataTable: $props.bindDataTable,
                ds: $props.ds,
                tableName: $props.tableName,
                element,
                select: $data.selectWidget,
                "onUpdate:select": _cache[3] || (_cache[3] = ($event) => $data.selectWidget = $event),
                index: index2,
                data: $props.data,
                onSelectChange: $options.handleSelectChange,
                platform: $props.platform,
                "form-key": $props.formKey
              }, null, 8, ["bindDataTable", "ds", "tableName", "element", "select", "index", "data", "onSelectChange", "platform", "form-key"])) : element.type !== "grid" ? (openBlock(), createBlock(_component_widget_form_item, {
                key: element.key,
                bindDataTable: $props.bindDataTable,
                ds: $props.ds,
                tableName: $props.tableName,
                element,
                select: $data.selectWidget,
                "onUpdate:select": _cache[4] || (_cache[4] = ($event) => $data.selectWidget = $event),
                index: index2,
                data: $props.data,
                onSelectChange: $options.handleSelectChange,
                "form-key": $props.formKey
              }, null, 8, ["bindDataTable", "ds", "tableName", "element", "select", "index", "data", "onSelectChange", "form-key"])) : (openBlock(), createBlock(_component_widget_col_item, {
                key: element.key,
                bindDataTable: $props.bindDataTable,
                ds: $props.ds,
                tableName: $props.tableName,
                element,
                select: $data.selectWidget,
                "onUpdate:select": _cache[5] || (_cache[5] = ($event) => $data.selectWidget = $event),
                index: index2,
                data: $props.data,
                onSelectChange: $options.handleSelectChange,
                platform: $props.platform,
                "form-key": $props.formKey
              }, null, 8, ["bindDataTable", "ds", "tableName", "element", "select", "index", "data", "onSelectChange", "platform", "form-key"]))
            ]),
            _: 1
          }, 16, ["list", "onAdd", "onUpdate"])
        ])
      ]),
      _: 1
    }, 8, ["size", "label-position", "label-width", "class", "style"])
  ], 2);
}
var WidgetForm = /* @__PURE__ */ _export_sfc(_sfc_main$c, [["render", _sfc_render$a]]);
var clipboard = { exports: {} };
/*!
 * clipboard.js v2.0.11
 * https://clipboardjs.com/
 *
 * Licensed MIT © Zeno Rocha
 */
(function(module2, exports) {
  (function webpackUniversalModuleDefinition(root, factory) {
    module2.exports = factory();
  })(commonjsGlobal, function() {
    return function() {
      var __webpack_modules__ = {
        686: function(__unused_webpack_module, __webpack_exports__, __webpack_require__2) {
          __webpack_require__2.d(__webpack_exports__, {
            "default": function() {
              return clipboard2;
            }
          });
          var tiny_emitter = __webpack_require__2(279);
          var tiny_emitter_default = /* @__PURE__ */ __webpack_require__2.n(tiny_emitter);
          var listen = __webpack_require__2(370);
          var listen_default = /* @__PURE__ */ __webpack_require__2.n(listen);
          var src_select = __webpack_require__2(817);
          var select_default = /* @__PURE__ */ __webpack_require__2.n(src_select);
          function command(type) {
            try {
              return document.execCommand(type);
            } catch (err) {
              return false;
            }
          }
          var ClipboardActionCut = function ClipboardActionCut2(target) {
            var selectedText = select_default()(target);
            command("cut");
            return selectedText;
          };
          var actions_cut = ClipboardActionCut;
          function createFakeElement(value) {
            var isRTL = document.documentElement.getAttribute("dir") === "rtl";
            var fakeElement = document.createElement("textarea");
            fakeElement.style.fontSize = "12pt";
            fakeElement.style.border = "0";
            fakeElement.style.padding = "0";
            fakeElement.style.margin = "0";
            fakeElement.style.position = "absolute";
            fakeElement.style[isRTL ? "right" : "left"] = "-9999px";
            var yPosition = window.pageYOffset || document.documentElement.scrollTop;
            fakeElement.style.top = "".concat(yPosition, "px");
            fakeElement.setAttribute("readonly", "");
            fakeElement.value = value;
            return fakeElement;
          }
          var fakeCopyAction = function fakeCopyAction2(value, options) {
            var fakeElement = createFakeElement(value);
            options.container.appendChild(fakeElement);
            var selectedText = select_default()(fakeElement);
            command("copy");
            fakeElement.remove();
            return selectedText;
          };
          var ClipboardActionCopy = function ClipboardActionCopy2(target) {
            var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
              container: document.body
            };
            var selectedText = "";
            if (typeof target === "string") {
              selectedText = fakeCopyAction(target, options);
            } else if (target instanceof HTMLInputElement && !["text", "search", "url", "tel", "password"].includes(target === null || target === void 0 ? void 0 : target.type)) {
              selectedText = fakeCopyAction(target.value, options);
            } else {
              selectedText = select_default()(target);
              command("copy");
            }
            return selectedText;
          };
          var actions_copy = ClipboardActionCopy;
          function _typeof2(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof2 = function _typeof3(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof2 = function _typeof3(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof2(obj);
          }
          var ClipboardActionDefault = function ClipboardActionDefault2() {
            var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
            var _options$action = options.action, action = _options$action === void 0 ? "copy" : _options$action, container = options.container, target = options.target, text = options.text;
            if (action !== "copy" && action !== "cut") {
              throw new Error('Invalid "action" value, use either "copy" or "cut"');
            }
            if (target !== void 0) {
              if (target && _typeof2(target) === "object" && target.nodeType === 1) {
                if (action === "copy" && target.hasAttribute("disabled")) {
                  throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                }
                if (action === "cut" && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) {
                  throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                }
              } else {
                throw new Error('Invalid "target" value, use a valid Element');
              }
            }
            if (text) {
              return actions_copy(text, {
                container
              });
            }
            if (target) {
              return action === "cut" ? actions_cut(target) : actions_copy(target, {
                container
              });
            }
          };
          var actions_default = ClipboardActionDefault;
          function clipboard_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              clipboard_typeof = function _typeof3(obj2) {
                return typeof obj2;
              };
            } else {
              clipboard_typeof = function _typeof3(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return clipboard_typeof(obj);
          }
          function _classCallCheck2(instance2, Constructor) {
            if (!(instance2 instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _defineProperties2(target, props2) {
            for (var i2 = 0; i2 < props2.length; i2++) {
              var descriptor = props2[i2];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          function _createClass2(Constructor, protoProps, staticProps) {
            if (protoProps)
              _defineProperties2(Constructor.prototype, protoProps);
            if (staticProps)
              _defineProperties2(Constructor, staticProps);
            return Constructor;
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function");
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
            if (superClass)
              _setPrototypeOf(subClass, superClass);
          }
          function _setPrototypeOf(o, p) {
            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
              o2.__proto__ = p2;
              return o2;
            };
            return _setPrototypeOf(o, p);
          }
          function _createSuper(Derived) {
            var hasNativeReflectConstruct = _isNativeReflectConstruct();
            return function _createSuperInternal() {
              var Super = _getPrototypeOf(Derived), result;
              if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
              } else {
                result = Super.apply(this, arguments);
              }
              return _possibleConstructorReturn(this, result);
            };
          }
          function _possibleConstructorReturn(self2, call) {
            if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
              return call;
            }
            return _assertThisInitialized(self2);
          }
          function _assertThisInitialized(self2) {
            if (self2 === void 0) {
              throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }
            return self2;
          }
          function _isNativeReflectConstruct() {
            if (typeof Reflect === "undefined" || !Reflect.construct)
              return false;
            if (Reflect.construct.sham)
              return false;
            if (typeof Proxy === "function")
              return true;
            try {
              Date.prototype.toString.call(Reflect.construct(Date, [], function() {
              }));
              return true;
            } catch (e) {
              return false;
            }
          }
          function _getPrototypeOf(o) {
            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
              return o2.__proto__ || Object.getPrototypeOf(o2);
            };
            return _getPrototypeOf(o);
          }
          function getAttributeValue(suffix, element) {
            var attribute = "data-clipboard-".concat(suffix);
            if (!element.hasAttribute(attribute)) {
              return;
            }
            return element.getAttribute(attribute);
          }
          var Clipboard = /* @__PURE__ */ function(_Emitter) {
            _inherits(Clipboard2, _Emitter);
            var _super = _createSuper(Clipboard2);
            function Clipboard2(trigger, options) {
              var _this;
              _classCallCheck2(this, Clipboard2);
              _this = _super.call(this);
              _this.resolveOptions(options);
              _this.listenClick(trigger);
              return _this;
            }
            _createClass2(Clipboard2, [{
              key: "resolveOptions",
              value: function resolveOptions() {
                var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                this.action = typeof options.action === "function" ? options.action : this.defaultAction;
                this.target = typeof options.target === "function" ? options.target : this.defaultTarget;
                this.text = typeof options.text === "function" ? options.text : this.defaultText;
                this.container = clipboard_typeof(options.container) === "object" ? options.container : document.body;
              }
            }, {
              key: "listenClick",
              value: function listenClick(trigger) {
                var _this2 = this;
                this.listener = listen_default()(trigger, "click", function(e) {
                  return _this2.onClick(e);
                });
              }
            }, {
              key: "onClick",
              value: function onClick(e) {
                var trigger = e.delegateTarget || e.currentTarget;
                var action = this.action(trigger) || "copy";
                var text = actions_default({
                  action,
                  container: this.container,
                  target: this.target(trigger),
                  text: this.text(trigger)
                });
                this.emit(text ? "success" : "error", {
                  action,
                  text,
                  trigger,
                  clearSelection: function clearSelection() {
                    if (trigger) {
                      trigger.focus();
                    }
                    window.getSelection().removeAllRanges();
                  }
                });
              }
            }, {
              key: "defaultAction",
              value: function defaultAction(trigger) {
                return getAttributeValue("action", trigger);
              }
            }, {
              key: "defaultTarget",
              value: function defaultTarget(trigger) {
                var selector = getAttributeValue("target", trigger);
                if (selector) {
                  return document.querySelector(selector);
                }
              }
            }, {
              key: "defaultText",
              value: function defaultText(trigger) {
                return getAttributeValue("text", trigger);
              }
            }, {
              key: "destroy",
              value: function destroy3() {
                this.listener.destroy();
              }
            }], [{
              key: "copy",
              value: function copy(target) {
                var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                  container: document.body
                };
                return actions_copy(target, options);
              }
            }, {
              key: "cut",
              value: function cut(target) {
                return actions_cut(target);
              }
            }, {
              key: "isSupported",
              value: function isSupported() {
                var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"];
                var actions = typeof action === "string" ? [action] : action;
                var support = !!document.queryCommandSupported;
                actions.forEach(function(action2) {
                  support = support && !!document.queryCommandSupported(action2);
                });
                return support;
              }
            }]);
            return Clipboard2;
          }(tiny_emitter_default());
          var clipboard2 = Clipboard;
        },
        828: function(module3) {
          var DOCUMENT_NODE_TYPE = 9;
          if (typeof Element !== "undefined" && !Element.prototype.matches) {
            var proto2 = Element.prototype;
            proto2.matches = proto2.matchesSelector || proto2.mozMatchesSelector || proto2.msMatchesSelector || proto2.oMatchesSelector || proto2.webkitMatchesSelector;
          }
          function closest2(element, selector) {
            while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
              if (typeof element.matches === "function" && element.matches(selector)) {
                return element;
              }
              element = element.parentNode;
            }
          }
          module3.exports = closest2;
        },
        438: function(module3, __unused_webpack_exports, __webpack_require__2) {
          var closest2 = __webpack_require__2(828);
          function _delegate(element, selector, type, callback, useCapture) {
            var listenerFn = listener.apply(this, arguments);
            element.addEventListener(type, listenerFn, useCapture);
            return {
              destroy: function() {
                element.removeEventListener(type, listenerFn, useCapture);
              }
            };
          }
          function delegate(elements, selector, type, callback, useCapture) {
            if (typeof elements.addEventListener === "function") {
              return _delegate.apply(null, arguments);
            }
            if (typeof type === "function") {
              return _delegate.bind(null, document).apply(null, arguments);
            }
            if (typeof elements === "string") {
              elements = document.querySelectorAll(elements);
            }
            return Array.prototype.map.call(elements, function(element) {
              return _delegate(element, selector, type, callback, useCapture);
            });
          }
          function listener(element, selector, type, callback) {
            return function(e) {
              e.delegateTarget = closest2(e.target, selector);
              if (e.delegateTarget) {
                callback.call(element, e);
              }
            };
          }
          module3.exports = delegate;
        },
        879: function(__unused_webpack_module, exports2) {
          exports2.node = function(value) {
            return value !== void 0 && value instanceof HTMLElement && value.nodeType === 1;
          };
          exports2.nodeList = function(value) {
            var type = Object.prototype.toString.call(value);
            return value !== void 0 && (type === "[object NodeList]" || type === "[object HTMLCollection]") && "length" in value && (value.length === 0 || exports2.node(value[0]));
          };
          exports2.string = function(value) {
            return typeof value === "string" || value instanceof String;
          };
          exports2.fn = function(value) {
            var type = Object.prototype.toString.call(value);
            return type === "[object Function]";
          };
        },
        370: function(module3, __unused_webpack_exports, __webpack_require__2) {
          var is2 = __webpack_require__2(879);
          var delegate = __webpack_require__2(438);
          function listen(target, type, callback) {
            if (!target && !type && !callback) {
              throw new Error("Missing required arguments");
            }
            if (!is2.string(type)) {
              throw new TypeError("Second argument must be a String");
            }
            if (!is2.fn(callback)) {
              throw new TypeError("Third argument must be a Function");
            }
            if (is2.node(target)) {
              return listenNode(target, type, callback);
            } else if (is2.nodeList(target)) {
              return listenNodeList(target, type, callback);
            } else if (is2.string(target)) {
              return listenSelector(target, type, callback);
            } else {
              throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
            }
          }
          function listenNode(node, type, callback) {
            node.addEventListener(type, callback);
            return {
              destroy: function() {
                node.removeEventListener(type, callback);
              }
            };
          }
          function listenNodeList(nodeList, type, callback) {
            Array.prototype.forEach.call(nodeList, function(node) {
              node.addEventListener(type, callback);
            });
            return {
              destroy: function() {
                Array.prototype.forEach.call(nodeList, function(node) {
                  node.removeEventListener(type, callback);
                });
              }
            };
          }
          function listenSelector(selector, type, callback) {
            return delegate(document.body, selector, type, callback);
          }
          module3.exports = listen;
        },
        817: function(module3) {
          function select(element) {
            var selectedText;
            if (element.nodeName === "SELECT") {
              element.focus();
              selectedText = element.value;
            } else if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {
              var isReadOnly2 = element.hasAttribute("readonly");
              if (!isReadOnly2) {
                element.setAttribute("readonly", "");
              }
              element.select();
              element.setSelectionRange(0, element.value.length);
              if (!isReadOnly2) {
                element.removeAttribute("readonly");
              }
              selectedText = element.value;
            } else {
              if (element.hasAttribute("contenteditable")) {
                element.focus();
              }
              var selection = window.getSelection();
              var range = document.createRange();
              range.selectNodeContents(element);
              selection.removeAllRanges();
              selection.addRange(range);
              selectedText = selection.toString();
            }
            return selectedText;
          }
          module3.exports = select;
        },
        279: function(module3) {
          function E2() {
          }
          E2.prototype = {
            on: function(name, callback, ctx) {
              var e = this.e || (this.e = {});
              (e[name] || (e[name] = [])).push({
                fn: callback,
                ctx
              });
              return this;
            },
            once: function(name, callback, ctx) {
              var self2 = this;
              function listener() {
                self2.off(name, listener);
                callback.apply(ctx, arguments);
              }
              listener._ = callback;
              return this.on(name, listener, ctx);
            },
            emit: function(name) {
              var data2 = [].slice.call(arguments, 1);
              var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
              var i2 = 0;
              var len = evtArr.length;
              for (i2; i2 < len; i2++) {
                evtArr[i2].fn.apply(evtArr[i2].ctx, data2);
              }
              return this;
            },
            off: function(name, callback) {
              var e = this.e || (this.e = {});
              var evts = e[name];
              var liveEvents = [];
              if (evts && callback) {
                for (var i2 = 0, len = evts.length; i2 < len; i2++) {
                  if (evts[i2].fn !== callback && evts[i2].fn._ !== callback)
                    liveEvents.push(evts[i2]);
                }
              }
              liveEvents.length ? e[name] = liveEvents : delete e[name];
              return this;
            }
          };
          module3.exports = E2;
          module3.exports.TinyEmitter = E2;
        }
      };
      var __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        if (__webpack_module_cache__[moduleId]) {
          return __webpack_module_cache__[moduleId].exports;
        }
        var module3 = __webpack_module_cache__[moduleId] = {
          exports: {}
        };
        __webpack_modules__[moduleId](module3, module3.exports, __webpack_require__);
        return module3.exports;
      }
      !function() {
        __webpack_require__.n = function(module3) {
          var getter = module3 && module3.__esModule ? function() {
            return module3["default"];
          } : function() {
            return module3;
          };
          __webpack_require__.d(getter, { a: getter });
          return getter;
        };
      }();
      !function() {
        __webpack_require__.d = function(exports2, definition) {
          for (var key in definition) {
            if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
              Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
            }
          }
        };
      }();
      !function() {
        __webpack_require__.o = function(obj, prop) {
          return Object.prototype.hasOwnProperty.call(obj, prop);
        };
      }();
      return __webpack_require__(686);
    }().default;
  });
})(clipboard);
var ClipboardJS = /* @__PURE__ */ getDefaultExportFromCjs(clipboard.exports);
const basicComponents = [
  {
    type: "input",
    icon: "icon-input",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      width: "",
      defaultValue: "",
      required: false,
      requiredMessage: "",
      dataType: "",
      dataTypeCheck: false,
      dataTypeMessage: "",
      pattern: "",
      patternCheck: false,
      patternMessage: "",
      validatorCheck: false,
      validator: "",
      placeholder: "",
      customClass: "",
      disabled: false,
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      showPassword: false,
      clearable: false,
      isShow: true,
      isSort: true,
      isSearch: true
    },
    events: {
      onChange: "",
      onFocus: "",
      onBlur: ""
    }
  },
  {
    type: "textarea",
    icon: "icon-diy-com-textarea",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      width: "",
      defaultValue: "",
      required: false,
      requiredMessage: "",
      disabled: false,
      pattern: "",
      patternMessage: "",
      validatorCheck: false,
      validator: "",
      placeholder: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      clearable: false,
      isShow: true,
      isSort: true,
      isSearch: false
    },
    events: {
      onChange: "",
      onFocus: "",
      onBlur: ""
    }
  },
  {
    type: "number",
    icon: "icon-number",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      width: "",
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      defaultValue: 0,
      min: 0,
      max: 9,
      step: 1,
      disabled: false,
      controls: true,
      controlsPosition: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      precision: 0,
      isShow: true,
      isSort: true,
      isSearch: false
    },
    events: {
      onChange: "",
      onFocus: "",
      onBlur: ""
    }
  },
  {
    type: "radio",
    icon: "icon-radio-active",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      inline: false,
      defaultValue: "",
      showLabel: false,
      options: [
        {
          value: "Option 1",
          label: "Option 1"
        },
        {
          value: "Option 2",
          label: "Option 2"
        },
        {
          value: "Option 3",
          label: "Option 3"
        }
      ],
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      width: "",
      remote: 1,
      remoteType: "datasource",
      remoteOption: "",
      remoteOptions: [],
      props: {
        value: "value",
        label: "label"
      },
      remoteFunc: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      disabled: false,
      isShow: true,
      isSort: true,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "checkbox",
    icon: "icon-check-box",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      inline: false,
      defaultValue: [],
      showLabel: false,
      options: [
        {
          value: "Option 1"
        },
        {
          value: "Option 2"
        },
        {
          value: "Option 3"
        }
      ],
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      width: "",
      remote: 1,
      remoteType: "datasource",
      remoteOption: "",
      remoteOptions: [],
      props: {
        value: "value",
        label: "label"
      },
      remoteFunc: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      disabled: false,
      isShow: true,
      isSort: true,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "select",
    icon: "icon-select",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: "",
      multiple: false,
      disabled: false,
      clearable: false,
      placeholder: "",
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      showLabel: false,
      width: "",
      options: [
        {
          value: "Option 1"
        },
        {
          value: "Option 2"
        },
        {
          value: "Option 3"
        }
      ],
      remote: 1,
      remoteType: "datasource",
      remoteOption: "",
      filterable: false,
      remoteOptions: [],
      props: {
        value: "value",
        label: "label"
      },
      remoteFunc: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: "",
      onFocus: "",
      onBlur: ""
    }
  },
  {
    type: "time",
    icon: "icon-time",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: "",
      readonly: false,
      disabled: false,
      editable: true,
      clearable: true,
      placeholder: "",
      startPlaceholder: "",
      endPlaceholder: "",
      isRange: false,
      arrowControl: false,
      format: "HH:mm:ss",
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      width: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: "",
      onFocus: "",
      onBlur: ""
    }
  },
  {
    type: "date",
    icon: "icon-date",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: "",
      readonly: false,
      disabled: false,
      editable: true,
      clearable: true,
      placeholder: "",
      startPlaceholder: "",
      endPlaceholder: "",
      type: "date",
      format: "YYYY-MM-DD",
      timestamp: false,
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      width: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: "",
      onFocus: "",
      onBlur: ""
    }
  },
  {
    type: "rate",
    icon: "icon-pingfen1",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: null,
      max: 5,
      disabled: false,
      allowHalf: false,
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      showScore: false,
      isShow: true,
      isSort: true,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "color",
    icon: "icon-color",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: "",
      disabled: false,
      showAlpha: false,
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "switch",
    icon: "icon-switch",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: false,
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      disabled: false,
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      width: "",
      isShow: true,
      isSort: true,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "slider",
    icon: "icon-slider",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: 0,
      disabled: false,
      required: false,
      requiredMessage: "",
      validatorCheck: false,
      validator: "",
      min: 0,
      max: 100,
      step: 1,
      showInput: false,
      range: false,
      width: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "text",
    icon: "icon-wenzishezhi-",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: "This is a text",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      required: false,
      isShow: true,
      isSort: true,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "html",
    icon: "icon-html",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: '<b style="color: red;">\n	This is a HTML5\n</b>',
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      required: false,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "button",
    icon: "icon-button",
    options: {
      customClass: "",
      disabled: false,
      labelWidth: 100,
      isLabelWidth: false,
      hideLabel: true,
      hidden: false,
      dataBind: false,
      buttonSize: "default",
      buttonType: "",
      buttonPlain: false,
      buttonRound: false,
      buttonCircle: false,
      buttonName: "Button",
      width: ""
    },
    events: {
      onClick: ""
    }
  },
  {
    type: "link",
    icon: "icon-lianjie",
    options: {
      customClass: "",
      disabled: false,
      labelWidth: 100,
      isLabelWidth: false,
      hideLabel: false,
      hidden: false,
      dataBind: false,
      linkType: "default",
      linkName: "Link",
      underline: true,
      blank: true,
      href: ""
    },
    events: {
      onClick: ""
    }
  },
  {
    type: "cascader",
    icon: "icon-jilianxuanze",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: [],
      width: "",
      placeholder: "",
      disabled: false,
      clearable: false,
      options: [
        {
          value: "Option 1",
          label: "Option 1",
          children: [
            { value: "Option 1 - children", label: "Option 1 - children" }
          ]
        },
        {
          value: "Option 2",
          label: "Option 2",
          children: [
            { value: "Option 2 - children", label: "Option 2 - children" }
          ]
        },
        {
          value: "Option 3",
          label: "Option 3"
        }
      ],
      remote: false,
      remoteType: "datasource",
      remoteOption: "",
      remoteOptions: [],
      props: {
        value: "value",
        label: "label",
        children: "children"
      },
      remoteFunc: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      required: false,
      validatorCheck: false,
      validator: "",
      multiple: false,
      filterable: false,
      checkStrictly: false,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: "",
      onFocus: "",
      onBlur: ""
    }
  },
  {
    type: "treeselect",
    icon: "icon-shuxuanzeqi",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: [],
      width: "",
      placeholder: "",
      disabled: false,
      clearable: false,
      options: [
        {
          value: "Option 1",
          label: "Option 1",
          children: [
            { value: "Option 1 - children", label: "Option 1 - children" }
          ]
        },
        {
          value: "Option 2",
          label: "Option 2",
          children: [
            { value: "Option 2 - children", label: "Option 2 - children" }
          ]
        },
        {
          value: "Option 3",
          label: "Option 3"
        }
      ],
      remote: false,
      remoteType: "datasource",
      remoteOption: "",
      remoteOptions: [],
      props: {
        value: "value",
        label: "label",
        children: "children"
      },
      remoteFunc: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      required: false,
      validatorCheck: false,
      validator: "",
      multiple: false,
      filterable: false,
      checkStrictly: false,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: "",
      onFocus: "",
      onBlur: ""
    }
  },
  {
    type: "steps",
    icon: "icon-m-buzhou",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: 0,
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hideLabel: true,
      hidden: false,
      dataBind: true,
      steps: [
        {
          title: "Step 1"
        },
        {
          title: "Step 2"
        },
        {
          title: "Step 3"
        }
      ],
      props: {
        title: "title",
        description: "description"
      },
      remote: false,
      width: "",
      direction: "horizontal",
      processStatus: "process",
      finishStatus: "finish",
      alignCenter: false,
      simple: false,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "transfer",
    icon: "icon-m-chuansuokuang",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: [],
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hideLabel: false,
      hidden: false,
      dataBind: true,
      data: [
        { key: "1", label: "Option 1" },
        { key: "2", label: "Option 2" },
        { key: "3", label: "Option 3" }
      ],
      props: {
        key: "key",
        label: "label",
        disabled: "disabled"
      },
      filterable: false,
      required: false,
      validatorCheck: false,
      validator: "",
      width: "",
      remote: false,
      titles: ["Source", "Target"],
      disabled: false,
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  }
];
const advanceComponents = [
  {
    type: "blank",
    icon: "icon-zidingyishuju",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultType: "String",
      customClass: "",
      width: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      required: false,
      pattern: "",
      validator: "",
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "component",
    icon: "icon-component",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      template: "<div>\u81EA\u5B9A\u4E49\u5185\u5BB9</div>",
      required: false,
      pattern: "",
      validator: "",
      isShow: true,
      isSort: false,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "fileupload",
    icon: "icon-wenjianshangchuan",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: [],
      width: "",
      tokenFunc: "funcGetToken",
      token: "",
      tokenType: "datasource",
      domain: "",
      disabled: false,
      tip: "",
      action: "",
      customClass: "",
      limit: 9,
      multiple: false,
      isQiniu: false,
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      headers: [],
      required: false,
      validatorCheck: false,
      validator: "",
      withCredentials: false,
      isShow: true,
      isSort: false
    },
    events: {
      onChange: "",
      onSelect: "",
      onUploadSuccess: "",
      onUploadError: "",
      onRemove: ""
    }
  },
  {
    type: "imgupload",
    icon: "icon-tupian",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: [],
      size: {
        width: 100,
        height: 100
      },
      width: "",
      tokenFunc: "funcGetToken",
      token: "",
      tokenType: "datasource",
      domain: "",
      disabled: false,
      readonly: false,
      limit: 8,
      multiple: false,
      isQiniu: false,
      isDelete: true,
      min: 0,
      isEdit: true,
      action: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      headers: [],
      required: false,
      validatorCheck: false,
      validator: "",
      withCredentials: false,
      isShow: true,
      isSort: false
    },
    events: {
      onChange: "",
      onSelect: "",
      onUploadSuccess: "",
      onUploadError: "",
      onRemove: ""
    }
  },
  {
    type: "editor",
    icon: "icon-fuwenbenkuang",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: "",
      width: "",
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      customToolbar: [
        [
          "bold",
          "italic",
          "underline",
          "strike",
          { "color": [] },
          { "background": [] },
          { "align": [] },
          { "list": "ordered" },
          { "list": "bullet" },
          { "indent": "-1" },
          { "indent": "+1" }
        ],
        [{ "font": [] }, { "header": [1, 2, 3, 4, 5, 6, false] }],
        [{ "script": "sub" }, { "script": "super" }],
        ["link", "image", "blockquote", "code-block"],
        [{ "direction": "rtl" }],
        ["clean"]
      ],
      disabled: false,
      required: false,
      validatorCheck: false,
      validator: "",
      required: false,
      isShow: true,
      isSort: true,
      isSearch: false
    },
    events: {
      onChange: ""
    }
  },
  {
    type: "table",
    icon: "icon-table",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultValue: [],
      customClass: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      disabled: false,
      required: false,
      validatorCheck: false,
      validator: "",
      paging: false,
      pageSize: 5,
      isShow: false
    },
    events: {
      onChange: "",
      onRowAdd: "",
      onRowRemove: "",
      onRowChange: ""
    },
    tableColumns: []
  },
  {
    type: "user",
    icon: "icon-yonghu",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultType: "String",
      customClass: "",
      defaultValue: "",
      width: "",
      limit: 1,
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      required: false,
      disabled: false,
      clearable: false,
      isShow: true,
      isSort: true,
      isSearch: false
    }
  },
  {
    type: "office",
    icon: "icon-bumenguanli",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultType: "String",
      customClass: "",
      defaultValue: "",
      width: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      required: false,
      clearable: false,
      disabled: false,
      isShow: true,
      isSort: true,
      isSearch: false
    }
  },
  {
    type: "area",
    icon: "icon-quyu",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultType: "String",
      customClass: "",
      width: "",
      labelWidth: 100,
      isLabelWidth: false,
      hidden: false,
      dataBind: true,
      required: false,
      disabled: false,
      clearable: false,
      isShow: true,
      isSort: true,
      isSearch: false
    }
  },
  {
    type: "dict",
    icon: "icon-shujuzidian",
    dsId: "",
    tableName: "",
    primaryKey: "",
    foreignKey: "",
    options: {
      defaultType: "String",
      customClass: "",
      width: "",
      labelWidth: 100,
      isLabelWidth: false,
      dictType: "",
      hidden: false,
      dataBind: true,
      required: false,
      disabled: false,
      clearable: false,
      isShow: true,
      isSort: true,
      isSearch: false
    }
  }
];
const layoutComponents = [
  {
    type: "grid",
    icon: "icon-RectangleCopy",
    columns: [
      {
        type: "col",
        options: {
          span: 12,
          offset: 0,
          push: 0,
          pull: 0,
          xs: 24,
          sm: 12,
          md: 12,
          lg: 12,
          xl: 12,
          customClass: ""
        },
        list: []
      }
    ],
    options: {
      gutter: 0,
      justify: "start",
      align: "top",
      customClass: "",
      hidden: false,
      flex: true,
      responsive: true
    }
  },
  {
    type: "report",
    icon: "icon-table1",
    options: {
      customClass: "",
      hidden: false,
      borderWidth: 1,
      borderColor: "#999",
      width: "100%"
    },
    rows: [
      {
        columns: [
          {
            type: "td",
            options: {
              customClass: "",
              colspan: 1,
              rowspan: 1,
              align: "left",
              valign: "top",
              width: "",
              height: ""
            },
            list: []
          }
        ]
      }
    ]
  },
  {
    type: "tabs",
    icon: "icon-tabs",
    tabs: [
      {
        label: "Tab 1",
        name: "tab_1",
        list: []
      }
    ],
    options: {
      type: "",
      tabPosition: "top",
      customClass: "",
      hidden: false
    }
  },
  {
    type: "inline",
    icon: "icon-inlineview",
    options: {
      customClass: "",
      hidden: false,
      spaceSize: 10
    },
    list: []
  },
  {
    type: "divider",
    icon: "icon-fengexian",
    options: {
      hidden: false,
      contentPosition: "left"
    }
  },
  {
    type: "alert",
    icon: "icon-jinggaotishi",
    options: {
      hidden: false,
      title: "Info alert",
      type: "info",
      description: "",
      closable: true,
      center: false,
      showIcon: false,
      effect: "light",
      width: ""
    }
  }
];
function findRemoteFunc(list, funcList, tokenFuncList, blankList, optionList) {
  for (let i2 = 0; i2 < list.length; i2++) {
    if (list[i2].type == "grid") {
      list[i2].columns.forEach((item2) => {
        findRemoteFunc(item2.list, funcList, tokenFuncList, blankList, optionList);
      });
    } else if (list[i2].type == "table") {
      findRemoteFunc(list[i2].tableColumns, funcList, tokenFuncList, blankList, optionList);
    } else if (list[i2].type == "tabs") {
      list[i2].tabs.forEach((item2) => {
        findRemoteFunc(item2.list, funcList, tokenFuncList, blankList, optionList);
      });
    } else if (list[i2].type == "report") {
      list[i2].rows.forEach((row) => {
        row.columns.forEach((col) => {
          findRemoteFunc(col.list, funcList, tokenFuncList, blankList, optionList);
        });
      });
    } else if (list[i2].type == "inline") {
      findRemoteFunc(list[i2].list, funcList, tokenFuncList, blankList, optionList);
    } else {
      if (list[i2].type == "blank") {
        if (list[i2].model && blankList.findIndex((item2) => item2.name == list[i2].model) < 0) {
          blankList.push({
            name: list[i2].model,
            label: list[i2].name,
            dataBind: list[i2].options.dataBind
          });
        }
      } else if (list[i2].type == "imgupload") {
        if (list[i2].options.tokenType == "func" && list[i2].options.tokenFunc) {
          tokenFuncList.push({
            func: list[i2].options.tokenFunc,
            label: list[i2].name,
            model: list[i2].model
          });
        }
      } else {
        if (list[i2].options.remote && list[i2].options.remoteType == "func" && list[i2].options.remoteFunc) {
          funcList.push({
            func: list[i2].options.remoteFunc,
            label: list[i2].name,
            model: list[i2].model
          });
        }
        if (list[i2].options.remote && list[i2].options.remoteType == "option" && list[i2].options.remoteOption) {
          optionList.push({
            option: list[i2].options.remoteOption,
            label: list[i2].name,
            model: list[i2].model
          });
        }
      }
    }
  }
}
function generateCode(data2, type = "html", ui = "element") {
  const funcList = [];
  const tokenFuncList = [];
  const blankList = [];
  const optionList = [];
  const templateName = ui == "element" ? "fm-generate-form" : "fm-generate-antd-form";
  const cdnjs = ui == "element" ? "https://cdn.jsdelivr.net/npm/element-plus" : "https://cdn.jsdelivr.net/npm/ant-design-vue@3.1.0-rc.1/dist/antd.min.js";
  const cdncss = ui == "element" ? "https://cdn.jsdelivr.net/npm/element-plus/dist/index.css" : "https://cdn.jsdelivr.net/npm/ant-design-vue@3.1.0-rc.1/dist/antd.min.css";
  findRemoteFunc(JSON.parse(data2).list, funcList, tokenFuncList, blankList, optionList);
  let funcTemplate = "";
  let blankTemplate = "";
  let optionTemplate = "";
  for (let i2 = 0; i2 < optionList.length; i2++) {
    optionTemplate += `
          ${optionList[i2].option} : [], // ${optionList[i2].label} option data
    `;
  }
  for (let i2 = 0; i2 < funcList.length; i2++) {
    funcTemplate += `
            ${funcList[i2].func} (resolve) {
              // ${funcList[i2].label} ${funcList[i2].model}
              // resolve(data)
            },
    `;
  }
  for (let i2 = 0; i2 < tokenFuncList.length; i2++) {
    funcTemplate += `
            ${tokenFuncList[i2].func} (resolve) {
              // ${tokenFuncList[i2].label} ${tokenFuncList[i2].model}
              // resolve(token)
            },
    `;
  }
  for (let i2 = 0; i2 < blankList.length; i2++) {
    if (blankList[i2].dataBind) {
      blankTemplate += `
        <template v-slot:${blankList[i2].name}="scope">
          <!-- ${blankList[i2].label || blankList[i2].name} -->
          <!-- use v-model="scope.model.${blankList[i2].name}" to bind data -->
        </template>
      `;
    } else {
      blankTemplate += `
        <template v-slot:${blankList[i2].name}>
          <!-- ${blankList[i2].label || blankList[i2].name} -->
        </template>
      `;
    }
  }
  if (type == "html") {
    return `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no" />
  <link rel="stylesheet" href="${cdncss}">
  <link rel="stylesheet" href="https://form.making.link/public/lib/form-making-v3/dist/index.css">
</head>
<body>
  <div id="app">
    <${templateName}
      :data="jsonData" 
      :remote="remoteFuncs" 
      :value="editData" 
      :remote-option="dynamicData"
      ref="generateForm"
    >${blankTemplate}
    </${templateName}>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/vue@next/dist/vue.global.prod.js"><\/script>
  <script src="${cdnjs}"><\/script>
  <script src="https://form.making.link/public/lib/form-making-v3/dist/form-making-v3.umd.js"><\/script>
  <script>
    Vue.createApp({
      data () {
        return {
          jsonData: ${data2},
          editData: {},
          remoteFuncs: {
            ${funcTemplate}
          },
          dynamicData: {
            ${optionTemplate}
          }
        }
      }
    }).use(${ui == "element" ? "ElementPlus" : "Antd"}).use(FormMakingV3).mount('#app')
  <\/script>
</body>
</html>`;
  } else {
    return `<template>
  <div>
    <${templateName} 
      :data="jsonData" 
      :remote="remoteFuncs" 
      :value="editData" 
      :remote-option="dynamicData"
      ref="generateForm"
    >${blankTemplate}
    </${templateName}>
  </div>
</template>

<script setup>
import { ref } from 'vue'

const generateForm = ref()

const jsonData = ${data2}

const remoteFuncs = {
  ${funcTemplate}
}

const dynamicData = {
  ${optionTemplate}
}
<\/script>`;
  }
}
const idb = {
  openDB(name, version2 = 1) {
    const request3 = window.indexedDB.open(name, version2);
    return new Promise((resolve, reject) => {
      request3.onerror = (e) => {
        reject(e.currentTarget.error.message);
      };
      request3.onsuccess = (e) => {
        resolve(e.target.result);
      };
      request3.onupgradeneeded = (e) => {
        const db = e.target.result;
        if (!db.objectStoreNames.contains("history")) {
          db.createObjectStore("history", { keyPath: "id" });
        }
      };
    });
  },
  name: "form-making-v3",
  cursor: 0,
  key: "QSma3WwFg+0CcR7w8prCTg=="
};
var historyManager = {
  clear() {
    return new Promise((resolve, reject) => {
      idb.openDB(idb.name).then((db) => {
        const trans = db.transaction(["history"], "readwrite");
        const historyStore = trans.objectStore("history");
        historyStore.clear();
        trans.oncomplete = (e) => {
          idb.cursor = 0;
          resolve();
        };
      });
    });
  },
  updateLatest(data2, selectedKey) {
    return new Promise((resolve, reject) => {
      idb.openDB(idb.name).then((db) => {
        const trans = db.transaction(["history"], "readwrite");
        const historyStore = trans.objectStore("history");
        historyStore.put({
          id: idb.cursor,
          data: JSON.parse(JSON.stringify(data2)),
          selected: selectedKey
        });
        trans.oncomplete = (e) => {
          resolve();
        };
      });
    });
  },
  add(data2, selectedKey) {
    return new Promise((resolve, reject) => {
      idb.openDB(idb.name).then((db) => {
        const trans = db.transaction(["history"], "readwrite");
        const historyStore = trans.objectStore("history");
        const id = idb.cursor + 1;
        const historyList = [];
        historyStore.openCursor().onsuccess = (e) => {
          const cursor = e.target.result;
          if (cursor) {
            historyList.push(cursor.value);
            cursor.continue();
          } else {
            for (let i2 = 0; i2 < historyList.length; i2++) {
              if (historyList[i2].id > idb.cursor) {
                historyStore.delete(historyList[i2].id);
              }
            }
            historyStore.add({
              id,
              data: JSON.parse(JSON.stringify(data2)),
              selected: selectedKey
            });
          }
        };
        trans.oncomplete = (e) => {
          idb.cursor = id;
          resolve();
        };
      });
    });
  },
  undo() {
    return new Promise((resolve, reject) => {
      idb.openDB(idb.name).then((db) => {
        const trans = db.transaction(["history"], "readwrite");
        const historyStore = trans.objectStore("history");
        let data2 = {
          list: [],
          config: {
            labelWidth: 100,
            labelPosition: "right",
            size: "small",
            customClass: "",
            ui: "element",
            layout: "horizontal"
          }
        }, undo = false, redo = true, key = "";
        if (idb.cursor > 1) {
          const request3 = historyStore.get(idb.cursor - 1);
          request3.onsuccess = (e) => {
            data2 = request3.result.data;
            key = request3.result.selected;
            undo = true;
          };
        }
        trans.oncomplete = (e) => {
          idb.cursor = idb.cursor - 1;
          resolve({ data: data2, key, undo, redo });
        };
      });
    });
  },
  redo() {
    return new Promise((resolve, reject) => {
      idb.openDB(idb.name).then((db) => {
        const trans = db.transaction(["history"], "readwrite");
        const historyStore = trans.objectStore("history");
        let data2 = {}, undo = true, redo = false, key = "";
        const countRequest = historyStore.count();
        countRequest.onsuccess = () => {
          const count = countRequest.result;
          if (idb.cursor < count) {
            const request3 = historyStore.get(idb.cursor + 1);
            request3.onsuccess = (e) => {
              data2 = request3.result.data;
              key = request3.result.selected;
              redo = idb.cursor + 1 == count ? false : true;
            };
          }
        };
        trans.oncomplete = (e) => {
          idb.cursor = idb.cursor + 1;
          resolve({ data: data2, key, undo, redo });
        };
      });
    });
  }
};
const UpgradeData = (data2) => {
  if (data2.type == "grid") {
    return __spreadProps(__spreadValues({}, data2), {
      columns: data2.columns.map((item2) => {
        if (item2.key) {
          return item2;
        } else {
          return __spreadProps(__spreadValues({}, item2), {
            key: Math.random().toString(36).slice(-8),
            type: "col",
            options: {
              span: item2.span,
              offset: 0,
              push: 0,
              pull: 0,
              xs: item2.xs,
              sm: item2.sm,
              md: item2.md,
              lg: item2.lg,
              xl: item2.xl,
              customClass: ""
            },
            list: item2.list.map((colItem) => {
              return UpgradeData(colItem);
            })
          });
        }
      })
    });
  } else {
    return data2;
  }
};
var file_vue_vue_type_style_index_0_lang = "";
const _sfc_main$b = {
  components: {},
  props: {
    modelValue: {
      type: Array,
      default: () => []
    },
    token: {
      type: String,
      default: ""
    },
    domain: {
      type: String,
      default: ""
    },
    multiple: {
      type: Boolean,
      default: false
    },
    limit: {
      type: Number,
      default: 9
    },
    isQiniu: {
      type: Boolean,
      default: false
    },
    min: {
      type: Number,
      default: 0
    },
    action: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    tip: {
      type: String,
      default: ""
    },
    headers: {
      type: Array,
      default: () => []
    },
    ui: {
      type: String,
      default: "element"
    },
    containerKey: {
      type: String,
      default: ""
    },
    withCredentials: {
      type: Boolean,
      default: false
    },
    printRead: {
      type: Boolean,
      default: false
    },
    onSelect: {
      type: Function,
      default: void 0
    },
    size: {
      type: String,
      default: "default"
    }
  },
  emits: ["update:modelValue", "on-upload-success", "on-upload-error", "on-upload-progress", "on-upload-remove"],
  data() {
    return {
      fileList: this.modelValue.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          key: item2.key ? item2.key : new Date().getTime() + "_" + Math.ceil(Math.random() * 99999)
        });
      }),
      viewer: null,
      uploadId: "upload_" + new Date().getTime(),
      editIndex: -1,
      meituIndex: -1
    };
  },
  computed: {
    miniWidth() {
      if (this.width > this.height) {
        return this.height;
      } else {
        return this.width;
      }
    }
  },
  methods: {
    handleChange() {
      const files = this.$refs.uploadInput.files;
      for (let i2 = 0; i2 < files.length; i2++) {
        let file = files[i2];
        let rFile = this.onSelect(file);
        if (rFile === false) {
          return false;
        }
        if (rFile instanceof File) {
          file = rFile;
        }
        const reader = new FileReader();
        let key = new Date().getTime();
        reader.readAsDataURL(file);
        reader.onload = () => {
          key = key + "_" + file.name;
          if (this.editIndex >= 0) {
            this.fileList[this.editIndex] = {
              key,
              url: reader.result,
              percent: 0,
              status: "uploading",
              name: file.name
            };
            this.editIndex = -1;
          } else {
            this.fileList.push({
              key,
              url: reader.result,
              percent: 0,
              status: "uploading",
              name: file.name
            });
          }
          this.$nextTick(() => {
            if (this.isQiniu) {
              this.uploadAction2(reader.result, file, key);
            } else {
              this.uploadAction(reader.result, file, key);
            }
          });
        };
      }
      this.$refs.uploadInput.value = [];
    },
    uploadAction(res, file, key) {
      this.fileList.findIndex((item2) => item2.key === key);
      const xhr2 = new XMLHttpRequest();
      const url = this.action;
      xhr2.open("POST", url, true);
      this.headers.map((item2) => {
        item2.key && xhr2.setRequestHeader(item2.key, item2.value);
      });
      let formData = new FormData();
      formData.append("file", file);
      formData.append("fname", file.name);
      formData.append("key", key);
      xhr2.withCredentials = this.withCredentials;
      xhr2.send(formData);
      xhr2.onreadystatechange = () => {
        if (xhr2.readyState === 4) {
          let resData = xhr2.response;
          if (resData) {
            this.fileList[this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
              url: resData,
              percent: 100
            });
            setTimeout(() => {
              this.fileList[this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
                status: "success"
              });
              this.$emit("on-upload-success", __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
                status: "success"
              }));
              this.$emit("update:modelValue", this.fileList);
            }, 200);
          } else {
            this.fileList[this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
              status: "error"
            });
            this.$emit("on-upload-error", __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
              status: "error"
            }));
            this.fileList.splice(this.fileList.findIndex((item2) => item2.key === key), 1);
          }
        }
      };
      xhr2.onprogress = (res2) => {
        if (res2.total && res2.loaded) {
          this.fileList[this.fileList.findIndex((item2) => item2.key === key)].percent = res2.loaded / res2.total * 100;
          this.$emit("on-upload-progress", __spreadProps(__spreadValues({}, this.fileList[this.fileList.findIndex((item2) => item2.key === key)]), {
            status: "uploading",
            percent: res2.loaded / res2.total * 100
          }));
        }
      };
    },
    uploadAction2(res, file, key) {
      const _this = this;
      const observable = upload(file, key, this.token, {
        fname: file.name,
        mimeType: []
      }, {
        useCdnDomain: true
      });
      observable.subscribe({
        next(res2) {
          _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)].percent = parseInt(res2.total.percent);
          _this.$emit("on-upload-progress", __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
            status: "uploading",
            percent: parseInt(res2.total.percent)
          }));
        },
        error(err) {
          _this.$message.error(err.message);
          _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
            status: "error"
          });
          _this.$emit("on-upload-error", __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
            status: "error"
          }));
          _this.fileList.splice(_this.fileList.findIndex((item2) => item2.key === key), 1);
        },
        complete(res2) {
          _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)] = __spreadValues(__spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
            url: _this.domain + res2.key,
            percent: 100
          }), res2);
          setTimeout(() => {
            _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)] = __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
              status: "success"
            });
            _this.$emit("on-upload-success", __spreadProps(__spreadValues({}, _this.fileList[_this.fileList.findIndex((item2) => item2.key === key)]), {
              status: "success"
            }));
            _this.$emit("update:modelValue", _this.fileList);
          }, 200);
        }
      });
    },
    handleRemove(key) {
      if (!this.disabled) {
        this.$emit("on-upload-remove", this.fileList[this.fileList.findIndex((item2) => item2.key === key)]);
        this.fileList.splice(this.fileList.findIndex((item2) => item2.key === key), 1);
        this.$nextTick(() => {
          this.$emit("update:modelValue", this.fileList);
        });
      }
    },
    handleAdd() {
      if (!this.disabled) {
        this.editIndex = -1;
        this.$refs.uploadInput.click();
      }
    },
    handlePreviewFile(key) {
      this.viewer && this.viewer.destroy();
      this.uploadId = "upload_" + new Date().getTime();
      this.$nextTick(() => {
        this.viewer = new Viewer(document.getElementById(this.uploadId));
        this.viewer.view(this.fileList.findIndex((item2) => item2.key === key));
      });
    }
  },
  watch: {
    modelValue(val) {
      this.fileList = this.modelValue.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          key: item2.key ? item2.key : new Date().getTime() + "_" + Math.ceil(Math.random() * 99999)
        });
      });
    }
  }
};
const _hoisted_1$5 = ["id"];
const _hoisted_2$3 = {
  key: 0,
  class: "file-button"
};
const _hoisted_3$3 = { class: "upload_tip" };
const _hoisted_4$3 = { class: "upload-list" };
const _hoisted_5$3 = ["href"];
const _hoisted_6$2 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-file" }, null, -1);
const _hoisted_7$2 = { class: "list_item-status-label" };
const _hoisted_8$1 = {
  key: 0,
  class: "iconfont icon-check",
  style: { "color": "#67c23a" }
};
const _hoisted_9$1 = ["onClick"];
function _sfc_render$9(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_button = resolveComponent("el-button");
  const _component_a_button = resolveComponent("a-button");
  const _component_el_progress = resolveComponent("el-progress");
  const _component_a_progress = resolveComponent("a-progress");
  return openBlock(), createElementBlock("div", {
    class: "fm-upload-file",
    id: $data.uploadId
  }, [
    !$props.printRead ? withDirectives((openBlock(), createElementBlock("div", _hoisted_2$3, [
      $props.ui == "element" ? (openBlock(), createBlock(_component_el_button, {
        key: 0,
        type: "primary",
        disabled: $props.disabled || $data.fileList.length == $props.limit,
        onClick: $options.handleAdd
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.upload")), 1)
        ]),
        _: 1
      }, 8, ["disabled", "onClick"])) : createCommentVNode("", true),
      $props.ui == "antd" ? (openBlock(), createBlock(_component_a_button, {
        key: 1,
        size: $props.size,
        disabled: $props.disabled || $data.fileList.length == $props.limit,
        onClick: $options.handleAdd
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.upload")), 1)
        ]),
        _: 1
      }, 8, ["size", "disabled", "onClick"])) : createCommentVNode("", true),
      $props.multiple ? (openBlock(), createElementBlock("input", {
        key: 2,
        multiple: "",
        ref: "uploadInput",
        onChange: _cache[0] || (_cache[0] = (...args) => $options.handleChange && $options.handleChange(...args)),
        type: "file",
        name: "file",
        class: "upload_input"
      }, null, 544)) : (openBlock(), createElementBlock("input", {
        key: 3,
        ref: "uploadInput",
        onChange: _cache[1] || (_cache[1] = (...args) => $options.handleChange && $options.handleChange(...args)),
        type: "file",
        name: "file",
        class: "upload_input"
      }, null, 544))
    ], 512)), [
      [vShow, !$props.isQiniu || $props.isQiniu && $props.token]
    ]) : createCommentVNode("", true),
    createElementVNode("div", _hoisted_3$3, toDisplayString$1($props.tip), 1),
    createElementVNode("ul", _hoisted_4$3, [
      (openBlock(true), createElementBlock(Fragment, null, renderList($data.fileList, (item2) => {
        return openBlock(), createElementBlock("li", {
          class: normalizeClass(["list_item", { uploading: item2.status == "uploading", "is-success": item2.status == "success", "is-disabled": $props.disabled }]),
          key: item2.key
        }, [
          createElementVNode("a", {
            class: "list_item-name",
            href: item2.url,
            target: "_blank"
          }, [
            _hoisted_6$2,
            createTextVNode(" " + toDisplayString$1(item2.name), 1)
          ], 8, _hoisted_5$3),
          !$props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
            createElementVNode("label", _hoisted_7$2, [
              item2.status === "success" ? (openBlock(), createElementBlock("i", _hoisted_8$1)) : createCommentVNode("", true)
            ]),
            createElementVNode("i", {
              class: "iconfont icon-close",
              onClick: ($event) => $options.handleRemove(item2.key),
              style: { "font-size": "12px" }
            }, null, 8, _hoisted_9$1),
            item2.status == "uploading" && $props.ui == "element" ? (openBlock(), createBlock(_component_el_progress, {
              key: 0,
              "stroke-width": 2,
              percentage: item2.percent
            }, null, 8, ["percentage"])) : createCommentVNode("", true),
            item2.status == "uploading" && $props.ui == "antd" ? (openBlock(), createBlock(_component_a_progress, {
              key: 1,
              "stroke-width": 2,
              percent: item2.percent
            }, null, 8, ["percent"])) : createCommentVNode("", true)
          ], 64)) : createCommentVNode("", true)
        ], 2);
      }), 128))
    ])
  ], 8, _hoisted_1$5);
}
var FmFileUpload = /* @__PURE__ */ _export_sfc(_sfc_main$b, [["render", _sfc_render$9]]);
const _sfc_main$a = {
  name: "generate-element-item",
  components: {
    FmUpload,
    FmFormTable,
    UserSelect,
    Area,
    OfficeSelect,
    FmFileUpload,
    Editor: _sfc_main$y
  },
  props: ["widget", "modelValue", "models", "remote", "isTable", "blanks", "disabled", "edit", "remoteOption", "rules", "platform", "preview", "dataSourceValue", "eventFunction", "rowIndex", "tableName", "printRead", "formComponent", "isMobile"],
  emits: ["update:modelValue", "on-table-change"],
  data() {
    return {
      dataModel: this.modelValue,
      dataModels: this.models,
      key: new Date().getTime(),
      modelName: this.widget.model,
      propsModel: { multiple: this.widget.options.multiple || false, checkStrictly: this.widget.options.checkStrictly || false },
      propsTransfer: { key: "key", label: "label" },
      remoteOptions: []
    };
  },
  inject: ["generateComponentInstance"],
  created() {
    if (this.widget.options.remote && (Object.keys(this.widget.options).indexOf("remoteType") >= 0 ? this.widget.options.remoteType == "func" : true) && this.remote[this.widget.options.remoteFunc]) {
      this.remote[this.widget.options.remoteFunc]((data2) => {
        this.loadOptions(data2);
      });
    }
    if (this.widget.options.remote && this.widget.options.remoteType == "option" && this.remoteOption[this.widget.options.remoteOption]) {
      this.loadOptions(this.remoteOption[this.widget.options.remoteOption]);
    }
    if (this.widget.options.remote && this.widget.options.remoteType == "datasource" && this.dataSourceValue) {
      let options = this.dataSourceValue.find((item2) => item2.key === (this.isTable ? this.tableName + "." + this.widget.model : this.widget.model) + "." + this.widget.options.remoteDataSource);
      options && options.value && this.loadOptions(options.value);
    }
    if ((this.widget.type === "imgupload" || this.widget.type === "fileupload") && this.widget.options.isQiniu) {
      this.loadUploadConfig();
    }
    if (this.widget.type == "component") {
      this.$options.components[`component-${this.widget.key}-${this.key}`] = {
        template: `${this.widget.options.template}`,
        props: ["modelValue"],
        emits: ["update:modelValue"],
        data: () => ({
          dataModel: this.modelValue
        }),
        watch: {
          dataModel(val) {
            if (this.ui == "antd") {
              EventBus.$emit("on-field-change", this.$attrs.id, val);
            } else {
              this.$emit("update:modelValue", val);
            }
          },
          modelValue(val) {
            this.dataModel = val;
          }
        }
      };
    }
  },
  mounted() {
    this.generateComponentInstance && this.generateComponentInstance(this.isTable ? `${this.isMobile ? "m" : ""}${this.tableName}.${this.rowIndex}.${this.widget.model}` : this.widget.model, this.$refs["fm-" + this.widget.model]);
  },
  methods: {
    loadOptions(data2) {
      if (!Array.isArray(data2))
        return;
      this.remoteOptions = data2.map((item2) => {
        if (this.widget.options.props.children && this.widget.options.props.children.length && Object.keys(item2).includes(this.widget.options.props.children)) {
          return {
            value: item2[this.widget.options.props.value],
            label: item2[this.widget.options.props.label],
            children: this.processRemoteProps(item2[this.widget.options.props.children], this.widget.options.props)
          };
        } else {
          if (this.widget.type == "steps") {
            return {
              value: item2[this.widget.options.props.title] + "",
              label: item2[this.widget.options.props.description]
            };
          } else if (this.widget.type == "transfer") {
            return item2;
          } else {
            return {
              value: item2[this.widget.options.props.value],
              label: item2[this.widget.options.props.label]
            };
          }
        }
      });
    },
    processRemoteProps(children, props2) {
      if (children && children.length) {
        return children.map((item2) => {
          if (this.processRemoteProps(item2[props2.children], props2).length) {
            return {
              value: item2[props2.value],
              label: item2[props2.label],
              children: this.processRemoteProps(item2[props2.children], props2)
            };
          } else {
            return {
              value: item2[props2.value],
              label: item2[props2.label]
            };
          }
        });
      } else {
        return [];
      }
    },
    onCascaderChange(value) {
      if (value) {
        this.$nextTick(() => {
          this.$parent && this.$parent.clearValidate();
          this.$parent && this.$parent.$parent && this.$parent.$parent.$refs.generateFormItem && this.$parent.$parent.$refs.generateFormItem.clearValidate();
        });
      }
    },
    handleTransferChange(value) {
      this.dataModel = value;
    },
    getCascaderText(value, options, texts = []) {
      if (value.length >= 1) {
        let currentOpt = options.find((opt) => opt.value == value[0]);
        if (currentOpt) {
          texts.push(currentOpt.label);
        }
        value.splice(0, 1);
        return this.getCascaderText(value, currentOpt.children, texts);
      } else if (value.length == 0) {
        return texts;
      }
    },
    getTreeText(value, options) {
      for (let i2 = 0; i2 < options.length; i2++) {
        let currentOpt = options[i2];
        if (currentOpt.value == value) {
          return currentOpt.label;
        }
        if (currentOpt.children && currentOpt.children.length > 0) {
          let res = this.getTreeText(value, currentOpt.children);
          if (res == "-") {
            continue;
          } else {
            return res;
          }
        }
      }
      return "-";
    },
    loadUploadConfig() {
      if (this.widget.options.tokenType === "func") {
        !this.widget.options.token && this.remote[this.widget.options.tokenFunc]((data2) => {
          this.widget.options.token = data2;
        });
      } else {
        if (this.dataSourceValue) {
          let token2 = this.dataSourceValue.find((item2) => item2.key === this.widget.options.tokenDataSource);
          token2 && token2.value && (this.widget.options.token = token2.value);
        }
      }
    },
    handleOnClick() {
      if (this.widget.events && this.widget.events.onClick) {
        let funcKey = this.widget.events.onClick;
        if (this.isTable && this.tableName) {
          this.eventFunction[funcKey]({
            field: this.widget.model,
            table: this.tableName,
            rowIndex: this.rowIndex
          });
        } else {
          this.eventFunction[funcKey]({ field: this.widget.model });
        }
      }
    },
    handleOnFocus() {
      if (this.widget.events && this.widget.events.onFocus) {
        let funcKey = this.widget.events.onFocus;
        if (this.isTable && this.tableName) {
          this.eventFunction[funcKey]({
            field: this.widget.model,
            table: this.tableName,
            rowIndex: this.rowIndex
          });
        } else {
          this.eventFunction[funcKey]({ field: this.widget.model });
        }
      }
    },
    handleOnBlur() {
      if (this.widget.events && this.widget.events.onBlur) {
        let funcKey = this.widget.events.onBlur;
        if (this.isTable && this.tableName) {
          this.eventFunction[funcKey]({
            field: this.widget.model,
            table: this.tableName,
            rowIndex: this.rowIndex
          });
        } else {
          this.eventFunction[funcKey]({ field: this.widget.model });
        }
      }
    },
    handleOnUploadSelect(file) {
      if (this.widget.events && this.widget.events.onSelect) {
        let funcKey = this.widget.events.onSelect;
        if (this.isTable && this.tableName) {
          return this.eventFunction[funcKey]({
            field: this.widget.model,
            table: this.tableName,
            rowIndex: this.rowIndex,
            file
          });
        } else {
          return this.eventFunction[funcKey]({ field: this.widget.model, file });
        }
      }
    },
    handleOnUploadSuccess(file) {
      if (this.widget.events && this.widget.events.onUploadSuccess) {
        let funcKey = this.widget.events.onUploadSuccess;
        if (this.isTable && this.tableName) {
          this.eventFunction[funcKey]({
            field: this.widget.model,
            table: this.tableName,
            rowIndex: this.rowIndex,
            file
          });
        } else {
          this.eventFunction[funcKey]({ field: this.widget.model, file });
        }
      }
    },
    handleOnUploadError(file) {
      if (this.widget.events && this.widget.events.onUploadError) {
        let funcKey = this.widget.events.onUploadError;
        if (this.isTable && this.tableName) {
          this.eventFunction[funcKey]({
            field: this.widget.model,
            table: this.tableName,
            rowIndex: this.rowIndex,
            file
          });
        } else {
          this.eventFunction[funcKey]({ field: this.widget.model, file });
        }
      }
    },
    handleOnUploadProgress(file) {
      if (this.widget.events && this.widget.events.onUploadProgress) {
        let funcKey = this.widget.events.onUploadProgress;
        if (this.isTable && this.tableName) {
          this.eventFunction[funcKey]({
            field: this.widget.model,
            table: this.tableName,
            rowIndex: this.rowIndex,
            file
          });
        } else {
          this.eventFunction[funcKey]({ field: this.widget.model, file });
        }
      }
    },
    handleOnUploadRemove(file) {
      if (this.widget.events && this.widget.events.onRemove) {
        let funcKey = this.widget.events.onRemove;
        if (this.isTable && this.tableName) {
          this.eventFunction[funcKey]({
            field: this.widget.model,
            table: this.tableName,
            rowIndex: this.rowIndex,
            file
          });
        } else {
          this.eventFunction[funcKey]({ field: this.widget.model, file });
        }
      }
    }
  },
  watch: {
    modelValue(val) {
      this.dataModel = val;
    },
    dataModel(val, oldValue) {
      this.$emit("update:modelValue", val);
      if (this.isTable && this.tableName) {
        this.$emit("on-table-change", {
          value: val,
          field: this.widget.model,
          table: this.tableName,
          rowIndex: this.rowIndex,
          haveEvent: this.widget.events && this.widget.events.onChange
        });
      }
    },
    "remoteOption": {
      deep: true,
      handler: function(val) {
        if (Object.keys(this.remoteOption).indexOf(this.widget.options.remoteOption) >= 0 && this.widget.options.remote && this.widget.options.remoteType == "option") {
          this.loadOptions(this.remoteOption[this.widget.options.remoteOption]);
        }
      }
    },
    "dataSourceValue": {
      deep: true,
      handler: function(val) {
        if (this.dataSourceValue) {
          let options = this.dataSourceValue.find((item2) => item2.key === (this.isTable ? this.tableName + "." + this.widget.model : this.widget.model) + "." + this.widget.options.remoteDataSource);
          options && options.value && this.loadOptions(options.value);
        }
        if ((this.widget.type === "imgupload" || this.widget.type === "fileupload") && this.widget.options.isQiniu) {
          this.loadUploadConfig();
        }
      }
    }
  }
};
const _hoisted_1$4 = { key: 0 };
const _hoisted_2$2 = { key: 0 };
const _hoisted_3$2 = { key: 0 };
const _hoisted_4$2 = ["innerHTML"];
const _hoisted_5$2 = ["innerHTML"];
function _sfc_render$8(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_input = resolveComponent("el-input");
  const _component_el_input_number = resolveComponent("el-input-number");
  const _component_el_radio = resolveComponent("el-radio");
  const _component_el_radio_group = resolveComponent("el-radio-group");
  const _component_el_checkbox = resolveComponent("el-checkbox");
  const _component_el_checkbox_group = resolveComponent("el-checkbox-group");
  const _component_el_time_picker = resolveComponent("el-time-picker");
  const _component_el_date_picker = resolveComponent("el-date-picker");
  const _component_el_rate = resolveComponent("el-rate");
  const _component_el_color_picker = resolveComponent("el-color-picker");
  const _component_el_option = resolveComponent("el-option");
  const _component_el_select = resolveComponent("el-select");
  const _component_el_switch = resolveComponent("el-switch");
  const _component_el_slider = resolveComponent("el-slider");
  const _component_fm_upload = resolveComponent("fm-upload");
  const _component_Editor = resolveComponent("Editor");
  const _component_el_cascader = resolveComponent("el-cascader");
  const _component_el_tree_select = resolveComponent("el-tree-select");
  const _component_fm_form_table = resolveComponent("fm-form-table");
  const _component_fm_file_upload = resolveComponent("fm-file-upload");
  const _component_el_button = resolveComponent("el-button");
  const _component_el_link = resolveComponent("el-link");
  const _component_el_step = resolveComponent("el-step");
  const _component_el_steps = resolveComponent("el-steps");
  const _component_el_transfer = resolveComponent("el-transfer");
  const _component_user_select = resolveComponent("user-select");
  const _component_OfficeSelect = resolveComponent("OfficeSelect");
  const _component_Area = resolveComponent("Area");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass({ "print-read-label": $props.printRead }),
    style: { "width": "100%" }
  }, [
    $props.widget.type == "blank" ? (openBlock(), createElementBlock("div", {
      key: 0,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width })
    }, [
      renderSlot(_ctx.$slots, $props.widget.model, { model: $data.dataModels })
    ], 4)) : createCommentVNode("", true),
    $props.widget.type == "component" ? (openBlock(), createElementBlock("div", {
      key: 1,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width })
    }, [
      (openBlock(), createBlock(resolveDynamicComponent(`component-${$props.widget.key}-${$data.key}`), {
        key: $data.key,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.dataModel = $event),
        ref: "fm-" + $props.widget.model
      }, null, 8, ["modelValue"]))
    ], 4)) : createCommentVNode("", true),
    $props.widget.type == "custom" ? (openBlock(), createElementBlock("div", {
      key: 2,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width })
    }, [
      (openBlock(), createBlock(resolveDynamicComponent($props.widget.el), mergeProps({
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => $data.dataModel = $event),
        width: $props.widget.options.width,
        height: $props.widget.options.height,
        placeholder: $props.widget.options.placeholder,
        readonly: $props.widget.options.readonly,
        disabled: !$props.edit || $props.widget.options.disabled,
        editable: $props.widget.options.editable,
        clearable: $props.widget.options.clearable,
        ref: "fm-" + $props.widget.model,
        "print-read": $props.printRead
      }, $props.widget.options.extendProps), null, 16, ["modelValue", "width", "height", "placeholder", "readonly", "disabled", "editable", "clearable", "print-read"]))
    ], 4)) : createCommentVNode("", true),
    $props.widget.type == "input" ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
      $props.printRead ? (openBlock(), createElementBlock("span", _hoisted_1$4, toDisplayString$1($data.dataModel), 1)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        $props.widget.options.dataTypeCheck && ($props.widget.options.dataType == "number" || $props.widget.options.dataType == "integer" || $props.widget.options.dataType == "float") ? (openBlock(), createBlock(_component_el_input, {
          key: 0,
          type: "number",
          modelValue: $data.dataModel,
          "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => $data.dataModel = $event),
          modelModifiers: { number: true },
          disabled: !$props.edit || $props.widget.options.disabled,
          clearable: $props.widget.options.clearable,
          placeholder: $props.widget.options.placeholder,
          "show-password": $props.widget.options.showPassword,
          style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
          ref: "fm-" + $props.widget.model,
          onFocus: $options.handleOnFocus,
          onBlur: $options.handleOnBlur
        }, null, 8, ["modelValue", "disabled", "clearable", "placeholder", "show-password", "style", "onFocus", "onBlur"])) : (openBlock(), createBlock(_component_el_input, {
          key: 1,
          type: $props.widget.options.dataTypeCheck ? $props.widget.options.dataType : "text",
          modelValue: $data.dataModel,
          "onUpdate:modelValue": _cache[3] || (_cache[3] = ($event) => $data.dataModel = $event),
          disabled: !$props.edit || $props.widget.options.disabled,
          placeholder: $props.widget.options.placeholder,
          "show-password": $props.widget.options.showPassword,
          style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
          clearable: $props.widget.options.clearable,
          ref: "fm-" + $props.widget.model,
          onFocus: $options.handleOnFocus,
          onBlur: $options.handleOnBlur
        }, null, 8, ["type", "modelValue", "disabled", "placeholder", "show-password", "style", "clearable", "onFocus", "onBlur"]))
      ], 64))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "textarea" ? (openBlock(), createElementBlock(Fragment, { key: 4 }, [
      $props.printRead ? (openBlock(), createElementBlock("pre", _hoisted_2$2, toDisplayString$1($data.dataModel), 1)) : (openBlock(), createBlock(_component_el_input, {
        key: 1,
        type: "textarea",
        rows: 5,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => $data.dataModel = $event),
        disabled: !$props.edit || $props.widget.options.disabled,
        placeholder: $props.widget.options.placeholder,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        clearable: $props.widget.options.clearable,
        ref: "fm-" + $props.widget.model,
        onFocus: $options.handleOnFocus,
        onBlur: $options.handleOnBlur
      }, null, 8, ["modelValue", "disabled", "placeholder", "style", "clearable", "onFocus", "onBlur"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "number" ? (openBlock(), createElementBlock(Fragment, { key: 5 }, [
      $props.printRead ? (openBlock(), createElementBlock("span", _hoisted_3$2, toDisplayString$1(typeof $data.dataModel == "number" ? $data.dataModel.toFixed($props.widget.options.precision) : $data.dataModel), 1)) : (openBlock(), createBlock(_component_el_input_number, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[5] || (_cache[5] = ($event) => $data.dataModel = $event),
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        step: $props.widget.options.step,
        disabled: !$props.edit || $props.widget.options.disabled,
        min: $props.widget.options.min,
        max: $props.widget.options.max,
        "controls-position": $props.widget.options.controlsPosition,
        precision: $props.widget.options.precision,
        controls: $props.widget.options.controls,
        ref: "fm-" + $props.widget.model,
        onFocus: $options.handleOnFocus,
        onBlur: $options.handleOnBlur
      }, null, 8, ["modelValue", "style", "step", "disabled", "min", "max", "controls-position", "precision", "controls", "onFocus", "onBlur"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "radio" ? (openBlock(), createElementBlock(Fragment, { key: 6 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        $props.widget.options.remote === 2 ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createTextVNode(toDisplayString$1($data.remoteOptions.find((item2) => item2.value == $data.dataModel) && $data.remoteOptions.find((item2) => item2.value == $data.dataModel).label), 1)
        ], 64)) : $props.widget.options.remote === 3 ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString$1(_ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == $data.dataModel) && _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == $data.dataModel).label), 1)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
          createTextVNode(toDisplayString$1($props.widget.options.showLabel ? $props.widget.options.options.find((item2) => item2.value == $data.dataModel) && $props.widget.options.options.find((item2) => item2.value == $data.dataModel).label : $data.dataModel), 1)
        ], 64))
      ], 64)) : (openBlock(), createBlock(_component_el_radio_group, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[6] || (_cache[6] = ($event) => $data.dataModel = $event),
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width, display: "block" }),
        disabled: !$props.edit || $props.widget.options.disabled,
        ref: "fm-" + $props.widget.model
      }, {
        default: withCtx(() => [
          $props.widget.options.remote === 2 ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList($data.remoteOptions, (item2, index2) => {
            return openBlock(), createBlock(_component_el_radio, {
              style: normalizeStyle({ display: $props.widget.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: index2
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(item2.label), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128)) : $props.widget.options.remote === 3 ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.$dictUtils.getDictList($props.widget.options.dictType), (item2, index2) => {
            return openBlock(), createBlock(_component_el_radio, {
              style: normalizeStyle({ display: $props.widget.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: index2 + 1
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(item2.label), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128)) : (openBlock(true), createElementBlock(Fragment, { key: 2 }, renderList($props.widget.options.options, (item2, index2) => {
            return openBlock(), createBlock(_component_el_radio, {
              style: normalizeStyle({ display: $props.widget.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: index2 + 2
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1($props.widget.options.showLabel ? item2.label : item2.value), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "style", "disabled"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "checkbox" ? (openBlock(), createElementBlock(Fragment, { key: 7 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        $props.widget.options.remote === 2 ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createTextVNode(toDisplayString$1($data.dataModel.map((dm) => $data.remoteOptions.find((item2) => item2.value == dm) && $data.remoteOptions.find((item2) => item2.value == dm).label).join("\u3001")), 1)
        ], 64)) : $props.widget.options.remote === 3 ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString$1($data.dataModel.map((dm) => _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == dm) && _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == dm).label).join("\u3001")), 1)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
          createTextVNode(toDisplayString$1($props.widget.options.showLabel ? $data.dataModel.map((dm) => $props.widget.options.options.find((item2) => item2.value == dm) && $props.widget.options.options.find((item2) => item2.value == dm).label).join("\u3001") : $data.dataModel.join("\u3001")), 1)
        ], 64))
      ], 64)) : (openBlock(), createBlock(_component_el_checkbox_group, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[7] || (_cache[7] = ($event) => $data.dataModel = $event),
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        disabled: !$props.edit || $props.widget.options.disabled,
        ref: "fm-" + $props.widget.model
      }, {
        default: withCtx(() => [
          $props.widget.options.remote === 2 ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList($data.remoteOptions, (item2, index2) => {
            return openBlock(), createBlock(_component_el_checkbox, {
              style: normalizeStyle({ display: $props.widget.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: index2
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(item2.label), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128)) : $props.widget.options.remote === 3 ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.$dictUtils.getDictList($props.widget.options.dictType), (item2, index2) => {
            return openBlock(), createBlock(_component_el_checkbox, {
              style: normalizeStyle({ display: $props.widget.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: index2 + 1
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1(item2.label), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128)) : (openBlock(true), createElementBlock(Fragment, { key: 2 }, renderList($props.widget.options.options, (item2, index2) => {
            return openBlock(), createBlock(_component_el_checkbox, {
              style: normalizeStyle({ display: $props.widget.options.inline ? "inline-block" : "block" }),
              label: item2.value,
              key: index2 + 2
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString$1($props.widget.options.showLabel ? item2.label : item2.value), 1)
              ]),
              _: 2
            }, 1032, ["style", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "style", "disabled"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "time" ? (openBlock(), createElementBlock(Fragment, { key: 8 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createTextVNode(toDisplayString$1($data.dataModel), 1)
      ], 64)) : (openBlock(), createBlock(_component_el_time_picker, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[8] || (_cache[8] = ($event) => $data.dataModel = $event),
        "is-range": $props.widget.options.isRange,
        placeholder: $props.widget.options.placeholder,
        "start-placeholder": $props.widget.options.startPlaceholder,
        "end-placeholder": $props.widget.options.endPlaceholder,
        readonly: $props.widget.options.readonly,
        disabled: !$props.edit || $props.widget.options.disabled,
        editable: $props.widget.options.editable,
        clearable: $props.widget.options.clearable,
        arrowControl: $props.widget.options.arrowControl,
        "value-format": $props.widget.options.format,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        ref: "fm-" + $props.widget.model,
        onFocus: $options.handleOnFocus,
        onBlur: $options.handleOnBlur
      }, null, 8, ["modelValue", "is-range", "placeholder", "start-placeholder", "end-placeholder", "readonly", "disabled", "editable", "clearable", "arrowControl", "value-format", "style", "onFocus", "onBlur"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "date" ? (openBlock(), createElementBlock(Fragment, { key: 9 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createTextVNode(toDisplayString$1(typeof $data.dataModel == "object" ? $data.dataModel.join("\u3001") : $data.dataModel), 1)
      ], 64)) : (openBlock(), createBlock(_component_el_date_picker, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.dataModel = $event),
        type: $props.widget.options.type,
        placeholder: $props.widget.options.placeholder,
        "start-placeholder": $props.widget.options.startPlaceholder,
        "end-placeholder": $props.widget.options.endPlaceholder,
        readonly: $props.widget.options.readonly,
        disabled: !$props.edit || $props.widget.options.disabled,
        editable: $props.widget.options.editable,
        clearable: $props.widget.options.clearable,
        "value-format": $props.widget.options.timestamp ? "timestamp" : $props.widget.options.format,
        format: $props.widget.options.format,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        ref: "fm-" + $props.widget.model,
        onFocus: $options.handleOnFocus,
        onBlur: $options.handleOnBlur
      }, null, 8, ["modelValue", "type", "placeholder", "start-placeholder", "end-placeholder", "readonly", "disabled", "editable", "clearable", "value-format", "format", "style", "onFocus", "onBlur"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "rate" ? (openBlock(), createElementBlock(Fragment, { key: 10 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createTextVNode(toDisplayString$1($data.dataModel), 1)
      ], 64)) : (openBlock(), createBlock(_component_el_rate, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[10] || (_cache[10] = ($event) => $data.dataModel = $event),
        max: $props.widget.options.max,
        disabled: !$props.edit || $props.widget.options.disabled,
        "allow-half": $props.widget.options.allowHalf,
        "show-score": $props.widget.options.showScore,
        ref: "fm-" + $props.widget.model
      }, null, 8, ["modelValue", "max", "disabled", "allow-half", "show-score"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "color" ? (openBlock(), createElementBlock(Fragment, { key: 11 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createTextVNode(toDisplayString$1($data.dataModel), 1)
      ], 64)) : (openBlock(), createBlock(_component_el_color_picker, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.dataModel = $event),
        disabled: !$props.edit || $props.widget.options.disabled,
        "show-alpha": $props.widget.options.showAlpha,
        ref: "fm-" + $props.widget.model
      }, null, 8, ["modelValue", "disabled", "show-alpha"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "select" ? (openBlock(), createElementBlock(Fragment, { key: 12 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        $props.widget.options.remote === 2 ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createTextVNode(toDisplayString$1(typeof $data.dataModel == "object" ? $data.dataModel.map((dm) => $data.remoteOptions.find((item2) => item2.value == dm) && $data.remoteOptions.find((item2) => item2.value == dm).label).join("\u3001") : $data.remoteOptions.find((item2) => item2.value == $data.dataModel) && $data.remoteOptions.find((item2) => item2.value == $data.dataModel).label), 1)
        ], 64)) : $props.widget.options.remote === 3 ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString$1(typeof $data.dataModel == "object" ? $data.dataModel.map((dm) => _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == dm) && _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == dm).label).join("\u3001") : _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == $data.dataModel) && _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == $data.dataModel).label), 1)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 2 }, [
          createTextVNode(toDisplayString$1($props.widget.options.showLabel ? typeof $data.dataModel == "object" ? $data.dataModel.map((dm) => $props.widget.options.options.find((item2) => item2.value == dm) && $props.widget.options.options.find((item2) => item2.value == dm).label).join("\u3001") : $props.widget.options.options.find((item2) => item2.value == $data.dataModel) && $props.widget.options.options.find((item2) => item2.value == $data.dataModel).label : typeof $data.dataModel == "object" ? $data.dataModel.join("\u3001") : $data.dataModel), 1)
        ], 64))
      ], 64)) : (openBlock(), createBlock(_component_el_select, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.dataModel = $event),
        disabled: !$props.edit || $props.widget.options.disabled,
        multiple: $props.widget.options.multiple,
        clearable: $props.widget.options.clearable,
        placeholder: $props.widget.options.placeholder,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        filterable: $props.widget.options.filterable,
        ref: "fm-" + $props.widget.model,
        onFocus: $options.handleOnFocus,
        onBlur: $options.handleOnBlur
      }, {
        default: withCtx(() => [
          $props.widget.options.remote === 2 ? (openBlock(true), createElementBlock(Fragment, { key: 0 }, renderList($data.remoteOptions, (item2) => {
            return openBlock(), createBlock(_component_el_option, {
              key: item2.value,
              value: item2.value,
              label: $props.widget.options.showLabel || item2.label
            }, null, 8, ["value", "label"]);
          }), 128)) : $props.widget.options.remote === 3 ? (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.$dictUtils.getDictList($props.widget.options.dictType), (item2) => {
            return openBlock(), createBlock(_component_el_option, {
              key: item2.value,
              value: item2.value,
              label: $props.widget.options.showLabel || item2.label
            }, null, 8, ["value", "label"]);
          }), 128)) : (openBlock(true), createElementBlock(Fragment, { key: 2 }, renderList($props.widget.options.options, (item2) => {
            return openBlock(), createBlock(_component_el_option, {
              key: item2.value,
              value: item2.value,
              label: $props.widget.options.showLabel || item2.value
            }, null, 8, ["value", "label"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "disabled", "multiple", "clearable", "placeholder", "style", "filterable", "onFocus", "onBlur"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "switch" ? (openBlock(), createElementBlock(Fragment, { key: 13 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createTextVNode(toDisplayString$1($data.dataModel), 1)
      ], 64)) : (openBlock(), createBlock(_component_el_switch, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.dataModel = $event),
        disabled: !$props.edit || $props.widget.options.disabled,
        ref: "fm-" + $props.widget.model,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width })
      }, null, 8, ["modelValue", "disabled", "style"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "slider" ? (openBlock(), createElementBlock(Fragment, { key: 14 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createTextVNode(toDisplayString$1($data.dataModel), 1)
      ], 64)) : (openBlock(), createBlock(_component_el_slider, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[14] || (_cache[14] = ($event) => $data.dataModel = $event),
        min: $props.widget.options.min,
        max: $props.widget.options.max,
        disabled: !$props.edit || $props.widget.options.disabled,
        step: $props.widget.options.step,
        "show-input": $props.widget.options.showInput,
        range: $props.widget.options.range,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        ref: "fm-" + $props.widget.model
      }, null, 8, ["modelValue", "min", "max", "disabled", "step", "show-input", "range", "style"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "imgupload" ? (openBlock(), createBlock(_component_fm_upload, {
      key: 15,
      modelValue: $data.dataModel,
      "onUpdate:modelValue": _cache[15] || (_cache[15] = ($event) => $data.dataModel = $event),
      disabled: !$props.edit || $props.widget.options.disabled,
      readonly: $props.widget.options.readonly || $props.printRead,
      style: normalizeStyle({ "width": $props.isTable ? "100%" : $props.widget.options.width }),
      width: $props.widget.options.size.width,
      height: $props.widget.options.size.height,
      token: $props.widget.options.token,
      domain: $props.widget.options.domain,
      multiple: $props.widget.options.multiple,
      limit: $props.widget.options.limit,
      "is-qiniu": $props.widget.options.isQiniu,
      "is-delete": $props.widget.options.isDelete,
      min: $props.widget.options.min,
      "is-edit": $props.widget.options.isEdit,
      action: $props.widget.options.action,
      headers: $props.widget.options.headers || [],
      ref: "fm-" + $props.widget.model,
      withCredentials: $props.widget.options.withCredentials,
      "print-read": $props.printRead,
      onOnUploadSuccess: $options.handleOnUploadSuccess,
      onOnUploadError: $options.handleOnUploadError,
      onOnUploadRemove: $options.handleOnUploadRemove,
      onOnUploadProgress: $options.handleOnUploadProgress,
      "on-select": $options.handleOnUploadSelect
    }, null, 8, ["modelValue", "disabled", "readonly", "style", "width", "height", "token", "domain", "multiple", "limit", "is-qiniu", "is-delete", "min", "is-edit", "action", "headers", "withCredentials", "print-read", "onOnUploadSuccess", "onOnUploadError", "onOnUploadRemove", "onOnUploadProgress", "on-select"])) : createCommentVNode("", true),
    $props.widget.type == "editor" ? (openBlock(), createElementBlock(Fragment, { key: 16 }, [
      $props.printRead ? (openBlock(), createElementBlock("div", {
        key: 0,
        innerHTML: $data.dataModel,
        class: "ql-editor"
      }, null, 8, _hoisted_4$2)) : (openBlock(), createBlock(_component_Editor, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[16] || (_cache[16] = ($event) => $data.dataModel = $event),
        "custom-style": { width: $props.isTable ? "100%" : $props.widget.options.width, cursor: !$props.edit || $props.widget.options.disabled ? "no-drop" : "", backgroundColor: !$props.edit || $props.widget.options.disabled ? "#F5F7FA" : "" },
        toolbar: $props.widget.options.customToolbar,
        disabled: !$props.edit || $props.widget.options.disabled,
        ref: "fm-" + $props.widget.model
      }, null, 8, ["modelValue", "custom-style", "toolbar", "disabled"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "cascader" ? (openBlock(), createElementBlock(Fragment, { key: 17 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        $props.widget.options.remote ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createTextVNode(toDisplayString$1($props.widget.options.multiple ? $data.dataModel.map((dm) => $options.getCascaderText([...dm], $data.remoteOptions).join(" / ")).join("\u3001") : $options.getCascaderText([...$data.dataModel], $data.remoteOptions).join(" / ")), 1)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString$1($props.widget.options.multiple ? $data.dataModel.map((dm) => $options.getCascaderText([...dm], $props.widget.options.options).join(" / ")).join("\u3001") : $options.getCascaderText([...$data.dataModel], $props.widget.options.options).join(" / ")), 1)
        ], 64))
      ], 64)) : (openBlock(), createBlock(_component_el_cascader, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[17] || (_cache[17] = ($event) => $data.dataModel = $event),
        disabled: !$props.edit || $props.widget.options.disabled,
        clearable: $props.widget.options.clearable,
        placeholder: $props.widget.options.placeholder,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        options: $props.widget.options.remote ? $data.remoteOptions : $props.widget.options.options,
        onChange: $options.onCascaderChange,
        ref: "fm-" + $props.widget.model,
        onFocus: $options.handleOnFocus,
        onBlur: $options.handleOnBlur,
        props: $data.propsModel,
        "collapse-tags": "",
        filterable: $props.widget.options.filterable
      }, null, 8, ["modelValue", "disabled", "clearable", "placeholder", "style", "options", "onChange", "onFocus", "onBlur", "props", "filterable"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "treeselect" ? (openBlock(), createElementBlock(Fragment, { key: 18 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        $props.widget.options.remote ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createTextVNode(toDisplayString$1(typeof $data.dataModel == "object" ? $data.dataModel.map((dm) => $options.getTreeText(dm, $data.remoteOptions)).join("\u3001") : $options.getTreeText($data.dataModel, $data.remoteOptions)), 1)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString$1(typeof $data.dataModel == "object" ? $data.dataModel.map((dm) => $options.getTreeText(dm, $props.widget.options.options)).join("\u3001") : $options.getTreeText($data.dataModel, $props.widget.options.options)), 1)
        ], 64))
      ], 64)) : (openBlock(), createBlock(_component_el_tree_select, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[18] || (_cache[18] = ($event) => $data.dataModel = $event),
        disabled: !$props.edit || $props.widget.options.disabled,
        clearable: $props.widget.options.clearable,
        placeholder: $props.widget.options.placeholder,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        data: $props.widget.options.remote ? $data.remoteOptions : $props.widget.options.options,
        ref: "fm-" + $props.widget.model,
        onFocus: $options.handleOnFocus,
        onBlur: $options.handleOnBlur,
        multiple: $props.widget.options.multiple,
        "check-strictly": $props.widget.options.checkStrictly,
        filterable: $props.widget.options.filterable
      }, null, 8, ["modelValue", "disabled", "clearable", "placeholder", "style", "data", "onFocus", "onBlur", "multiple", "check-strictly", "filterable"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "text" ? (openBlock(), createElementBlock("span", {
      key: 19,
      ref: "fm-" + $props.widget.model
    }, toDisplayString$1($data.dataModel), 513)) : createCommentVNode("", true),
    $props.widget.type == "html" ? (openBlock(), createElementBlock("span", {
      key: 20,
      innerHTML: $data.dataModel,
      ref: "fm-" + $props.widget.model
    }, null, 8, _hoisted_5$2)) : createCommentVNode("", true),
    $props.widget.type == "table" ? (openBlock(), createBlock(_component_fm_form_table, {
      key: 21,
      value: $data.dataModel,
      columns: $props.widget.tableColumns,
      models: $data.dataModels,
      remote: $props.remote,
      blanks: $props.blanks,
      disableddata: !$props.edit || $props.widget.options.disabled || $props.printRead,
      rules: $props.rules,
      name: $props.widget.model,
      "remote-option": $props.remoteOption,
      ref: "fm-" + $props.widget.model,
      preview: $props.preview,
      platform: $props.platform,
      "data-source-value": $props.dataSourceValue,
      "event-function": $props.eventFunction,
      widget: $props.widget,
      "print-read": $props.printRead,
      "form-component": $props.formComponent,
      paging: $props.widget.options.paging,
      "page-size": $props.widget.options.pageSize
    }, createSlots({ _: 2 }, [
      renderList($props.blanks, (blank) => {
        return {
          name: blank.name,
          fn: withCtx((scope) => [
            renderSlot(_ctx.$slots, blank.name, {
              model: scope.model
            })
          ])
        };
      })
    ]), 1032, ["value", "columns", "models", "remote", "blanks", "disableddata", "rules", "name", "remote-option", "preview", "platform", "data-source-value", "event-function", "widget", "print-read", "form-component", "paging", "page-size"])) : createCommentVNode("", true),
    $props.widget.type == "fileupload" ? (openBlock(), createBlock(_component_fm_file_upload, {
      key: 22,
      modelValue: $data.dataModel,
      "onUpdate:modelValue": _cache[19] || (_cache[19] = ($event) => $data.dataModel = $event),
      disabled: !$props.edit || $props.widget.options.disabled,
      style: normalizeStyle({ "width": $props.isTable ? "100%" : $props.widget.options.width }),
      token: $props.widget.options.token,
      domain: $props.widget.options.domain,
      multiple: $props.widget.options.multiple,
      limit: $props.widget.options.limit,
      "is-qiniu": $props.widget.options.isQiniu,
      min: $props.widget.options.min,
      action: $props.widget.options.action,
      tip: $props.widget.options.tip,
      headers: $props.widget.options.headers || [],
      ref: "fm-" + $props.widget.model,
      withCredentials: $props.widget.options.withCredentials,
      "print-read": $props.printRead,
      onOnUploadSuccess: $options.handleOnUploadSuccess,
      onOnUploadError: $options.handleOnUploadError,
      onOnUploadRemove: $options.handleOnUploadRemove,
      onOnUploadProgress: $options.handleOnUploadProgress,
      "on-select": $options.handleOnUploadSelect
    }, null, 8, ["modelValue", "disabled", "style", "token", "domain", "multiple", "limit", "is-qiniu", "min", "action", "tip", "headers", "withCredentials", "print-read", "onOnUploadSuccess", "onOnUploadError", "onOnUploadRemove", "onOnUploadProgress", "on-select"])) : createCommentVNode("", true),
    $props.widget.type == "button" ? (openBlock(), createBlock(_component_el_button, {
      key: 23,
      disabled: !$props.edit || $props.widget.options.disabled,
      size: $props.widget.options.buttonSize,
      type: $props.widget.options.buttonType,
      plain: $props.widget.options.buttonPlain,
      round: $props.widget.options.buttonRound,
      circle: $props.widget.options.buttonCircle,
      style: normalizeStyle({ width: $props.widget.options.width, "vertical-align": "top" }),
      ref: "fm-" + $props.widget.model,
      onClick: $options.handleOnClick
    }, {
      default: withCtx(() => [
        createTextVNode(toDisplayString$1($props.widget.options.buttonName), 1)
      ]),
      _: 1
    }, 8, ["disabled", "size", "type", "plain", "round", "circle", "style", "onClick"])) : createCommentVNode("", true),
    $props.widget.type == "link" ? (openBlock(), createBlock(_component_el_link, {
      key: 24,
      disabled: !$props.edit || $props.widget.options.disabled,
      type: $props.widget.options.linkType,
      underline: $props.widget.options.underline,
      href: $props.widget.options.href,
      target: $props.widget.options.blank ? "_blank" : "_self",
      ref: "fm-" + $props.widget.model,
      onClick: $options.handleOnClick
    }, {
      default: withCtx(() => [
        createTextVNode(toDisplayString$1($props.widget.options.linkName), 1)
      ]),
      _: 1
    }, 8, ["disabled", "type", "underline", "href", "target", "onClick"])) : createCommentVNode("", true),
    $props.widget.type == "steps" ? (openBlock(), createElementBlock(Fragment, { key: 25 }, [
      ($props.widget.options.remote ? $data.remoteOptions && $data.remoteOptions.length > 0 : true) ? (openBlock(), createBlock(_component_el_steps, {
        key: 0,
        active: $data.dataModel,
        ref: "fm-" + $props.widget.model,
        space: $props.widget.options.space,
        direction: $props.widget.options.direction,
        "process-status": $props.widget.options.processStatus,
        "finish-status": $props.widget.options.finishStatus,
        "align-center": $props.widget.options.alignCenter,
        simple: $props.widget.options.simple,
        style: { "line-height": "normal" }
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList($props.widget.options.remote ? $data.remoteOptions : $props.widget.options.steps, (item2, index2) => {
            return openBlock(), createBlock(_component_el_step, {
              title: $props.widget.options.remote ? item2.value : item2.title,
              description: $props.widget.options.remote ? item2.label : item2.description,
              key: index2
            }, null, 8, ["title", "description"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["active", "space", "direction", "process-status", "finish-status", "align-center", "simple"])) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "transfer" ? (openBlock(), createElementBlock(Fragment, { key: 26 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        $props.widget.options.remote ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
          createTextVNode(toDisplayString$1($data.dataModel.map((dm) => {
            var _a2;
            return (_a2 = $data.remoteOptions.find((item2) => item2[$props.widget.options.props.key] == dm)) == null ? void 0 : _a2[$props.widget.options.props.label];
          }).join("\u3001")), 1)
        ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          createTextVNode(toDisplayString$1($data.dataModel.map((dm) => {
            var _a2;
            return (_a2 = $props.widget.options.data.find((item2) => item2[$data.propsTransfer.key] == dm)) == null ? void 0 : _a2[$data.propsTransfer.label];
          }).join("\u3001")), 1)
        ], 64))
      ], 64)) : (openBlock(), createBlock(_component_el_transfer, {
        key: 1,
        "model-value": $data.dataModel,
        disabled: !$props.edit || $props.widget.options.disabled,
        data: $props.widget.options.remote ? $data.remoteOptions : $props.widget.options.data,
        filterable: $props.widget.options.filterable,
        props: $props.widget.options.remote ? $props.widget.options.props : $data.propsTransfer,
        titles: $props.widget.options.titles,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        ref: "fm-" + $props.widget.model,
        onChange: $options.handleTransferChange
      }, null, 8, ["model-value", "disabled", "data", "filterable", "props", "titles", "style", "onChange"]))
    ], 64)) : createCommentVNode("", true),
    $props.widget.type == "user" ? (openBlock(), createBlock(_component_user_select, {
      key: 27,
      printRead: $props.printRead,
      limit: $props.widget.options.limit,
      modelValue: $data.dataModel,
      "onUpdate:modelValue": _cache[20] || (_cache[20] = ($event) => $data.dataModel = $event),
      disabled: !$props.edit || $props.widget.options.disabled,
      clearable: $props.widget.options.clearable,
      placeholder: $props.widget.options.placeholder,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width })
    }, null, 8, ["printRead", "limit", "modelValue", "disabled", "clearable", "placeholder", "style"])) : createCommentVNode("", true),
    $props.widget.type == "office" ? (openBlock(), createBlock(_component_OfficeSelect, {
      key: 28,
      printRead: $props.printRead,
      disabled: !$props.edit || $props.widget.options.disabled,
      clearable: $props.widget.options.clearable,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
      placeholder: $props.widget.options.placeholder,
      modelValue: $data.dataModel,
      "onUpdate:modelValue": _cache[21] || (_cache[21] = ($event) => $data.dataModel = $event)
    }, null, 8, ["printRead", "disabled", "clearable", "style", "placeholder", "modelValue"])) : createCommentVNode("", true),
    $props.widget.type == "area" ? (openBlock(), createBlock(_component_Area, {
      key: 29,
      printRead: $props.printRead,
      disabled: !$props.edit || $props.widget.options.disabled,
      clearable: $props.widget.options.clearable,
      style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
      placeholder: $props.widget.options.placeholder,
      modelValue: $data.dataModel,
      "onUpdate:modelValue": _cache[22] || (_cache[22] = ($event) => $data.dataModel = $event)
    }, null, 8, ["printRead", "disabled", "clearable", "style", "placeholder", "modelValue"])) : createCommentVNode("", true),
    $props.widget.type == "dict" ? (openBlock(), createElementBlock(Fragment, { key: 30 }, [
      $props.printRead ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        createTextVNode(toDisplayString$1(typeof $data.dataModel == "object" ? $data.dataModel.map((dm) => _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == dm) && _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == dm).label).join("\u3001") : _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == $data.dataModel) && _ctx.$dictUtils.getDictList($props.widget.options.dictType).find((item2) => item2.value == $data.dataModel).label), 1)
      ], 64)) : (openBlock(), createBlock(_component_el_select, {
        key: 1,
        modelValue: $data.dataModel,
        "onUpdate:modelValue": _cache[23] || (_cache[23] = ($event) => $data.dataModel = $event),
        disabled: !$props.edit || $props.widget.options.disabled,
        multiple: $props.widget.options.multiple,
        clearable: $props.widget.options.clearable,
        placeholder: $props.widget.options.placeholder,
        style: normalizeStyle({ width: $props.isTable ? "100%" : $props.widget.options.width }),
        filterable: $props.widget.options.filterable
      }, {
        default: withCtx(() => [
          (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.$dictUtils.getDictList($props.widget.options.dictType), (item2) => {
            return openBlock(), createBlock(_component_el_option, {
              key: item2.value,
              label: item2.label,
              value: item2.value
            }, null, 8, ["label", "value"]);
          }), 128))
        ]),
        _: 1
      }, 8, ["modelValue", "disabled", "multiple", "clearable", "placeholder", "style", "filterable"]))
    ], 64)) : createCommentVNode("", true)
  ], 2);
}
var GenerateElementItem = /* @__PURE__ */ _export_sfc(_sfc_main$a, [["render", _sfc_render$8]]);
var GenerateElementItem$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": GenerateElementItem
}, Symbol.toStringTag, { value: "Module" }));
const _sfc_main$9 = {
  components: {
    GenerateElementItem
  },
  props: ["widget", "models", "rules", "remote", "blanks", "display", "edit", "remoteOption", "platform", "preview", "containerKey", "dataSourceValue", "eventFunction", "printRead", "formComponent"],
  data() {
    return {
      dataModel: this.models[this.widget.model],
      dataModels: this.models
    };
  },
  methods: {},
  watch: {
    dataModel: {
      deep: true,
      handler(val) {
        EventBus.$emit("on-change-" + this.containerKey, val, this.widget.model, this.containerKey);
        if (this.widget.events && this.widget.events.onChange) {
          let funcKey = this.widget.events.onChange;
          this.eventFunction[funcKey]({ value: val, field: this.widget.model });
        }
      }
    },
    models: {
      deep: true,
      handler(val) {
        this.dataModels = val;
        this.dataModel = val[this.widget.model];
      }
    }
  }
};
const _hoisted_1$3 = ["data-id"];
function _sfc_render$7(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_generate_element_item = resolveComponent("generate-element-item");
  const _component_el_form_item = resolveComponent("el-form-item");
  const _component_el_divider = resolveComponent("el-divider");
  const _component_el_alert = resolveComponent("el-alert");
  return $props.widget.key ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: "fm-form-item",
    "data-id": $props.widget.model
  }, [
    $props.widget.type != "divider" && $props.widget.type != "alert" && $props.display[$props.widget.model] ? (openBlock(), createBlock(_component_el_form_item, {
      prop: $props.widget.model,
      class: normalizeClass({
        [$props.widget.options && $props.widget.options.customClass]: $props.widget.options && $props.widget.options.customClass ? true : false,
        "no-label-form-item": $props.widget.options.isLabelWidth && $props.widget.options.labelWidth == 0
      }),
      label: $props.widget.options.hideLabel ? "" : $props.widget.name,
      "label-width": $props.widget.options.hideLabel ? "0px" : $props.widget.options.isLabelWidth ? $props.widget.options.labelWidth + "px" : "",
      key: $props.widget.key,
      required: $props.widget.options.required
    }, {
      default: withCtx(() => [
        (openBlock(), createBlock(_component_generate_element_item, {
          blanks: $props.blanks,
          "is-table": false,
          widget: $props.widget,
          models: $data.dataModels,
          remote: $props.remote,
          edit: $props.edit,
          "remote-option": $props.remoteOption,
          key: $props.widget.key,
          rules: $props.rules,
          modelValue: $data.dataModel,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.dataModel = $event),
          platform: $props.platform,
          preview: $props.preview,
          "data-source-value": $props.dataSourceValue,
          "event-function": $props.eventFunction,
          "print-read": $props.printRead,
          "form-component": $props.formComponent
        }, createSlots({ _: 2 }, [
          renderList($props.blanks, (blank) => {
            return {
              name: blank.name,
              fn: withCtx((scope) => [
                renderSlot(_ctx.$slots, blank.name, {
                  model: scope.model
                })
              ])
            };
          })
        ]), 1032, ["blanks", "widget", "models", "remote", "edit", "remote-option", "rules", "modelValue", "platform", "preview", "data-source-value", "event-function", "print-read", "form-component"]))
      ]),
      _: 3
    }, 8, ["prop", "class", "label", "label-width", "required"])) : createCommentVNode("", true),
    $props.widget.type == "divider" && $props.display[$props.widget.model] ? (openBlock(), createBlock(_component_el_form_item, {
      key: 1,
      "label-width": "0"
    }, {
      default: withCtx(() => [
        createVNode(_component_el_divider, {
          "content-position": $props.widget.options.contentPosition,
          style: { "margin-bottom": "10px" }
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString$1($props.widget.name), 1)
          ]),
          _: 1
        }, 8, ["content-position"])
      ]),
      _: 1
    })) : createCommentVNode("", true),
    $props.widget.type == "alert" && $props.display[$props.widget.model] ? (openBlock(), createBlock(_component_el_form_item, {
      key: 2,
      "label-width": "0"
    }, {
      default: withCtx(() => [
        createVNode(_component_el_alert, {
          title: $props.widget.options.title,
          type: $props.widget.options.type,
          description: $props.widget.options.description,
          closable: $props.widget.options.closable,
          center: $props.widget.options.center,
          "show-icon": $props.widget.options.showIcon,
          effect: $props.widget.options.effect,
          style: normalizeStyle({ width: $props.widget.options.width }),
          onClose: _cache[1] || (_cache[1] = ($event) => $props.display[$props.widget.model] = false)
        }, null, 8, ["title", "type", "description", "closable", "center", "show-icon", "effect", "style"])
      ]),
      _: 1
    })) : createCommentVNode("", true)
  ], 8, _hoisted_1$3)) : createCommentVNode("", true);
}
var GenerateFormItem = /* @__PURE__ */ _export_sfc(_sfc_main$9, [["render", _sfc_render$7]]);
var GenerateInline_vue_vue_type_style_index_0_lang = "";
const _sfc_main$8 = {
  name: "generate-inline",
  components: {
    GenerateFormItem
  },
  props: ["element", "model", "rules", "remote", "blanks", "display", "edit", "remoteOption", "platform", "preview", "containerKey", "dataSourceValue", "eventFunction", "printRead", "formComponent"],
  data() {
    return {
      dataModels: this.model
    };
  },
  methods: {},
  watch: {
    model: {
      deep: true,
      handler(val) {
        this.dataModels = this.model;
      }
    }
  }
};
function _sfc_render$6(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_generate_form_item = resolveComponent("generate-form-item");
  return $props.display[$props.element.model] ? (openBlock(), createElementBlock("div", {
    key: 0,
    class: normalizeClass(["fm-inline-container", {
      [$props.element.options && $props.element.options.customClass]: $props.element.options && $props.element.options.customClass ? true : false
    }])
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.list, (item2) => {
      return openBlock(), createBlock(_component_generate_form_item, {
        key: item2.key,
        models: $data.dataModels,
        rules: $props.rules,
        widget: item2,
        remote: $props.remote,
        blanks: $props.blanks,
        display: $props.display,
        edit: $props.edit,
        "remote-option": $props.remoteOption,
        platform: $props.platform,
        preview: $props.preview,
        "container-key": $props.containerKey,
        "data-source-value": $props.dataSourceValue,
        "event-function": $props.eventFunction,
        "print-read": $props.printRead,
        "form-component": $props.formComponent,
        style: normalizeStyle({ "margin-right": $props.element.options.spaceSize + "px" })
      }, createSlots({ _: 2 }, [
        renderList($props.blanks, (blank) => {
          return {
            name: blank.name,
            fn: withCtx((scope) => [
              renderSlot(_ctx.$slots, blank.name, {
                model: scope.model
              })
            ])
          };
        })
      ]), 1032, ["models", "rules", "widget", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component", "style"]);
    }), 128))
  ], 2)) : createCommentVNode("", true);
}
var GenerateInline = /* @__PURE__ */ _export_sfc(_sfc_main$8, [["render", _sfc_render$6]]);
const _sfc_main$7 = {
  name: "generate-tab-item",
  components: {
    GenerateFormItem,
    GenerateInline,
    GenerateColItem: defineAsyncComponent(() => Promise.resolve().then(function() {
      return GenerateColItem$1;
    })),
    GenerateReport: defineAsyncComponent(() => Promise.resolve().then(function() {
      return GenerateReport$1;
    }))
  },
  props: ["element", "model", "rules", "remote", "blanks", "display", "edit", "remoteOption", "platform", "preview", "containerKey", "dataSourceValue", "eventFunction", "printRead", "formComponent"],
  data() {
    return {
      dataModels: this.model,
      tabActive: this.element.tabs.length ? this.element.tabs[0].name : ""
    };
  },
  methods: {},
  watch: {
    model: {
      deep: true,
      handler(val) {
        this.dataModels = this.model;
      }
    }
  }
};
function _sfc_render$5(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_generate_col_item = resolveComponent("generate-col-item");
  const _component_generate_report = resolveComponent("generate-report");
  const _component_generate_inline = resolveComponent("generate-inline");
  const _component_generate_tab_item = resolveComponent("generate-tab-item", true);
  const _component_generate_form_item = resolveComponent("generate-form-item");
  const _component_el_tab_pane = resolveComponent("el-tab-pane");
  const _component_el_tabs = resolveComponent("el-tabs");
  return $props.display[$props.element.model] ? (openBlock(), createBlock(_component_el_tabs, {
    key: 0,
    modelValue: $data.tabActive,
    "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => $data.tabActive = $event),
    type: $props.element.options.type,
    "tab-position": $props.element.options.tabPosition,
    class: normalizeClass({
      [$props.element.options.customClass]: $props.element.options.customClass ? true : false
    }),
    style: { "margin-bottom": "18px" }
  }, {
    default: withCtx(() => [
      (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.tabs, (item2) => {
        return openBlock(), createBlock(_component_el_tab_pane, {
          key: item2.name,
          label: item2.label,
          name: item2.name
        }, {
          default: withCtx(() => [
            (openBlock(true), createElementBlock(Fragment, null, renderList(item2.list, (tab) => {
              return openBlock(), createElementBlock(Fragment, {
                key: tab.key
              }, [
                tab.type == "grid" ? (openBlock(), createBlock(_component_generate_col_item, {
                  key: 0,
                  model: $data.dataModels,
                  rules: $props.rules,
                  element: tab,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : tab.type == "report" ? (openBlock(), createBlock(_component_generate_report, {
                  key: 1,
                  model: $data.dataModels,
                  rules: $props.rules,
                  element: tab,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : tab.type == "inline" ? (openBlock(), createBlock(_component_generate_inline, {
                  key: 2,
                  model: $data.dataModels,
                  rules: $props.rules,
                  element: tab,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : tab.type == "tabs" ? (openBlock(), createBlock(_component_generate_tab_item, {
                  key: 3,
                  model: $data.dataModels,
                  rules: $props.rules,
                  element: tab,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : (openBlock(), createBlock(_component_generate_form_item, {
                  key: 4,
                  models: $data.dataModels,
                  rules: $props.rules,
                  widget: tab,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["models", "rules", "widget", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"]))
              ], 64);
            }), 128))
          ]),
          _: 2
        }, 1032, ["label", "name"]);
      }), 128))
    ]),
    _: 3
  }, 8, ["modelValue", "type", "tab-position", "class"])) : createCommentVNode("", true);
}
var GenerateTabItem = /* @__PURE__ */ _export_sfc(_sfc_main$7, [["render", _sfc_render$5]]);
var GenerateTabItem$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": GenerateTabItem
}, Symbol.toStringTag, { value: "Module" }));
const _sfc_main$6 = {
  name: "generate-col-item",
  components: {
    GenerateFormItem,
    GenerateTabItem,
    GenerateInline,
    GenerateReport: defineAsyncComponent(() => Promise.resolve().then(function() {
      return GenerateReport$1;
    }))
  },
  props: ["element", "model", "rules", "remote", "blanks", "display", "edit", "remoteOption", "platform", "preview", "containerKey", "dataSourceValue", "eventFunction", "printRead", "formComponent"],
  data() {
    return {
      dataModels: this.model
    };
  },
  methods: {
    getColXS(options) {
      if (this.preview) {
        if (this.platform == "pc") {
          return options.md;
        }
        if (this.platform == "pad") {
          return options.sm;
        }
        if (this.platform == "mobile") {
          return options.xs;
        }
      } else {
        return options.xs;
      }
    },
    getColSM(options) {
      if (this.preview) {
        if (this.platform == "pc") {
          return options.md;
        }
        if (this.platform == "pad") {
          return options.sm;
        }
        if (this.platform == "mobile") {
          return options.xs;
        }
      } else {
        return options.sm;
      }
    },
    getColMD(options) {
      if (this.preview) {
        if (this.platform == "pc") {
          return options.md;
        }
        if (this.platform == "pad") {
          return options.sm;
        }
        if (this.platform == "mobile") {
          return options.xs;
        }
      } else {
        return options.md;
      }
    }
  },
  watch: {
    model: {
      deep: true,
      handler(val) {
        this.dataModels = val;
      }
    }
  }
};
function _sfc_render$4(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_generate_col_item = resolveComponent("generate-col-item", true);
  const _component_generate_tab_item = resolveComponent("generate-tab-item");
  const _component_generate_report = resolveComponent("generate-report");
  const _component_generate_inline = resolveComponent("generate-inline");
  const _component_generate_form_item = resolveComponent("generate-form-item");
  const _component_el_col = resolveComponent("el-col");
  const _component_el_row = resolveComponent("el-row");
  return $props.display[$props.element.model] ? (openBlock(), createBlock(_component_el_row, {
    key: 0,
    class: normalizeClass({
      [$props.element.options && $props.element.options.customClass]: $props.element.options && $props.element.options.customClass ? true : false
    }),
    type: $props.element.options.flex ? "flex" : "",
    gutter: $props.element.options.gutter || 0,
    justify: $props.element.options.justify,
    align: $props.element.options.align
  }, {
    default: withCtx(() => [
      (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.columns, (item2, index2) => {
        return openBlock(), createBlock(_component_el_col, {
          key: index2,
          span: item2.options ? $options.getColMD(item2.options) : item2.span,
          xs: item2.options ? $options.getColXS(item2.options) : item2.span,
          sm: item2.options ? $options.getColSM(item2.options) : item2.span,
          md: item2.options ? $options.getColMD(item2.options) : item2.span,
          lg: item2.options ? $options.getColMD(item2.options) : item2.span,
          xl: item2.options ? $options.getColMD(item2.options) : item2.span,
          offset: item2.options ? item2.options.offset : 0,
          push: item2.options ? item2.options.push : 0,
          pull: item2.options ? item2.options.pull : 0,
          class: normalizeClass({
            [item2.options && item2.options.customClass]: item2.options && item2.options.customClass ? true : false
          })
        }, {
          default: withCtx(() => [
            (openBlock(true), createElementBlock(Fragment, null, renderList(item2.list, (col) => {
              return openBlock(), createElementBlock(Fragment, null, [
                col.type == "grid" ? (openBlock(), createBlock(_component_generate_col_item, {
                  key: col.key,
                  model: $data.dataModels,
                  rules: $props.rules,
                  element: col,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : col.type == "tabs" ? (openBlock(), createBlock(_component_generate_tab_item, {
                  key: col.key,
                  model: $data.dataModels,
                  rules: $props.rules,
                  element: col,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : col.type == "report" ? (openBlock(), createBlock(_component_generate_report, {
                  key: col.key,
                  model: $data.dataModels,
                  rules: $props.rules,
                  element: col,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : col.type == "inline" ? (openBlock(), createBlock(_component_generate_inline, {
                  key: col.key,
                  model: $data.dataModels,
                  rules: $props.rules,
                  element: col,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : (openBlock(), createBlock(_component_generate_form_item, {
                  key: col.key,
                  models: $data.dataModels,
                  rules: $props.rules,
                  widget: col,
                  remote: $props.remote,
                  blanks: $props.blanks,
                  display: $props.display,
                  edit: $props.edit,
                  "remote-option": $props.remoteOption,
                  platform: $props.platform,
                  preview: $props.preview,
                  "container-key": $props.containerKey,
                  "data-source-value": $props.dataSourceValue,
                  "event-function": $props.eventFunction,
                  "print-read": $props.printRead,
                  "form-component": $props.formComponent
                }, createSlots({ _: 2 }, [
                  renderList($props.blanks, (blank) => {
                    return {
                      name: blank.name,
                      fn: withCtx((scope) => [
                        renderSlot(_ctx.$slots, blank.name, {
                          model: scope.model
                        })
                      ])
                    };
                  })
                ]), 1032, ["models", "rules", "widget", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"]))
              ], 64);
            }), 256))
          ]),
          _: 2
        }, 1032, ["span", "xs", "sm", "md", "lg", "xl", "offset", "push", "pull", "class"]);
      }), 128))
    ]),
    _: 3
  }, 8, ["class", "type", "gutter", "justify", "align"])) : createCommentVNode("", true);
}
var GenerateColItem = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["render", _sfc_render$4]]);
var GenerateColItem$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": GenerateColItem
}, Symbol.toStringTag, { value: "Module" }));
const _sfc_main$5 = {
  name: "generate-report",
  components: {
    GenerateFormItem,
    GenerateInline,
    GenerateColItem: defineAsyncComponent(() => Promise.resolve().then(function() {
      return GenerateColItem$1;
    })),
    GenerateTabItem: defineAsyncComponent(() => Promise.resolve().then(function() {
      return GenerateTabItem$1;
    }))
  },
  props: ["element", "model", "rules", "remote", "blanks", "display", "edit", "remoteOption", "platform", "preview", "containerKey", "dataSourceValue", "eventFunction", "printRead", "formComponent"],
  data() {
    return {
      dataModels: this.model
    };
  },
  methods: {},
  watch: {
    model: {
      deep: true,
      handler(val) {
        this.dataModels = this.model;
      }
    }
  }
};
const _hoisted_1$2 = ["colspan", "rowspan"];
function _sfc_render$3(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_generate_col_item = resolveComponent("generate-col-item");
  const _component_generate_report = resolveComponent("generate-report", true);
  const _component_generate_inline = resolveComponent("generate-inline");
  const _component_generate_tab_item = resolveComponent("generate-tab-item");
  const _component_generate_form_item = resolveComponent("generate-form-item");
  return $props.display[$props.element.model] ? (openBlock(), createElementBlock("table", {
    key: 0,
    class: normalizeClass(["fm-report-table__table", {
      [$props.element.options && $props.element.options.customClass]: $props.element.options && $props.element.options.customClass ? true : false
    }]),
    style: normalizeStyle({
      "border-top-width": $props.element.options.borderWidth + "px",
      "border-top-color": $props.element.options.borderColor,
      "border-left-width": $props.element.options.borderWidth + "px",
      "border-left-color": $props.element.options.borderColor,
      "width": $props.element.options.width || "100%"
    })
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList($props.element.rows, (row, rowIndex) => {
      return openBlock(), createElementBlock("tr", { key: rowIndex }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(row.columns, (column, i2) => {
          return openBlock(), createElementBlock(Fragment, {
            key: rowIndex + "-" + i2
          }, [
            !column.options.invisible ? (openBlock(), createElementBlock("td", {
              key: 0,
              style: normalizeStyle({
                "border-right-width": $props.element.options.borderWidth + "px",
                "border-right-color": $props.element.options.borderColor,
                "border-bottom-width": $props.element.options.borderWidth + "px",
                "border-bottom-color": $props.element.options.borderColor,
                "width": column.options.width,
                "height": column.options.height
              }),
              colspan: column.options.colspan,
              rowspan: column.options.rowspan,
              class: normalizeClass(["fm-report-table__td", {
                [column.options.customClass]: column.options.customClass ? true : false
              }]),
              valign: "top"
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(column.list, (columnElement) => {
                return openBlock(), createElementBlock(Fragment, {
                  key: columnElement.key
                }, [
                  columnElement.type == "grid" ? (openBlock(), createBlock(_component_generate_col_item, {
                    key: 0,
                    model: $data.dataModels,
                    rules: $props.rules,
                    element: columnElement,
                    remote: $props.remote,
                    blanks: $props.blanks,
                    display: $props.display,
                    edit: $props.edit,
                    "remote-option": $props.remoteOption,
                    platform: $props.platform,
                    preview: $props.preview,
                    "container-key": $props.containerKey,
                    "data-source-value": $props.dataSourceValue,
                    "event-function": $props.eventFunction,
                    "print-read": $props.printRead,
                    "form-component": $props.formComponent
                  }, createSlots({ _: 2 }, [
                    renderList($props.blanks, (blank) => {
                      return {
                        name: blank.name,
                        fn: withCtx((scope) => [
                          renderSlot(_ctx.$slots, blank.name, {
                            model: scope.model
                          })
                        ])
                      };
                    })
                  ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : columnElement.type == "report" ? (openBlock(), createBlock(_component_generate_report, {
                    key: 1,
                    model: $data.dataModels,
                    rules: $props.rules,
                    element: columnElement,
                    remote: $props.remote,
                    blanks: $props.blanks,
                    display: $props.display,
                    edit: $props.edit,
                    "remote-option": $props.remoteOption,
                    platform: $props.platform,
                    preview: $props.preview,
                    "container-key": $props.containerKey,
                    "data-source-value": $props.dataSourceValue,
                    "event-function": $props.eventFunction,
                    "print-read": $props.printRead,
                    "form-component": $props.formComponent
                  }, createSlots({ _: 2 }, [
                    renderList($props.blanks, (blank) => {
                      return {
                        name: blank.name,
                        fn: withCtx((scope) => [
                          renderSlot(_ctx.$slots, blank.name, {
                            model: scope.model
                          })
                        ])
                      };
                    })
                  ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : columnElement.type == "inline" ? (openBlock(), createBlock(_component_generate_inline, {
                    key: 2,
                    model: $data.dataModels,
                    rules: $props.rules,
                    element: columnElement,
                    remote: $props.remote,
                    blanks: $props.blanks,
                    display: $props.display,
                    edit: $props.edit,
                    "remote-option": $props.remoteOption,
                    platform: $props.platform,
                    preview: $props.preview,
                    "container-key": $props.containerKey,
                    "data-source-value": $props.dataSourceValue,
                    "event-function": $props.eventFunction,
                    "print-read": $props.printRead,
                    "form-component": $props.formComponent
                  }, createSlots({ _: 2 }, [
                    renderList($props.blanks, (blank) => {
                      return {
                        name: blank.name,
                        fn: withCtx((scope) => [
                          renderSlot(_ctx.$slots, blank.name, {
                            model: scope.model
                          })
                        ])
                      };
                    })
                  ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : columnElement.type == "tabs" ? (openBlock(), createBlock(_component_generate_tab_item, {
                    key: 3,
                    model: $data.dataModels,
                    rules: $props.rules,
                    element: columnElement,
                    remote: $props.remote,
                    blanks: $props.blanks,
                    display: $props.display,
                    edit: $props.edit,
                    "remote-option": $props.remoteOption,
                    platform: $props.platform,
                    preview: $props.preview,
                    "container-key": $props.containerKey,
                    "data-source-value": $props.dataSourceValue,
                    "event-function": $props.eventFunction,
                    "print-read": $props.printRead,
                    "form-component": $props.formComponent
                  }, createSlots({ _: 2 }, [
                    renderList($props.blanks, (blank) => {
                      return {
                        name: blank.name,
                        fn: withCtx((scope) => [
                          renderSlot(_ctx.$slots, blank.name, {
                            model: scope.model
                          })
                        ])
                      };
                    })
                  ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : (openBlock(), createBlock(_component_generate_form_item, {
                    key: 4,
                    models: $data.dataModels,
                    rules: $props.rules,
                    widget: columnElement,
                    remote: $props.remote,
                    blanks: $props.blanks,
                    display: $props.display,
                    edit: $props.edit,
                    "remote-option": $props.remoteOption,
                    platform: $props.platform,
                    preview: $props.preview,
                    "container-key": $props.containerKey,
                    "data-source-value": $props.dataSourceValue,
                    "event-function": $props.eventFunction,
                    "print-read": $props.printRead,
                    "form-component": $props.formComponent
                  }, createSlots({ _: 2 }, [
                    renderList($props.blanks, (blank) => {
                      return {
                        name: blank.name,
                        fn: withCtx((scope) => [
                          renderSlot(_ctx.$slots, blank.name, {
                            model: scope.model
                          })
                        ])
                      };
                    })
                  ]), 1032, ["models", "rules", "widget", "remote", "blanks", "display", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"]))
                ], 64);
              }), 128))
            ], 14, _hoisted_1$2)) : createCommentVNode("", true)
          ], 64);
        }), 128))
      ]);
    }), 128))
  ], 6)) : createCommentVNode("", true);
}
var GenerateReport = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["render", _sfc_render$3]]);
var GenerateReport$1 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  "default": GenerateReport
}, Symbol.toStringTag, { value: "Module" }));
//! moment.js
//! version : 2.29.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
var hookCallback;
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray(input) {
  return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
}
function isObject(input) {
  return input != null && Object.prototype.toString.call(input) === "[object Object]";
}
function hasOwnProp(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k;
    for (k in obj) {
      if (hasOwnProp(obj, k)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined(input) {
  return input === void 0;
}
function isNumber(input) {
  return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
}
function isDate(input) {
  return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
}
function map(arr, fn) {
  var res = [], i2, arrLen = arr.length;
  for (i2 = 0; i2 < arrLen; ++i2) {
    res.push(fn(arr[i2], i2));
  }
  return res;
}
function extend(a, b) {
  for (var i2 in b) {
    if (hasOwnProp(b, i2)) {
      a[i2] = b[i2];
    }
  }
  if (hasOwnProp(b, "toString")) {
    a.toString = b.toString;
  }
  if (hasOwnProp(b, "valueOf")) {
    a.valueOf = b.valueOf;
  }
  return a;
}
function createUTC(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m) {
  if (m._pf == null) {
    m._pf = defaultParsingFlags();
  }
  return m._pf;
}
var some;
if (Array.prototype.some) {
  some = Array.prototype.some;
} else {
  some = function(fun) {
    var t = Object(this), len = t.length >>> 0, i2;
    for (i2 = 0; i2 < len; i2++) {
      if (i2 in t && fun.call(this, t[i2], i2, t)) {
        return true;
      }
    }
    return false;
  };
}
function isValid(m) {
  if (m._isValid == null) {
    var flags = getParsingFlags(m), parsedParts = some.call(flags.parsedDateParts, function(i2) {
      return i2 != null;
    }), isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
    if (Object.isFrozen == null || !Object.isFrozen(m)) {
      m._isValid = isNowValid;
    } else {
      return isNowValid;
    }
  }
  return m._isValid;
}
function createInvalid(flags) {
  var m = createUTC(NaN);
  if (flags != null) {
    extend(getParsingFlags(m), flags);
  } else {
    getParsingFlags(m).userInvalidated = true;
  }
  return m;
}
var momentProperties = hooks.momentProperties = [], updateInProgress = false;
function copyConfig(to2, from2) {
  var i2, prop, val, momentPropertiesLen = momentProperties.length;
  if (!isUndefined(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentPropertiesLen > 0) {
    for (i2 = 0; i2 < momentPropertiesLen; i2++) {
      prop = momentProperties[i2];
      val = from2[prop];
      if (!isUndefined(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config) {
  copyConfig(this, config);
  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
    console.warn("Deprecation warning: " + msg);
  }
}
function deprecate(msg, fn) {
  var firstTime = true;
  return extend(function() {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [], arg, i2, key, argLen = arguments.length;
      for (i2 = 0; i2 < argLen; i2++) {
        arg = "";
        if (typeof arguments[i2] === "object") {
          arg += "\n[" + i2 + "] ";
          for (key in arguments[0]) {
            if (hasOwnProp(arguments[0], key)) {
              arg += key + ": " + arguments[0][key] + ", ";
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i2];
        }
        args.push(arg);
      }
      warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
      firstTime = false;
    }
    return fn.apply(this, arguments);
  }, fn);
}
var deprecations = {};
function deprecateSimple(name, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name, msg);
  }
  if (!deprecations[name]) {
    warn(msg);
    deprecations[name] = true;
  }
}
hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;
function isFunction(input) {
  return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
}
function set(config) {
  var prop, i2;
  for (i2 in config) {
    if (hasOwnProp(config, i2)) {
      prop = config[i2];
      if (isFunction(prop)) {
        this[i2] = prop;
      } else {
        this["_" + i2] = prop;
      }
    }
  }
  this._config = config;
  this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend({}, parentConfig), prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
        res[prop] = {};
        extend(res[prop], parentConfig[prop]);
        extend(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
      res[prop] = extend({}, res[prop]);
    }
  }
  return res;
}
function Locale(config) {
  if (config != null) {
    this.set(config);
  }
}
var keys;
if (Object.keys) {
  keys = Object.keys;
} else {
  keys = function(obj) {
    var i2, res = [];
    for (i2 in obj) {
      if (hasOwnProp(obj, i2)) {
        res.push(i2);
      }
    }
    return res;
  };
}
var defaultCalendar = {
  sameDay: "[Today at] LT",
  nextDay: "[Tomorrow at] LT",
  nextWeek: "dddd [at] LT",
  lastDay: "[Yesterday at] LT",
  lastWeek: "[Last] dddd [at] LT",
  sameElse: "L"
};
function calendar(key, mom, now2) {
  var output = this._calendar[key] || this._calendar["sameElse"];
  return isFunction(output) ? output.call(mom, now2) : output;
}
function zeroFill(number2, targetLength, forceSign) {
  var absNumber = "" + Math.abs(number2), zerosToFill = targetLength - absNumber.length, sign2 = number2 >= 0;
  return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === "string") {
    func = function() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function() {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function() {
      return this.localeData().ordinal(func.apply(this, arguments), token2);
    };
  }
}
function removeFormattingTokens(input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|\]$/g, "");
  }
  return input.replace(/\\/g, "");
}
function makeFormatFunction(format2) {
  var array = format2.match(formattingTokens), i2, length;
  for (i2 = 0, length = array.length; i2 < length; i2++) {
    if (formatTokenFunctions[array[i2]]) {
      array[i2] = formatTokenFunctions[array[i2]];
    } else {
      array[i2] = removeFormattingTokens(array[i2]);
    }
  }
  return function(mom) {
    var output = "", i3;
    for (i3 = 0; i3 < length; i3++) {
      output += isFunction(array[i3]) ? array[i3].call(mom, format2) : array[i3];
    }
    return output;
  };
}
function formatMoment(m, format2) {
  if (!m.isValid()) {
    return m.localeData().invalidDate();
  }
  format2 = expandFormat(format2, m.localeData());
  formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
  return formatFunctions[format2](m);
}
function expandFormat(format2, locale2) {
  var i2 = 5;
  function replaceLongDateFormatTokens(input) {
    return locale2.longDateFormat(input) || input;
  }
  localFormattingTokens.lastIndex = 0;
  while (i2 >= 0 && localFormattingTokens.test(format2)) {
    format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
    localFormattingTokens.lastIndex = 0;
    i2 -= 1;
  }
  return format2;
}
var defaultLongDateFormat = {
  LTS: "h:mm:ss A",
  LT: "h:mm A",
  L: "MM/DD/YYYY",
  LL: "MMMM D, YYYY",
  LLL: "MMMM D, YYYY h:mm A",
  LLLL: "dddd, MMMM D, YYYY h:mm A"
};
function longDateFormat(key) {
  var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
  if (format2 || !formatUpper) {
    return format2;
  }
  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
    if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
      return tok.slice(1);
    }
    return tok;
  }).join("");
  return this._longDateFormat[key];
}
var defaultInvalidDate = "Invalid date";
function invalidDate() {
  return this._invalidDate;
}
var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
function ordinal(number2) {
  return this._ordinal.replace("%d", number2);
}
var defaultRelativeTime = {
  future: "in %s",
  past: "%s ago",
  s: "a few seconds",
  ss: "%d seconds",
  m: "a minute",
  mm: "%d minutes",
  h: "an hour",
  hh: "%d hours",
  d: "a day",
  dd: "%d days",
  w: "a week",
  ww: "%d weeks",
  M: "a month",
  MM: "%d months",
  y: "a year",
  yy: "%d years"
};
function relativeTime(number2, withoutSuffix, string, isFuture) {
  var output = this._relativeTime[string];
  return isFunction(output) ? output(number2, withoutSuffix, string, isFuture) : output.replace(/%d/i, number2);
}
function pastFuture(diff2, output) {
  var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
  return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
}
var aliases = {};
function addUnitAlias(unit, shorthand) {
  var lowerCase = unit.toLowerCase();
  aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
}
function normalizeUnits(units) {
  return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {}, normalizedProp, prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
var priorities = {};
function addUnitPriority(unit, priority) {
  priorities[unit] = priority;
}
function getPrioritizedUnits(unitsObj) {
  var units = [], u;
  for (u in unitsObj) {
    if (hasOwnProp(unitsObj, u)) {
      units.push({ unit: u, priority: priorities[u] });
    }
  }
  units.sort(function(a, b) {
    return a.priority - b.priority;
  });
  return units;
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function absFloor(number2) {
  if (number2 < 0) {
    return Math.ceil(number2) || 0;
  } else {
    return Math.floor(number2);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion, value = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value = absFloor(coercedNumber);
  }
  return value;
}
function makeGetSet(unit, keepTime) {
  return function(value) {
    if (value != null) {
      set$1(this, unit, value);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get(this, unit);
    }
  };
}
function get(mom, unit) {
  return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
}
function set$1(mom, unit, value) {
  if (mom.isValid() && !isNaN(value)) {
    if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
      value = toInt(value);
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
    } else {
      mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
    }
  }
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value) {
  if (typeof units === "object") {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units), i2, prioritizedLen = prioritized.length;
    for (i2 = 0; i2 < prioritizedLen; i2++) {
      this[prioritized[i2].unit](units[prioritized[i2].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units](value);
    }
  }
  return this;
}
var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
regexes = {};
function addRegexToken(token2, regex2, strictRegex) {
  regexes[token2] = isFunction(regex2) ? regex2 : function(isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex2;
  };
}
function getParseRegexForToken(token2, config) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config._strict, config._locale);
}
function unescapeFormat(s) {
  return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
    return p1 || p2 || p3 || p4;
  }));
}
function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
var tokens = {};
function addParseToken(token2, callback) {
  var i2, func = callback, tokenLen;
  if (typeof token2 === "string") {
    token2 = [token2];
  }
  if (isNumber(callback)) {
    func = function(input, array) {
      array[callback] = toInt(input);
    };
  }
  tokenLen = token2.length;
  for (i2 = 0; i2 < tokenLen; i2++) {
    tokens[token2[i2]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function(input, array, config, token3) {
    config._w = config._w || {};
    callback(input, config._w, config, token3);
  });
}
function addTimeToArrayFromToken(token2, input, config) {
  if (input != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input, config._a, config, token2);
  }
}
var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
function mod(n, x) {
  return (n % x + x) % x;
}
var indexOf;
if (Array.prototype.indexOf) {
  indexOf = Array.prototype.indexOf;
} else {
  indexOf = function(o) {
    var i2;
    for (i2 = 0; i2 < this.length; ++i2) {
      if (this[i2] === o) {
        return i2;
      }
    }
    return -1;
  };
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
addFormatToken("M", ["MM", 2], "Mo", function() {
  return this.month() + 1;
});
addFormatToken("MMM", 0, 0, function(format2) {
  return this.localeData().monthsShort(this, format2);
});
addFormatToken("MMMM", 0, 0, function(format2) {
  return this.localeData().months(this, format2);
});
addUnitAlias("month", "M");
addUnitPriority("month", 8);
addRegexToken("M", match1to2);
addRegexToken("MM", match1to2, match2);
addRegexToken("MMM", function(isStrict, locale2) {
  return locale2.monthsShortRegex(isStrict);
});
addRegexToken("MMMM", function(isStrict, locale2) {
  return locale2.monthsRegex(isStrict);
});
addParseToken(["M", "MM"], function(input, array) {
  array[MONTH] = toInt(input) - 1;
});
addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
  var month = config._locale.monthsParse(input, token2, config._strict);
  if (month != null) {
    array[MONTH] = month;
  } else {
    getParsingFlags(config).invalidMonth = input;
  }
});
var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
function localeMonths(m, format2) {
  if (!m) {
    return isArray(this._months) ? this._months : this._months["standalone"];
  }
  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
}
function localeMonthsShort(m, format2) {
  if (!m) {
    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
  }
  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
}
function handleStrictParse(monthName, format2, strict) {
  var i2, ii, mom, llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i2 = 0; i2 < 12; ++i2) {
      mom = createUTC([2e3, i2]);
      this._shortMonthsParse[i2] = this.monthsShort(mom, "").toLocaleLowerCase();
      this._longMonthsParse[i2] = this.months(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format2, strict) {
  var i2, mom, regex2;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format2, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i2 = 0; i2 < 12; i2++) {
    mom = createUTC([2e3, i2]);
    if (strict && !this._longMonthsParse[i2]) {
      this._longMonthsParse[i2] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
      this._shortMonthsParse[i2] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
    }
    if (!strict && !this._monthsParse[i2]) {
      regex2 = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
      this._monthsParse[i2] = new RegExp(regex2.replace(".", ""), "i");
    }
    if (strict && format2 === "MMMM" && this._longMonthsParse[i2].test(monthName)) {
      return i2;
    } else if (strict && format2 === "MMM" && this._shortMonthsParse[i2].test(monthName)) {
      return i2;
    } else if (!strict && this._monthsParse[i2].test(monthName)) {
      return i2;
    }
  }
}
function setMonth(mom, value) {
  var dayOfMonth;
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value === "string") {
    if (/^\d+$/.test(value)) {
      value = toInt(value);
    } else {
      value = mom.localeData().monthsParse(value);
      if (!isNumber(value)) {
        return mom;
      }
    }
  }
  dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
  mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
  return mom;
}
function getSetMonth(value) {
  if (value != null) {
    setMonth(this, value);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get(this, "Month");
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsShortRegex")) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsRegex")) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var shortPieces = [], longPieces = [], mixedPieces = [], i2, mom;
  for (i2 = 0; i2 < 12; i2++) {
    mom = createUTC([2e3, i2]);
    shortPieces.push(this.monthsShort(mom, ""));
    longPieces.push(this.months(mom, ""));
    mixedPieces.push(this.months(mom, ""));
    mixedPieces.push(this.monthsShort(mom, ""));
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  for (i2 = 0; i2 < 12; i2++) {
    shortPieces[i2] = regexEscape(shortPieces[i2]);
    longPieces[i2] = regexEscape(longPieces[i2]);
  }
  for (i2 = 0; i2 < 24; i2++) {
    mixedPieces[i2] = regexEscape(mixedPieces[i2]);
  }
  this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
  this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
}
addFormatToken("Y", 0, 0, function() {
  var y = this.year();
  return y <= 9999 ? zeroFill(y, 4) : "+" + y;
});
addFormatToken(0, ["YY", 2], 0, function() {
  return this.year() % 100;
});
addFormatToken(0, ["YYYY", 4], 0, "year");
addFormatToken(0, ["YYYYY", 5], 0, "year");
addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
addUnitAlias("year", "y");
addUnitPriority("year", 1);
addRegexToken("Y", matchSigned);
addRegexToken("YY", match1to2, match2);
addRegexToken("YYYY", match1to4, match4);
addRegexToken("YYYYY", match1to6, match6);
addRegexToken("YYYYYY", match1to6, match6);
addParseToken(["YYYYY", "YYYYYY"], YEAR);
addParseToken("YYYY", function(input, array) {
  array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken("YY", function(input, array) {
  array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken("Y", function(input, array) {
  array[YEAR] = parseInt(input, 10);
});
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
hooks.parseTwoDigitYear = function(input) {
  return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
};
var getSetYear = makeGetSet("FullYear", true);
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function createDate(y, m, d, h2, M, s, ms) {
  var date;
  if (y < 100 && y >= 0) {
    date = new Date(y + 400, m, d, h2, M, s, ms);
    if (isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }
  } else {
    date = new Date(y, m, d, h2, M, s, ms);
  }
  return date;
}
function createUTCDate(y) {
  var date, args;
  if (y < 100 && y >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y + 400;
    date = new Date(Date.UTC.apply(null, args));
    if (isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }
  } else {
    date = new Date(Date.UTC.apply(null, arguments));
  }
  return date;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
addFormatToken("w", ["ww", 2], "wo", "week");
addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
addUnitAlias("week", "w");
addUnitAlias("isoWeek", "W");
addUnitPriority("week", 5);
addUnitPriority("isoWeek", 5);
addRegexToken("w", match1to2);
addRegexToken("ww", match1to2, match2);
addRegexToken("W", match1to2);
addRegexToken("WW", match1to2, match2);
addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
  week[token2.substr(0, 1)] = toInt(input);
});
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
var defaultLocaleWeek = {
  dow: 0,
  doy: 6
};
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input) {
  var week = this.localeData().week(this);
  return input == null ? week : this.add((input - week) * 7, "d");
}
function getSetISOWeek(input) {
  var week = weekOfYear(this, 1, 4).week;
  return input == null ? week : this.add((input - week) * 7, "d");
}
addFormatToken("d", 0, "do", "day");
addFormatToken("dd", 0, 0, function(format2) {
  return this.localeData().weekdaysMin(this, format2);
});
addFormatToken("ddd", 0, 0, function(format2) {
  return this.localeData().weekdaysShort(this, format2);
});
addFormatToken("dddd", 0, 0, function(format2) {
  return this.localeData().weekdays(this, format2);
});
addFormatToken("e", 0, 0, "weekday");
addFormatToken("E", 0, 0, "isoWeekday");
addUnitAlias("day", "d");
addUnitAlias("weekday", "e");
addUnitAlias("isoWeekday", "E");
addUnitPriority("day", 11);
addUnitPriority("weekday", 11);
addUnitPriority("isoWeekday", 11);
addRegexToken("d", match1to2);
addRegexToken("e", match1to2);
addRegexToken("E", match1to2);
addRegexToken("dd", function(isStrict, locale2) {
  return locale2.weekdaysMinRegex(isStrict);
});
addRegexToken("ddd", function(isStrict, locale2) {
  return locale2.weekdaysShortRegex(isStrict);
});
addRegexToken("dddd", function(isStrict, locale2) {
  return locale2.weekdaysRegex(isStrict);
});
addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
  var weekday = config._locale.weekdaysParse(input, token2, config._strict);
  if (weekday != null) {
    week.d = weekday;
  } else {
    getParsingFlags(config).invalidWeekday = input;
  }
});
addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
  week[token2] = toInt(input);
});
function parseWeekday(input, locale2) {
  if (typeof input !== "string") {
    return input;
  }
  if (!isNaN(input)) {
    return parseInt(input, 10);
  }
  input = locale2.weekdaysParse(input);
  if (typeof input === "number") {
    return input;
  }
  return null;
}
function parseIsoWeekday(input, locale2) {
  if (typeof input === "string") {
    return locale2.weekdaysParse(input) % 7 || 7;
  }
  return isNaN(input) ? null : input;
}
function shiftWeekdays(ws, n) {
  return ws.slice(n, 7).concat(ws.slice(0, n));
}
var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
function localeWeekdays(m, format2) {
  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
}
function localeWeekdaysShort(m) {
  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m) {
  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format2, strict) {
  var i2, ii, mom, llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i2 = 0; i2 < 7; ++i2) {
      mom = createUTC([2e3, 1]).day(i2);
      this._minWeekdaysParse[i2] = this.weekdaysMin(mom, "").toLocaleLowerCase();
      this._shortWeekdaysParse[i2] = this.weekdaysShort(mom, "").toLocaleLowerCase();
      this._weekdaysParse[i2] = this.weekdays(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format2, strict) {
  var i2, mom, regex2;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format2, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i2 = 0; i2 < 7; i2++) {
    mom = createUTC([2e3, 1]).day(i2);
    if (strict && !this._fullWeekdaysParse[i2]) {
      this._fullWeekdaysParse[i2] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
      this._shortWeekdaysParse[i2] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
      this._minWeekdaysParse[i2] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
    }
    if (!this._weekdaysParse[i2]) {
      regex2 = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
      this._weekdaysParse[i2] = new RegExp(regex2.replace(".", ""), "i");
    }
    if (strict && format2 === "dddd" && this._fullWeekdaysParse[i2].test(weekdayName)) {
      return i2;
    } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i2].test(weekdayName)) {
      return i2;
    } else if (strict && format2 === "dd" && this._minWeekdaysParse[i2].test(weekdayName)) {
      return i2;
    } else if (!strict && this._weekdaysParse[i2].test(weekdayName)) {
      return i2;
    }
  }
}
function getSetDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
  if (input != null) {
    input = parseWeekday(input, this.localeData());
    return this.add(input - day, "d");
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input == null ? weekday : this.add(input - weekday, "d");
}
function getSetISODayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    var weekday = parseIsoWeekday(input, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i2, mom, minp, shortp, longp;
  for (i2 = 0; i2 < 7; i2++) {
    mom = createUTC([2e3, 1]).day(i2);
    minp = regexEscape(this.weekdaysMin(mom, ""));
    shortp = regexEscape(this.weekdaysShort(mom, ""));
    longp = regexEscape(this.weekdays(mom, ""));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
  this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
  this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
addFormatToken("H", ["HH", 2], 0, "hour");
addFormatToken("h", ["hh", 2], 0, hFormat);
addFormatToken("k", ["kk", 2], 0, kFormat);
addFormatToken("hmm", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});
addFormatToken("hmmss", 0, 0, function() {
  return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
addFormatToken("Hmm", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2);
});
addFormatToken("Hmmss", 0, 0, function() {
  return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
});
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function() {
    return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
  });
}
meridiem("a", true);
meridiem("A", false);
addUnitAlias("hour", "h");
addUnitPriority("hour", 13);
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
addRegexToken("a", matchMeridiem);
addRegexToken("A", matchMeridiem);
addRegexToken("H", match1to2);
addRegexToken("h", match1to2);
addRegexToken("k", match1to2);
addRegexToken("HH", match1to2, match2);
addRegexToken("hh", match1to2, match2);
addRegexToken("kk", match1to2, match2);
addRegexToken("hmm", match3to4);
addRegexToken("hmmss", match5to6);
addRegexToken("Hmm", match3to4);
addRegexToken("Hmmss", match5to6);
addParseToken(["H", "HH"], HOUR);
addParseToken(["k", "kk"], function(input, array, config) {
  var kInput = toInt(input);
  array[HOUR] = kInput === 24 ? 0 : kInput;
});
addParseToken(["a", "A"], function(input, array, config) {
  config._isPm = config._locale.isPM(input);
  config._meridiem = input;
});
addParseToken(["h", "hh"], function(input, array, config) {
  array[HOUR] = toInt(input);
  getParsingFlags(config).bigHour = true;
});
addParseToken("hmm", function(input, array, config) {
  var pos = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos));
  array[MINUTE] = toInt(input.substr(pos));
  getParsingFlags(config).bigHour = true;
});
addParseToken("hmmss", function(input, array, config) {
  var pos1 = input.length - 4, pos2 = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos1));
  array[MINUTE] = toInt(input.substr(pos1, 2));
  array[SECOND] = toInt(input.substr(pos2));
  getParsingFlags(config).bigHour = true;
});
addParseToken("Hmm", function(input, array, config) {
  var pos = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos));
  array[MINUTE] = toInt(input.substr(pos));
});
addParseToken("Hmmss", function(input, array, config) {
  var pos1 = input.length - 4, pos2 = input.length - 2;
  array[HOUR] = toInt(input.substr(0, pos1));
  array[MINUTE] = toInt(input.substr(pos1, 2));
  array[SECOND] = toInt(input.substr(pos2));
});
function localeIsPM(input) {
  return (input + "").toLowerCase().charAt(0) === "p";
}
var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? "pm" : "PM";
  } else {
    return isLower ? "am" : "AM";
  }
}
var baseConfig = {
  calendar: defaultCalendar,
  longDateFormat: defaultLongDateFormat,
  invalidDate: defaultInvalidDate,
  ordinal: defaultOrdinal,
  dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
  relativeTime: defaultRelativeTime,
  months: defaultLocaleMonths,
  monthsShort: defaultLocaleMonthsShort,
  week: defaultLocaleWeek,
  weekdays: defaultLocaleWeekdays,
  weekdaysMin: defaultLocaleWeekdaysMin,
  weekdaysShort: defaultLocaleWeekdaysShort,
  meridiemParse: defaultLocaleMeridiemParse
};
var locales = {}, localeFamilies = {}, globalLocale;
function commonPrefix(arr1, arr2) {
  var i2, minl = Math.min(arr1.length, arr2.length);
  for (i2 = 0; i2 < minl; i2 += 1) {
    if (arr1[i2] !== arr2[i2]) {
      return i2;
    }
  }
  return minl;
}
function normalizeLocale(key) {
  return key ? key.toLowerCase().replace("_", "-") : key;
}
function chooseLocale(names) {
  var i2 = 0, j, next2, locale2, split;
  while (i2 < names.length) {
    split = normalizeLocale(names[i2]).split("-");
    j = split.length;
    next2 = normalizeLocale(names[i2 + 1]);
    next2 = next2 ? next2.split("-") : null;
    while (j > 0) {
      locale2 = loadLocale(split.slice(0, j).join("-"));
      if (locale2) {
        return locale2;
      }
      if (next2 && next2.length >= j && commonPrefix(split, next2) >= j - 1) {
        break;
      }
      j--;
    }
    i2++;
  }
  return globalLocale;
}
function isLocaleNameSane(name) {
  return name.match("^[^/\\\\]*$") != null;
}
function loadLocale(name) {
  var oldLocale = null, aliasedRequire;
  if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = require;
      aliasedRequire("./locale/" + name);
      getSetGlobalLocale(oldLocale);
    } catch (e) {
      locales[name] = null;
    }
  }
  return locales[name];
}
function getSetGlobalLocale(key, values) {
  var data2;
  if (key) {
    if (isUndefined(values)) {
      data2 = getLocale(key);
    } else {
      data2 = defineLocale(key, values);
    }
    if (data2) {
      globalLocale = data2;
    } else {
      if (typeof console !== "undefined" && console.warn) {
        console.warn("Locale " + key + " not found. Did you forget to load it?");
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name, config) {
  if (config !== null) {
    var locale2, parentConfig = baseConfig;
    config.abbr = name;
    if (locales[name] != null) {
      deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
      parentConfig = locales[name]._config;
    } else if (config.parentLocale != null) {
      if (locales[config.parentLocale] != null) {
        parentConfig = locales[config.parentLocale]._config;
      } else {
        locale2 = loadLocale(config.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name,
            config
          });
          return null;
        }
      }
    }
    locales[name] = new Locale(mergeConfigs(parentConfig, config));
    if (localeFamilies[name]) {
      localeFamilies[name].forEach(function(x) {
        defineLocale(x.name, x.config);
      });
    }
    getSetGlobalLocale(name);
    return locales[name];
  } else {
    delete locales[name];
    return null;
  }
}
function updateLocale(name, config) {
  if (config != null) {
    var locale2, tmpLocale, parentConfig = baseConfig;
    if (locales[name] != null && locales[name].parentLocale != null) {
      locales[name].set(mergeConfigs(locales[name]._config, config));
    } else {
      tmpLocale = loadLocale(name);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      if (tmpLocale == null) {
        config.abbr = name;
      }
      locale2 = new Locale(config);
      locale2.parentLocale = locales[name];
      locales[name] = locale2;
    }
    getSetGlobalLocale(name);
  } else {
    if (locales[name] != null) {
      if (locales[name].parentLocale != null) {
        locales[name] = locales[name].parentLocale;
        if (name === getSetGlobalLocale()) {
          getSetGlobalLocale(name);
        }
      } else if (locales[name] != null) {
        delete locales[name];
      }
    }
  }
  return locales[name];
}
function getLocale(key) {
  var locale2;
  if (key && key._locale && key._locale._abbr) {
    key = key._locale._abbr;
  }
  if (!key) {
    return globalLocale;
  }
  if (!isArray(key)) {
    locale2 = loadLocale(key);
    if (locale2) {
      return locale2;
    }
    key = [key];
  }
  return chooseLocale(key);
}
function listLocales() {
  return keys(locales);
}
function checkOverflow(m) {
  var overflow, a = m._a;
  if (a && getParsingFlags(m).overflow === -2) {
    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
      overflow = DATE;
    }
    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
      overflow = WEEK;
    }
    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
      overflow = WEEKDAY;
    }
    getParsingFlags(m).overflow = overflow;
  }
  return m;
}
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
  ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
  ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
  ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
  ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
  ["YYYY-DDD", /\d{4}-\d{3}/],
  ["YYYY-MM", /\d{4}-\d\d/, false],
  ["YYYYYYMMDD", /[+-]\d{10}/],
  ["YYYYMMDD", /\d{8}/],
  ["GGGG[W]WWE", /\d{4}W\d{3}/],
  ["GGGG[W]WW", /\d{4}W\d{2}/, false],
  ["YYYYDDD", /\d{7}/],
  ["YYYYMM", /\d{6}/, false],
  ["YYYY", /\d{4}/, false]
], isoTimes = [
  ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
  ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
  ["HH:mm:ss", /\d\d:\d\d:\d\d/],
  ["HH:mm", /\d\d:\d\d/],
  ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
  ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
  ["HHmmss", /\d\d\d\d\d\d/],
  ["HHmm", /\d\d\d\d/],
  ["HH", /\d\d/]
], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
  UT: 0,
  GMT: 0,
  EDT: -4 * 60,
  EST: -5 * 60,
  CDT: -5 * 60,
  CST: -6 * 60,
  MDT: -6 * 60,
  MST: -7 * 60,
  PDT: -7 * 60,
  PST: -8 * 60
};
function configFromISO(config) {
  var i2, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
  if (match) {
    getParsingFlags(config).iso = true;
    for (i2 = 0, l = isoDatesLen; i2 < l; i2++) {
      if (isoDates[i2][1].exec(match[1])) {
        dateFormat = isoDates[i2][0];
        allowTime = isoDates[i2][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config._isValid = false;
      return;
    }
    if (match[3]) {
      for (i2 = 0, l = isoTimesLen; i2 < l; i2++) {
        if (isoTimes[i2][1].exec(match[3])) {
          timeFormat = (match[2] || " ") + isoTimes[i2][0];
          break;
        }
      }
      if (timeFormat == null) {
        config._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config._isValid = false;
      return;
    }
    if (match[4]) {
      if (tzRegex.exec(match[4])) {
        tzFormat = "Z";
      } else {
        config._isValid = false;
        return;
      }
    }
    config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
    configFromStringAndFormat(config);
  } else {
    config._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [
    untruncateYear(yearStr),
    defaultLocaleMonthsShort.indexOf(monthStr),
    parseInt(dayStr, 10),
    parseInt(hourStr, 10),
    parseInt(minuteStr, 10)
  ];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s) {
  return s.replace(/\([^)]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function checkWeekday(weekdayStr, parsedInput, config) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config).weekdayMismatch = true;
      config._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10), m = hm % 100, h2 = (hm - m) / 100;
    return h2 * 60 + m;
  }
}
function configFromRFC2822(config) {
  var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
  if (match) {
    parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
    if (!checkWeekday(match[1], parsedArray, config)) {
      return;
    }
    config._a = parsedArray;
    config._tzm = calculateOffset(match[8], match[9], match[10]);
    config._d = createUTCDate.apply(null, config._a);
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    getParsingFlags(config).rfc2822 = true;
  } else {
    config._isValid = false;
  }
}
function configFromString(config) {
  var matched = aspNetJsonRegex.exec(config._i);
  if (matched !== null) {
    config._d = new Date(+matched[1]);
    return;
  }
  configFromISO(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  configFromRFC2822(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  if (config._strict) {
    config._isValid = false;
  } else {
    hooks.createFromInputFallback(config);
  }
}
hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
  config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
});
function defaults(a, b, c) {
  if (a != null) {
    return a;
  }
  if (b != null) {
    return b;
  }
  return c;
}
function currentDateArray(config) {
  var nowValue = new Date(hooks.now());
  if (config._useUTC) {
    return [
      nowValue.getUTCFullYear(),
      nowValue.getUTCMonth(),
      nowValue.getUTCDate()
    ];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config) {
  var i2, date, input = [], currentDate, expectedWeekday, yearToUse;
  if (config._d) {
    return;
  }
  currentDate = currentDateArray(config);
  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config);
  }
  if (config._dayOfYear != null) {
    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
      getParsingFlags(config)._overflowDayOfYear = true;
    }
    date = createUTCDate(yearToUse, 0, config._dayOfYear);
    config._a[MONTH] = date.getUTCMonth();
    config._a[DATE] = date.getUTCDate();
  }
  for (i2 = 0; i2 < 3 && config._a[i2] == null; ++i2) {
    config._a[i2] = input[i2] = currentDate[i2];
  }
  for (; i2 < 7; i2++) {
    config._a[i2] = input[i2] = config._a[i2] == null ? i2 === 2 ? 1 : 0 : config._a[i2];
  }
  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    config._nextDay = true;
    config._a[HOUR] = 0;
  }
  config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
  if (config._tzm != null) {
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  }
  if (config._nextDay) {
    config._a[HOUR] = 24;
  }
  if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
    getParsingFlags(config).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config) {
  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w = config._w;
  if (w.GG != null || w.W != null || w.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
    week = defaults(w.W, 1);
    weekday = defaults(w.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config._locale._week.dow;
    doy = config._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    week = defaults(w.w, curWeek.week);
    if (w.d != null) {
      weekday = w.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w.e != null) {
      weekday = w.e + dow;
      if (w.e < 0 || w.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
}
hooks.ISO_8601 = function() {
};
hooks.RFC_2822 = function() {
};
function configFromStringAndFormat(config) {
  if (config._f === hooks.ISO_8601) {
    configFromISO(config);
    return;
  }
  if (config._f === hooks.RFC_2822) {
    configFromRFC2822(config);
    return;
  }
  config._a = [];
  getParsingFlags(config).empty = true;
  var string = "" + config._i, i2, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
  tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  tokenLen = tokens2.length;
  for (i2 = 0; i2 < tokenLen; i2++) {
    token2 = tokens2[i2];
    parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
    if (parsedInput) {
      skipped = string.substr(0, string.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config).unusedInput.push(skipped);
      }
      string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config).empty = false;
      } else {
        getParsingFlags(config).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config);
    } else if (config._strict && !parsedInput) {
      getParsingFlags(config).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
  if (string.length > 0) {
    getParsingFlags(config).unusedInput.push(string);
  }
  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    getParsingFlags(config).bigHour = void 0;
  }
  getParsingFlags(config).parsedDateParts = config._a.slice(0);
  getParsingFlags(config).meridiem = config._meridiem;
  config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
  era = getParsingFlags(config).era;
  if (era !== null) {
    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  }
  configFromArray(config);
  checkOverflow(config);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config) {
  var tempConfig, bestMoment, scoreToBeat, i2, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
  if (configfLen === 0) {
    getParsingFlags(config).invalidFormat = true;
    config._d = new Date(NaN);
    return;
  }
  for (i2 = 0; i2 < configfLen; i2++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config);
    if (config._useUTC != null) {
      tempConfig._useUTC = config._useUTC;
    }
    tempConfig._f = config._f[i2];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend(config, bestMoment || tempConfig);
}
function configFromObject(config) {
  if (config._d) {
    return;
  }
  var i2 = normalizeObjectUnits(config._i), dayOrDate = i2.day === void 0 ? i2.date : i2.day;
  config._a = map([i2.year, i2.month, dayOrDate, i2.hour, i2.minute, i2.second, i2.millisecond], function(obj) {
    return obj && parseInt(obj, 10);
  });
  configFromArray(config);
}
function createFromConfig(config) {
  var res = new Moment(checkOverflow(prepareConfig(config)));
  if (res._nextDay) {
    res.add(1, "d");
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config) {
  var input = config._i, format2 = config._f;
  config._locale = config._locale || getLocale(config._l);
  if (input === null || format2 === void 0 && input === "") {
    return createInvalid({ nullInput: true });
  }
  if (typeof input === "string") {
    config._i = input = config._locale.preparse(input);
  }
  if (isMoment(input)) {
    return new Moment(checkOverflow(input));
  } else if (isDate(input)) {
    config._d = input;
  } else if (isArray(format2)) {
    configFromStringAndArray(config);
  } else if (format2) {
    configFromStringAndFormat(config);
  } else {
    configFromInput(config);
  }
  if (!isValid(config)) {
    config._d = null;
  }
  return config;
}
function configFromInput(config) {
  var input = config._i;
  if (isUndefined(input)) {
    config._d = new Date(hooks.now());
  } else if (isDate(input)) {
    config._d = new Date(input.valueOf());
  } else if (typeof input === "string") {
    configFromString(config);
  } else if (isArray(input)) {
    config._a = map(input.slice(0), function(obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config);
  } else if (isObject(input)) {
    configFromObject(config);
  } else if (isNumber(input)) {
    config._d = new Date(input);
  } else {
    hooks.createFromInputFallback(config);
  }
}
function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
  var c = {};
  if (format2 === true || format2 === false) {
    strict = format2;
    format2 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
    input = void 0;
  }
  c._isAMomentObject = true;
  c._useUTC = c._isUTC = isUTC;
  c._l = locale2;
  c._i = input;
  c._f = format2;
  c._strict = strict;
  return createFromConfig(c);
}
function createLocal(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, false);
}
var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
  var other = createLocal.apply(null, arguments);
  if (this.isValid() && other.isValid()) {
    return other < this ? this : other;
  } else {
    return createInvalid();
  }
}), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
  var other = createLocal.apply(null, arguments);
  if (this.isValid() && other.isValid()) {
    return other > this ? this : other;
  } else {
    return createInvalid();
  }
});
function pickBy(fn, moments) {
  var res, i2;
  if (moments.length === 1 && isArray(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i2 = 1; i2 < moments.length; ++i2) {
    if (!moments[i2].isValid() || moments[i2][fn](res)) {
      res = moments[i2];
    }
  }
  return res;
}
function min() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isBefore", args);
}
function max() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isAfter", args);
}
var now = function() {
  return Date.now ? Date.now() : +new Date();
};
var ordering = [
  "year",
  "quarter",
  "month",
  "week",
  "day",
  "hour",
  "minute",
  "second",
  "millisecond"
];
function isDurationValid(m) {
  var key, unitHasDecimal = false, i2, orderLen = ordering.length;
  for (key in m) {
    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
      return false;
    }
  }
  for (i2 = 0; i2 < orderLen; ++i2) {
    if (m[ordering[i2]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m[ordering[i2]]) !== toInt(m[ordering[i2]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration) {
  var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months2 + quarters * 3 + years2 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number2) {
  if (number2 < 0) {
    return Math.round(-1 * number2) * -1;
  } else {
    return Math.round(number2);
  }
}
function compareArrays(array1, array2, dontConvert) {
  var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i2;
  for (i2 = 0; i2 < len; i2++) {
    if (dontConvert && array1[i2] !== array2[i2] || !dontConvert && toInt(array1[i2]) !== toInt(array2[i2])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset(token2, separator) {
  addFormatToken(token2, 0, 0, function() {
    var offset2 = this.utcOffset(), sign2 = "+";
    if (offset2 < 0) {
      offset2 = -offset2;
      sign2 = "-";
    }
    return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
  });
}
offset("Z", ":");
offset("ZZ", "");
addRegexToken("Z", matchShortOffset);
addRegexToken("ZZ", matchShortOffset);
addParseToken(["Z", "ZZ"], function(input, array, config) {
  config._useUTC = true;
  config._tzm = offsetFromString(matchShortOffset, input);
});
var chunkOffset = /([\+\-]|\d\d)/gi;
function offsetFromString(matcher, string) {
  var matches2 = (string || "").match(matcher), chunk, parts, minutes2;
  if (matches2 === null) {
    return null;
  }
  chunk = matches2[matches2.length - 1] || [];
  parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
}
function cloneWithOffset(input, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input).local();
  }
}
function getDateOffset(m) {
  return -Math.round(m._d.getTimezoneOffset());
}
hooks.updateOffset = function() {
};
function getSetOffset(input, keepLocalTime, keepMinutes) {
  var offset2 = this._offset || 0, localAdjust;
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    if (typeof input === "string") {
      input = offsetFromString(matchShortOffset, input);
      if (input === null) {
        return this;
      }
    } else if (Math.abs(input) < 16 && !keepMinutes) {
      input = input * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, "m");
    }
    if (offset2 !== input) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(this, createDuration(input - offset2, "m"), 1, false);
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset2 : getDateOffset(this);
  }
}
function getSetZone(input, keepLocalTime) {
  if (input != null) {
    if (typeof input !== "string") {
      input = -input;
    }
    this.utcOffset(input, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), "m");
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === "string") {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input) {
  if (!this.isValid()) {
    return false;
  }
  input = input ? createLocal(input).utcOffset() : 0;
  return (this.utcOffset() - input) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c = {}, other;
  copyConfig(c, this);
  c = prepareConfig(c);
  if (c._a) {
    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
function createDuration(input, key) {
  var duration = input, match = null, sign2, ret, diffRes;
  if (isDuration(input)) {
    duration = {
      ms: input._milliseconds,
      d: input._days,
      M: input._months
    };
  } else if (isNumber(input) || !isNaN(+input)) {
    duration = {};
    if (key) {
      duration[key] = +input;
    } else {
      duration.milliseconds = +input;
    }
  } else if (match = aspNetRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: 0,
      d: toInt(match[DATE]) * sign2,
      h: toInt(match[HOUR]) * sign2,
      m: toInt(match[MINUTE]) * sign2,
      s: toInt(match[SECOND]) * sign2,
      ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
    };
  } else if (match = isoRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: parseIso(match[2], sign2),
      M: parseIso(match[3], sign2),
      w: parseIso(match[4], sign2),
      d: parseIso(match[5], sign2),
      h: parseIso(match[6], sign2),
      m: parseIso(match[7], sign2),
      s: parseIso(match[8], sign2)
    };
  } else if (duration == null) {
    duration = {};
  } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
    diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
    duration = {};
    duration.ms = diffRes.milliseconds;
    duration.M = diffRes.months;
  }
  ret = new Duration(duration);
  if (isDuration(input) && hasOwnProp(input, "_locale")) {
    ret._locale = input._locale;
  }
  if (isDuration(input) && hasOwnProp(input, "_isValid")) {
    ret._isValid = input._isValid;
  }
  return ret;
}
createDuration.fn = Duration.prototype;
createDuration.invalid = createInvalid$1;
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(",", "."));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base, other) {
  var res = {};
  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
  if (base.clone().add(res.months, "M").isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base.clone().add(res.months, "M");
  return res;
}
function momentsDifference(base, other) {
  var res;
  if (!(base.isValid() && other.isValid())) {
    return { milliseconds: 0, months: 0 };
  }
  other = cloneWithOffset(other, base);
  if (base.isBefore(other)) {
    res = positiveMomentsDifference(base, other);
  } else {
    res = positiveMomentsDifference(other, base);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name) {
  return function(val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration, isAdding, updateOffset) {
  var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months2) {
    setMonth(mom, get(mom, "Month") + months2 * isAdding);
  }
  if (days2) {
    set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months2);
  }
}
var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
function isString(input) {
  return typeof input === "string" || input instanceof String;
}
function isMomentInput(input) {
  return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
}
function isMomentInputObject(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i2, property, propertyLen = properties.length;
  for (i2 = 0; i2 < propertyLen; i2 += 1) {
    property = properties[i2];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input) {
  var arrayTest = isArray(input), dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input.filter(function(item2) {
      return !isNumber(item2) && isString(input);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i2, property;
  for (i2 = 0; i2 < properties.length; i2 += 1) {
    property = properties[i2];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, "days", true);
  return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
}
function calendar$1(time, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time = void 0;
    }
  }
  var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
  return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
}
function clone() {
  return new Moment(this);
}
function isAfter(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || "()";
  return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input), inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input, units) {
  return this.isSame(input, units) || this.isAfter(input, units);
}
function isSameOrBefore(input, units) {
  return this.isSame(input, units) || this.isBefore(input, units);
}
function diff(input, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case "year":
      output = monthDiff(this, that) / 12;
      break;
    case "month":
      output = monthDiff(this, that);
      break;
    case "quarter":
      output = monthDiff(this, that) / 3;
      break;
    case "second":
      output = (this - that) / 1e3;
      break;
    case "minute":
      output = (this - that) / 6e4;
      break;
    case "hour":
      output = (this - that) / 36e5;
      break;
    case "day":
      output = (this - that - zoneDelta) / 864e5;
      break;
    case "week":
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a, b) {
  if (a.date() < b.date()) {
    return -monthDiff(b, a);
  }
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
  if (b - anchor < 0) {
    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
function toString() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
  if (m.year() < 0 || m.year() > 9999) {
    return formatMoment(m, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
  }
  if (isFunction(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
    }
  }
  return formatMoment(m, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
}
function inspect() {
  if (!this.isValid()) {
    return "moment.invalid(/* " + this._i + " */)";
  }
  var func = "moment", zone = "", prefix, year, datetime2, suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
    zone = "Z";
  }
  prefix = "[" + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
  datetime2 = "-MM-DD[T]HH:mm:ss.SSS";
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime2 + suffix);
}
function format(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key) {
  var newLocaleData;
  if (key === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
  if (key === void 0) {
    return this.localeData();
  } else {
    return this.locale(key);
  }
});
function localeData() {
  return this._locale;
}
var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return new Date(y, m, d).valueOf();
  }
}
function utcStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y, m, d);
  }
}
function startOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year(), 0, 1);
      break;
    case "quarter":
      time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
      break;
    case "month":
      time = startOfDate(this.year(), this.month(), 1);
      break;
    case "week":
      time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
      break;
    case "isoWeek":
      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date());
      break;
    case "hour":
      time = this._d.valueOf();
      time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
      break;
    case "minute":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_MINUTE);
      break;
    case "second":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
      break;
    case "month":
      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
      break;
    case "isoWeek":
      time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      time = this._d.valueOf();
      time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
      break;
    case "minute":
      time = this._d.valueOf();
      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
      break;
    case "second":
      time = this._d.valueOf();
      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray() {
  var m = this;
  return [
    m.year(),
    m.month(),
    m.date(),
    m.hour(),
    m.minute(),
    m.second(),
    m.millisecond()
  ];
}
function toObject() {
  var m = this;
  return {
    years: m.year(),
    months: m.month(),
    date: m.date(),
    hours: m.hours(),
    minutes: m.minutes(),
    seconds: m.seconds(),
    milliseconds: m.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
addFormatToken("N", 0, 0, "eraAbbr");
addFormatToken("NN", 0, 0, "eraAbbr");
addFormatToken("NNN", 0, 0, "eraAbbr");
addFormatToken("NNNN", 0, 0, "eraName");
addFormatToken("NNNNN", 0, 0, "eraNarrow");
addFormatToken("y", ["y", 1], "yo", "eraYear");
addFormatToken("y", ["yy", 2], 0, "eraYear");
addFormatToken("y", ["yyy", 3], 0, "eraYear");
addFormatToken("y", ["yyyy", 4], 0, "eraYear");
addRegexToken("N", matchEraAbbr);
addRegexToken("NN", matchEraAbbr);
addRegexToken("NNN", matchEraAbbr);
addRegexToken("NNNN", matchEraName);
addRegexToken("NNNNN", matchEraNarrow);
addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
  var era = config._locale.erasParse(input, token2, config._strict);
  if (era) {
    getParsingFlags(config).era = era;
  } else {
    getParsingFlags(config).invalidEra = input;
  }
});
addRegexToken("y", matchUnsigned);
addRegexToken("yy", matchUnsigned);
addRegexToken("yyy", matchUnsigned);
addRegexToken("yyyy", matchUnsigned);
addRegexToken("yo", matchEraYearOrdinal);
addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
addParseToken(["yo"], function(input, array, config, token2) {
  var match;
  if (config._locale._eraYearOrdinalRegex) {
    match = input.match(config._locale._eraYearOrdinalRegex);
  }
  if (config._locale.eraYearOrdinalParse) {
    array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
  } else {
    array[YEAR] = parseInt(input, 10);
  }
});
function localeEras(m, format2) {
  var i2, l, date, eras = this._eras || getLocale("en")._eras;
  for (i2 = 0, l = eras.length; i2 < l; ++i2) {
    switch (typeof eras[i2].since) {
      case "string":
        date = hooks(eras[i2].since).startOf("day");
        eras[i2].since = date.valueOf();
        break;
    }
    switch (typeof eras[i2].until) {
      case "undefined":
        eras[i2].until = Infinity;
        break;
      case "string":
        date = hooks(eras[i2].until).startOf("day").valueOf();
        eras[i2].until = date.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format2, strict) {
  var i2, l, eras = this.eras(), name, abbr, narrow;
  eraName = eraName.toUpperCase();
  for (i2 = 0, l = eras.length; i2 < l; ++i2) {
    name = eras[i2].name.toUpperCase();
    abbr = eras[i2].abbr.toUpperCase();
    narrow = eras[i2].narrow.toUpperCase();
    if (strict) {
      switch (format2) {
        case "N":
        case "NN":
        case "NNN":
          if (abbr === eraName) {
            return eras[i2];
          }
          break;
        case "NNNN":
          if (name === eraName) {
            return eras[i2];
          }
          break;
        case "NNNNN":
          if (narrow === eraName) {
            return eras[i2];
          }
          break;
      }
    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i2];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i2, l, val, eras = this.localeData().eras();
  for (i2 = 0, l = eras.length; i2 < l; ++i2) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i2].since <= val && val <= eras[i2].until) {
      return eras[i2].name;
    }
    if (eras[i2].until <= val && val <= eras[i2].since) {
      return eras[i2].name;
    }
  }
  return "";
}
function getEraNarrow() {
  var i2, l, val, eras = this.localeData().eras();
  for (i2 = 0, l = eras.length; i2 < l; ++i2) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i2].since <= val && val <= eras[i2].until) {
      return eras[i2].narrow;
    }
    if (eras[i2].until <= val && val <= eras[i2].since) {
      return eras[i2].narrow;
    }
  }
  return "";
}
function getEraAbbr() {
  var i2, l, val, eras = this.localeData().eras();
  for (i2 = 0, l = eras.length; i2 < l; ++i2) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i2].since <= val && val <= eras[i2].until) {
      return eras[i2].abbr;
    }
    if (eras[i2].until <= val && val <= eras[i2].since) {
      return eras[i2].abbr;
    }
  }
  return "";
}
function getEraYear() {
  var i2, l, dir, val, eras = this.localeData().eras();
  for (i2 = 0, l = eras.length; i2 < l; ++i2) {
    dir = eras[i2].since <= eras[i2].until ? 1 : -1;
    val = this.clone().startOf("day").valueOf();
    if (eras[i2].since <= val && val <= eras[i2].until || eras[i2].until <= val && val <= eras[i2].since) {
      return (this.year() - hooks(eras[i2].since).year()) * dir + eras[i2].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNameRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, "_erasAbbrRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNarrowRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i2, l, eras = this.eras();
  for (i2 = 0, l = eras.length; i2 < l; ++i2) {
    namePieces.push(regexEscape(eras[i2].name));
    abbrPieces.push(regexEscape(eras[i2].abbr));
    narrowPieces.push(regexEscape(eras[i2].narrow));
    mixedPieces.push(regexEscape(eras[i2].name));
    mixedPieces.push(regexEscape(eras[i2].abbr));
    mixedPieces.push(regexEscape(eras[i2].narrow));
  }
  this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
  this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
  this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
}
addFormatToken(0, ["gg", 2], 0, function() {
  return this.weekYear() % 100;
});
addFormatToken(0, ["GG", 2], 0, function() {
  return this.isoWeekYear() % 100;
});
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
addWeekYearFormatToken("gggg", "weekYear");
addWeekYearFormatToken("ggggg", "weekYear");
addWeekYearFormatToken("GGGG", "isoWeekYear");
addWeekYearFormatToken("GGGGG", "isoWeekYear");
addUnitAlias("weekYear", "gg");
addUnitAlias("isoWeekYear", "GG");
addUnitPriority("weekYear", 1);
addUnitPriority("isoWeekYear", 1);
addRegexToken("G", matchSigned);
addRegexToken("g", matchSigned);
addRegexToken("GG", match1to2, match2);
addRegexToken("gg", match1to2, match2);
addRegexToken("GGGG", match1to4, match4);
addRegexToken("gggg", match1to4, match4);
addRegexToken("GGGGG", match1to6, match6);
addRegexToken("ggggg", match1to6, match6);
addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
  week[token2.substr(0, 2)] = toInt(input);
});
addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
  week[token2] = hooks.parseTwoDigitYear(input);
});
function getSetWeekYear(input) {
  return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
}
function getSetISOWeekYear(input) {
  return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  var weeksTarget;
  if (input == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date.getUTCFullYear());
  this.month(date.getUTCMonth());
  this.date(date.getUTCDate());
  return this;
}
addFormatToken("Q", 0, "Qo", "quarter");
addUnitAlias("quarter", "Q");
addUnitPriority("quarter", 7);
addRegexToken("Q", match1);
addParseToken("Q", function(input, array) {
  array[MONTH] = (toInt(input) - 1) * 3;
});
function getSetQuarter(input) {
  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}
addFormatToken("D", ["DD", 2], "Do", "date");
addUnitAlias("date", "D");
addUnitPriority("date", 9);
addRegexToken("D", match1to2);
addRegexToken("DD", match1to2, match2);
addRegexToken("Do", function(isStrict, locale2) {
  return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
});
addParseToken(["D", "DD"], DATE);
addParseToken("Do", function(input, array) {
  array[DATE] = toInt(input.match(match1to2)[0]);
});
var getSetDayOfMonth = makeGetSet("Date", true);
addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
addUnitAlias("dayOfYear", "DDD");
addUnitPriority("dayOfYear", 4);
addRegexToken("DDD", match1to3);
addRegexToken("DDDD", match3);
addParseToken(["DDD", "DDDD"], function(input, array, config) {
  config._dayOfYear = toInt(input);
});
function getSetDayOfYear(input) {
  var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
  return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
}
addFormatToken("m", ["mm", 2], 0, "minute");
addUnitAlias("minute", "m");
addUnitPriority("minute", 14);
addRegexToken("m", match1to2);
addRegexToken("mm", match1to2, match2);
addParseToken(["m", "mm"], MINUTE);
var getSetMinute = makeGetSet("Minutes", false);
addFormatToken("s", ["ss", 2], 0, "second");
addUnitAlias("second", "s");
addUnitPriority("second", 15);
addRegexToken("s", match1to2);
addRegexToken("ss", match1to2, match2);
addParseToken(["s", "ss"], SECOND);
var getSetSecond = makeGetSet("Seconds", false);
addFormatToken("S", 0, 0, function() {
  return ~~(this.millisecond() / 100);
});
addFormatToken(0, ["SS", 2], 0, function() {
  return ~~(this.millisecond() / 10);
});
addFormatToken(0, ["SSS", 3], 0, "millisecond");
addFormatToken(0, ["SSSS", 4], 0, function() {
  return this.millisecond() * 10;
});
addFormatToken(0, ["SSSSS", 5], 0, function() {
  return this.millisecond() * 100;
});
addFormatToken(0, ["SSSSSS", 6], 0, function() {
  return this.millisecond() * 1e3;
});
addFormatToken(0, ["SSSSSSS", 7], 0, function() {
  return this.millisecond() * 1e4;
});
addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
  return this.millisecond() * 1e5;
});
addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
  return this.millisecond() * 1e6;
});
addUnitAlias("millisecond", "ms");
addUnitPriority("millisecond", 16);
addRegexToken("S", match1to3, match1);
addRegexToken("SS", match1to3, match2);
addRegexToken("SSS", match1to3, match3);
var token, getSetMillisecond;
for (token = "SSSS"; token.length <= 9; token += "S") {
  addRegexToken(token, matchUnsigned);
}
function parseMs(input, array) {
  array[MILLISECOND] = toInt(("0." + input) * 1e3);
}
for (token = "S"; token.length <= 9; token += "S") {
  addParseToken(token, parseMs);
}
getSetMillisecond = makeGetSet("Milliseconds", false);
addFormatToken("z", 0, 0, "zoneAbbr");
addFormatToken("zz", 0, 0, "zoneName");
function getZoneAbbr() {
  return this._isUTC ? "UTC" : "";
}
function getZoneName() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
var proto = Moment.prototype;
proto.add = add;
proto.calendar = calendar$1;
proto.clone = clone;
proto.diff = diff;
proto.endOf = endOf;
proto.format = format;
proto.from = from;
proto.fromNow = fromNow;
proto.to = to;
proto.toNow = toNow;
proto.get = stringGet;
proto.invalidAt = invalidAt;
proto.isAfter = isAfter;
proto.isBefore = isBefore;
proto.isBetween = isBetween;
proto.isSame = isSame;
proto.isSameOrAfter = isSameOrAfter;
proto.isSameOrBefore = isSameOrBefore;
proto.isValid = isValid$2;
proto.lang = lang;
proto.locale = locale;
proto.localeData = localeData;
proto.max = prototypeMax;
proto.min = prototypeMin;
proto.parsingFlags = parsingFlags;
proto.set = stringSet;
proto.startOf = startOf;
proto.subtract = subtract;
proto.toArray = toArray;
proto.toObject = toObject;
proto.toDate = toDate;
proto.toISOString = toISOString;
proto.inspect = inspect;
if (typeof Symbol !== "undefined" && Symbol.for != null) {
  proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
    return "Moment<" + this.format() + ">";
  };
}
proto.toJSON = toJSON;
proto.toString = toString;
proto.unix = unix;
proto.valueOf = valueOf;
proto.creationData = creationData;
proto.eraName = getEraName;
proto.eraNarrow = getEraNarrow;
proto.eraAbbr = getEraAbbr;
proto.eraYear = getEraYear;
proto.year = getSetYear;
proto.isLeapYear = getIsLeapYear;
proto.weekYear = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;
proto.quarter = proto.quarters = getSetQuarter;
proto.month = getSetMonth;
proto.daysInMonth = getDaysInMonth;
proto.week = proto.weeks = getSetWeek;
proto.isoWeek = proto.isoWeeks = getSetISOWeek;
proto.weeksInYear = getWeeksInYear;
proto.weeksInWeekYear = getWeeksInWeekYear;
proto.isoWeeksInYear = getISOWeeksInYear;
proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
proto.date = getSetDayOfMonth;
proto.day = proto.days = getSetDayOfWeek;
proto.weekday = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear = getSetDayOfYear;
proto.hour = proto.hours = getSetHour;
proto.minute = proto.minutes = getSetMinute;
proto.second = proto.seconds = getSetSecond;
proto.millisecond = proto.milliseconds = getSetMillisecond;
proto.utcOffset = getSetOffset;
proto.utc = setOffsetToUTC;
proto.local = setOffsetToLocal;
proto.parseZone = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST = isDaylightSavingTime;
proto.isLocal = isLocal;
proto.isUtcOffset = isUtcOffset;
proto.isUtc = isUtc;
proto.isUTC = isUtc;
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;
proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
function createUnix(input) {
  return createLocal(input * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string) {
  return string;
}
var proto$1 = Locale.prototype;
proto$1.calendar = calendar;
proto$1.longDateFormat = longDateFormat;
proto$1.invalidDate = invalidDate;
proto$1.ordinal = ordinal;
proto$1.preparse = preParsePostFormat;
proto$1.postformat = preParsePostFormat;
proto$1.relativeTime = relativeTime;
proto$1.pastFuture = pastFuture;
proto$1.set = set;
proto$1.eras = localeEras;
proto$1.erasParse = localeErasParse;
proto$1.erasConvertYear = localeErasConvertYear;
proto$1.erasAbbrRegex = erasAbbrRegex;
proto$1.erasNameRegex = erasNameRegex;
proto$1.erasNarrowRegex = erasNarrowRegex;
proto$1.months = localeMonths;
proto$1.monthsShort = localeMonthsShort;
proto$1.monthsParse = localeMonthsParse;
proto$1.monthsRegex = monthsRegex;
proto$1.monthsShortRegex = monthsShortRegex;
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;
proto$1.weekdays = localeWeekdays;
proto$1.weekdaysMin = localeWeekdaysMin;
proto$1.weekdaysShort = localeWeekdaysShort;
proto$1.weekdaysParse = localeWeekdaysParse;
proto$1.weekdaysRegex = weekdaysRegex;
proto$1.weekdaysShortRegex = weekdaysShortRegex;
proto$1.weekdaysMinRegex = weekdaysMinRegex;
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;
function get$1(format2, index2, field, setter) {
  var locale2 = getLocale(), utc = createUTC().set(setter, index2);
  return locale2[field](utc, format2);
}
function listMonthsImpl(format2, index2, field) {
  if (isNumber(format2)) {
    index2 = format2;
    format2 = void 0;
  }
  format2 = format2 || "";
  if (index2 != null) {
    return get$1(format2, index2, field, "month");
  }
  var i2, out = [];
  for (i2 = 0; i2 < 12; i2++) {
    out[i2] = get$1(format2, i2, field, "month");
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format2, index2, field) {
  if (typeof localeSorted === "boolean") {
    if (isNumber(format2)) {
      index2 = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  } else {
    format2 = localeSorted;
    index2 = format2;
    localeSorted = false;
    if (isNumber(format2)) {
      index2 = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  }
  var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i2, out = [];
  if (index2 != null) {
    return get$1(format2, (index2 + shift) % 7, field, "day");
  }
  for (i2 = 0; i2 < 7; i2++) {
    out[i2] = get$1(format2, (i2 + shift) % 7, field, "day");
  }
  return out;
}
function listMonths(format2, index2) {
  return listMonthsImpl(format2, index2, "months");
}
function listMonthsShort(format2, index2) {
  return listMonthsImpl(format2, index2, "monthsShort");
}
function listWeekdays(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdays");
}
function listWeekdaysShort(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysShort");
}
function listWeekdaysMin(localeSorted, format2, index2) {
  return listWeekdaysImpl(localeSorted, format2, index2, "weekdaysMin");
}
getSetGlobalLocale("en", {
  eras: [
    {
      since: "0001-01-01",
      until: Infinity,
      offset: 1,
      name: "Anno Domini",
      narrow: "AD",
      abbr: "AD"
    },
    {
      since: "0000-12-31",
      until: -Infinity,
      offset: 1,
      name: "Before Christ",
      narrow: "BC",
      abbr: "BC"
    }
  ],
  dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
  ordinal: function(number2) {
    var b = number2 % 10, output = toInt(number2 % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
    return number2 + output;
  }
});
hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
var mathAbs = Math.abs;
function abs() {
  var data2 = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data2.milliseconds = mathAbs(data2.milliseconds);
  data2.seconds = mathAbs(data2.seconds);
  data2.minutes = mathAbs(data2.minutes);
  data2.hours = mathAbs(data2.hours);
  data2.months = mathAbs(data2.months);
  data2.years = mathAbs(data2.years);
  return this;
}
function addSubtract$1(duration, input, value, direction) {
  var other = createDuration(input, value);
  duration._milliseconds += direction * other._milliseconds;
  duration._days += direction * other._days;
  duration._months += direction * other._months;
  return duration._bubble();
}
function add$1(input, value) {
  return addSubtract$1(this, input, value, 1);
}
function subtract$1(input, value) {
  return addSubtract$1(this, input, value, -1);
}
function absCeil(number2) {
  if (number2 < 0) {
    return Math.floor(number2);
  } else {
    return Math.ceil(number2);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data2 = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
    days2 = 0;
    months2 = 0;
  }
  data2.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data2.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data2.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data2.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months2 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  data2.days = days2;
  data2.months = months2;
  data2.years = years2;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months2) {
  return months2 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2, months2, milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === "month" || units === "quarter" || units === "year") {
    days2 = this._days + milliseconds2 / 864e5;
    months2 = this._months + daysToMonths(days2);
    switch (units) {
      case "month":
        return months2;
      case "quarter":
        return months2 / 3;
      case "year":
        return months2 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case "week":
        return days2 / 7 + milliseconds2 / 6048e5;
      case "day":
        return days2 + milliseconds2 / 864e5;
      case "hour":
        return days2 * 24 + milliseconds2 / 36e5;
      case "minute":
        return days2 * 1440 + milliseconds2 / 6e4;
      case "second":
        return days2 * 86400 + milliseconds2 / 1e3;
      case "millisecond":
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error("Unknown unit " + units);
    }
  }
}
function valueOf$1() {
  if (!this.isValid()) {
    return NaN;
  }
  return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
}
function makeAs(alias) {
  return function() {
    return this.as(alias);
  };
}
var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + "s"]() : NaN;
}
function makeGetter(name) {
  return function() {
    return this.isValid() ? this._data[name] : NaN;
  };
}
var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
function weeks() {
  return absFloor(this.days() / 7);
}
var round = Math.round, thresholds = {
  ss: 44,
  s: 45,
  m: 45,
  h: 22,
  d: 26,
  w: null,
  M: 11
};
function substituteTimeAgo(string, number2, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number2 || 1, !!withoutSuffix, string, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
  if (thresholds2.w != null) {
    a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
  }
  a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
  a[2] = withoutSuffix;
  a[3] = +posNegDuration > 0;
  a[4] = locale2;
  return substituteTimeAgo.apply(null, a);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round;
  }
  if (typeof roundingFunction === "function") {
    round = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === "s") {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false, th = thresholds, locale2, output;
  if (typeof argWithSuffix === "object") {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === "boolean") {
    withSuffix = argWithSuffix;
  }
  if (typeof argThresholds === "object") {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
var abs$1 = Math.abs;
function sign(x) {
  return (x > 0) - (x < 0) || +x;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
  if (!total) {
    return "P0D";
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
  totalSign = total < 0 ? "-" : "";
  ymSign = sign(this._months) !== sign(total) ? "-" : "";
  daysSign = sign(this._days) !== sign(total) ? "-" : "";
  hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
  return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
}
var proto$2 = Duration.prototype;
proto$2.isValid = isValid$1;
proto$2.abs = abs;
proto$2.add = add$1;
proto$2.subtract = subtract$1;
proto$2.as = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds = asSeconds;
proto$2.asMinutes = asMinutes;
proto$2.asHours = asHours;
proto$2.asDays = asDays;
proto$2.asWeeks = asWeeks;
proto$2.asMonths = asMonths;
proto$2.asQuarters = asQuarters;
proto$2.asYears = asYears;
proto$2.valueOf = valueOf$1;
proto$2._bubble = bubble;
proto$2.clone = clone$1;
proto$2.get = get$2;
proto$2.milliseconds = milliseconds;
proto$2.seconds = seconds;
proto$2.minutes = minutes;
proto$2.hours = hours;
proto$2.days = days;
proto$2.weeks = weeks;
proto$2.months = months;
proto$2.years = years;
proto$2.humanize = humanize;
proto$2.toISOString = toISOString$1;
proto$2.toString = toISOString$1;
proto$2.toJSON = toISOString$1;
proto$2.locale = locale;
proto$2.localeData = localeData;
proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
proto$2.lang = lang;
addFormatToken("X", 0, 0, "unix");
addFormatToken("x", 0, 0, "valueOf");
addRegexToken("x", matchSigned);
addRegexToken("X", matchTimestamp);
addParseToken("X", function(input, array, config) {
  config._d = new Date(parseFloat(input) * 1e3);
});
addParseToken("x", function(input, array, config) {
  config._d = new Date(toInt(input));
});
//! moment.js
hooks.version = "2.29.3";
setHookCallback(createLocal);
hooks.fn = proto;
hooks.min = min;
hooks.max = max;
hooks.now = now;
hooks.utc = createUTC;
hooks.unix = createUnix;
hooks.months = listMonths;
hooks.isDate = isDate;
hooks.locale = getSetGlobalLocale;
hooks.invalid = createInvalid;
hooks.duration = createDuration;
hooks.isMoment = isMoment;
hooks.weekdays = listWeekdays;
hooks.parseZone = createInZone;
hooks.localeData = getLocale;
hooks.isDuration = isDuration;
hooks.monthsShort = listMonthsShort;
hooks.weekdaysMin = listWeekdaysMin;
hooks.defineLocale = defineLocale;
hooks.updateLocale = updateLocale;
hooks.locales = listLocales;
hooks.weekdaysShort = listWeekdaysShort;
hooks.normalizeUnits = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat = getCalendarFormat;
hooks.prototype = proto;
hooks.HTML5_FMT = {
  DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
  DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
  DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
  DATE: "YYYY-MM-DD",
  TIME: "HH:mm",
  TIME_SECONDS: "HH:mm:ss",
  TIME_MS: "HH:mm:ss.SSS",
  WEEK: "GGGG-[W]WW",
  MONTH: "YYYY-MM"
};
const _sfc_main$4 = {
  name: "fm-generate-form",
  components: {
    GenerateFormItem,
    GenerateColItem,
    GenerateTabItem,
    GenerateReport,
    GenerateInline,
    moment: hooks
  },
  props: {
    data: {
      type: Object,
      default: () => ({
        "list": [],
        "config": {
          "labelWidth": 100,
          "labelPosition": "right",
          "size": "small",
          "customClass": "",
          "ui": "element",
          "layout": "horizontal"
        }
      })
    },
    remote: {
      type: Object,
      default: () => ({})
    },
    value: {
      type: Object,
      default: () => ({})
    },
    edit: {
      type: Boolean,
      default: true
    },
    printRead: {
      type: Boolean,
      default: false
    },
    remoteOption: {
      type: Object,
      default: () => ({})
    },
    preview: {
      type: Boolean,
      default: false
    },
    platform: {
      type: String,
      default: "pc"
    }
  },
  emits: ["on-change"],
  data() {
    return {
      models: {},
      rules: {},
      blanks: [],
      displayFields: {},
      dataBindFields: [],
      generateShow: false,
      resetModels: {},
      formKey: Math.random().toString(36).slice(-8),
      formStyleKey: Math.random().toString(36).slice(-8),
      formValue: this.value,
      formShow: false,
      formRef: Math.random().toString(36).slice(-8) + "Form",
      containerKey: Math.random().toString(36).slice(-8),
      dataSourceValue: [],
      eventFunction: {},
      instanceObject: {},
      dataSourceInterface: []
    };
  },
  created() {
    this._initForm();
  },
  mounted() {
    const _this = this;
    EventBus.$on("on-change-" + this.containerKey, (value, field, containerKey) => {
      if (this.containerKey == containerKey) {
        _this.setData({
          [field]: value
        });
      }
      _this.$emit("on-change", field, value, _this.models);
      this.$refs[this.formRef].validateField([field]);
    });
    this.$nextTick(() => {
      this.eventFunction["mounted"] && this.eventFunction["mounted"]();
    });
  },
  beforeUnmount() {
    let head = ".fm-" + this.formStyleKey + " ";
    clearStyleSheets(head);
    EventBus.$off("on-change-" + this.containerKey);
  },
  provide() {
    return {
      "generateComponentInstance": this.generateComponentInstance
    };
  },
  methods: {
    _initForm() {
      this.formShow = false;
      if (Object.keys(this.data).length) {
        this.generateModel(this.data.list);
      } else {
        this.generateModel([]);
      }
      this.resetModels = _.cloneDeep(this.models);
      this.models = __spreadValues({}, this.models);
      this.formShow = true;
      if (this.data.config && this.data.config.styleSheets) {
        let head = ".fm-" + this.formStyleKey + " ";
        updateStyleSheets(splitStyleSheets(this.data.config.styleSheets), head);
      }
      this.loadDataSource();
      this.loadEvents();
    },
    loadEvents() {
      if (this.data.config && this.data.config.eventScript) {
        for (let i2 = 0; i2 < this.data.config.eventScript.length; i2++) {
          let currentScript = this.data.config.eventScript[i2];
          this.eventFunction[currentScript.key] = Function(currentScript.func).bind(this);
        }
      }
    },
    triggerEvent(eventName, args) {
      if (this.data.config && this.data.config.eventScript) {
        let eventScript = this.data.config.eventScript.find((item2) => item2.name == eventName);
        if (eventScript) {
          return this.eventFunction[eventScript.key](args);
        }
      }
    },
    loadDataSource() {
      for (let i2 = 0; i2 < this.dataSourceInterface.length; i2++) {
        let curRequest = this.dataSourceInterface[i2];
        let requestObj = this.data.config.dataSource.find((item2) => item2.key == curRequest.key);
        if (requestObj && requestObj.auto)
          requestObj.name && this.sendRequest(requestObj.name, curRequest.args).then((data2) => {
            curRequest.fields.forEach((field) => {
              let curKey = field + "." + curRequest.key;
              let sourceValue = this.dataSourceValue.find((item2) => item2.key === curKey);
              if (sourceValue) {
                sourceValue.value = data2;
              } else {
                this.dataSourceValue.push({
                  key: curKey,
                  value: data2
                });
              }
            });
          });
      }
    },
    refreshFieldDataSource(field, args) {
      var _a2;
      let curRequest = this.dataSourceInterface.find((item2) => item2.fields.includes(field));
      if (curRequest) {
        let requestName = (_a2 = this.data.config.dataSource.find((item2) => item2.key == curRequest.key)) == null ? void 0 : _a2.name;
        requestName && this.sendRequest(requestName, __spreadValues(__spreadValues({}, curRequest.args), args)).then((data2) => {
          let curKey = field + "." + curRequest.key;
          let sourceValue = this.dataSourceValue.find((item2) => item2.key === curKey);
          if (sourceValue) {
            sourceValue.value = data2;
          } else {
            this.dataSourceValue.push({
              key: curKey,
              value: data2
            });
          }
        });
      }
    },
    sendRequest(name, args = {}) {
      return new Promise((resolve, reject) => {
        let currentDataSource = this.data.config.dataSource.find((item2) => item2.name === name);
        if (currentDataSource) {
          let options = {
            method: currentDataSource.method,
            url: currentDataSource.url,
            headers: currentDataSource.headers,
            params: currentDataSource.params
          };
          if (currentDataSource.requestFunc) {
            const requestDynamicFunc = Function("config, args", currentDataSource.requestFunc).bind(this);
            options = requestDynamicFunc(options, args);
          }
          axios(options).then((res) => {
            let data2 = res;
            if (currentDataSource.responseFunc) {
              const dynamicFunc = Function("res, args", currentDataSource.responseFunc).bind(this);
              data2 = dynamicFunc(res.data, args);
              resolve(data2);
            } else {
              resolve(res.data);
            }
          }).catch((error) => {
            if (currentDataSource.errorFunc) {
              const errorDynamicFunc = Function("error", currentDataSource.errorFunc).bind(this);
              errorDynamicFunc(error);
            }
            reject(error);
          });
        }
      });
    },
    generateModel(genList) {
      for (let i = 0; i < genList.length; i++) {
        if (genList[i].type === "grid") {
          this.displayFields[genList[i].model] = !genList[i].options.hidden;
          genList[i].columns.forEach((item2) => {
            this.generateModel(item2.list);
          });
        } else if (genList[i].type === "tabs") {
          genList[i].tabs.forEach((item2) => {
            this.generateModel(item2.list);
          });
          this.displayFields[genList[i].model] = !genList[i].options.hidden;
        } else if (genList[i].type === "report") {
          genList[i].rows.forEach((row) => {
            row.columns.forEach((column) => {
              this.generateModel(column.list);
            });
          });
          this.displayFields[genList[i].model] = !genList[i].options.hidden;
        } else if (genList[i].type === "inline") {
          this.generateModel(genList[i].list);
          this.displayFields[genList[i].model] = !genList[i].options.hidden;
        } else {
          if (Object.keys(this.formValue).indexOf(genList[i].model) >= 0) {
            this.models[genList[i].model] = this.formValue[genList[i].model];
            if ((Object.keys(genList[i].options).indexOf("dataBind") < 0 || genList[i].options.dataBind) && genList[i].key && genList[i].model) {
              this.dataBindFields.push(genList[i].model);
            }
            this.displayFields[genList[i].model] = !genList[i].options.hidden;
            if (genList[i].type === "blank") {
              this.blanks.push({
                name: genList[i].model
              });
            }
          } else {
            if (genList[i].type === "blank") {
              this.models[genList[i].model] = genList[i].options.defaultType === "String" ? "" : genList[i].options.defaultType === "Object" ? {} : [];
              if ((Object.keys(genList[i].options).indexOf("dataBind") < 0 || genList[i].options.dataBind) && genList[i].key && genList[i].model) {
                this.dataBindFields.push(genList[i].model);
              }
              this.displayFields[genList[i].model] = !genList[i].options.hidden;
              this.blanks.push({
                name: genList[i].model
              });
            } else {
              if (Object.keys(genList[i].options).indexOf("dataBind") < 0 || genList[i].options.dataBind) {
                if (/^[$][{].*[}]$/.test(genList[i].options.defaultValue)) {
                  let params = genList[i].options.defaultValue.substring(2, genList[i].options.defaultValue.length - 1);
                  if (params === "new Date()") {
                    genList[i].options.defaultValue = hooks(new Date()).format("YYYY-MM-DD HH:mm:ss");
                  } else {
                    let value = this.$store.state;
                    params.split(".").forEach((param) => {
                      value = value == null ? void 0 : value[param];
                    });
                    genList[i].options.defaultValue = value;
                  }
                }
                this.models[genList[i].model] = genList[i].options.defaultValue;
                if ((Object.keys(genList[i].options).indexOf("dataBind") < 0 || genList[i].options.dataBind) && genList[i].key && genList[i].model) {
                  this.dataBindFields.push(genList[i].model);
                }
              }
              this.displayFields[genList[i].model] = !genList[i].options.hidden;
            }
          }
          genList[i].tableColumns && genList[i].tableColumns.length && genList[i].tableColumns.forEach((item) => {
            if (item.type === "blank") {
              this.blanks.push({
                name: item.model
              });
            }
            if (this.rules[`${genList[i].model}.${item.model}`]) {
              this.rules[`${genList[i].model}.${item.model}`] = [
                ...this.rules[`${genList[i].model}.${item.model}`],
                ...item.rules ? item.rules.map((im) => {
                  if (im.pattern) {
                    return __spreadProps(__spreadValues({}, im), { pattern: eval(im.pattern) });
                  } else if (im.func) {
                    const validatorFunc = Function("rule", "value", "callback", im.func).bind(this);
                    return __spreadProps(__spreadValues({}, im), { validator: validatorFunc });
                  } else {
                    return __spreadValues({}, im);
                  }
                }) : []
              ];
            } else {
              this.rules[`${genList[i].model}.${item.model}`] = [
                ...item.rules ? item.rules.map((im) => {
                  if (im.pattern) {
                    return __spreadProps(__spreadValues({}, im), { pattern: eval(im.pattern) });
                  } else if (im.func) {
                    const validatorFunc = Function("rule", "value", "callback", im.func).bind(this);
                    return __spreadProps(__spreadValues({}, im), { validator: validatorFunc });
                  } else {
                    return __spreadValues({}, im);
                  }
                }) : []
              ];
            }
            if (item.options.remoteType === "datasource" && item.options.remoteDataSource) {
              this._setDataSourceInterface(`${genList[i].model}.${item.model}`, item.options.remoteArgs, item.options.remoteDataSource);
            }
          });
          if (this.rules[genList[i].model]) {
            this.rules[genList[i].model] = [...this.rules[genList[i].model], ...genList[i].rules ? genList[i].rules.map((item) => {
              if (item.pattern) {
                return __spreadProps(__spreadValues({}, item), { pattern: eval(item.pattern) });
              } else if (item.func) {
                const validatorFunc = Function("rule", "value", "callback", item.func).bind(this);
                return __spreadProps(__spreadValues({}, item), { validator: validatorFunc });
              } else {
                return __spreadValues({}, item);
              }
            }) : []];
          } else {
            this.rules[genList[i].model] = [...genList[i].rules ? genList[i].rules.map((item) => {
              if (item.pattern) {
                return __spreadProps(__spreadValues({}, item), { pattern: eval(item.pattern) });
              } else if (item.func) {
                const validatorFunc = Function("rule", "value", "callback", item.func).bind(this);
                return __spreadProps(__spreadValues({}, item), { validator: validatorFunc });
              } else {
                return __spreadValues({}, item);
              }
            }) : []];
          }
          if (genList[i].options.remoteType === "datasource" && genList[i].options.remoteDataSource) {
            this._setDataSourceInterface(genList[i].model, genList[i].options.remoteArgs, genList[i].options.remoteDataSource);
          }
        }
      }
    },
    _setDataSourceInterface(field, args, key) {
      let argsObj;
      if (typeof args == "string") {
        argsObj = new Function('"use strict";return (' + args + ")").bind(this)();
      } else {
        argsObj = args;
      }
      let findCurInterfaceIndex = this.dataSourceInterface.findIndex((item2) => item2.key == key && _.isEqual(item2.args, argsObj));
      if (findCurInterfaceIndex >= 0) {
        this.dataSourceInterface[findCurInterfaceIndex].fields.push(field);
      } else {
        this.dataSourceInterface.push({
          key,
          args: argsObj,
          fields: [field]
        });
      }
    },
    _setDisabled(genList2, fields, disabled) {
      for (let i2 = 0; i2 < genList2.length; i2++) {
        if (genList2[i2].type === "grid") {
          genList2[i2].columns.forEach((item2) => {
            this._setDisabled(item2.list, fields, disabled);
          });
        } else if (genList2[i2].type === "tabs") {
          genList2[i2].tabs.forEach((item2) => {
            this._setDisabled(item2.list, fields, disabled);
          });
        } else if (genList2[i2].type === "report") {
          genList2[i2].rows.forEach((row) => {
            row.columns.forEach((column) => {
              this._setDisabled(column.list, fields, disabled);
            });
          });
        } else if (genList2[i2].type === "inline") {
          this._setDisabled(genList2[i2].list, fields, disabled);
        } else {
          if (fields.indexOf(genList2[i2].model) >= 0) {
            genList2[i2].options.disabled = disabled;
          }
        }
      }
    },
    _updateClassName(genList2, fields, className, updateType) {
      for (let i2 = 0; i2 < genList2.length; i2++) {
        if (genList2[i2].type === "grid") {
          genList2[i2].columns.forEach((item2) => {
            this._updateClassName(item2.list, fields, className, updateType);
          });
        } else if (genList2[i2].type === "tabs") {
          genList2[i2].tabs.forEach((item2) => {
            this._updateClassName(item2.list, fields, className, updateType);
          });
        } else if (genList2[i2].type === "report") {
          genList2[i2].rows.forEach((row) => {
            row.columns.forEach((column) => {
              this._updateClassName(column.list, fields, className, updateType);
            });
          });
        } else if (genList2[i2].type === "inline") {
          this._updateClassName(genList2[i2].list, fields, className, updateType);
        } else {
          if (fields.indexOf(genList2[i2].model) >= 0) {
            if (updateType == "add" && !genList2[i2].options.customClass.split(" ").includes(className)) {
              genList2[i2].options.customClass = [...genList2[i2].options.customClass.split(" "), className].join(" ");
            }
            if (updateType == "remove" && genList2[i2].options.customClass.split(" ").includes(className)) {
              let originArray = genList2[i2].options.customClass.split(" ");
              originArray.splice(originArray.findIndex((item2) => item2 == className), 1);
              genList2[i2].options.customClass = originArray.join(" ");
            }
          }
        }
      }
    },
    _setOptions(genList2, fields, opts) {
      for (let i2 = 0; i2 < genList2.length; i2++) {
        if (genList2[i2].type === "grid") {
          genList2[i2].columns.forEach((item2) => {
            this._setOptions(item2.list, fields, opts);
          });
        } else if (genList2[i2].type === "tabs") {
          genList2[i2].tabs.forEach((item2) => {
            this._setOptions(item2.list, fields, opts);
          });
        } else if (genList2[i2].type === "report") {
          genList2[i2].rows.forEach((row) => {
            row.columns.forEach((column) => {
              this._setOptions(column.list, fields, opts);
            });
          });
        } else if (genList2[i2].type === "inline") {
          this._setOptions(genList2[i2].list, fields, opts);
        } else {
          if (fields.indexOf(genList2[i2].model) >= 0) {
            Object.keys(opts).forEach((key) => {
              genList2[i2].options[key] = opts[key];
            });
          }
        }
      }
    },
    validate(fields) {
      return new Promise((resolve, reject) => {
        if (fields) {
          this.$refs[this.formRef].validateField(fields, (valid, error) => {
            if (valid) {
              resolve();
            } else {
              reject(error);
            }
          });
        } else {
          this.$refs[this.formRef].validate((valid, error) => {
            if (valid) {
              resolve();
            } else {
              reject(error);
            }
          });
        }
      });
    },
    getData(isValidate = true) {
      return new Promise((resolve, reject) => {
        if (isValidate) {
          this.$refs[this.formRef].validate((valid) => {
            if (valid) {
              const resData = {};
              Object.keys(this.models).forEach((key) => {
                if (this.dataBindFields.indexOf(key) >= 0) {
                  resData[key] = this.models[key];
                }
              });
              resolve(JSON.parse(JSON.stringify(resData)));
            } else {
              reject(new Error(this.$t("fm.message.validError")).message);
            }
          });
        } else {
          const resData = {};
          Object.keys(this.models).forEach((key) => {
            if (this.dataBindFields.indexOf(key) >= 0) {
              resData[key] = this.models[key];
            }
          });
          resolve(JSON.parse(JSON.stringify(resData)));
        }
      });
    },
    getDataBindFields() {
      return this.dataBindFields;
    },
    reset() {
      this.setData(_.cloneDeep(this.resetModels));
      this.$nextTick(() => {
        setTimeout(() => {
          this.$refs[this.formRef].clearValidate();
        });
      });
    },
    onInputChange(value, field) {
      this.$emit("on-change", field, value, this.models);
      this.$emit(`on-${field}-change`, value);
    },
    display(fields) {
      Object.keys(this.displayFields).forEach((key) => {
        if (fields.indexOf(key) >= 0) {
          this.displayFields[key] = true;
        }
      });
      this.displayFields = __spreadValues({}, this.displayFields);
    },
    hide(fields) {
      Object.keys(this.displayFields).forEach((key) => {
        if (fields.indexOf(key) >= 0) {
          this.displayFields[key] = false;
        }
      });
      this.displayFields = __spreadValues({}, this.displayFields);
    },
    disabled(fields, disabled) {
      this._setDisabled(this.data.list, fields, disabled);
    },
    addClassName(fields, className) {
      this._updateClassName(this.data.list, fields, className, "add");
    },
    removeClassName(fields, className) {
      this._updateClassName(this.data.list, fields, className, "remove");
    },
    refresh() {
      this._initForm();
    },
    setData(value) {
      Object.keys(value).forEach((item2) => {
        this.models[item2] = value[item2];
      });
    },
    getComponent(name) {
      return this.instanceObject[name];
    },
    getValues() {
      return this.models;
    },
    getValue(fieldName) {
      return this.models[fieldName];
    },
    setRules(field, rules) {
      var _a2;
      this.rules[field] = [...rules];
      if ((field == null ? void 0 : field.split(".").length) > 1) {
        const tableRowLength = (_a2 = this.getValue(field.split(".")[0])) == null ? void 0 : _a2.length;
        for (let i2 = 0; i2 < tableRowLength; i2++) {
          this.$refs[this.formRef].validateField([`${field.split(".")[0]}.${i2}.${field.split(".")[1]}`]);
        }
      } else {
        this.$refs[this.formRef].validateField([field]);
      }
    },
    setOptions(fields, options) {
      this._setOptions(this.data.list, fields, options);
    },
    generateComponentInstance(key, instance2) {
      if (this.instanceObject[key]) {
        if (Array.isArray(this.instanceObject[key])) {
          this.instanceObject[key] = [...this.instanceObject[key], instance2];
        } else {
          this.instanceObject[key] = [this.instanceObject[key], instance2];
        }
      } else {
        this.instanceObject[key] = instance2;
      }
    },
    setOptionData(fields, data2) {
      fields.forEach((field) => {
        var _a2, _b;
        const curRef = this.instanceObject[field];
        (_a2 = curRef == null ? void 0 : curRef.$parent) == null ? void 0 : _a2.loadOptions(data2);
        const mCurRef = this.instanceObject["m" + field];
        (_b = mCurRef == null ? void 0 : mCurRef.$parent) == null ? void 0 : _b.loadOptions(data2);
      });
    }
  }
};
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_generate_col_item = resolveComponent("generate-col-item");
  const _component_generate_tab_item = resolveComponent("generate-tab-item");
  const _component_generate_report = resolveComponent("generate-report");
  const _component_generate_inline = resolveComponent("generate-inline");
  const _component_generate_form_item = resolveComponent("generate-form-item");
  const _component_el_form = resolveComponent("el-form");
  return openBlock(), createElementBlock("div", {
    style: normalizeStyle({ width: $props.data.config && $props.data.config.width }),
    class: normalizeClass(["fm-form", "fm-" + $data.formStyleKey])
  }, [
    $data.formShow ? (openBlock(), createBlock(_component_el_form, {
      ref: $data.formRef,
      key: $data.formKey,
      class: normalizeClass({
        [$props.data.config && $props.data.config.customClass]: $props.data.config && $props.data.config.customClass ? true : false,
        "no-label-form": $props.data.config && $props.data.config.labelWidth == 0
      }),
      size: $props.data.config && $props.data.config.size,
      model: $data.models,
      rules: $data.rules,
      "label-position": $props.data.config && $props.data.config.labelPosition,
      disabled: !$props.edit,
      "label-width": $props.data.config && $props.data.config.labelWidth + "px",
      "validate-on-rule-change": false
    }, {
      default: withCtx(() => [
        (openBlock(true), createElementBlock(Fragment, null, renderList($props.data.list, (item2) => {
          return openBlock(), createElementBlock(Fragment, null, [
            item2.type == "grid" ? (openBlock(), createBlock(_component_generate_col_item, {
              key: item2.key,
              model: $data.models,
              rules: $data.rules,
              element: item2,
              remote: $props.remote,
              blanks: $data.blanks,
              display: $data.displayFields,
              onInputChange: $options.onInputChange,
              edit: $props.edit,
              "remote-option": $props.remoteOption,
              platform: $props.platform,
              preview: $props.preview,
              "container-key": $data.containerKey,
              "data-source-value": $data.dataSourceValue,
              "event-function": $data.eventFunction,
              "print-read": $props.printRead,
              "form-component": _ctx.$refs[$data.formRef]
            }, createSlots({ _: 2 }, [
              renderList($data.blanks, (blank) => {
                return {
                  name: blank.name,
                  fn: withCtx((scope) => [
                    renderSlot(_ctx.$slots, blank.name, {
                      model: scope.model
                    })
                  ])
                };
              })
            ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "onInputChange", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : item2.type == "tabs" ? (openBlock(), createBlock(_component_generate_tab_item, {
              key: item2.key,
              model: $data.models,
              rules: $data.rules,
              element: item2,
              remote: $props.remote,
              blanks: $data.blanks,
              display: $data.displayFields,
              onInputChange: $options.onInputChange,
              edit: $props.edit,
              "remote-option": $props.remoteOption,
              platform: $props.platform,
              preview: $props.preview,
              "container-key": $data.containerKey,
              "data-source-value": $data.dataSourceValue,
              "event-function": $data.eventFunction,
              "print-read": $props.printRead,
              "form-component": _ctx.$refs[$data.formRef]
            }, createSlots({ _: 2 }, [
              renderList($data.blanks, (blank) => {
                return {
                  name: blank.name,
                  fn: withCtx((scope) => [
                    renderSlot(_ctx.$slots, blank.name, {
                      model: scope.model
                    })
                  ])
                };
              })
            ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "onInputChange", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : item2.type == "report" ? (openBlock(), createBlock(_component_generate_report, {
              key: item2.key,
              model: $data.models,
              rules: $data.rules,
              element: item2,
              remote: $props.remote,
              blanks: $data.blanks,
              display: $data.displayFields,
              onInputChange: $options.onInputChange,
              edit: $props.edit,
              "remote-option": $props.remoteOption,
              platform: $props.platform,
              preview: $props.preview,
              "container-key": $data.containerKey,
              "data-source-value": $data.dataSourceValue,
              "event-function": $data.eventFunction,
              "print-read": $props.printRead,
              "form-component": _ctx.$refs[$data.formRef]
            }, createSlots({ _: 2 }, [
              renderList($data.blanks, (blank) => {
                return {
                  name: blank.name,
                  fn: withCtx((scope) => [
                    renderSlot(_ctx.$slots, blank.name, {
                      model: scope.model
                    })
                  ])
                };
              })
            ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "onInputChange", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : item2.type == "inline" ? (openBlock(), createBlock(_component_generate_inline, {
              key: item2.key,
              model: $data.models,
              rules: $data.rules,
              element: item2,
              remote: $props.remote,
              blanks: $data.blanks,
              display: $data.displayFields,
              onInputChange: $options.onInputChange,
              edit: $props.edit,
              "remote-option": $props.remoteOption,
              platform: $props.platform,
              preview: $props.preview,
              "container-key": $data.containerKey,
              "data-source-value": $data.dataSourceValue,
              "event-function": $data.eventFunction,
              "print-read": $props.printRead,
              "form-component": _ctx.$refs[$data.formRef]
            }, createSlots({ _: 2 }, [
              renderList($data.blanks, (blank) => {
                return {
                  name: blank.name,
                  fn: withCtx((scope) => [
                    renderSlot(_ctx.$slots, blank.name, {
                      model: scope.model
                    })
                  ])
                };
              })
            ]), 1032, ["model", "rules", "element", "remote", "blanks", "display", "onInputChange", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"])) : (openBlock(), createBlock(_component_generate_form_item, {
              key: item2.key,
              models: $data.models,
              rules: $data.rules,
              widget: item2,
              remote: $props.remote,
              blanks: $data.blanks,
              display: $data.displayFields,
              onInputChange: $options.onInputChange,
              edit: $props.edit,
              "remote-option": $props.remoteOption,
              platform: $props.platform,
              preview: $props.preview,
              "container-key": $data.containerKey,
              "data-source-value": $data.dataSourceValue,
              "event-function": $data.eventFunction,
              "print-read": $props.printRead,
              "form-component": _ctx.$refs[$data.formRef]
            }, createSlots({ _: 2 }, [
              renderList($data.blanks, (blank) => {
                return {
                  name: blank.name,
                  fn: withCtx((scope) => [
                    renderSlot(_ctx.$slots, blank.name, {
                      model: scope.model
                    })
                  ])
                };
              })
            ]), 1032, ["models", "rules", "widget", "remote", "blanks", "display", "onInputChange", "edit", "remote-option", "platform", "preview", "container-key", "data-source-value", "event-function", "print-read", "form-component"]))
          ], 64);
        }), 256))
      ]),
      _: 3
    }, 8, ["class", "size", "model", "rules", "label-position", "disabled", "label-width"])) : createCommentVNode("", true)
  ], 6);
}
var GenerateForm = /* @__PURE__ */ _export_sfc(_sfc_main$4, [["render", _sfc_render$2]]);
var PreviewDialog_vue_vue_type_style_index_0_lang = "";
const _sfc_main$3 = {
  components: {
    CusDialog,
    GenerateForm
  },
  props: {},
  emits: ["get-data-success"],
  data() {
    return {
      previewVisible: false,
      formEdit: true,
      previewForm: {},
      widgetModels: {},
      remoteFuncs: {},
      platform: "pc",
      printRead: false
    };
  },
  methods: {
    preview(data2, platform) {
      this.previewForm = data2;
      this.formEdit = this.previewVisible = true;
      this.printRead = false;
      this.platform = platform;
    },
    handleTest() {
      const $form = this.previewForm.config.ui == "element" || !this.previewForm.config.ui ? this.$refs.generateForm : this.$refs.generateAntForm;
      $form.getData().then((data2) => {
        this.$emit("get-data-success", data2);
        this.$refs.widgetPreview.end();
      }).catch((e) => {
        this.$message.error(e);
        this.$refs.widgetPreview.end();
      });
    },
    handleReset() {
      const $form = this.previewForm.config.ui == "element" || !this.previewForm.config.ui ? this.$refs.generateForm : this.$refs.generateAntForm;
      $form.reset();
    },
    handleExportWord() {
      var rules = "", ss = document.styleSheets;
      for (var i2 = 0; i2 < ss.length; ++i2) {
        for (var x = 0; x < ss[i2].cssRules.length; ++x) {
          rules += ss[i2].cssRules[x].cssText;
        }
      }
      var header = `<html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:w='urn:schemas-microsoft-com:office:word' xmlns='http://www.w3.org/TR/REC-html40'>
      <head><meta charset='utf-8'><title>Export HTML to Word Document with JavaScript</title>
      <style>${rules}</style>
      </head><body>`;
      var footer = "</body></html>";
      var html = header + document.getElementById("export-id").innerHTML + footer;
      var blob = new Blob(["\uFEFF", html], {
        type: "application/msword"
      });
      var url = "data:application/vnd.ms-word;charset=utf-8," + encodeURIComponent(html);
      let filename = filename ? filename + ".doc" : "document.doc";
      var downloadLink = document.createElement("a");
      document.body.appendChild(downloadLink);
      if (navigator.msSaveOrOpenBlob) {
        navigator.msSaveOrOpenBlob(blob, filename);
      } else {
        downloadLink.href = url;
        downloadLink.download = filename;
        downloadLink.click();
      }
      document.body.removeChild(downloadLink);
    },
    handlePrint() {
      this.printRead = true;
      this.$nextTick(() => {
        window.print();
      });
    }
  }
};
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_generate_form = resolveComponent("generate-form");
  const _component_el_button = resolveComponent("el-button");
  const _component_cus_dialog = resolveComponent("cus-dialog");
  return openBlock(), createBlock(_component_cus_dialog, {
    visible: $data.previewVisible,
    onOnClose: _cache[5] || (_cache[5] = ($event) => $data.previewVisible = false),
    ref: "widgetPreview",
    form: "",
    title: _ctx.$t("fm.actions.preview"),
    fullscreen: "",
    "custom-class": "fm-generate-preview-container"
  }, {
    action: withCtx(() => [
      createVNode(_component_el_button, {
        size: "large",
        type: "primary",
        onClick: $options.handleTest
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.getData")), 1)
        ]),
        _: 1
      }, 8, ["onClick"]),
      createVNode(_component_el_button, {
        size: "large",
        onClick: $options.handleReset
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.reset")), 1)
        ]),
        _: 1
      }, 8, ["onClick"]),
      $data.formEdit ? (openBlock(), createBlock(_component_el_button, {
        key: 0,
        size: "large",
        onClick: _cache[0] || (_cache[0] = ($event) => $data.formEdit = false),
        disabled: $data.printRead
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.disabledEdit")), 1)
        ]),
        _: 1
      }, 8, ["disabled"])) : (openBlock(), createBlock(_component_el_button, {
        key: 1,
        size: "large",
        onClick: _cache[1] || (_cache[1] = ($event) => $data.formEdit = true),
        disabled: $data.printRead
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.enabledEdit")), 1)
        ]),
        _: 1
      }, 8, ["disabled"])),
      !$data.printRead ? (openBlock(), createBlock(_component_el_button, {
        key: 2,
        size: "large",
        onClick: _cache[2] || (_cache[2] = ($event) => $data.printRead = true)
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.printReadMode")), 1)
        ]),
        _: 1
      })) : createCommentVNode("", true),
      $data.printRead ? (openBlock(), createBlock(_component_el_button, {
        key: 3,
        size: "large",
        onClick: _cache[3] || (_cache[3] = ($event) => $data.printRead = false)
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.editMode")), 1)
        ]),
        _: 1
      })) : createCommentVNode("", true),
      createVNode(_component_el_button, {
        size: "large",
        onClick: $options.handlePrint
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.print")), 1)
        ]),
        _: 1
      }, 8, ["onClick"]),
      createVNode(_component_el_button, {
        size: "large",
        onClick: _cache[4] || (_cache[4] = ($event) => $data.previewVisible = false),
        type: "info",
        plain: ""
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.close")), 1)
        ]),
        _: 1
      })
    ]),
    default: withCtx(() => [
      createElementVNode("div", {
        class: normalizeClass(["fm-generate-preview", `${$data.platform}`])
      }, [
        $data.previewVisible && ($data.previewForm.config.ui == "element" || !$data.previewForm.config.ui) ? (openBlock(), createBlock(_component_generate_form, {
          key: 0,
          preview: "",
          "print-read": $data.printRead,
          platform: $data.platform,
          id: "export-id",
          edit: $data.formEdit,
          style: { "margin": "0 auto" },
          insite: "true",
          data: $data.previewForm,
          value: $data.widgetModels,
          ref: "generateForm"
        }, {
          blank: withCtx(() => []),
          _: 1
        }, 8, ["print-read", "platform", "edit", "data", "value"])) : createCommentVNode("", true)
      ], 2)
    ]),
    _: 1
  }, 8, ["visible", "title"]);
}
var PreviewDialog = /* @__PURE__ */ _export_sfc(_sfc_main$3, [["render", _sfc_render$1]]);
var index_vue_vue_type_style_index_0_lang = "";
const _hoisted_1$1 = { class: "image-slot" };
const _hoisted_2$1 = { style: { "padding": "10px", "overflow": "hidden", "text-overflow": "ellipsis", "white-space": "nowrap" } };
const _hoisted_3$1 = { key: 0 };
const _hoisted_4$1 = { key: 1 };
const _hoisted_5$1 = { class: "action-cover" };
const _hoisted_6$1 = { class: "import-json-code" };
const _hoisted_7$1 = { style: { "margin-top": "30px", "text-align": "center" } };
const _sfc_main$2 = {
  name: "index",
  props: {
    libraryList: {
      type: Array,
      defalut: () => []
    }
  },
  emits: ["load-json"],
  setup(__props, { emit: emit2 }) {
    const props2 = __props;
    const activeName = ref("library");
    const jsonEg = ref(`{
  "list": [],
  "config": {
    "labelWidth": 100,
    "labelPosition": "right",
    "size": "small",
    "customClass": "",
    "ui": "element",
    "layout": "horizontal",
    "width": "100%",
    "hideLabel": false,
    "hideErrorMessage": false
  }
}`);
    const submit = () => {
      emit2("load-json", jsonEg.value);
    };
    const loadJson = (json) => {
      emit2("load-json", json);
    };
    return (_ctx, _cache) => {
      const _component_el_image = resolveComponent("el-image");
      const _component_el_button = resolveComponent("el-button");
      const _component_el_card = resolveComponent("el-card");
      const _component_el_space = resolveComponent("el-space");
      const _component_el_empty = resolveComponent("el-empty");
      const _component_el_scrollbar = resolveComponent("el-scrollbar");
      const _component_el_tab_pane = resolveComponent("el-tab-pane");
      const _component_el_alert = resolveComponent("el-alert");
      const _component_el_tabs = resolveComponent("el-tabs");
      return openBlock(), createBlock(_component_el_tabs, {
        modelValue: activeName.value,
        "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => activeName.value = $event),
        class: "import-json-container"
      }, {
        default: withCtx(() => [
          createVNode(_component_el_tab_pane, {
            label: _ctx.$t("fm.importjson.name"),
            name: "library"
          }, {
            default: withCtx(() => [
              createVNode(_component_el_scrollbar, {
                height: "560px",
                always: "",
                class: "import-json-library-container"
              }, {
                default: withCtx(() => {
                  var _a2;
                  return [
                    ((_a2 = props2.libraryList) == null ? void 0 : _a2.length) ? (openBlock(), createBlock(_component_el_space, {
                      key: 0,
                      wrap: "",
                      size: 20
                    }, {
                      default: withCtx(() => [
                        (openBlock(true), createElementBlock(Fragment, null, renderList(props2.libraryList, (item2) => {
                          return openBlock(), createBlock(_component_el_card, {
                            class: "import-json-card",
                            key: item2.title,
                            shadow: "hover",
                            "body-style": { padding: "0px", width: "218px" }
                          }, {
                            default: withCtx(() => [
                              createVNode(_component_el_image, {
                                style: { "width": "218px", "height": "218px" },
                                src: item2.url,
                                fit: "contain"
                              }, {
                                error: withCtx(() => [
                                  createElementVNode("div", _hoisted_1$1, toDisplayString$1(_ctx.$t("fm.importjson.noimage")), 1)
                                ]),
                                _: 2
                              }, 1032, ["src"]),
                              createElementVNode("div", _hoisted_2$1, [
                                _ctx.$i18n.locale == "zh-cn" ? (openBlock(), createElementBlock("span", _hoisted_3$1, toDisplayString$1(item2.title), 1)) : (openBlock(), createElementBlock("span", _hoisted_4$1, toDisplayString$1(item2.enTitle), 1))
                              ]),
                              createElementVNode("div", _hoisted_5$1, [
                                createVNode(_component_el_button, {
                                  type: "primary",
                                  round: "",
                                  onClick: ($event) => loadJson(item2.json)
                                }, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString$1(_ctx.$t("fm.importjson.loadjson")), 1)
                                  ]),
                                  _: 2
                                }, 1032, ["onClick"])
                              ])
                            ]),
                            _: 2
                          }, 1024);
                        }), 128))
                      ]),
                      _: 1
                    })) : (openBlock(), createBlock(_component_el_empty, {
                      key: 1,
                      description: _ctx.$t("fm.importjson.nojson")
                    }, null, 8, ["description"]))
                  ];
                }),
                _: 1
              })
            ]),
            _: 1
          }, 8, ["label"]),
          createVNode(_component_el_tab_pane, {
            label: "JSON",
            name: "json"
          }, {
            default: withCtx(() => [
              createElementVNode("div", _hoisted_6$1, [
                createVNode(_component_el_alert, {
                  type: "info",
                  title: _ctx.$t("fm.description.uploadJsonInfo")
                }, null, 8, ["title"]),
                createVNode(CodeEditor, {
                  height: "450px",
                  mode: "json",
                  modelValue: jsonEg.value,
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => jsonEg.value = $event)
                }, null, 8, ["modelValue"]),
                createElementVNode("div", _hoisted_7$1, [
                  createVNode(_component_el_button, {
                    type: "primary",
                    onClick: submit
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.confirm")), 1)
                    ]),
                    _: 1
                  })
                ])
              ])
            ]),
            _: 1
          })
        ]),
        _: 1
      }, 8, ["modelValue"]);
    };
  }
};
const _sfc_main$1 = {
  name: "dialog",
  emits: ["load-json"],
  setup(__props, { expose, emit: emit2 }) {
    const visible = ref(false);
    const libraryList = ref([]);
    const open2 = (list) => {
      visible.value = true;
      libraryList.value = list;
    };
    const handleClose = () => {
      visible.value = false;
    };
    const handleLoadJson = (json) => {
      emit2("load-json", json);
      visible.value = false;
    };
    expose({
      open: open2
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(CusDialog, {
        visible: visible.value,
        onOnClose: handleClose,
        width: "1000px",
        form: "",
        title: _ctx.$t("fm.actions.import"),
        action: false
      }, {
        default: withCtx(() => [
          createVNode(_sfc_main$2, {
            "library-list": libraryList.value,
            onLoadJson: handleLoadJson
          }, null, 8, ["library-list"])
        ]),
        _: 1
      }, 8, ["visible", "title"]);
    };
  }
};
var Container_vue_vue_type_style_index_0_lang = "";
const _sfc_main = {
  name: "fm-making-form",
  components: {
    Draggable: draggableComponent,
    WidgetConfig,
    FormConfig,
    ListConfig,
    WidgetForm,
    CusDialog,
    CodeEditor,
    PreviewDialog,
    ImportJsonDialog: _sfc_main$1
  },
  props: {
    ds: {
      type: Object,
      default: () => {
      }
    },
    tableName: {
      type: String,
      default: ""
    },
    uploadPath: {
      type: String,
      default: ""
    },
    tabList: {
      type: Boolean,
      default: false
    },
    bindDataTable: {
      type: Boolean,
      default: false
    },
    preview: {
      type: Boolean,
      default: false
    },
    generateCode: {
      type: Boolean,
      default: false
    },
    generateJson: {
      type: Boolean,
      default: false
    },
    upload: {
      type: Boolean,
      default: false
    },
    clearable: {
      type: Boolean,
      default: false
    },
    basicFields: {
      type: Array,
      default: () => ["input", "textarea", "number", "radio", "checkbox", "time", "date", "rate", "color", "select", "switch", "slider", "text", "html", "button", "link", "cascader", "treeselect", "steps", "transfer"]
    },
    advanceFields: {
      type: Array,
      default: () => ["blank", "component", "fileupload", "imgupload", "editor", "table", "user", "role", "office", "area", "dict"]
    },
    layoutFields: {
      type: Array,
      default: () => ["grid", "report", "tabs", "inline", "divider", "alert"]
    },
    customFields: {
      type: Array,
      default: () => []
    },
    globalConfig: {
      type: Object,
      default: () => ({})
    },
    fieldConfig: {
      type: Array,
      default: () => []
    },
    name: {
      type: String,
      default: ""
    },
    cache: {
      type: Boolean,
      default: false
    },
    jsonTemplates: {
      type: Array,
      default: () => []
    }
  },
  emits: ["ready"],
  data() {
    return {
      basicComponents,
      layoutComponents,
      advanceComponents,
      customComponents: [],
      resetJson: false,
      widgetForm: {
        list: [],
        config: {
          labelWidth: 100,
          labelPosition: "right",
          size: "default",
          customClass: "",
          ui: "element",
          layout: "horizontal",
          actions: [],
          width: "100%",
          hideLabel: false,
          hideErrorMessage: false
        }
      },
      configTab: "form",
      widgetFormSelect: null,
      previewVisible: false,
      jsonVisible: false,
      codeVisible: false,
      uploadVisible: false,
      blank: "",
      htmlTemplate: "",
      jsonTemplate: "",
      vueTemplate: "",
      uploadEditor: null,
      jsonCopyValue: "",
      jsonClipboard: null,
      codeCopyValue: "",
      codeClipboard: null,
      codeActiveName: "vue",
      undo: false,
      redo: false,
      formKey: Math.random().toString(36).slice(-8),
      styleSheetsArray: [],
      dataSourceArray: [],
      eventScriptArray: [],
      platform: "pc"
    };
  },
  created() {
    advanceComponents[2].options.action = this.uploadPath;
    advanceComponents[3].options.action = this.uploadPath;
    this._loadComponents();
  },
  provide() {
    return {
      "changeConfigTab": this.changeConfigTab
    };
  },
  mounted() {
    const _this = this;
    historyManager.clear().then(() => {
      var _a2;
      this.widgetForm.config.eventScript = [
        { key: "mounted", name: "mounted", func: "" }
      ];
      this.widgetForm.config = __spreadValues(__spreadValues({}, this.widgetForm.config), this.globalConfig);
      this.platform = this.widgetForm.config.platform || "pc";
      this.initConfig();
      this.cache && this.setJSON((_a2 = localStorage.getItem("fmjson" + this.name)) != null ? _a2 : this.widgetForm);
      this.$emit("ready");
      EventBus.$on("on-history-add-" + this.formKey, () => {
        historyManager.add(this.widgetForm, this.widgetFormSelect && this.widgetFormSelect.key ? this.widgetFormSelect.key : "").then(() => {
          _this.undo = true;
          _this.redo = false;
        });
        this.saveJsonCache();
      });
      this.$refs.widgetForm.$el.addEventListener("contextmenu", (e) => {
      });
      window.onbeforeunload = (e) => {
        this.saveJsonCache();
      };
    });
  },
  beforeUnmount() {
    EventBus.$off("on-history-add-" + this.formKey);
    this.saveJsonCache();
  },
  methods: {
    saveJsonCache() {
      this.cache && localStorage.setItem("fmjson" + this.name, JSON.stringify(this.widgetForm));
    },
    removeJsonCache() {
      localStorage.setItem("fmjson" + this.name, JSON.stringify(this.widgetForm));
    },
    initConfig() {
      this.platform = this.widgetForm.config.platform || "pc";
      if (this.widgetForm.config.styleSheets) {
        this.onStyleUpdate(splitStyleSheets(this.widgetForm.config.styleSheets));
      }
      if (this.widgetForm.config.dataSource) {
        this.onDataSourceUpdate(this.widgetForm.config.dataSource);
      }
      if (this.widgetForm.config.eventScript) {
        this.onEventScriptUpdate(this.widgetForm.config.eventScript);
      }
    },
    handleGoGithub() {
      window.location.href = "https://github.com/GavinZhuLei/vue-form-making";
    },
    handleConfigSelect(value) {
      this.configTab = value;
    },
    handleMoveEnd(evt) {
    },
    handleMoveStart({ oldIndex: oldIndex2 }) {
    },
    handleMove() {
      return true;
    },
    handlePreview() {
      this.$refs.previewDialog.preview(_.cloneDeep(this.widgetForm), this.platform);
    },
    preivewGetData(data2) {
      this.jsonVisible = true;
      this.jsonTemplate = data2;
      this.$nextTick(() => {
        if (!this.jsonClipboard) {
          this.jsonClipboard = new ClipboardJS(document.getElementsByClassName("json-btn")[0]);
          this.jsonClipboard.on("success", (e) => {
            this.$message.success(this.$t("fm.message.copySuccess"));
          });
        }
        this.jsonCopyValue = JSON.stringify(data2);
      });
    },
    handleGenerateJson() {
      this.jsonVisible = true;
      this.jsonTemplate = this.widgetForm;
      this.$nextTick(() => {
        if (!this.jsonClipboard) {
          this.jsonClipboard = new ClipboardJS(document.getElementsByClassName("json-btn")[0]);
          this.jsonClipboard.on("success", (e) => {
            this.$message.success(this.$t("fm.message.copySuccess"));
            e.clearSelection();
          });
        }
        this.jsonCopyValue = JSON.stringify(this.widgetForm);
      });
    },
    handleGenerateCode() {
      this.codeVisible = true;
      this.htmlTemplate = generateCode(JSON.stringify(this.widgetForm), "html", this.widgetForm.config.ui);
      this.vueTemplate = generateCode(JSON.stringify(this.widgetForm), "vue", this.widgetForm.config.ui);
      this.$nextTick(() => {
        if (!this.codeClipboard) {
          this.codeClipboard = new ClipboardJS(document.getElementsByClassName("code-btn")[0]);
          this.codeClipboard.on("success", (e) => {
            this.$message.success(this.$t("fm.message.copySuccess"));
          });
        }
        this.codeCopyValue = this.codeActiveName == "vue" ? this.vueTemplate : this.htmlTemplate;
      });
    },
    handleUpload() {
      this.$refs.importJsonDialog.open(this.jsonTemplates);
    },
    handleLoadJson(json) {
      try {
        this.setJSON(json);
      } catch (e) {
        this.$message.error(e.message);
      }
    },
    handleClear() {
      this.widgetForm = __spreadProps(__spreadValues({}, this.widgetForm), {
        list: []
      });
      this.widgetFormSelect = {};
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    clear() {
      this.handleClear();
    },
    getJSON() {
      return this.widgetForm;
    },
    getHtml(type = "html", ui = "element") {
      return generateCode(JSON.stringify(this.widgetForm), type, ui);
    },
    setJSON(json) {
      if (typeof json === "string") {
        json = JSON.parse(json);
      }
      this.widgetForm = __spreadProps(__spreadValues({}, json), {
        list: json.list.map((item2) => UpgradeData(item2))
      });
      if (json.list.length > 0) {
        this.widgetFormSelect = json.list[0];
      } else {
        this.widgetFormSelect = {};
      }
      this.initConfig();
      this.$nextTick(() => {
        EventBus.$emit("on-history-add-" + this.formKey);
      });
    },
    handleInput(val) {
      this.blank = val;
    },
    handleField(item2) {
      EventBus.$emit("on-field-add-" + this.formKey, item2);
    },
    handleUndo() {
      if (this.undo) {
        historyManager.updateLatest(this.widgetForm, this.widgetFormSelect && this.widgetFormSelect.key ? this.widgetFormSelect.key : "").then(() => {
          historyManager.undo().then((data2) => {
            this.widgetForm = __spreadValues({}, data2.data);
            this.widgetFormSelect = this._findWidgetItem(this.widgetForm.list, data2.key);
            this.undo = data2.undo;
            this.redo = data2.redo;
          });
        });
      }
    },
    handleRedo() {
      if (this.redo) {
        historyManager.redo().then((data2) => {
          this.widgetForm = __spreadValues({}, data2.data);
          this.widgetFormSelect = this._findWidgetItem(this.widgetForm.list, data2.key);
          this.undo = data2.undo;
          this.redo = data2.redo;
        });
      }
    },
    _findWidgetItem(list, key, type = "key") {
      const index2 = list.findIndex((item2) => item2[type] == key);
      if (index2 >= 0) {
        return list[index2];
      } else {
        for (let m = 0; m < list.length; m++) {
          const item2 = list[m];
          if (item2.type === "grid") {
            for (let i2 = 0; i2 < item2.columns.length; i2++) {
              return this._findWidgetItem(item2.columns[i2].list, key, type);
            }
          }
          if (item2.type === "table") {
            return this._findWidgetItem(item2.tableColumns, key, type);
          }
          if (item2.type === "tabs") {
            for (let i2 = 0; i2 < item2.tabs.length; i2++) {
              return this._findWidgetItem(item2.tabs[i2].list, key, type);
            }
          }
          if (item2.type === "report") {
            for (let r = 0; r < item2.rows.length; r++) {
              for (let c = 0; c < item2.rows[r].columns.length; c++) {
                return this._findWidgetItem(item2.rows[r].columns[c].list, key, type);
              }
            }
          }
          if (item2.type === "inline") {
            return this._findWidgetItem(item2.list, key, type);
          }
        }
        return {};
      }
    },
    _loadComponents() {
      this.basicComponents = this.basicComponents.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          name: this.$t(`fm.components.fields.${item2.type}`),
          options: (() => {
            let newField = this.fieldConfig.find((o) => o.type == item2.type);
            if (newField) {
              return __spreadValues(__spreadValues({}, item2.options), newField.options);
            } else {
              return __spreadValues({}, item2.options);
            }
          })()
        });
      });
      this.advanceComponents = this.advanceComponents.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          name: this.$t(`fm.components.fields.${item2.type}`),
          options: (() => {
            let newField = this.fieldConfig.find((o) => o.type == item2.type);
            if (newField) {
              return __spreadValues(__spreadValues({}, item2.options), newField.options);
            } else {
              return __spreadValues({}, item2.options);
            }
          })()
        });
      });
      this.layoutComponents = this.layoutComponents.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          name: this.$t(`fm.components.fields.${item2.type}`),
          options: (() => {
            let newField = this.fieldConfig.find((o) => o.type == item2.type);
            if (newField) {
              return __spreadValues(__spreadValues({}, item2.options), newField.options);
            } else {
              return __spreadValues({}, item2.options);
            }
          })()
        });
      });
      this.customComponents = this.customFields.map((item2) => {
        return __spreadProps(__spreadValues({}, item2), {
          type: "custom",
          icon: "icon-extend",
          options: (() => {
            let newField = this.fieldConfig.find((o) => o.type == item2.type);
            if (newField) {
              return __spreadValues(__spreadValues({}, item2.options), newField.options);
            } else {
              return __spreadValues({}, item2.options);
            }
          })()
        });
      });
    },
    onStyleUpdate(sheets) {
      let head = ".fm-" + this.formKey + " ";
      updateStyleSheets(sheets, head);
      this.styleSheetsArray = splitSheetName(sheets);
    },
    onDataSourceUpdate(dataSource) {
      this.dataSourceArray = dataSource.map((item2) => ({
        value: item2.key,
        label: item2.name,
        args: item2.args ? Object.fromEntries(item2.args.map((o) => [o, ""])) : {}
      }));
    },
    onEventScriptUpdate(eventScript) {
      this.eventScriptArray = eventScript.map((item2) => ({
        value: item2.key,
        label: item2.name
      }));
    },
    onEventScriptConfirm(eventObj) {
      this.$refs.widgetConfig.setEvent(eventObj);
    },
    handlePlatform(platform) {
      this.widgetForm.config.platform = this.platform = platform;
    },
    handleExport() {
      const fileName = new Date().getTime() + "." + this.codeActiveName;
      const fileData = this.codeActiveName == "vue" ? this.vueTemplate : this.htmlTemplate;
      this._exportFile(fileData, fileName);
    },
    handleExportJSON() {
      this._exportFile(JSON.stringify(this.jsonTemplate), new Date().getTime() + ".json");
    },
    handleEventAdd(name) {
      this.$refs.formConfig.editScript(name);
    },
    handleEventEdit({ eventName, functionKey }) {
      this.$refs.formConfig.editScript(eventName, functionKey);
    },
    handleEventRemove(eventName) {
      this.widgetFormSelect.events[eventName] = "";
    },
    _exportFile(data2, fileName) {
      let blob = new Blob([data2], {
        type: "application/octet-stream"
      });
      if (navigator.msSaveOrOpenBlob) {
        navigator.msSaveOrOpenBlob(blob, fileName);
      } else {
        let downloadLink = document.createElement("a");
        downloadLink.href = window.URL.createObjectURL(blob);
        downloadLink.download = fileName;
        downloadLink.style.display = "none";
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
      }
    },
    setSelect(field) {
      let selectWidget = this._findWidgetItem(this.widgetForm.list, field, "model");
      if (selectWidget) {
        this.widgetFormSelect = selectWidget;
      }
    },
    changeConfigTab(tab) {
      this.configTab = tab;
    }
  },
  watch: {
    "$i18n.locale": function(val) {
      this._loadComponents();
    },
    codeActiveName(val) {
      this.codeCopyValue = this.codeActiveName == "vue" ? this.vueTemplate : this.htmlTemplate;
    }
  }
};
const _hoisted_1 = { class: "components-list" };
const _hoisted_2 = { class: "widget-cate" };
const _hoisted_3 = ["onClick"];
const _hoisted_4 = { class: "widget-cate" };
const _hoisted_5 = ["onClick"];
const _hoisted_6 = { class: "widget-cate" };
const _hoisted_7 = ["onClick"];
const _hoisted_8 = { class: "widget-cate" };
const _hoisted_9 = ["onClick"];
const _hoisted_10 = { class: "btn-bar-plat" };
const _hoisted_11 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-pc" }, null, -1);
const _hoisted_12 = [
  _hoisted_11
];
const _hoisted_13 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-pad" }, null, -1);
const _hoisted_14 = [
  _hoisted_13
];
const _hoisted_15 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-mobile" }, null, -1);
const _hoisted_16 = [
  _hoisted_15
];
const _hoisted_17 = /* @__PURE__ */ createElementVNode("div", { class: "btn-diviler" }, null, -1);
const _hoisted_18 = { class: "btn-bar-action" };
const _hoisted_19 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-007caozuo_chexiao" }, null, -1);
const _hoisted_20 = [
  _hoisted_19
];
const _hoisted_21 = /* @__PURE__ */ createElementVNode("i", { class: "iconfont icon-8zhongzuo" }, null, -1);
const _hoisted_22 = [
  _hoisted_21
];
const _hoisted_23 = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-daoru",
  style: { "font-size": "16px", "font-weight": "600", "margin": "5px" }
}, null, -1);
const _hoisted_24 = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-qingkong",
  style: { "font-size": "16px", "font-weight": "600", "margin": "5px" }
}, null, -1);
const _hoisted_25 = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-icon_yulan",
  style: { "font-size": "16px", "font-weight": "600", "margin": "5px" }
}, null, -1);
const _hoisted_26 = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-json1",
  style: { "font-size": "16px", "font-weight": "600", "margin": "5px" }
}, null, -1);
const _hoisted_27 = /* @__PURE__ */ createElementVNode("i", {
  class: "iconfont icon-daimakuai",
  style: { "font-size": "16px", "font-weight": "600", "margin": "5px" }
}, null, -1);
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_draggable = resolveComponent("draggable");
  const _component_el_aside = resolveComponent("el-aside");
  const _component_el_tooltip = resolveComponent("el-tooltip");
  const _component_el_button = resolveComponent("el-button");
  const _component_el_header = resolveComponent("el-header");
  const _component_widget_form = resolveComponent("widget-form");
  const _component_el_main = resolveComponent("el-main");
  const _component_el_container = resolveComponent("el-container");
  const _component_widget_config = resolveComponent("widget-config");
  const _component_form_config = resolveComponent("form-config");
  const _component_list_config = resolveComponent("list-config");
  const _component_preview_dialog = resolveComponent("preview-dialog");
  const _component_import_json_dialog = resolveComponent("import-json-dialog");
  const _component_code_editor = resolveComponent("code-editor");
  const _component_cus_dialog = resolveComponent("cus-dialog");
  const _component_el_tab_pane = resolveComponent("el-tab-pane");
  const _component_el_tabs = resolveComponent("el-tabs");
  return openBlock(), createBlock(_component_el_container, {
    class: normalizeClass(["fm2-container fm-form", "fm-" + $data.formKey])
  }, {
    default: withCtx(() => [
      createVNode(_component_el_main, { class: "fm2-main" }, {
        default: withCtx(() => [
          createVNode(_component_el_container, null, {
            default: withCtx(() => [
              createVNode(_component_el_aside, { width: "250px" }, {
                default: withCtx(() => [
                  createElementVNode("div", _hoisted_1, [
                    $props.basicFields.length ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                      createElementVNode("div", _hoisted_2, toDisplayString$1(_ctx.$t("fm.components.basic.title")), 1),
                      createVNode(_component_draggable, {
                        tag: "ul",
                        list: $data.basicComponents,
                        group: { name: "people", pull: "clone", put: false },
                        sort: false,
                        "ghost-class": "ghost",
                        onEnd: $options.handleMoveEnd,
                        onStart: $options.handleMoveStart,
                        move: $options.handleMove,
                        "item-key": "name"
                      }, {
                        item: withCtx(({ element }) => [
                          $props.basicFields.indexOf(element.type) >= 0 ? (openBlock(), createElementBlock("li", {
                            key: 0,
                            onClick: ($event) => $options.handleField(element),
                            class: normalizeClass(["form-edit-widget-label", { "no-put": element.type == "divider" }])
                          }, [
                            createElementVNode("a", null, [
                              createElementVNode("i", {
                                class: normalizeClass(["icon iconfont", element.icon])
                              }, null, 2),
                              createElementVNode("span", null, toDisplayString$1(element.name), 1)
                            ])
                          ], 10, _hoisted_3)) : createCommentVNode("", true)
                        ]),
                        _: 1
                      }, 8, ["list", "onEnd", "onStart", "move"])
                    ], 64)) : createCommentVNode("", true),
                    $props.advanceFields.length ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                      createElementVNode("div", _hoisted_4, toDisplayString$1(_ctx.$t("fm.components.advance.title")), 1),
                      createVNode(_component_draggable, {
                        tag: "ul",
                        list: $data.advanceComponents,
                        group: { name: "people", pull: "clone", put: false },
                        sort: false,
                        "ghost-class": "ghost",
                        onEnd: $options.handleMoveEnd,
                        onStart: $options.handleMoveStart,
                        move: $options.handleMove,
                        "item-key": "name"
                      }, {
                        item: withCtx(({ element }) => [
                          $props.advanceFields.indexOf(element.type) >= 0 ? (openBlock(), createElementBlock("li", {
                            key: 0,
                            onClick: ($event) => $options.handleField(element),
                            class: normalizeClass(["form-edit-widget-label", { "no-put": element.type == "table" }])
                          }, [
                            createElementVNode("a", null, [
                              createElementVNode("i", {
                                class: normalizeClass(["icon iconfont", element.icon])
                              }, null, 2),
                              createElementVNode("span", null, toDisplayString$1(element.name), 1)
                            ])
                          ], 10, _hoisted_5)) : createCommentVNode("", true)
                        ]),
                        _: 1
                      }, 8, ["list", "onEnd", "onStart", "move"])
                    ], 64)) : createCommentVNode("", true),
                    $props.layoutFields.length ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                      createElementVNode("div", _hoisted_6, toDisplayString$1(_ctx.$t("fm.components.layout.title")), 1),
                      createVNode(_component_draggable, {
                        tag: "ul",
                        list: $data.layoutComponents,
                        group: { name: "people", pull: "clone", put: false },
                        sort: false,
                        "ghost-class": "ghost",
                        onEnd: $options.handleMoveEnd,
                        onStart: $options.handleMoveStart,
                        move: $options.handleMove,
                        "item-key": "name"
                      }, {
                        item: withCtx(({ element }) => [
                          $props.layoutFields.indexOf(element.type) >= 0 ? (openBlock(), createElementBlock("li", {
                            key: 0,
                            onClick: ($event) => $options.handleField(element),
                            class: "form-edit-widget-label no-put"
                          }, [
                            createElementVNode("a", null, [
                              createElementVNode("i", {
                                class: normalizeClass(["icon iconfont", element.icon])
                              }, null, 2),
                              createElementVNode("span", null, toDisplayString$1(element.name), 1)
                            ])
                          ], 8, _hoisted_7)) : createCommentVNode("", true)
                        ]),
                        _: 1
                      }, 8, ["list", "onEnd", "onStart", "move"])
                    ], 64)) : createCommentVNode("", true),
                    $props.customFields.length ? (openBlock(), createElementBlock(Fragment, { key: 3 }, [
                      createElementVNode("div", _hoisted_8, toDisplayString$1(_ctx.$t("fm.components.custom.title")), 1),
                      createVNode(_component_draggable, {
                        tag: "ul",
                        list: $data.customComponents,
                        group: { name: "people", pull: "clone", put: false },
                        sort: false,
                        "ghost-class": "ghost",
                        onEnd: $options.handleMoveEnd,
                        onStart: $options.handleMoveStart,
                        move: $options.handleMove,
                        "item-key": "name"
                      }, {
                        item: withCtx(({ element }) => [
                          createElementVNode("li", {
                            onClick: ($event) => $options.handleField(element),
                            class: "form-edit-widget-label"
                          }, [
                            createElementVNode("a", null, [
                              createElementVNode("i", {
                                class: normalizeClass(["icon iconfont", element.icon])
                              }, null, 2),
                              createElementVNode("span", null, toDisplayString$1(element.name), 1)
                            ])
                          ], 8, _hoisted_9)
                        ]),
                        _: 1
                      }, 8, ["list", "onEnd", "onStart", "move"])
                    ], 64)) : createCommentVNode("", true)
                  ])
                ]),
                _: 1
              }),
              createVNode(_component_el_container, {
                class: "center-container",
                direction: "vertical"
              }, {
                default: withCtx(() => [
                  createVNode(_component_el_header, {
                    class: "btn-bar",
                    style: { "height": "45px" }
                  }, {
                    default: withCtx(() => [
                      createElementVNode("div", _hoisted_10, [
                        createElementVNode("a", {
                          class: normalizeClass({ "active": $data.platform == "pc" }),
                          onClick: _cache[0] || (_cache[0] = ($event) => $options.handlePlatform("pc"))
                        }, _hoisted_12, 2),
                        createElementVNode("a", {
                          class: normalizeClass({ "active": $data.platform == "pad" }),
                          onClick: _cache[1] || (_cache[1] = ($event) => $options.handlePlatform("pad"))
                        }, _hoisted_14, 2),
                        createElementVNode("a", {
                          class: normalizeClass({ "active": $data.platform == "mobile" }),
                          onClick: _cache[2] || (_cache[2] = ($event) => $options.handlePlatform("mobile"))
                        }, _hoisted_16, 2)
                      ]),
                      _hoisted_17,
                      createElementVNode("div", _hoisted_18, [
                        createVNode(_component_el_tooltip, {
                          content: _ctx.$t("fm.actions.undo"),
                          placement: "bottom"
                        }, {
                          default: withCtx(() => [
                            createElementVNode("a", {
                              onClick: _cache[3] || (_cache[3] = (...args) => $options.handleUndo && $options.handleUndo(...args)),
                              class: normalizeClass({ "disabled": !$data.undo })
                            }, _hoisted_20, 2)
                          ]),
                          _: 1
                        }, 8, ["content"]),
                        createVNode(_component_el_tooltip, {
                          content: _ctx.$t("fm.actions.redo"),
                          placement: "bottom"
                        }, {
                          default: withCtx(() => [
                            createElementVNode("a", {
                              onClick: _cache[4] || (_cache[4] = (...args) => $options.handleRedo && $options.handleRedo(...args)),
                              class: normalizeClass({ "disabled": !$data.redo })
                            }, _hoisted_22, 2)
                          ]),
                          _: 1
                        }, 8, ["content"])
                      ]),
                      renderSlot(_ctx.$slots, "action"),
                      $props.upload ? (openBlock(), createBlock(_component_el_button, {
                        key: 0,
                        type: "text",
                        size: "default",
                        onClick: $options.handleUpload
                      }, {
                        default: withCtx(() => [
                          _hoisted_23,
                          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.import")), 1)
                        ]),
                        _: 1
                      }, 8, ["onClick"])) : createCommentVNode("", true),
                      $props.clearable ? (openBlock(), createBlock(_component_el_button, {
                        key: 1,
                        type: "text",
                        size: "default",
                        onClick: $options.handleClear
                      }, {
                        default: withCtx(() => [
                          _hoisted_24,
                          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.clear")), 1)
                        ]),
                        _: 1
                      }, 8, ["onClick"])) : createCommentVNode("", true),
                      $props.preview ? (openBlock(), createBlock(_component_el_button, {
                        key: 2,
                        type: "text",
                        size: "default",
                        onClick: $options.handlePreview
                      }, {
                        default: withCtx(() => [
                          _hoisted_25,
                          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.preview")), 1)
                        ]),
                        _: 1
                      }, 8, ["onClick"])) : createCommentVNode("", true),
                      $props.generateJson ? (openBlock(), createBlock(_component_el_button, {
                        key: 3,
                        type: "text",
                        size: "default",
                        onClick: $options.handleGenerateJson
                      }, {
                        default: withCtx(() => [
                          _hoisted_26,
                          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.json")), 1)
                        ]),
                        _: 1
                      }, 8, ["onClick"])) : createCommentVNode("", true),
                      $props.generateCode ? (openBlock(), createBlock(_component_el_button, {
                        key: 4,
                        type: "text",
                        size: "default",
                        onClick: $options.handleGenerateCode
                      }, {
                        default: withCtx(() => [
                          _hoisted_27,
                          createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.code")), 1)
                        ]),
                        _: 1
                      }, 8, ["onClick"])) : createCommentVNode("", true)
                    ]),
                    _: 3
                  }),
                  createVNode(_component_el_main, {
                    class: normalizeClass({ "widget-empty": $data.widgetForm.list.length == 0 })
                  }, {
                    default: withCtx(() => [
                      !$data.resetJson ? (openBlock(), createBlock(_component_widget_form, {
                        key: 0,
                        ref: "widgetForm",
                        bindDataTable: $props.bindDataTable,
                        ds: $props.ds,
                        tableName: $props.tableName,
                        data: $data.widgetForm,
                        select: $data.widgetFormSelect,
                        "onUpdate:select": _cache[5] || (_cache[5] = ($event) => $data.widgetFormSelect = $event),
                        platform: $data.platform,
                        "form-key": $data.formKey
                      }, null, 8, ["bindDataTable", "ds", "tableName", "data", "select", "platform", "form-key"])) : createCommentVNode("", true)
                    ]),
                    _: 1
                  }, 8, ["class"])
                ]),
                _: 3
              }),
              createVNode(_component_el_aside, { class: "widget-config-container" }, {
                default: withCtx(() => [
                  createVNode(_component_el_container, null, {
                    default: withCtx(() => [
                      createVNode(_component_el_header, { height: "45px" }, {
                        default: withCtx(() => [
                          createElementVNode("div", {
                            class: normalizeClass(["config-tab", { active: $data.configTab == "widget" }]),
                            onClick: _cache[6] || (_cache[6] = ($event) => $options.handleConfigSelect("widget"))
                          }, toDisplayString$1(_ctx.$t("fm.config.widget.title")), 3),
                          createElementVNode("div", {
                            class: normalizeClass(["config-tab", { active: $data.configTab == "form" }]),
                            onClick: _cache[7] || (_cache[7] = ($event) => $options.handleConfigSelect("form"))
                          }, toDisplayString$1(_ctx.$t("fm.config.form.title")), 3),
                          $props.tabList ? (openBlock(), createElementBlock("div", {
                            key: 0,
                            class: normalizeClass(["config-tab", { active: $data.configTab == "list" }]),
                            onClick: _cache[8] || (_cache[8] = ($event) => $options.handleConfigSelect("list"))
                          }, toDisplayString$1(_ctx.$t("fm.config.list.title")), 3)) : createCommentVNode("", true)
                        ]),
                        _: 1
                      }),
                      createVNode(_component_el_main, { class: "config-content" }, {
                        default: withCtx(() => [
                          withDirectives((openBlock(), createBlock(_component_widget_config, {
                            ref: "widgetConfig",
                            platform: $data.platform,
                            sheets: $data.styleSheetsArray,
                            datasources: $data.dataSourceArray,
                            eventscripts: $data.eventScriptArray,
                            bindDataTable: $props.bindDataTable,
                            mainTable: $props.tableName,
                            widgetForm: $data.widgetForm,
                            data: $data.widgetFormSelect,
                            key: $data.widgetFormSelect ? $data.widgetFormSelect.key : 0,
                            onOnEventAdd: $options.handleEventAdd,
                            onOnEventEdit: $options.handleEventEdit,
                            onOnEventRemove: $options.handleEventRemove,
                            "form-key": $data.formKey
                          }, null, 8, ["platform", "sheets", "datasources", "eventscripts", "bindDataTable", "mainTable", "widgetForm", "data", "onOnEventAdd", "onOnEventEdit", "onOnEventRemove", "form-key"])), [
                            [vShow, $data.configTab == "widget"]
                          ]),
                          withDirectives(createVNode(_component_form_config, {
                            ref: "formConfig",
                            sheets: $data.styleSheetsArray,
                            data: $data.widgetForm.config,
                            onOnStyleUpdate: $options.onStyleUpdate,
                            onOnDatasourceUpdate: $options.onDataSourceUpdate,
                            onOnEventscriptUpdate: $options.onEventScriptUpdate,
                            onOnEventscriptConfirm: $options.onEventScriptConfirm,
                            "form-key": $data.formKey
                          }, null, 8, ["sheets", "data", "onOnStyleUpdate", "onOnDatasourceUpdate", "onOnEventscriptUpdate", "onOnEventscriptConfirm", "form-key"]), [
                            [vShow, $data.configTab == "form"]
                          ]),
                          withDirectives(createVNode(_component_list_config, {
                            widgetForm: $data.widgetForm,
                            data: $data.widgetFormSelect
                          }, null, 8, ["widgetForm", "data"]), [
                            [vShow, $data.configTab == "list"]
                          ])
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })
                ]),
                _: 1
              }),
              createVNode(_component_preview_dialog, {
                ref: "previewDialog",
                onGetDataSuccess: $options.preivewGetData
              }, null, 8, ["onGetDataSuccess"]),
              createVNode(_component_import_json_dialog, {
                ref: "importJsonDialog",
                onLoadJson: $options.handleLoadJson
              }, null, 8, ["onLoadJson"]),
              createVNode(_component_cus_dialog, {
                visible: $data.jsonVisible,
                onOnClose: _cache[10] || (_cache[10] = ($event) => $data.jsonVisible = false),
                ref: "jsonPreview",
                width: "800px",
                form: "",
                title: _ctx.$t("fm.actions.json")
              }, {
                action: withCtx(() => [
                  createVNode(_component_el_button, {
                    type: "primary",
                    class: "json-btn",
                    "data-clipboard-text": $data.jsonCopyValue
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.copyData")), 1)
                    ]),
                    _: 1
                  }, 8, ["data-clipboard-text"]),
                  createVNode(_component_el_button, {
                    type: "primary",
                    onClick: $options.handleExportJSON
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.export")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ]),
                default: withCtx(() => [
                  createVNode(_component_code_editor, {
                    height: "400px",
                    mode: "json",
                    modelValue: $data.jsonTemplate,
                    "onUpdate:modelValue": _cache[9] || (_cache[9] = ($event) => $data.jsonTemplate = $event)
                  }, null, 8, ["modelValue"])
                ]),
                _: 1
              }, 8, ["visible", "title"]),
              createVNode(_component_cus_dialog, {
                visible: $data.codeVisible,
                onOnClose: _cache[14] || (_cache[14] = ($event) => $data.codeVisible = false),
                ref: "codePreview",
                width: "800px",
                form: "",
                title: _ctx.$t("fm.actions.code")
              }, {
                action: withCtx(() => [
                  createVNode(_component_el_button, {
                    type: "primary",
                    class: "code-btn",
                    "data-clipboard-text": $data.codeCopyValue
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.copyData")), 1)
                    ]),
                    _: 1
                  }, 8, ["data-clipboard-text"]),
                  createVNode(_component_el_button, {
                    type: "primary",
                    onClick: $options.handleExport
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString$1(_ctx.$t("fm.actions.export")), 1)
                    ]),
                    _: 1
                  }, 8, ["onClick"])
                ]),
                default: withCtx(() => [
                  createVNode(_component_el_tabs, {
                    type: "border-card",
                    style: { "box-shadow": "none" },
                    modelValue: $data.codeActiveName,
                    "onUpdate:modelValue": _cache[13] || (_cache[13] = ($event) => $data.codeActiveName = $event)
                  }, {
                    default: withCtx(() => [
                      createVNode(_component_el_tab_pane, {
                        label: "Vue Component",
                        name: "vue"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_code_editor, {
                            height: "450px",
                            mode: "html",
                            modelValue: $data.vueTemplate,
                            "onUpdate:modelValue": _cache[11] || (_cache[11] = ($event) => $data.vueTemplate = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                      }),
                      createVNode(_component_el_tab_pane, {
                        label: "HTML",
                        name: "html"
                      }, {
                        default: withCtx(() => [
                          createVNode(_component_code_editor, {
                            height: "450px",
                            mode: "html",
                            modelValue: $data.htmlTemplate,
                            "onUpdate:modelValue": _cache[12] || (_cache[12] = ($event) => $data.htmlTemplate = $event)
                          }, null, 8, ["modelValue"])
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  }, 8, ["modelValue"])
                ]),
                _: 1
              }, 8, ["visible", "title"])
            ]),
            _: 3
          })
        ]),
        _: 3
      })
    ]),
    _: 3
  }, 8, ["class"]);
}
var MakingForm = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
var enUS = {
  fm: {
    components: {
      fields: {
        input: "Input",
        textarea: "Textarea",
        number: "Number",
        radio: "Radio",
        checkbox: "Checkbox",
        time: "Time",
        date: "Date",
        rate: "Rate",
        color: "Color",
        select: "Select",
        switch: "Switch",
        slider: "Slider",
        text: "Text",
        blank: "Custom",
        fileupload: "File",
        imgupload: "Image",
        editor: "Editor",
        cascader: "Cascader",
        table: "Sub-Form",
        grid: "Grid",
        tabs: "Tabs",
        divider: "Divider",
        html: "HTML",
        component: "Component",
        report: "Table",
        button: "Button",
        link: "Link",
        inline: "Inline",
        steps: "Steps",
        transfer: "Transfer",
        treeselect: "TreeSelect",
        alert: "Alert",
        user: "User",
        role: "Role",
        office: "Office",
        dict: "dict",
        area: "Area"
      },
      basic: {
        title: "Basic Field"
      },
      advance: {
        title: "Advance Field"
      },
      layout: {
        title: "Layout"
      },
      custom: {
        title: "Custom Field"
      }
    },
    description: {
      containerEmpty: "You can drag and drop or click the item from the left  to add widgets",
      configEmpty: "Please add a field",
      tableEmpty: "Drag the field here",
      uploadJsonInfo: "There is the format of JSON below\uFF0Cyou can overwrite it with you own JSON code"
    },
    message: {
      copySuccess: "Copy Successed",
      validError: "Form data validation failed",
      noPut: "Don't support adding this field",
      errorTip: "Custom error tips",
      notSupport: "Not supported by current browser"
    },
    actions: {
      import: "Import JSON",
      clear: "Clear",
      preview: "Preview",
      json: "Generate JSON",
      code: "Generate code",
      getData: "Get data",
      reset: "Reset",
      copyData: "Copy",
      cancel: "Cancel",
      confirm: "Confirm",
      addOption: "Add option",
      addColumn: "Add column",
      addTab: "Add tab",
      upload: "Upload",
      add: "Add",
      undo: "Undo",
      redo: "Redo",
      enabledEdit: "Enabled edit",
      disabledEdit: "Disabled edit",
      clearSelect: "Reset selection",
      close: "Close",
      export: "Export",
      print: "Print",
      printReadMode: "Print read mode",
      editMode: "edit mode"
    },
    config: {
      form: {
        title: "Form Attribute",
        labelPosition: {
          title: "Label Position",
          left: "Left",
          right: "Right",
          top: "Top"
        },
        labelWidth: "Label Width",
        size: "Size",
        customClass: "Custom Class",
        beforeSave: "execute before save",
        afterSave: "execute after save",
        width: "Form Width",
        styleSheets: "Style Sheets"
      },
      widget: {
        title: "Component Attribute",
        model: "ID",
        name: "Name",
        width: "Width",
        height: "Height",
        size: "Size",
        labelWidth: "Label Width",
        custom: "Custom",
        placeholder: "Placeholder",
        layout: "Layout",
        block: "Block",
        inline: "Inline",
        contentPosition: "Content Position",
        left: "Left",
        right: "Right",
        center: "Center",
        showInput: "Display Input Box",
        min: "Minimum",
        max: "Maximum",
        step: "Step",
        precision: "Precision",
        controls: "Enable the control buttons",
        controlsPosition: "Position of the control buttons",
        multiple: "Multiple",
        filterable: "Searchable",
        allowHalf: "Allow Half",
        showAlpha: "Support transparency options",
        showLabel: "Show lable",
        option: "Option",
        staticData: "Static Data",
        remoteData: "Dynamic Data",
        dictData: "Dict Data",
        dictType: "Dict Type",
        remoteFunc: "Function",
        remoteAssigned: "Assigned Variable",
        value: "Value",
        label: "Label",
        childrenOption: "Children",
        defaultValue: "Default Value",
        showType: "Display type",
        isRange: "Range Time",
        isTimestamp: "Get time stamp",
        startPlaceholder: "Placeholder of start time",
        endPlaceholder: "Placeholder of end time",
        format: "Format",
        limit: "Maximum Upload Count",
        isQiniu: "Upload with Qiniu Cloud",
        tokenFunc: "Get QiNiu token",
        imageAction: "Picture upload address",
        tip: "Text Prompt",
        action: "Request URL",
        headers: "Request headers",
        defaultType: "Data Type",
        string: "String",
        object: "Object",
        array: "Array",
        number: "Number",
        boolean: "Boolean",
        integer: "Integer",
        float: "Float",
        url: "URL",
        email: "E-mail",
        hex: "Hexadecimal",
        gutter: "Grid Spacing",
        columnOption: "Column Configuration",
        flex: "Flex Layout",
        responsive: "Responsive Layout",
        span: "Grid spans",
        responsiveSpan: "Responsive columns",
        offset: "Offset",
        push: "Push",
        pull: "Pull",
        justify: "Horizontal Arrangement",
        justifyStart: "Start",
        justifyEnd: "End",
        justifyCenter: "Center",
        justifySpaceAround: "Space Around",
        justifySpaceBetween: "Space Between",
        align: "Vertical Arrangement",
        alignTop: "Top",
        alignMiddle: "Middle",
        alignBottom: "Bottom",
        type: "Type",
        default: "Default",
        card: "Tabs",
        borderCard: "Border-Card",
        tabPosition: "Tab Position",
        top: "Top",
        left: "Left",
        right: "Right",
        bottom: "Bottom",
        tabOption: "Label Configuration",
        tabName: "Tab Name",
        customClass: "Custom Class",
        attribute: "Attribute Action",
        dataBind: "Data Binding",
        hidden: "Hidden",
        readonly: "Read Only",
        disabled: "Disabled",
        editable: "Text box is editable",
        clearable: "Display Clear Button",
        arrowControl: "Use the arrow for time selection",
        isDelete: "Deletable",
        isEdit: "Editable",
        showPassword: "Display Password",
        showScore: "Show Score",
        validate: "Validation",
        required: "Required",
        patternPlaceholder: "Fill in the regular expressions",
        newOption: "New Option",
        tab: "Tab",
        isOnlySelectLeaf: "is only select leaf",
        dataUrl: "data url",
        validatorRequired: " required",
        validatorType: " invaild format",
        validatorPattern: " unmatched pattern",
        customTemplates: "Custom templates",
        setting: "Setting",
        hideLabel: "Hide Label",
        borderWidth: "Border Width",
        borderColor: "Border Color",
        buttonName: "Button Name",
        buttonSize: "Button Size",
        buttonType: "Button Type",
        buttonPlain: "Determine whether it's a plain button",
        buttonRound: "Determine whether it's a round button",
        buttonCircle: "Determine whether it's a circle button",
        linkType: "Link Type",
        linkName: "Link Name",
        underline: "whether the component has underline",
        isBlank: "Whether to open in a new window",
        withCredentials: "Using credentials",
        customValidation: "Custom validation rules",
        paging: "Paging",
        pageSize: "Page size",
        checkStrictly: "Optional any node",
        extendPropsConfig: "Extended property configuration",
        steps: "Step options",
        space: "Spacing fo each step",
        direction: "Display direction",
        processStatus: "Status of current step",
        finishStatus: "Status of end step",
        alignCenter: "Center title and description",
        simple: "Simple theme",
        titles: "Titles",
        otitle: "Tile",
        description: "Description",
        effect: "Effect",
        closable: "Closable",
        showIcon: "Show icon",
        spaceSize: "Space size",
        userMax: "can select how many users"
      },
      list: {
        title: "List",
        isShow: "Showable",
        isSort: "Sortable",
        isSearch: "Searchable",
        attribute: "column"
      }
    },
    upload: {
      preview: "preview",
      edit: "replace",
      delete: "delete"
    },
    tooltip: {
      trash: "trash",
      clone: "clone",
      addrow: "add row",
      addcolumn: "add column",
      mergedown: "merge down",
      mergeright: "merge right",
      deleterow: "delete current row",
      deletecolumn: "delete current column",
      cellsetting: "cell setting",
      insertcolumnleft: "insert column left",
      insertcolumnright: "insert column right",
      insertrowbefore: "insert row before",
      insertrowafter: "insert row after",
      splitcolumns: "split into columns",
      splitrows: "split into rows"
    },
    datasource: {
      name: "Data Source",
      config: {
        title: "Data source settings",
        add: "Add data source",
        save: "Save",
        cancel: "Cancel",
        test: "Request Test"
      },
      edit: {
        name: "Name",
        url: "Url",
        method: "Method",
        headers: "Headers",
        params: "Params",
        auto: "Whether the form is initialized to send the request",
        response: "Data processing",
        annotation: "The response data res is returned directly by default, and the data can be processed below",
        add: "Add",
        willRequest: "Before sending the request:",
        responseSuccess: "When requesting response data:",
        requestError: "When an error occurs in the request:"
      },
      message: {
        repeat: "Data source name cannot be repeated",
        settingError: "Data source setting error",
        saveSuccess: "Saved successfully",
        saveError: "There is unsaved data, please save it first",
        confirmRemove: "Are you sure you want to delete the data source"
      }
    },
    eventscript: {
      name: "Action Panel",
      config: {
        title: "Action Settings",
        add: "Add action",
        save: "Save",
        confirm: "OK",
        cancel: "Cancel",
        create: "New action",
        code: "Edit code"
      },
      message: {
        repeat: "Function name cannot be repeated",
        saveSuccess: "Save successfully",
        saveError: "There are unsaved data, please save first",
        confirmRemove: "Are you sure you want to delete this Function"
      }
    },
    importjson: {
      name: "Template Library",
      noimage: "No preview image ",
      loadjson: "Load Template",
      nojson: "No Template"
    }
  }
};
var zhCN = {
  fm: {
    components: {
      fields: {
        input: "\u5355\u884C\u6587\u672C",
        textarea: "\u591A\u884C\u6587\u672C",
        number: "\u8BA1\u6570\u5668",
        radio: "\u5355\u9009\u6846\u7EC4",
        checkbox: "\u591A\u9009\u6846\u7EC4",
        time: "\u65F6\u95F4\u9009\u62E9\u5668",
        date: "\u65E5\u671F\u9009\u62E9\u5668",
        rate: "\u8BC4\u5206",
        color: "\u989C\u8272\u9009\u62E9\u5668",
        select: "\u4E0B\u62C9\u9009\u62E9\u6846",
        switch: "\u5F00\u5173",
        slider: "\u6ED1\u5757",
        text: "\u6587\u5B57",
        blank: "\u81EA\u5B9A\u4E49\u533A\u57DF",
        fileupload: "\u6587\u4EF6",
        imgupload: "\u56FE\u7247",
        editor: "\u7F16\u8F91\u5668",
        cascader: "\u7EA7\u8054\u9009\u62E9\u5668",
        table: "\u5B50\u8868\u5355",
        grid: "\u6805\u683C\u5E03\u5C40",
        tabs: "\u6807\u7B7E\u9875",
        divider: "\u5206\u5272\u7EBF",
        html: "HTML",
        component: "\u81EA\u5B9A\u4E49\u7EC4\u4EF6",
        report: "\u8868\u683C\u5E03\u5C40",
        button: "\u6309\u94AE",
        link: "\u6587\u5B57\u94FE\u63A5",
        inline: "\u884C\u5185\u5E03\u5C40",
        steps: "\u6B65\u9AA4\u6761",
        transfer: "\u7A7F\u68AD\u6846",
        treeselect: "\u6811\u9009\u62E9",
        alert: "\u63D0\u793A",
        user: "\u7528\u6237",
        role: "\u89D2\u8272",
        office: "\u673A\u6784",
        dict: "\u5B57\u5178",
        area: "\u533A\u57DF"
      },
      basic: {
        title: "\u57FA\u7840\u5B57\u6BB5"
      },
      advance: {
        title: "\u9AD8\u7EA7\u5B57\u6BB5"
      },
      layout: {
        title: "\u5E03\u5C40\u5B57\u6BB5"
      },
      custom: {
        title: "\u81EA\u5B9A\u4E49\u5B57\u6BB5"
      }
    },
    description: {
      containerEmpty: "\u4ECE\u5DE6\u4FA7\u62D6\u62FD\u6216\u70B9\u51FB\u6765\u6DFB\u52A0\u5B57\u6BB5",
      configEmpty: "\u8BF7\u6DFB\u52A0\u5B57\u6BB5",
      tableEmpty: "\u5C06\u5B57\u6BB5\u62D6\u62FD\u5230\u6B64\u5904",
      uploadJsonInfo: "JSON\u683C\u5F0F\u5982\u4E0B\uFF0C\u76F4\u63A5\u590D\u5236\u751F\u6210\u7684json\u8986\u76D6\u6B64\u5904\u4EE3\u7801\u70B9\u51FB\u786E\u5B9A\u5373\u53EF"
    },
    message: {
      copySuccess: "\u590D\u5236\u6210\u529F",
      validError: "\u8868\u5355\u6570\u636E\u6821\u9A8C\u5931\u8D25",
      noPut: "\u4E0D\u652F\u6301\u6DFB\u52A0\u6B64\u5B57\u6BB5",
      errorTip: "\u81EA\u5B9A\u4E49\u9519\u8BEF\u63D0\u793A",
      notSupport: "\u5F53\u524D\u6D4F\u89C8\u5668\u4E0D\u652F\u6301"
    },
    actions: {
      import: "\u5BFC\u5165\u6A21\u677F",
      clear: "\u6E05\u7A7A",
      preview: "\u9884\u89C8",
      json: "\u751F\u6210JSON",
      code: "\u751F\u6210\u4EE3\u7801",
      getData: "\u83B7\u53D6\u6570\u636E",
      reset: "\u91CD\u7F6E",
      copyData: "\u590D\u5236",
      cancel: "\u53D6 \u6D88",
      confirm: "\u786E \u5B9A",
      addOption: "\u6DFB\u52A0\u9009\u9879",
      addColumn: "\u6DFB\u52A0\u5217",
      addTab: "\u6DFB\u52A0\u6807\u7B7E",
      upload: "\u70B9\u51FB\u4E0A\u4F20",
      add: "\u6DFB\u52A0",
      undo: "\u64A4\u9500",
      redo: "\u91CD\u505A",
      enabledEdit: "\u542F\u7528\u7F16\u8F91",
      disabledEdit: "\u7981\u7528\u7F16\u8F91",
      clearSelect: "\u91CD\u7F6E\u9009\u62E9",
      close: "\u5173\u95ED",
      export: "\u5BFC\u51FA",
      print: "\u6253\u5370",
      printReadMode: "\u6253\u5370\u9605\u8BFB\u6A21\u5F0F",
      editMode: "\u7F16\u8F91\u6A21\u5F0F"
    },
    config: {
      form: {
        title: "\u8868\u5355\u5C5E\u6027",
        labelPosition: {
          title: "\u6807\u7B7E\u5BF9\u9F50\u65B9\u5F0F",
          left: "\u5DE6\u5BF9\u9F50",
          right: "\u53F3\u5BF9\u9F50",
          top: "\u9876\u90E8\u5BF9\u9F50"
        },
        labelWidth: "\u8868\u5355\u6807\u7B7E\u5BBD\u5EA6",
        size: "\u7EC4\u4EF6\u5C3A\u5BF8",
        customClass: "\u81EA\u5B9A\u4E49Class",
        customJs: "\u81EA\u5B9A\u4E49Js",
        beforeSave: "\u4FDD\u5B58\u524D\u6267\u884C",
        afterSave: "\u4FDD\u5B58\u540E\u6267\u884C",
        width: "\u8868\u5355\u5BBD\u5EA6",
        styleSheets: "\u8868\u5355\u6837\u5F0F\u8868"
      },
      widget: {
        title: "\u5B57\u6BB5\u5C5E\u6027",
        model: "\u5B57\u6BB5\u6807\u8BC6",
        name: "\u6807\u9898",
        width: "\u5BBD\u5EA6",
        height: "\u9AD8\u5EA6",
        size: "\u5927\u5C0F",
        labelWidth: "\u6807\u7B7E\u5BBD\u5EA6",
        custom: "\u81EA\u5B9A\u4E49",
        placeholder: "\u5360\u4F4D\u5185\u5BB9",
        layout: "\u5E03\u5C40\u65B9\u5F0F",
        block: "\u5757\u7EA7",
        inline: "\u884C\u5185",
        contentPosition: "\u6587\u6848\u4F4D\u7F6E",
        left: "\u5DE6\u4FA7",
        right: "\u53F3\u4FA7",
        center: "\u5C45\u4E2D",
        showInput: "\u663E\u793A\u8F93\u5165\u6846",
        min: "\u6700\u5C0F\u503C",
        max: "\u6700\u5927\u503C",
        step: "\u6B65\u957F",
        precision: "\u7CBE\u5EA6",
        controls: "\u662F\u5426\u4F7F\u7528\u63A7\u5236\u6309\u94AE",
        controlsPosition: "\u63A7\u5236\u6309\u94AE\u4F4D\u7F6E	",
        multiple: "\u662F\u5426\u591A\u9009",
        filterable: "\u662F\u5426\u53EF\u641C\u7D22",
        allowHalf: "\u5141\u8BB8\u534A\u9009",
        showAlpha: "\u652F\u6301\u900F\u660E\u5EA6\u9009\u62E9",
        showLabel: "\u662F\u5426\u663E\u793A\u6807\u7B7E",
        option: "\u9009\u9879",
        staticData: "\u9759\u6001\u6570\u636E",
        remoteData: "\u52A8\u6001\u6570\u636E",
        dictData: "\u6570\u636E\u5B57\u5178",
        dictType: "\u5B57\u5178\u7C7B\u578B",
        remoteFunc: "\u65B9\u6CD5\u51FD\u6570",
        remoteAssigned: "\u8D4B\u503C\u53D8\u91CF",
        value: "\u503C",
        label: "\u6807\u7B7E",
        childrenOption: "\u5B50\u9009\u9879",
        defaultValue: "\u9ED8\u8BA4\u503C",
        showType: "\u663E\u793A\u7C7B\u578B",
        isRange: "\u662F\u5426\u4E3A\u8303\u56F4\u9009\u62E9",
        isTimestamp: "\u662F\u5426\u83B7\u53D6\u65F6\u95F4\u6233",
        startPlaceholder: "\u5F00\u59CB\u65F6\u95F4\u5360\u4F4D\u5185\u5BB9",
        endPlaceholder: "\u7ED3\u675F\u65F6\u95F4\u5360\u4F4D\u5185\u5BB9",
        format: "\u683C\u5F0F",
        limit: "\u6700\u5927\u4E0A\u4F20\u6570",
        isQiniu: "\u4F7F\u7528\u4E03\u725B\u4E0A\u4F20",
        tokenFunc: "\u83B7\u53D6\u4E03\u725BToken",
        imageAction: "\u56FE\u7247\u4E0A\u4F20\u5730\u5740",
        tip: "\u63D0\u793A\u8BF4\u660E\u6587\u5B57",
        action: "\u4E0A\u4F20\u5730\u5740",
        headers: "\u8BBE\u7F6E\u4E0A\u4F20\u7684\u8BF7\u6C42\u5934\u90E8",
        defaultType: "\u7ED1\u5B9A\u6570\u636E\u7C7B\u578B",
        string: "\u5B57\u7B26\u4E32",
        object: "\u5BF9\u8C61",
        array: "\u6570\u7EC4",
        number: "\u6570\u5B57",
        boolean: "\u5E03\u5C14\u503C",
        integer: "\u6574\u6570",
        float: "\u6D6E\u70B9\u6570",
        url: "URL\u5730\u5740",
        email: "\u90AE\u7BB1\u5730\u5740",
        hex: "\u5341\u516D\u8FDB\u5236",
        flex: "Flex\u5E03\u5C40",
        responsive: "\u54CD\u5E94\u5F0F\u5E03\u5C40",
        gutter: "\u6805\u683C\u95F4\u9694",
        columnOption: "\u5217\u914D\u7F6E\u9879",
        span: "\u6805\u683C\u5360\u636E\u7684\u5217\u6570",
        responsiveSpan: "\u54CD\u5E94\u5F0F\u6805\u683C\u6570",
        offset: "\u6805\u683C\u5DE6\u4FA7\u7684\u95F4\u9694\u683C\u6570",
        push: "\u6805\u683C\u5411\u53F3\u79FB\u52A8\u683C\u6570",
        pull: "\u6805\u683C\u5411\u5DE6\u79FB\u52A8\u683C\u6570",
        justify: "\u6C34\u5E73\u6392\u5217\u65B9\u5F0F",
        justifyStart: "\u5DE6\u5BF9\u9F50",
        justifyEnd: "\u53F3\u5BF9\u9F50",
        justifyCenter: "\u5C45\u4E2D",
        justifySpaceAround: "\u4E24\u4FA7\u95F4\u9694\u76F8\u7B49",
        justifySpaceBetween: "\u4E24\u7AEF\u5BF9\u9F50",
        align: "\u5782\u76F4\u6392\u5217\u65B9\u5F0F",
        alignTop: "\u9876\u90E8\u5BF9\u9F50",
        alignMiddle: "\u5C45\u4E2D",
        alignBottom: "\u5E95\u90E8\u5BF9\u9F50",
        type: "\u98CE\u683C\u7C7B\u578B",
        default: "\u9ED8\u8BA4",
        card: "\u9009\u9879\u5361",
        borderCard: "\u5361\u7247\u5316",
        tabPosition: "\u9009\u9879\u5361\u4F4D\u7F6E",
        top: "\u9876\u90E8",
        left: "\u5DE6\u4FA7",
        right: "\u53F3\u4FA7",
        bottom: "\u5E95\u90E8",
        tabOption: "\u6807\u7B7E\u914D\u7F6E\u9879",
        tabName: "\u6807\u7B7E\u540D\u79F0",
        customClass: "\u81EA\u5B9A\u4E49Class",
        attribute: "\u64CD\u4F5C\u5C5E\u6027",
        dataBind: "\u6570\u636E\u7ED1\u5B9A",
        hidden: "\u9690\u85CF",
        readonly: "\u5B8C\u5168\u53EA\u8BFB",
        disabled: "\u7981\u7528",
        editable: "\u6587\u672C\u6846\u53EF\u8F93\u5165",
        clearable: "\u663E\u793A\u6E05\u9664\u6309\u94AE",
        arrowControl: "\u4F7F\u7528\u7BAD\u5934\u8FDB\u884C\u65F6\u95F4\u9009\u62E9",
        isDelete: "\u53EF\u5220\u9664",
        isEdit: "\u53EF\u7F16\u8F91",
        showPassword: "\u663E\u793A\u5BC6\u7801",
        showScore: "\u663E\u793A\u5206\u6570",
        validate: "\u6821\u9A8C",
        required: "\u5FC5\u586B",
        patternPlaceholder: "\u586B\u5199\u6B63\u5219\u8868\u8FBE\u5F0F",
        newOption: "\u65B0\u9009\u9879",
        tab: "\u6807\u7B7E\u9875",
        isOnlySelectLeaf: "\u662F\u5426\u53EA\u5141\u8BB8\u9009\u62E9\u53F6\u5B50\u8282\u70B9",
        dataUrl: "\u6570\u636E\u63A5\u53E3",
        validatorRequired: "\u5FC5\u987B\u586B\u5199",
        validatorType: "\u683C\u5F0F\u4E0D\u6B63\u786E",
        validatorPattern: "\u683C\u5F0F\u4E0D\u5339\u914D",
        customTemplates: "\u81EA\u5B9A\u4E49\u6A21\u677F",
        setting: "\u8BBE\u7F6E",
        hideLabel: "\u9690\u85CF\u6807\u7B7E",
        borderWidth: "\u8868\u683C\u8FB9\u6846\u5BBD\u5EA6",
        borderColor: "\u8868\u683C\u8FB9\u6846\u989C\u8272",
        buttonName: "\u6309\u94AE\u540D\u79F0",
        buttonSize: "\u5C3A\u5BF8",
        buttonType: "\u6309\u94AE\u7C7B\u578B",
        buttonPlain: "\u662F\u5426\u6734\u7D20\u6309\u94AE",
        buttonRound: "\u662F\u5426\u5706\u89D2\u6309\u94AE",
        buttonCircle: "\u662F\u5426\u5706\u5F62\u6309\u94AE",
        linkType: "\u94FE\u63A5\u7C7B\u578B",
        linkName: "\u94FE\u63A5\u540D\u79F0",
        underline: "\u662F\u5426\u4E0B\u5212\u7EBF",
        isBlank: "\u662F\u5426\u5728\u65B0\u7A97\u53E3\u4E2D\u6253\u5F00",
        withCredentials: "\u8DE8\u57DF\u8BF7\u6C42\u662F\u5426\u63D0\u4F9B\u51ED\u636E\u4FE1\u606F",
        customValidation: "\u81EA\u5B9A\u4E49\u6821\u9A8C\u89C4\u5219",
        paging: "\u662F\u5426\u5206\u9875",
        pageSize: "\u6BCF\u9875\u663E\u793A\u6570\u76EE",
        checkStrictly: "\u53EF\u9009\u4EFB\u610F\u8282\u70B9",
        extendPropsConfig: "\u6269\u5C55\u5C5E\u6027\u914D\u7F6E",
        space: "Step\u95F4\u8DDD",
        direction: "\u663E\u793A\u65B9\u5411",
        processStatus: "\u5F53\u524D\u6B65\u9AA4\u7684\u72B6\u6001",
        finishStatus: "\u7ED3\u675F\u6B65\u9AA4\u72B6\u6001",
        alignCenter: "\u5C45\u4E2D\u5BF9\u9F50",
        simple: "\u7B80\u6D01\u98CE\u683C",
        titles: "\u5217\u8868\u6807\u9898",
        otitle: "\u6807\u9898",
        description: "\u63CF\u8FF0",
        effect: "\u4E3B\u9898\u6837\u5F0F",
        closable: "\u53EF\u5173\u95ED",
        showIcon: "\u663E\u793A\u7C7B\u578B\u56FE\u7247",
        spaceSize: "\u95F4\u9694\u5927\u5C0F",
        userMax: "\u5141\u8BB8\u9009\u62E9\u7684\u6700\u5927\u7528\u6237\u6570"
      },
      list: {
        title: "\u5217\u8868\u5C5E\u6027",
        isShow: "\u663E\u793A",
        isSort: "\u6392\u5E8F",
        isSearch: "\u68C0\u7D22",
        attribute: "\u5217\u5C5E\u6027"
      }
    },
    upload: {
      preview: "\u9884\u89C8",
      edit: "\u66FF\u6362",
      delete: "\u5220\u9664"
    },
    tooltip: {
      trash: "\u5220\u9664",
      clone: "\u590D\u5236",
      addrow: "\u63D2\u5165\u884C",
      addcolumn: "\u63D2\u5165\u5217",
      mergedown: "\u5411\u4E0B\u5408\u5E76",
      mergeright: "\u5411\u53F3\u5408\u5E76",
      deleterow: "\u5220\u9664\u5F53\u524D\u884C",
      deletecolumn: "\u5220\u9664\u5F53\u524D\u5217",
      cellsetting: "\u8868\u683C\u8BBE\u7F6E",
      insertcolumnleft: "\u5DE6\u63D2\u5165\u5217",
      insertcolumnright: "\u53F3\u63D2\u5165\u5217",
      insertrowbefore: "\u4E0A\u63D2\u5165\u884C",
      insertrowafter: "\u4E0B\u63D2\u5165\u884C",
      splitcolumns: "\u62C6\u5206\u6210\u5217",
      splitrows: "\u62C6\u5206\u6210\u884C"
    },
    datasource: {
      name: "\u6570\u636E\u6E90",
      config: {
        title: "\u6570\u636E\u6E90\u8BBE\u7F6E",
        add: "\u6DFB\u52A0\u6570\u636E\u6E90",
        save: "\u4FDD\u5B58",
        cancel: "\u53D6\u6D88",
        test: "\u8BF7\u6C42\u6D4B\u8BD5"
      },
      edit: {
        name: "\u540D\u79F0",
        url: "\u8BF7\u6C42\u5730\u5740",
        method: "\u8BF7\u6C42\u65B9\u6CD5",
        headers: "\u8BF7\u6C42\u5934\u90E8",
        params: "\u8BF7\u6C42\u53C2\u6570",
        auto: "\u662F\u5426\u8868\u5355\u521D\u59CB\u5316\u53D1\u9001\u8BF7\u6C42",
        response: "\u6570\u636E\u5904\u7406",
        annotation: "\u9ED8\u8BA4\u76F4\u63A5\u8FD4\u56DE\u54CD\u5E94\u6570\u636E res\uFF0C\u53EF\u4EE5\u5728\u4E0B\u65B9\u5BF9\u6570\u636E\u8FDB\u884C\u5904\u7406",
        add: "\u6DFB\u52A0",
        willRequest: "\u8BF7\u6C42\u53D1\u9001\u524D\uFF1A",
        responseSuccess: "\u8BF7\u6C42\u8FD4\u56DE\u54CD\u5E94\u6570\u636E\u65F6\uFF1A",
        requestError: "\u8BF7\u6C42\u53D1\u751F\u9519\u8BEF\u65F6\uFF1A"
      },
      message: {
        repeat: "\u6570\u636E\u6E90\u540D\u79F0\u4E0D\u80FD\u91CD\u590D",
        settingError: "\u6570\u636E\u6E90\u8BBE\u7F6E\u9519\u8BEF",
        saveSuccess: "\u4FDD\u5B58\u6210\u529F",
        saveError: "\u5B58\u5728\u672A\u4FDD\u5B58\u7684\u6570\u636E\uFF0C\u8BF7\u5148\u4FDD\u5B58",
        confirmRemove: "\u786E\u5B9A\u8981\u5220\u9664\u6570\u636E\u6E90"
      }
    },
    eventscript: {
      name: "\u52A8\u4F5C\u9762\u677F",
      config: {
        title: "\u52A8\u4F5C\u8BBE\u7F6E",
        add: "\u6DFB\u52A0\u52A8\u4F5C",
        save: "\u4FDD\u5B58",
        confirm: "\u786E\u5B9A",
        cancel: "\u53D6\u6D88",
        create: "\u65B0\u5EFA\u52A8\u4F5C",
        code: "\u7F16\u8F91\u4EE3\u7801"
      },
      message: {
        repeat: "\u65B9\u6CD5\u540D\u79F0\u4E0D\u80FD\u91CD\u590D",
        saveSuccess: "\u4FDD\u5B58\u6210\u529F",
        saveError: "\u5B58\u5728\u672A\u4FDD\u5B58\u7684\u6570\u636E\uFF0C\u8BF7\u5148\u4FDD\u5B58",
        confirmRemove: "\u786E\u5B9A\u8981\u5220\u9664\u8BE5\u65B9\u6CD5"
      }
    },
    importjson: {
      name: "\u6A21\u677F\u5E93",
      noimage: "\u6682\u65E0\u9884\u89C8\u56FE",
      loadjson: "\u52A0\u8F7D\u6A21\u677F",
      nojson: "\u6682\u65E0\u6A21\u677F"
    }
  }
};
var iconfont$1 = "";
var iconfont = "";
var cover = "";
var index$1 = "";
var editor = "";
const expire = 253402271999e3;
const version = "3.1.0";
const loadOptions = (opts) => {
  window.FormMaking_OPTIONS = __spreadProps(__spreadValues({}, opts), {
    aceurl: opts.aceurl || "https://form.making.link/public/lib/ace",
    key: "0320200117005",
    version
  });
};
const i18n = createI18n({
  locale: "en",
  fallbackLocale: "en",
  messages: {
    "en": enUS,
    "zh-cn": zhCN
  }
});
MakingForm.install = function(app, opts = {
  locale: "en"
}) {
  if (expire >= new Date().getTime()) {
    app.component(MakingForm.name, MakingForm);
  }
  app.use(i18n);
  i18n.global.locale = opts.locale;
  loadOptions(opts);
  return app;
};
GenerateForm.install = function(app, opts = {
  locale: "en"
}) {
  if (expire >= new Date().getTime()) {
    app.component(GenerateForm.name, GenerateForm);
  }
  app.use(i18n);
  i18n.global.locale = opts.locale;
  loadOptions(opts);
};
const components = [
  MakingForm,
  GenerateForm
];
const install = function(app, opts = {
  locale: "en",
  components: []
}) {
  opts = __spreadValues({
    key: "0320200117005",
    locale: "en",
    components: []
  }, opts);
  app.use(i18n);
  i18n.global.locale = opts.locale;
  if (expire >= new Date().getTime()) {
    components.forEach((component) => {
      app.component(component.name, component);
    });
    opts.components && opts.components.forEach((item2) => {
      app.component(item2.name, item2.component);
    });
  }
  loadOptions(opts);
};
var index = {
  install,
  MakingForm,
  GenerateForm
};
export { GenerateForm, MakingForm, index as default, i18n, install };
